# file opened: main.asm
   1  0000                  DEFINE TCP_BUF_SIZE 1024
   2  0000              ; Generate version string
   3  0000                  LUA ALLPASS
   4  0000 ~                v = tostring(sj.get_define("V"))
   5  0000 ~                maj = string.sub(v, 1,1)
   6  0000 ~                min = string.sub(v, 2,2)
   7  0000 ~                sj.insert_define("VERSION_STRING", "\"" .. maj .. "." .. min .. "\"")
   8  0000 ~
   9  0000 ~                b = tostring(sj.get_define("BLD"))
  10  0000 ~                sj.insert_define("BUILD_STRING", "\"" .. b .. "\"")
  11  0000                  ENDLUA
  12  0000
  13  0000                  IFDEF MSX
  14  0000                      include "main-msx.asm"
# file opened: main-msx.asm
   1+ 0000              ;****************************** MSX **********************************************
   2+ 0000                  output "mrfmsx.com"
   3+ 0000                  org 100h
   4+ 0100 C3 AA 2F         jp start
   5+ 0103                  include "vdp/vdpdriver.asm"
# file opened: vdp/vdpdriver.asm
   1++0103              ; Colourful pseudo-text code
   2++0103              VDP_DATA_PORT    = #98
   3++0103              VDP_COMMAND_PORT = #99
   4++0103                  module TextMode
   5++0103
   6++0103                  macro vdp_reg reg, value
   7++0103 ~                di
   8++0103 ~                ld a, value
   9++0103 ~                out (VDP_COMMAND_PORT), a
  10++0103 ~                nop
  11++0103 ~                ld a, #80 or reg
  12++0103 ~                ei
  13++0103 ~                out (VDP_COMMAND_PORT), a
  14++0103                  endm
  15++0103
  16++0103              init:
  17++0103 CD 3C 02         call vdpWait
  18++0106                  vdp_reg 1, 48 ; Shutdown screen
  18++0106 F3          >    di
  18++0107 3E 30       >    ld a, 48
  18++0109 D3 99       >    out (VDP_COMMAND_PORT), a
  18++010B 00          >    nop
  18++010C 3E 81       >    ld a, #80 or 1
  18++010E FB          >    ei
  18++010F D3 99       >    out (VDP_COMMAND_PORT), a
  19++0111 AF               xor a
  20++0112 32 DC F3 32      ld (#f3dc), a, (#f3dd), a
  20++0116 DD F3
  21++0118                  vdp_reg 0, 4
  21++0118 F3          >    di
  21++0119 3E 04       >    ld a, 4
  21++011B D3 99       >    out (VDP_COMMAND_PORT), a
  21++011D 00          >    nop
  21++011E 3E 80       >    ld a, #80 or 0
  21++0120 FB          >    ei
  21++0121 D3 99       >    out (VDP_COMMAND_PORT), a
  22++0123
  23++0123 21 00 10         ld hl, #1000
  23++0126 CD 5A 02       call vdpSetWrite
  24++0129 01 00 08         ld bc, 2048
  24++012C 21 F9 2F       ld hl, font
  25++012F              .fontLoop
  26++012F 7E               ld a, (hl)
  27++0130 D3 98            out (VDP_DATA_PORT), a
  28++0132 00               nop
  29++0133 23               inc hl
  29++0134 0B             dec bc
  30++0135 78               ld a, b
  30++0136 B1             or c
  30++0137 20 F6          jr nz, .fontLoop
  31++0139              cls:
  32++0139                  vdp_reg 1, 48 ; Shutdown screen
  32++0139 F3          >    di
  32++013A 3E 30       >    ld a, 48
  32++013C D3 99       >    out (VDP_COMMAND_PORT), a
  32++013E 00          >    nop
  32++013F 3E 81       >    ld a, #80 or 1
  32++0141 FB          >    ei
  32++0142 D3 99       >    out (VDP_COMMAND_PORT), a
  33++0144 21 00 00         ld hl, #0000
  33++0147 CD 5A 02       call vdpSetWrite
  34++014A 01 0D 09         ld bc, #90D ; To the end attrs
  35++014D              .loop
  36++014D AF               xor a
  37++014E D3 98            out (VDP_DATA_PORT), a
  38++0150 00               nop
  39++0151 0B               dec bc
  40++0152 78               ld a, b
  40++0153 B1             or c
  40++0154 20 F7          jr nz, .loop
  41++0156 21 00 00 22      ld hl, 0, (coords), hl
  41++015A 75 02
  42++015C                  vdp_reg 2, 3
  42++015C F3          >    di
  42++015D 3E 03       >    ld a, 3
  42++015F D3 99       >    out (VDP_COMMAND_PORT), a
  42++0161 00          >    nop
  42++0162 3E 82       >    ld a, #80 or 2
  42++0164 FB          >    ei
  42++0165 D3 99       >    out (VDP_COMMAND_PORT), a
  43++0167                  vdp_reg 4, 2
  43++0167 F3          >    di
  43++0168 3E 02       >    ld a, 2
  43++016A D3 99       >    out (VDP_COMMAND_PORT), a
  43++016C 00          >    nop
  43++016D 3E 84       >    ld a, #80 or 4
  43++016F FB          >    ei
  43++0170 D3 99       >    out (VDP_COMMAND_PORT), a
  44++0172                  vdp_reg 7, #F1    ; Color 1
  44++0172 F3          >    di
  44++0173 3E F1       >    ld a, #F1
  44++0175 D3 99       >    out (VDP_COMMAND_PORT), a
  44++0177 00          >    nop
  44++0178 3E 87       >    ld a, #80 or 7
  44++017A FB          >    ei
  44++017B D3 99       >    out (VDP_COMMAND_PORT), a
  45++017D                  vdp_reg 12, #F4   ; Color 2
  45++017D F3          >    di
  45++017E 3E F4       >    ld a, #F4
  45++0180 D3 99       >    out (VDP_COMMAND_PORT), a
  45++0182 00          >    nop
  45++0183 3E 8C       >    ld a, #80 or 12
  45++0185 FB          >    ei
  45++0186 D3 99       >    out (VDP_COMMAND_PORT), a
  46++0188                  vdp_reg 13, #f0   ; Flashing using as second color
  46++0188 F3          >    di
  46++0189 3E F0       >    ld a, #f0
  46++018B D3 99       >    out (VDP_COMMAND_PORT), a
  46++018D 00          >    nop
  46++018E 3E 8D       >    ld a, #80 or 13
  46++0190 FB          >    ei
  46++0191 D3 99       >    out (VDP_COMMAND_PORT), a
  47++0193                  ; Set attrs begin to #800
  48++0193                  vdp_reg 3,  #20 or #7  ; A13-A9 bits and 111 for attributes address bus
  48++0193 F3          >    di
  48++0194 3E 27       >    ld a, #20 or #7
  48++0196 D3 99       >    out (VDP_COMMAND_PORT), a
  48++0198 00          >    nop
  48++0199 3E 83       >    ld a, #80 or 3
  48++019B FB          >    ei
  48++019C D3 99       >    out (VDP_COMMAND_PORT), a
  49++019E                  vdp_reg 10, #00        ; 00000 and A16-A14 for attributes address bus
  49++019E F3          >    di
  49++019F 3E 00       >    ld a, #00
  49++01A1 D3 99       >    out (VDP_COMMAND_PORT), a
  49++01A3 00          >    nop
  49++01A4 3E 8A       >    ld a, #80 or 10
  49++01A6 FB          >    ei
  49++01A7 D3 99       >    out (VDP_COMMAND_PORT), a
  50++01A9                  vdp_reg 1, 112 ; Screen 0/Text 2
  50++01A9 F3          >    di
  50++01AA 3E 70       >    ld a, 112
  50++01AC D3 99       >    out (VDP_COMMAND_PORT), a
  50++01AE 00          >    nop
  50++01AF 3E 81       >    ld a, #80 or 1
  50++01B1 FB          >    ei
  50++01B2 D3 99       >    out (VDP_COMMAND_PORT), a
  51++01B4 C9               ret
  52++01B5
  53++01B5              ; A - line
  54++01B5              usualLine:
  55++01B5 F5               push af
  56++01B6 AF               xor a
  57++01B7 32 DA 01         ld (fillLineColor.loop + 1), a
  58++01BA F1               pop af
  59++01BB 18 07            jr fillLineColor
  60++01BD              ; A - line
  61++01BD              highlightLine:
  62++01BD F5               push af
  63++01BE 3E FF            ld a, #ff
  64++01C0 32 DA 01         ld (fillLineColor.loop + 1), a
  65++01C3 F1               pop af
  66++01C4              fillLineColor:
  67++01C4 26 00 6F         ld h, 0, l, a
  68++01C7 A7               and a
  68++01C8 28 06          jr z, .skip
  69++01CA 29               add hl, hl
  70++01CB 44 4D            ld bc, hl
  71++01CD 29               add hl, hl
  72++01CE 29               add hl, hl
  73++01CF 09               add hl, bc ; x10
  74++01D0              .skip
  75++01D0 7C               ld a, h
  75++01D1 C6 08          add #8
  75++01D3 67             ld h, a
  76++01D4 CD 5A 02         call vdpSetWrite
  77++01D7
  78++01D7 06 0A            ld b, 10
  79++01D9              .loop
  80++01D9 3E FF            ld a, #ff
  81++01DB D3 98            out (VDP_DATA_PORT), a
  82++01DD 00               nop
  83++01DE 10 F9            djnz .loop
  84++01E0 C9               ret
  85++01E1
  86++01E1              printZ:
  87++01E1 7E               ld a, (hl)
  87++01E2 A7             and a
  87++01E3 C8             ret z
  88++01E4 E5               push hl
  89++01E5 CD EC 01         call putC
  90++01E8 E1               pop hl
  91++01E9 23               inc hl
  92++01EA 18 F5            jr printZ
  93++01EC
  94++01EC
  95++01EC              ; A - char
  96++01EC              putC:
  97++01EC FE 0D            cp 13
  97++01EE 28 16          jr z, .nl
  98++01F0 F5               push af
  99++01F1 ED 5B 75 02      ld de, (coords)
 100++01F5 CD 2A 02         call xyToAddr
 101++01F8 CD 5A 02         call vdpSetWrite
 102++01FB F1               pop af
 103++01FC D3 98            out (VDP_DATA_PORT), a
 104++01FE 3A 75 02         ld a, (coords)
 105++0201 3C               inc a
 106++0202 FE 50            cp 80
 106++0204 20 05          jr nz, .write
 107++0206              .nl
 108++0206 21 76 02         ld hl, coords + 1
 109++0209 34               inc (hl)
 110++020A AF               xor a
 111++020B              .write
 112++020B 32 75 02         ld (coords), a
 113++020E C9               ret
 114++020F
 115++020F              fillLine:
 116++020F 6C 26 00         ld l, h, h, 0
 117++0212                  dup 4
 118++0212 29          >    add hl, hl
 118++0213 29          >    add hl, hl
 118++0214 29          >    add hl, hl
 118++0215 29          >    add hl, hl
 119++0216                  edup
 120++0216 C5               push bc
 121++0217 44 4D            ld bc, hl
 122++0219 29               add hl,hl
 123++021A 29               add hl,hl
 124++021B 09               add hl, bc
 125++021C 08               ex af, af'
 126++021D CD 5A 02         call vdpSetWrite
 127++0220 08               ex af, af'
 128++0221 06 50            ld b, 80
 129++0223              .loop
 130++0223 D3 98            out (VDP_DATA_PORT), a
 131++0225 00               nop
 132++0226 10 FB            djnz .loop
 133++0228 C1               pop bc
 134++0229 C9               ret
 135++022A
 136++022A              ; DE - coord(E - X, D - Y)
 137++022A              xyToAddr:
 138++022A 26 00 6A         ld h, 0, l, d
 139++022D                  dup 4
 140++022D 29          >    add hl, hl
 140++022E 29          >    add hl, hl
 140++022F 29          >    add hl, hl
 140++0230 29          >    add hl, hl
 141++0231                  edup
 142++0231 C5               push bc
 143++0232 44 4D            ld bc, hl
 144++0234 29               add hl,hl
 145++0235 29               add hl,hl
 146++0236 09               add hl, bc
 147++0237 16 00            ld d, 0
 148++0239 19               add hl, de
 149++023A C1               pop bc
 150++023B C9               ret
 151++023C
 152++023C              vdpWait:
 153++023C                  vdp_reg 15, 2
 153++023C F3          >    di
 153++023D 3E 02       >    ld a, 2
 153++023F D3 99       >    out (VDP_COMMAND_PORT), a
 153++0241 00          >    nop
 153++0242 3E 8F       >    ld a, #80 or 15
 153++0244 FB          >    ei
 153++0245 D3 99       >    out (VDP_COMMAND_PORT), a
 154++0247 F3               di
 155++0248 DB 99            in a, (VDP_COMMAND_PORT)
 156++024A 0F               rrca
 157++024B                  vdp_reg 15, 0
 157++024B F3          >    di
 157++024C 3E 00       >    ld a, 0
 157++024E D3 99       >    out (VDP_COMMAND_PORT), a
 157++0250 00          >    nop
 157++0251 3E 8F       >    ld a, #80 or 15
 157++0253 FB          >    ei
 157++0254 D3 99       >    out (VDP_COMMAND_PORT), a
 158++0256 FB               ei
 159++0257 38 E3            jr c, vdpWait
 160++0259
 161++0259 C9               ret
 162++025A
 163++025A              ;
 164++025A              ; Set VDP address counter to write from address AHL (17-bit)
 165++025A              ; Enables the interrupts
 166++025A              ;
 167++025A              vdpSetWrite:
 168++025A F3               di
 169++025B 7D               ld a, l
 169++025C D3 99          out (VDP_COMMAND_PORT), a
 170++025E 00               nop
 170++025F 00             nop
 171++0260 7C               ld a, h
 171++0261 F6 40          or #40
 171++0263 D3 99          out (VDP_COMMAND_PORT), a
 172++0265 00               nop
 173++0266 FB               ei
 174++0267 C9               ret
 175++0268
 176++0268              vdpSetRead:
 177++0268 7D               ld a, l
 177++0269 D3 99          out (VDP_COMMAND_PORT), a
 178++026B 00               nop
 179++026C 7C               ld a, h
 179++026D D3 99          out (VDP_COMMAND_PORT), a
 180++026F C9               ret
 181++0270
 182++0270              gotoXY:
 183++0270 ED 53 75 02      ld (coords), de
 184++0274 C9               ret
 185++0275
 186++0275 00 00        coords dw 0
 187++0277
 188++0277              loadFont:
 189++0277              ; Loading font
 190++0277 11 A1 2F 3E      ld de, fontName, a, FMODE_NO_WRITE
 190++027B 01
 190++027C CD 64 09       call Dos.fopen
 191++027F C5               push bc
 192++0280 11 F9 2F 21      ld de, font, hl, 2048
 192++0284 00 08
 192++0286 CD 78 09      call Dos.fread
 193++0289 C1               pop bc
 194++028A CD 6E 09         call Dos.fclose
 195++028D C9               ret
 196++028E                  endmodule
 197++028E
 198++028E              exit:
 199++028E                  vdp_reg 1, 48 ; Shutdown screen
 199++028E F3          >    di
 199++028F 3E 30       >    ld a, 48
 199++0291 D3 99       >    out (VDP_COMMAND_PORT), a
 199++0293 00          >    nop
 199++0294 3E 81       >    ld a, #80 or 1
 199++0296 FB          >    ei
 199++0297 D3 99       >    out (VDP_COMMAND_PORT), a
 200++0299 0E 00            ld c, 0
 201++029B B7               or a
 201++029C DD 21 85 01    ld ix, #0185
 202++02A0 CD 49 03     	call callSub
 203++02A3 C7               rst 0
# file closed: vdp/vdpdriver.asm
   6+ 02A4                  include "utils/index.asm"
# file opened: utils/index.asm
   1++02A4                  include "atoi.asm"
# file opened: utils/atoi.asm
   1++02A4              ; DE - buffer
   2++02A4              ; HL - output
   3++02A4              atohl:
   4++02A4 21 00 00         ld hl, 0
   5++02A7              .loop
   6++02A7 1A               ld a, (de)
   7++02A8 13               inc de
   8++02A9                  ; Sepparators
   9++02A9 C5 E5            push bc, hl
  10++02AB 01 05 00             ld bc, sepparators_len
  11++02AE 21 C6 02             ld hl, sepparators
  12++02B1 ED B1                cpir
  13++02B3 E1 C1            pop hl, bc
  14++02B5 C8               ret z
  15++02B6
  16++02B6 D6 30            sub '0'
  17++02B8
  18++02B8 C5               push bc
  19++02B9 4D                   ld c, l
  20++02BA 44                   ld b, h
  21++02BB
  22++02BB 29                   add hl, hl
  23++02BC 29                   add hl, hl
  24++02BD 09                   add hl, bc
  25++02BE 29                   add hl, hl
  26++02BF 4F                   ld c, a
  27++02C0 06 00                ld b, 0
  28++02C2 09                   add hl, bc
  29++02C3 C1               pop bc
  30++02C4 18 E1            jr .loop
  31++02C6
# file closed: utils/atoi.asm
   2++02C6                  include "constants.asm"
# file opened: utils/constants.asm
   1++02C6              TAB = 9
   2++02C6              CR = 13
   3++02C6              LF = 10
   4++02C6              NULL = 0
   5++02C6              SPACE = ' '
   6++02C6              ESC = 27
   7++02C6              BACKSPACE = 8
   8++02C6
   9++02C6                  IFDEF TIMEX80
  10++02C6 ~            MIME_DOWNLOAD 	= #19
  11++02C6 ~            MIME_LINK 		= #1A
  12++02C6 ~            MIME_TEXT 		= #10
  13++02C6 ~            MIME_IMAGE 		= #01
  14++02C6 ~            MIME_MUSIC 		= #0e
  15++02C6 ~            MIME_INPUT 		= #b3
  16++02C6 ~            MIME_MOD 		= #0d
  17++02C6 ~            MIME_SOUND      = 's' ;sound
  18++02C6 ~
  19++02C6 ~            BORDER_TOP = #b2
  20++02C6 ~            BORDER_BOTTOM = #b1
  21++02C6                  ELSE
  22++02C6              	IFDEF MSX
  23++02C6              MIME_DOWNLOAD 	= 1
  24++02C6              MIME_LINK		= 2
  25++02C6              MIME_TEXT 		= 3
  26++02C6              MIME_IMAGE 		= 4
  27++02C6              MIME_MUSIC 		= 5
  28++02C6              MIME_INPUT 		= 6
  29++02C6              MIME_MOD      	= 7
  30++02C6              MIME_SOUND      = 's' ;sound
  31++02C6
  32++02C6              BORDER_TOP    = 7
  33++02C6              BORDER_BOTTOM = 8
  34++02C6              	ELSE
  35++02C6 ~            MIME_DOWNLOAD = 1
  36++02C6 ~            MIME_LINK     = 2
  37++02C6 ~            MIME_TEXT     = 3
  38++02C6 ~            MIME_IMAGE    = 6
  39++02C6 ~            MIME_MUSIC    = 5
  40++02C6 ~            MIME_INPUT    = 4
  41++02C6 ~            MIME_MOD      = 7
  42++02C6 ~            MIME_SOUND    = 's' ;sound
  43++02C6 ~
  44++02C6 ~            BORDER_TOP    = 9
  45++02C6 ~            BORDER_BOTTOM = 8
  46++02C6              	ENDIF
  47++02C6
  48++02C6
  49++02C6
  50++02C6
  51++02C6              	ENDIF
  52++02C6
  53++02C6 0D 0A 09 00  sepparators db CR, LF, TAB, NULL, SPACE
  53++02CA 20
  54++02CB              sepparators_len = $ - sepparators
# file closed: utils/constants.asm
   3++02CB                  include "strutils.asm"
# file opened: utils/strutils.asm
   1++02CB              ; de - pointer
   2++02CB              ; hl - count
   3++02CB              strlen:
   4++02CB 21 00 00         ld hl, 0
   5++02CE              .loop
   6++02CE 1A               ld a, (de)
   7++02CF A7               and a
   7++02D0 28 04          jr z, .exit
   8++02D2 23               inc hl
   9++02D3 13               inc de
  10++02D4 18 F8            jr .loop
  11++02D6              .exit
  12++02D6 C9               ret
  13++02D7
  14++02D7                  module CompareBuff
  15++02D7
  16++02D7              ; Pushes A to buffer
  17++02D7              push
  18++02D7 F5               push af
  19++02D8 06 20            ld b, 32
  19++02DA 21 23 03       ld hl, buffer + 1
  19++02DD 11 22 03       ld de, buffer
  20++02E0              .loop
  21++02E0 7E               ld a, (hl)
  21++02E1 12             ld (de), a
  21++02E2 23             inc hl
  21++02E3 13             inc de
  21++02E4 10 FA          djnz .loop
  22++02E6 F1               pop af
  23++02E7 21 41 03         ld hl, buffer + 31
  23++02EA 77             ld (hl), a
  24++02EB C9               ret
  25++02EC
  26++02EC              ; HL - Compare string(null terminated)
  27++02EC              ; A - 0 NOT Found
  28++02EC              ;     1 Found
  29++02EC              search:
  30++02EC 06 00            ld b, 0
  30++02EE E5             push hl
  31++02EF              .loop:
  32++02EF 7E               ld a, (hl)
  32++02F0 23             inc hl
  32++02F1 04             inc b
  32++02F2 A7             and a
  32++02F3 C2 EF 02       jp nz, .loop
  33++02F6 05               dec b
  33++02F7 E1             pop hl
  33++02F8 C5             push bc
  33++02F9 E5             push hl
  34++02FA E1               pop hl
  35++02FB 11 42 03         ld de, buffer + 32
  36++02FE              .sourceLoop
  37++02FE 1B               dec de
  37++02FF 10 FD          djnz .sourceLoop
  38++0301 C1               pop bc
  39++0302              .compare
  40++0302 C5               push bc
  40++0303 F5             push af
  41++0304 1A               ld a, (de)
  41++0305 47             ld b, a
  42++0306 F1               pop af
  42++0307 7E             ld a, (hl)
  42++0308 B8             cp b
  42++0309 C1             pop bc
  42++030A 3E 00          ld a, 0
  42++030C C0             ret nz
  43++030D 13               inc de
  43++030E 23             inc hl
  44++030F 10 F1            djnz .compare
  45++0311 3E 01            ld a, 1
  46++0313 C9               ret
  47++0314
  48++0314              clear:
  49++0314 AF               xor a
  49++0315 21 22 03       ld hl, buffer
  49++0318 11 23 03       ld de, buffer + 1
  49++031B 01 20 00       ld bc, 32
  49++031E 77             ld (hl), a
  49++031F ED B0          ldir
  50++0321 C9               ret
  51++0322
  52++0322 00 00 00...  buffer ds 32
  53++0342
  54++0342                  endmodule
# file closed: utils/strutils.asm
   4++0342                  IFDEF MSX
   5++0342              	    include "bios.asm"
# file opened: utils/bios.asm
   1++0342              CALSLT  EQU    0x001C
   2++0342              NMI     EQU    0x0066
   3++0342              EXTROM  EQU    0x015f
   4++0342              EXPTBL  EQU    0xfcc1
   5++0342              H_NMI   EQU    0xfdd6
   6++0342
   7++0342              biosC:
   8++0342 FD 2A C0 FC  	LD	IY,($FCC0)
   9++0346 C3 1C 00     	JP	$001C
  10++0349
  11++0349              callSub:
  12++0349 D9           		 exx
  13++034A 08                    ex     af,af'       ; store all registers
  14++034B 21 5F 01              ld     hl,EXTROM
  15++034E E5                    push   hl
  16++034F 21 00 C3              ld     hl,0xC300
  17++0352 E5                    push   hl           ; push NOP ; JP EXTROM
  18++0353 DD E5                 push   ix
  19++0355 21 DD 21              ld     hl,0x21DD
  20++0358 E5                    push   hl           ; push LD IX,<entry>
  21++0359 21 33 33              ld     hl,0x3333
  22++035C E5                    push   hl           ; push INC SP; INC SP
  23++035D 21 00 00              ld     hl,0
  24++0360 39                    add    hl,sp        ; HL = offset of routine
  25++0361 3E C3                 ld     a,0xC3
  26++0363 32 D6 FD              ld     (H_NMI),a
  27++0366 22 D7 FD              ld     (H_NMI+1),hl ; JP <routine> in NMI hook
  28++0369 08                    ex     af,af'
  29++036A D9                    exx                 ; restore all registers
  30++036B DD 21 66 00           ld     ix,NMI
  31++036F FD 2A C0 FC           ld     iy,(EXPTBL-1)
  32++0373 CD 1C 00              call   CALSLT       ; call NMI-hook via NMI entry in ROMBIOS
  33++0376                                           ; NMI-hook will call SUBROM
  34++0376 D9                    exx
  35++0377 08                    ex     af,af'       ; store all returned registers
  36++0378 21 0A 00              ld     hl,10
  37++037B 39                    add    hl,sp
  38++037C F9                    ld     sp,hl        ; remove routine from stack
  39++037D 08                    ex     af,af'
  40++037E D9                    exx                 ; restore all returned registers
  41++037F C9                    ret
# file closed: utils/bios.asm
   6++0380                  ENDIF
   7++0380                  include "screen.asm"
# file opened: utils/screen.asm
   1++0380              LINE_LIMIT = 63
   2++0380
   3++0380                  IFDEF NEDOOS
   4++0380 ~            LINE_LIMIT = 79
   5++0380                  ENDIF
   6++0380
   7++0380                  IFDEF TIMEX80
   8++0380 ~            LINE_LIMIT = 84
   9++0380                  ENDIF
  10++0380
  11++0380                  IFDEF MSX
  12++0380              LINE_LIMIT = 79
  13++0380                  ENDIF
  14++0380              ; HL - string pointer
  15++0380              print70Text:
  16++0380 06 4F            ld b, LINE_LIMIT
  17++0382              .loop
  18++0382 7E               ld a, (hl)
  19++0383 A7               and a
  19++0384 C8             ret z
  20++0385 FE 0D            cp 13
  20++0387 C8             ret z
  21++0388 FE 0A            cp 10
  21++038A C8             ret z
  22++038B C5               push bc
  23++038C E5               push hl
  24++038D CD EC 01         call TextMode.putC
  25++0390 E1               pop hl
  26++0391 23               inc hl
  27++0392 C1               pop bc
  28++0393 05               dec b
  29++0394 78               ld a, b
  29++0395 A7             and a
  29++0396 C8             ret z
  30++0397 C3 82 03         jp .loop
  31++039A
  32++039A              ; HL - string pointer
  33++039A              print70Goph:
  34++039A 06 4F            ld b, LINE_LIMIT
  35++039C              .loop
  36++039C 7E               ld a, (hl)
  36++039D FE 09          cp 09
  36++039F C8             ret z
  37++03A0 A7               and a
  37++03A1 C8             ret z
  38++03A2 C5               push bc
  39++03A3 E5               push hl
  40++03A4 CD EC 01         call TextMode.putC
  41++03A7 E1               pop hl
  42++03A8 23               inc hl
  43++03A9 C1               pop bc
  44++03AA 05               dec b
  45++03AB 78               ld a, b
  45++03AC A7             and a
  45++03AD C8             ret z
  46++03AE C3 9C 03         jp .loop
# file closed: utils/screen.asm
# file closed: utils/index.asm
   7+ 03B1                  include "gopher/render/index.asm"
# file opened: gopher/render/index.asm
   1++03B1                  MODULE Render
   2++03B1              PER_PAGE = 22
   3++03B1              CURSOR_OFFSET = 2
   4++03B1                  include "row.asm"
# file opened: gopher/render/row.asm
   1++03B1              ; A - row number
   2++03B1              ; HL - pointer to row
   3++03B1              renderRow:
   4++03B1 C6 02            add CURSOR_OFFSET
   5++03B3 57               ld d,a
   6++03B4 1E 00            ld e,0
   7++03B6 CD 70 02         call TextMode.gotoXY
   8++03B9 7E               ld a,(hl)
   9++03BA E5               push hl
  10++03BB CD C6 03         call getIcon
  11++03BE CD EC 01         call TextMode.putC
  12++03C1 E1               pop hl
  13++03C2 23               inc hl
  14++03C3 C3 9A 03         jp print70Goph
  15++03C6
  16++03C6              ; A - gopher id char
  17++03C6              getIcon:
  18++03C6 FE 69            cp 'i'
  18++03C8 CA E7 03       jp z, .info
  19++03CB FE 39            cp '9'
  19++03CD CA EA 03       jp z, .down
  20++03D0 FE 31            cp '1'
  20++03D2 CA 56 04       jp z, .page
  21++03D5 FE 30            cp '0'
  21++03D7 CA 59 04       jp z, .text
  22++03DA FE 37            cp '7'
  22++03DC CA 5C 04       jp z, .input
  23++03DF FE 73            cp 's'
  23++03E1 CA EA 03       jp z, .down
  24++03E4 3E 20            ld a, ' '
  25++03E6 C9               ret
  26++03E7              .info
  27++03E7 3E 20            ld a, SPACE
  27++03E9 C9             ret
  28++03EA              .down
  29++03EA 54 5D            ld de, hl
  30++03EC 01 FF 00 3E      ld bc, #ff, a, TAB
  30++03F0 09
  30++03F1 ED B1          cpir
  31++03F3 78               ld a, b
  31++03F4 B1             or c
  31++03F5 28 5C          jr z, .downExit
  32++03F7 D5               push de
  33++03F8              .nameLoop
  34++03F8 7E               ld a, (hl)
  34++03F9 A7             and a
  34++03FA 28 10          jr z, .check
  35++03FC FE 09            cp TAB
  35++03FE 28 0C          jr z, .check
  36++0400 FE 0D            cp CR
  36++0402 28 08          jr z, .check
  37++0404 E5               push hl
  38++0405 CD D7 02         call CompareBuff.push
  39++0408 E1               pop hl
  40++0409 23               inc hl
  41++040A 18 EC            jr .nameLoop
  42++040C              .check
  43++040C 3A 98 04     	ld a,(saveMode+1);���� ����� �������� ������, ����� �� ������� �� ������ Caps
  44++040F B7           	or a
  45++0410 20 40        	jr nz,.checkExit
  46++0412 21 6B 04     	ld hl, scrExt1
  46++0415 CD EC 02       call CompareBuff.search
  46++0418 A7             and a
  46++0419 20 44          jr nz, .image
  47++041B 21 70 04         ld hl, scrExt2
  47++041E CD EC 02       call CompareBuff.search
  47++0421 A7             and a
  47++0422 20 3B          jr nz, .image
  48++0424 3E 03            ld a, 3
  48++0426 32 AF 26       ld (VTPL.SETUP), a ; 0 bit - looping, 1 bit - pt2 file
  49++0429 21 7F 04         ld hl, pt2Ext1
  49++042C CD EC 02       call CompareBuff.search
  49++042F A7             and a
  49++0430 20 31          jr nz, .music
  50++0432 21 84 04         ld hl, pt2Ext2
  50++0435 CD EC 02       call CompareBuff.search
  50++0438 A7             and a
  50++0439 20 28          jr nz, .music
  51++043B 3E 01            ld a, 1
  51++043D 32 AF 26       ld (VTPL.SETUP), a
  52++0440 21 75 04         ld hl, pt3Ext1
  52++0443 CD EC 02       call CompareBuff.search
  52++0446 A7             and a
  52++0447 20 1A          jr nz, .music
  53++0449 21 7A 04         ld hl, pt3Ext2
  53++044C CD EC 02       call CompareBuff.search
  53++044F A7             and a
  53++0450 20 11          jr nz, .music
  54++0452
  55++0452                  ; General Sound support
  56++0452                  ifdef GS
  57++0452 ~                ld hl, modExt1
  57++0452 ~              call CompareBuff.search
  57++0452 ~              and a
  57++0452 ~              jr nz, .mod
  58++0452 ~                ld hl, modExt2
  58++0452 ~              call CompareBuff.search
  58++0452 ~              and a
  58++0452 ~              jr nz, .mod
  59++0452                  endif
  60++0452
  61++0452              .checkExit
  62++0452 E1               pop hl
  63++0453              .downExit
  64++0453 3E 01            ld a, MIME_DOWNLOAD
  64++0455 C9             ret
  65++0456              .page
  66++0456 3E 02            ld a, MIME_LINK
  66++0458 C9             ret
  67++0459              .text
  68++0459 3E 03            ld a, MIME_TEXT
  68++045B C9             ret
  69++045C              .input
  70++045C 3E 06            ld a, MIME_INPUT
  70++045E C9             ret
  71++045F              .image
  72++045F E1               pop hl
  72++0460 3E 04          ld a, MIME_IMAGE
  72++0462 C9             ret
  73++0463              .music
  74++0463 E1               pop hl
  74++0464 3E 05          ld a, MIME_MUSIC
  74++0466 C9             ret
  75++0467              .mod
  76++0467 E1               pop hl
  76++0468 3E 07          ld a, MIME_MOD
  76++046A C9             ret
  77++046B
  78++046B 2E 73 63 72  scrExt1 db ".scr", 0
  78++046F 00
  79++0470 2E 53 43 52  scrExt2 db ".SCR", 0
  79++0474 00
  80++0475
  81++0475 2E 70 74 33  pt3Ext1 db ".pt3", 0
  81++0479 00
  82++047A 2E 50 54 33  pt3Ext2 db ".PT3", 0
  82++047E 00
  83++047F 2E 70 74 32  pt2Ext1 db ".pt2", 0
  83++0483 00
  84++0484 2E 50 54 32  pt2Ext2 db ".PT2", 0
  84++0488 00
  85++0489 2E 6D 6F 64  modExt1 db ".mod", 0
  85++048D 00
  86++048E 2E 4D 4F 44  modExt2 db ".MOD", 0
  86++0492 00
  87++0493
  88++0493              toggleSaveMode
  89++0493 F5           			push af
  90++0494 CD A8 09     			call Console.waitForKeyUp
  91++0497 3E 00        saveMode	ld a,0 ; ���� Open/Save files
  92++0499 EE 01        			xor 1
  93++049B 32 98 04     			ld (saveMode+1),a
  94++049E F1           			pop af
  95++049F C9           			ret
# file closed: gopher/render/row.asm
   5++04A0                  include "buffer.asm"
# file opened: gopher/render/buffer.asm
   1++04A0              ; BC - line count
   2++04A0              findLine
   3++04A0 21 F9 2F         ld hl, outputBuffer
   4++04A3              findLine2
   5++04A3 78               ld a,b
   6++04A4 B1               or c
   7++04A5 CA D2 04         jp z, .checkEmpty
   8++04A8              .loop
   9++04A8 7E               ld a, (hl)
  10++04A9 A7               and a
  11++04AA CA D5 04         jp z, .nope
  12++04AD 23               inc hl
  13++04AE FE 0D            cp 13
  14++04B0 CA C8 04         jp z, .checkLF  ;13
  15++04B3 FE 0A            cp 10
  15++04B5 CA BB 04       jp z, .nextCheck     ;10
  16++04B8 C3 A8 04         jp .loop
  17++04BB              .nextCheck
  18++04BB A7               and a
  19++04BC CA D5 04         jp z, .nope
  20++04BF 0B               dec bc
  21++04C0 57               ld d,a
  22++04C1 78               ld a,b
  23++04C2 B1               or c
  24++04C3 7A               ld a,d
  25++04C4 C2 A8 04         jp nz, .loop
  26++04C7 C9               ret
  27++04C8              .checkLF
  28++04C8 7E               ld a, (hl)
  29++04C9 FE 0A            cp 10
  30++04CB C2 BB 04         jp nz, .nextCheck    ;10
  31++04CE 23               inc hl
  32++04CF C3 BB 04         jp  .nextCheck
  33++04D2              .checkEmpty
  34++04D2 7E               ld a, (hl)
  34++04D3 A7             and a
  34++04D4 C0             ret nz
  35++04D5              .nope
  36++04D5 21 00 00         ld hl, 0
  36++04D8 C9             ret
  37++04D9
# file closed: gopher/render/buffer.asm
   6++04D9                  include "ui.asm"
# file opened: gopher/render/ui.asm
   1++04D9                  IFDEF ZXSCR
   2++04D9 ~                    DEFINE LEFT_TAB "[D]omain:                                  "
   3++04D9 ~                    DEFINE SCREEN_WIDTH 64
   4++04D9 ~                    DEFINE SCREEN64
   5++04D9                  ENDIF
   6++04D9
   7++04D9                  IFDEF TIMEX     ;UNKNOWM fallback to 64
   8++04D9 ~                    DEFINE LEFT_TAB "[D]omain:                                  "
   9++04D9 ~                    DEFINE SCREEN_WIDTH 64
  10++04D9 ~                    DEFINE SCREEN64
  11++04D9                  ENDIF
  12++04D9
  13++04D9                  IFDEF TIMEX80
  14++04D9 ~                    DEFINE LEFT_TAB "[D]omain:                                                      "
  15++04D9 ~                    DEFINE SCREEN_WIDTH 85
  16++04D9 ~                    DEFINE SCREEN85
  17++04D9                  ENDIF
  18++04D9
  19++04D9                  IFDEF NEDOOS
  20++04D9 ~                    DEFINE LEFT_TAB "[D]omain:                                                  "
  21++04D9 ~                    DEFINE SCREEN_WIDTH 80
  22++04D9 ~                    DEFINE SCREEN80
  23++04D9                  ENDIF
  24++04D9
  25++04D9                  IFDEF MSX
  26++04D9                      DEFINE LEFT_TAB "[D]omain:                                              "
  27++04D9                      DEFINE SCREEN_WIDTH 80
  28++04D9                      DEFINE SCREEN80
  29++04D9                  ENDIF
  30++04D9              prepareScreen:
  31++04D9 CD 39 01         call TextMode.cls
  32++04DC 21 AC 05         ld hl, header
  32++04DF CD E1 01       call TextMode.printZ
  33++04E2 11 0A 00         ld de, #000A
  33++04E5 CD 70 02       call TextMode.gotoXY
  34++04E8 21 3B 1A         ld hl, hostName
  34++04EB CD E1 01       call TextMode.printZ
  35++04EE AF               xor a
  35++04EF CD BD 01       call TextMode.highlightLine
  36++04F2 C9               ret
  37++04F3
  38++04F3              inputHost:
  39++04F3 CD A8 09         	call Console.waitForKeyUp
  40++04F6              .loop
  41++04F6 11 0A 00         ld de, #000A
  41++04F9 CD 70 02       call TextMode.gotoXY
  41++04FC 21 3B 1A       ld hl, hostName
  41++04FF CD E1 01       call TextMode.printZ
  42++0502 3E 06            ld a, MIME_INPUT
  42++0504 CD EC 01       call TextMode.putC
  43++0507 3E 20            ld a, ' '
  43++0509 CD EC 01       call TextMode.putC
  44++050C              .wait
  45++050C CD 8F 09         call Console.getC
  46++050F 5F               ld e, a
  47++0510 FE 08            cp Console.BACKSPACE
  47++0512 28 17          jr z, .removeChar
  48++0514 FE 0D            cp CR
  48++0516 CA 39 05       jp z, inputNavigate
  49++0519 FE 20            cp 32
  49++051B 38 EF          jr c, .wait
  50++051D              .putC
  51++051D AF               xor a
  51++051E 21 3B 1A 01    ld hl, hostName, bc, 48
  51++0522 30 00
  51++0524 ED B1          cpir
  52++0526 77               ld (hl), a
  52++0527 2B             dec hl
  52++0528 73             ld (hl), e
  53++0529 18 CB            jr .loop
  54++052B              .removeChar
  55++052B AF               xor a
  56++052C 21 3B 1A 01      ld hl, hostName, bc, 48
  56++0530 30 00
  56++0532 ED B1          cpir
  57++0534 2B               dec hl
  57++0535 2B             dec hl
  57++0536 77             ld (hl), a
  58++0537 18 BD            jr .loop
  59++0539
  60++0539              inputNavigate:
  61++0539 21 3B 1A 11      ld hl, hostName, de, domain
  61++053D 6C 05
  62++053F 7E               ld a,(hl)
  63++0540 A7               and a
  64++0541 CA C0 09         jp z, History.load
  65++0544              .loop
  66++0544 7E               ld a, (hl)
  66++0545 A7             and a
  66++0546 28 05          jr z, .complete
  67++0548 12               ld (de), a
  67++0549 23 13          inc hl, de
  68++054B 18 F7            jr .loop
  69++054D              .complete
  70++054D 3E 09            ld a, TAB
  70++054F 12             ld (de), a
  70++0550 13             inc de
  71++0551 3E 37            ld a, '7'
  71++0553 12             ld (de), a
  71++0554 13             inc de
  72++0555 3E 30            ld a, '0'
  72++0557 12             ld (de), a
  72++0558 13             inc de
  73++0559 3E 0D            ld a, CR
  73++055B 12             ld (de), a
  73++055C 13             inc de
  74++055D 3E 0A            ld a, LF
  74++055F 12             ld (de), a
  74++0560 13             inc de
  75++0561 21 67 05         ld hl, navRow
  75++0564 C3 1B 0A       jp History.navigate
  76++0567
  77++0567 31 20 09 2F  navRow db "1 ", TAB, "/", TAB
  77++056B 09
  78++056C 6E 69 68 69  domain db "nihirash.net"
  78++0570 72 61 73 68
  78++0574 2E 6E 65 74
  79++0578 00 00 00...      ds 64 - ($ - domain)
  80++05AC
  81++05AC 5B 44 5D 6F  header db "[D]omain:                                              ", "MRF "
  81++05B0 6D 61 69 6E
  81++05B4 3A 20 20 20
  81++05B8 20 20 20 20
  81++05BC 20 20 20 20
  81++05C0 20 20 20 20
  81++05C4 20 20 20 20
  81++05C8 20 20 20 20
  81++05CC 20 20 20 20
  81++05D0 20 20 20 20
  81++05D4 20 20 20 20
  81++05D8 20 20 20 20
  81++05DC 20 20 20 20
  81++05E0 20 20 20 4D
  81++05E4 52 46 20
  82++05E7 31 2E 37            db "1.7"
  83++05EA 2E                  db "."
  84++05EB 32 30               db "20"
  85++05ED              	IFDEF MSX
  86++05ED 20 20 20 20         db "    [MSX UNAPI]",13, 0
  86++05F1 5B 4D 53 58
  86++05F5 20 55 4E 41
  86++05F9 50 49 5D 0D
  86++05FD 00
  87++05FE              	ENDIF
  88++05FE
  89++05FE                  IFDEF MB03
  90++05FE ~                   db " [MB03+]",13, 0
  91++05FE                     ENDIF
  92++05FE
  93++05FE                  IFDEF UNO
  94++05FE ~                   db " [UNO UART]",13, 0
  95++05FE                  ENDIF
  96++05FE
  97++05FE                  IFDEF AY
  98++05FE ~                   db " [AYWIFI]",13, 0
  99++05FE              	ENDIF
 100++05FE
 101++05FE                  IFDEF ZW
 102++05FE ~                   db "  [ZXWiFi]",13, 0
 103++05FE                  ENDIF
 104++05FE
 105++05FE                   IFDEF UARTATM
 106++05FE ~                   db " [ATM UART]",13, 0
 107++05FE                  ENDIF
 108++05FE
 109++05FE                  IFDEF UARTEVO
 110++05FE ~                    db " [EVO UART]",13, 0
 111++05FE                  ENDIF
 112++05FE
 113++05FE                  IFDEF UNOUART
 114++05FE ~                    db " [UNO UART]",13, 0
 115++05FE                  ENDIF
 116++05FE
 117++05FE                  IFDEF NEDONET
 118++05FE ~            	    db "  [nedoNET]",13, 0
 119++05FE              	ENDIF
 120++05FE
# file closed: gopher/render/ui.asm
   7++05FE                  include "gopher-page.asm"
# file opened: gopher/render/gopher-page.asm
   1++05FE              renderGopherScreen:
   2++05FE 3E FF            ld a, 255
   3++0600 32 A0 2F         ld (oldminutes), a
   4++0603 CD D9 04         call Render.prepareScreen
   5++0606
   6++0606 2A 29 0D         ld hl, (page_offset)        ; HL - offset to 0 Row on screen
   7++0609 44 4D            ld bc,hl                    ; BC - offset to C Row on screen
   8++060B CD A0 04         call Render.findLine        ;BC - Search this line  HL - Return pointer to page with offset
   9++060E 7C               ld a, h
  10++060F B5               or l
  11++0610 28 21            jr z, .exit2
  12++0612 7B               ld a, e
  13++0613 AF               xor a
  14++0614 E5               push hl
  15++0615 CD B1 03         call renderRow
  16++0618 E1               pop hl
  17++0619
  18++0619 06 15            ld b, PER_PAGE-1
  19++061B
  20++061B              .loop
  21++061B C5               push bc
  22++061C 3E 16            ld a, PER_PAGE
  23++061E 90               sub b
  24++061F 5F               ld e,a
  25++0620
  26++0620 01 01 00         ld bc, 1
  27++0623
  28++0623 CD A3 04         call Render.findLine2   ;BC - Search this line  HL - Return pointer to page with offset
  29++0626
  30++0626 7C               ld a, h
  31++0627 B5               or l
  32++0628 28 06            jr z, .exit
  33++062A 7B               ld a, e
  34++062B E5               push hl
  35++062C CD B1 03         call renderRow
  36++062F E1               pop hl
  37++0630              .exit
  38++0630 C1               pop bc
  39++0631 10 E8            djnz .loop
  40++0633              .exit2
  41++0633 CD 3D 07         call showCursor
  42++0636 C9               ret
  43++0637
  44++0637              checkBorder:
  45++0637 3A 27 0D         ld a, (cursor_position)
  45++063A FE FF          cp #ff
  45++063C CA 61 07       jp z, pageUp
  46++063F 3A 27 0D         ld a, (cursor_position)
  46++0642 FE 16          cp PER_PAGE
  46++0644 CA 94 07       jp z, pageDn
  47++0647 CD 3D 07         call showCursor
  48++064A C3 4D 06         jp workLoop
  49++064D
  50++064D              workLoop:
  51++064D 3A 82 08         ld a, (play_next)
  51++0650 A7             and a
  51++0651 C2 ED 06       jp nz, navigate
  52++0654
  53++0654                  dup 4
  54++0654 76          >    halt
  54++0655 76          >    halt
  54++0656 76          >    halt
  54++0657 76          >    halt
  55++0658                  edup
  56++0658              .nothing
  57++0658
  58++0658 76               halt
  59++0659 CD FB 2E         call printRTC
  60++065C
  61++065C CD 96 09         call Console.peekC
  62++065F A7               and a
  62++0660 CA 58 06       jp z, .nothing
  63++0663
  64++0663 FE 31            cp '1'
  64++0665 CA A9 09       jp z, History.back
  65++0668 FE 32            cp '2'
  65++066A CA ED 06       jp z, navigate
  66++066D FE 33            cp '3'
  66++066F CA 4D 07       jp z, cursorDown
  67++0672 FE 34            cp '4'
  67++0674 CA 57 07       jp z, cursorUp
  68++0677 FE 35            cp '5'
  68++0679 CA 61 07       jp z, pageUp
  69++067C FE 38            cp '8'
  69++067E CA 94 07       jp z, pageDn
  70++0681 FE 36            cp '6'
  70++0683 CA 4D 07       jp z, cursorDown
  71++0686 FE 37            cp '7'
  71++0688 CA 57 07       jp z, cursorUp
  72++068B
  73++068B FE 1F            cp Console.KEY_DN
  73++068D CA 4D 07       jp z, cursorDown
  74++0690 FE 61            cp 'a'
  74++0692 CA 4D 07       jp z, cursorDown
  75++0695 FE 1E            cp Console.KEY_UP
  75++0697 CA 57 07       jp z, cursorUp
  76++069A FE 71            cp 'q'
  76++069C CA 57 07       jp z, cursorUp
  77++069F FE 1D            cp Console.KEY_LT
  77++06A1 CA 61 07       jp z, pageUp
  78++06A4 FE 6F            cp 'o'
  78++06A6 CA 61 07       jp z, pageUp
  79++06A9 FE 1C            cp Console.KEY_RT
  79++06AB CA 94 07       jp z, pageDn
  80++06AE FE 70            cp 'p'
  80++06B0 CA 94 07       jp z, pageDn
  81++06B3
  82++06B3 FE 68            cp 'h'
  82++06B5 CA 18 0A       jp z, History.home
  83++06B8 FE 48            cp 'H'
  83++06BA CA 18 0A       jp z, History.home
  84++06BD
  85++06BD FE 62            cp 'b'
  85++06BF CA A9 09       jp z, History.back
  86++06C2 FE 42            cp 'B'
  86++06C4 CA A9 09       jp z, History.back
  87++06C7 FE 08            cp Console.BACKSPACE
  87++06C9 CA A9 09       jp z, History.back
  88++06CC
  89++06CC FE 64            cp 'd'
  89++06CE CA F3 04       jp z, inputHost
  90++06D1 FE 44            cp 'D'
  90++06D3 CA F3 04       jp z, inputHost
  91++06D6
  92++06D6 FE 0D            cp CR
  92++06D8 CA ED 06       jp z, navigate
  93++06DB
  94++06DB FE 53            cp 'S'
  94++06DD CC 93 04       call z, toggleSaveMode
  95++06E0 FE 73        	cp 's'
  95++06E2 CC 93 04       call z, toggleSaveMode
  96++06E5
  97++06E5
  98++06E5                  IFDEF MSX
  99++06E5 FE 1B            	cp ESC
  99++06E7 CA 8E 02       jp z, exit
 100++06EA                  ENDIF
 101++06EA
 102++06EA                  IFDEF GS
 103++06EA ~                cp 'M'
 103++06EA ~              call z, GeneralSound.toggleModule
 104++06EA ~                cp 'm'
 104++06EA ~              call z, GeneralSound.toggleModule
 105++06EA                  ENDIF
 106++06EA
 107++06EA                  IFDEF TIMEX80
 108++06EA ~                cp 'T'
 108++06EA ~              call z, TextMode.toggleColor
 109++06EA ~                cp 't'
 109++06EA ~              call z, TextMode.toggleColor
 110++06EA                  ENDIF
 111++06EA
 112++06EA C3 4D 06         jp workLoop
 113++06ED
 114++06ED              navigate:
 115++06ED CD A8 09         call Console.waitForKeyUp
 116++06F0 AF               xor a
 116++06F1 32 82 08       ld (play_next), a
 117++06F4 CD 45 07         call hideCursor
 118++06F7 ED 4B 29 0D      ld bc, (page_offset)
 119++06FB 2A 27 0D         ld hl, (cursor_position)
 120++06FE 09               add hl,bc
 121++06FF 44               ld b, h ;HHHHH
 122++0700 4D               ld c, l ;LLLLL
 123++0701 D5               push de
 124++0702 CD A0 04         call Render.findLine
 125++0705 D1               pop de
 126++0706 7E               ld a, (hl)
 127++0707 FE 31            cp '1'
 127++0709 CA 26 07       jp z, .load
 128++070C FE 30            cp '0'
 128++070E CA 26 07       jp z, .load
 129++0711 FE 39            cp '9'
 129++0713 CA 26 07       jp z, .load
 130++0716 FE 37            cp '7'
 130++0718 CA 2E 07       jp z, .input
 131++071B FE 73            cp MIME_SOUND
 131++071D CA 26 07       jp z, .load
 132++0720 CD 3D 07         call showCursor
 133++0723 C3 4D 06         jp workLoop
 134++0726              .load
 135++0726 E5               push hl
 136++0727 CD C6 03         call getIcon
 137++072A E1               pop hl
 138++072B C3 1B 0A         jp History.navigate
 139++072E              .input
 140++072E E5               push hl
 141++072F CD 83 08         call DialogBox.inputBox
 142++0732 E1               pop hl
 143++0733 3A DD 08         ld a, (DialogBox.inputBuffer)
 143++0736 A7             and a
 143++0737 CA C0 09       jp z, History.load
 144++073A C3 26 07         jp .load
 145++073D
 146++073D              showCursor:
 147++073D 3A 27 0D         ld a, (cursor_position)
 147++0740 C6 02          add CURSOR_OFFSET
 148++0742 C3 BD 01         jp TextMode.highlightLine
 149++0745
 150++0745              hideCursor:
 151++0745 3A 27 0D         ld a, (cursor_position)
 151++0748 C6 02          add CURSOR_OFFSET
 152++074A C3 B5 01         jp TextMode.usualLine
 153++074D
 154++074D              cursorDown:
 155++074D CD 45 07         call hideCursor
 156++0750 21 27 0D         ld hl, cursor_position
 157++0753 34               inc (hl)
 158++0754 C3 37 06         jp checkBorder
 159++0757
 160++0757              cursorUp:
 161++0757 CD 45 07         call hideCursor
 162++075A 21 27 0D         ld hl, cursor_position
 163++075D 35               dec (hl)
 164++075E C3 37 06         jp checkBorder
 165++0761
 166++0761              pageUp:
 167++0761 3A 29 0D         ld a, (page_offset)
 167++0764 FE 00          cp 0
 167++0766 C2 74 07       jp nz, .pageUp2
 168++0769 3A 2A 0D         ld a, (page_offset + 1)
 168++076C FE 00          cp 0
 168++076E C2 74 07       jp nz, .pageUp2
 169++0771 C3 8A 07         jp .skip
 170++0774              .pageUp2:
 171++0774 3E 15            ld a, PER_PAGE - 1
 171++0776 32 27 0D       ld (cursor_position), a
 172++0779 2A 29 0D         ld hl, (page_offset)
 173++077C 11 16 00         ld de,PER_PAGE
 174++077F ED 52            sbc hl,de
 175++0781 22 29 0D         ld (page_offset), hl
 176++0784              .exit
 177++0784 CD FE 05         call renderGopherScreen
 178++0787 C3 4D 06         jp workLoop
 179++078A              .skip
 180++078A AF               xor a
 180++078B 32 27 0D       ld (cursor_position), a
 180++078E CD FE 05       call renderGopherScreen
 180++0791 C3 4D 06       jp workLoop
 181++0794
 182++0794              pageDn:
 183++0794 AF                xor a
 183++0795 32 27 0D       ld (cursor_position), a
 184++0798 2A 29 0D         ld hl,(page_offset)
 185++079B 11 16 00         ld de,PER_PAGE
 186++079E 19               add hl,de
 187++079F 22 29 0D         ld (page_offset), hl
 188++07A2 C3 84 07         jp pageUp.exit
 189++07A5
# file closed: gopher/render/gopher-page.asm
   8++07A5                  include "plaintext.asm"
# file opened: gopher/render/plaintext.asm
   1++07A5              renderPlainTextScreen:
   2++07A5 3E FF            ld a, 255
   3++07A7 32 A0 2F         ld (oldminutes), a
   4++07AA CD D9 04         call prepareScreen
   5++07AD
   6++07AD 2A 29 0D         ld hl, (page_offset)        ; HL - offset to 0 Row on screen
   7++07B0 44 4D            ld bc,hl                    ; BC - offset to C Row on screen
   8++07B2 CD A0 04         call Render.findLine        ;BC - Search this line  HL - Return pointer to page with offset
   9++07B5 7C               ld a, h
  10++07B6 B5               or l
  11++07B7 28 30            jr z, .exit2
  12++07B9 AF               xor a
  13++07BA C6 02            add CURSOR_OFFSET
  13++07BC 57 1E 01       ld d, a, e, 1
  13++07BF CD 70 02       call TextMode.gotoXY
  14++07C2 CD 80 03         call print70Text
  15++07C5 06 15            ld b, PER_PAGE -1
  16++07C7              .loop
  17++07C7 C5               push bc
  18++07C8 3E 16            ld a, PER_PAGE
  19++07CA 90               sub b
  20++07CB 5F               ld e,a
  21++07CC 01 01 00         ld bc, 1
  22++07CF CD A3 04         call Render.findLine2   ;BC - Search this line  HL - Return pointer to page with offset
  23++07D2 7C               ld a, h
  24++07D3 B5               or l
  25++07D4 28 10            jr z, .exit
  26++07D6 7B               ld a, e
  27++07D7 C6 02            add CURSOR_OFFSET
  27++07D9 57 1E 01       ld d, a, e, 1
  27++07DC CD 70 02       call TextMode.gotoXY
  28++07DF CD 80 03         call print70Text
  29++07E2 C1               pop bc
  30++07E3 10 E2            djnz .loop
  31++07E5 C9               ret
  32++07E6              .exit
  33++07E6 C1               pop bc
  34++07E7 10 DE            djnz .loop
  35++07E9              .exit2
  36++07E9 CD 3D 07         call showCursor
  37++07EC C9               ret
  38++07ED              plainTextLoop:
  39++07ED CD FB 2E         call printRTC
  40++07F0 CD 8F 09         call Console.getC
  41++07F3
  42++07F3 FE 31            cp '1'
  42++07F5 CA A9 09       jp z, History.back
  43++07F8 FE 32            cp '2'
  43++07FA CA ED 06       jp z, navigate
  44++07FD FE 35            cp '5'
  44++07FF CA 60 08       jp z, textUp
  45++0802 FE 38            cp '8'
  45++0804 CA 50 08       jp z, textDown
  46++0807 FE 1D            cp Console.KEY_LT
  46++0809 CA 60 08       jp z, textUp
  47++080C FE 1C            cp Console.KEY_RT
  47++080E CA 50 08       jp z, textDown
  48++0811
  49++0811 FE 1F            cp Console.KEY_DN
  49++0813 CA 50 08       jp z, textDown
  50++0816 FE 61            cp 'a'
  50++0818 CA 50 08       jp z, textDown
  51++081B
  52++081B FE 1E            cp Console.KEY_UP
  52++081D CA 60 08       jp z, textUp
  53++0820 FE 71            cp 'q'
  53++0822 CA 60 08       jp z, textUp
  54++0825
  55++0825 FE 68            cp 'h'
  55++0827 CA 18 0A       jp z, History.home
  56++082A FE 48            cp 'H'
  56++082C CA 18 0A       jp z, History.home
  57++082F
  58++082F FE 62            cp 'b'
  58++0831 CA A9 09       jp z, History.back
  59++0834 FE 42            cp 'B'
  59++0836 CA A9 09       jp z, History.back
  60++0839
  61++0839 FE 64            cp 'd'
  61++083B CA F3 04       jp z, inputHost
  62++083E FE 44            cp 'D'
  62++0840 CA F3 04       jp z, inputHost
  63++0843
  64++0843 FE 08            cp Console.BACKSPACE
  64++0845 CA A9 09       jp z, History.back
  65++0848
  66++0848                  IFDEF MSX
  67++0848 FE 1B            	cp ESC
  67++084A CA 8E 02       jp z, exit
  68++084D                  ENDIF
  69++084D
  70++084D                  IFDEF GS
  71++084D ~                cp 'M'
  71++084D ~              call z, GeneralSound.toggleModule
  72++084D ~                cp 'm'
  72++084D ~              call z, GeneralSound.toggleModule
  73++084D                  ENDIF
  74++084D
  75++084D                  IFDEF TIMEX80
  76++084D ~                cp 'T'
  76++084D ~              call z, TextMode.toggleColor
  77++084D ~                cp 't'
  77++084D ~              call z, TextMode.toggleColor
  78++084D                  ENDIF
  79++084D
  80++084D C3 ED 07         jp plainTextLoop
  81++0850
  82++0850
  83++0850              textDown:
  84++0850 2A 29 0D         ld hl,(page_offset)
  85++0853 11 16 00         ld de,PER_PAGE
  86++0856 19               add hl,de
  87++0857 22 29 0D         ld (page_offset), hl
  88++085A CD A5 07         call renderPlainTextScreen
  89++085D C3 ED 07         jp plainTextLoop
  90++0860
  91++0860              textUp:
  92++0860 3A 29 0D         ld a, (page_offset)
  92++0863 FE 00          cp 0
  92++0865 20 0A          jr nz, .textUp2
  93++0867 3A 2A 0D         ld a, (page_offset + 1)
  93++086A FE 00          cp 0
  93++086C 20 03          jr nz, .textUp2
  94++086E C3 ED 07         jp plainTextLoop
  95++0871
  96++0871              .textUp2:
  97++0871 2A 29 0D         ld hl,(page_offset)
  98++0874 11 16 00         ld de,PER_PAGE
  99++0877 ED 52            sbc hl,de
 100++0879 22 29 0D         ld (page_offset), hl
 101++087C CD A5 07         call renderPlainTextScreen
 102++087F C3 ED 07         jp plainTextLoop
 103++0882
# file closed: gopher/render/plaintext.asm
   9++0882
  10++0882 00           play_next       db  0
  11++0883              position        EQU historyBlock.position
  12++0883              cursor_position EQU position + 2
  13++0883              page_offset     EQU position + 4
  14++0883
  15++0883                  ENDMODULE
  16++0883
  17++0883                  include "dialogbox.asm"
# file opened: gopher/render/dialogbox.asm
   1++0883                  module DialogBox
   2++0883
   3++0883              inputBox:
   4++0883 AF               xor a
   4++0884 32 DD 08       ld (inputBuffer), a
   5++0887              .noclear
   6++0887 CD 3E 09         call drawBox
   7++088A              .loop
   8++088A 11 05 0B         ld de, #0B05
   8++088D CD 70 02       call TextMode.gotoXY
   9++0890 21 DD 08         ld hl, inputBuffer
   9++0893 CD E1 01       call TextMode.printZ
  10++0896 3E 06            ld a, MIME_INPUT
  10++0898 CD EC 01       call TextMode.putC
  10++089B 3E 20          ld a, ' '
  10++089D CD EC 01       call TextMode.putC
  11++08A0              .checkkey
  12++08A0 CD 96 09         call Console.peekC
  13++08A3 FE 00            cp 00
  13++08A5 CA A0 08        jp z, .checkkey
  14++08A8 FE 0D            cp CR
  14++08AA C8             ret z
  15++08AB
  16++08AB                  IFNDEF MSX
  17++08AB ~                dup 11
  18++08AB ~                halt
  19++08AB ~                edup
  20++08AB                  ENDIF
  21++08AB
  22++08AB FE 08            cp Console.BACKSPACE
  22++08AD 28 13          jr z, .removeChar
  23++08AF FE 20            cp SPACE
  23++08B1 38 ED          jr c, .checkkey
  24++08B3              .putC
  25++08B3 5F               ld e, a
  26++08B4 AF               xor a
  26++08B5 21 DD 08 01    ld hl, inputBuffer, bc, #ff
  26++08B9 FF 00
  26++08BB ED B1          cpir
  27++08BD 77               ld (hl), a
  27++08BE 2B             dec hl
  27++08BF 73             ld (hl), e
  28++08C0 18 C8            jr .loop
  29++08C2              .removeChar
  30++08C2 AF               xor a
  31++08C3 21 DD 08 01      ld hl, inputBuffer, bc, #ff
  31++08C7 FF 00
  31++08C9 ED B1          cpir
  32++08CB E5               push hl
  33++08CC 11 DE 08             ld de, inputBuffer + 1
  34++08CF B7                   or a
  34++08D0 ED 52          sbc hl, de
  35++08D2 7C                   ld a, h
  35++08D3 B5             or l
  36++08D4 E1               pop hl
  37++08D5 28 B3            jr z, .loop
  38++08D7 AF               xor a
  39++08D8 2B               dec hl
  39++08D9 2B             dec hl
  39++08DA 77             ld (hl), a
  40++08DB 18 AD            jr .loop
  41++08DD
  42++08DD
  43++08DD              namedownload
  44++08DD                  IFDEF NEDOOS
  45++08DD ~            		db "..",92,"downloads",92
  46++08DD                  ENDIF
  47++08DD
  48++08DD 00 00 00...  inputBuffer ds 80
  49++092D
  50++092D              msgBox:
  51++092D CD 36 09         call msgNoWait
  52++0930 06 96            ld b, 150
  53++0932              .loop
  54++0932 76               halt
  55++0933 10 FD            djnz .loop
  56++0935 C9               ret
  57++0936
  58++0936              msgNoWait:
  59++0936 E5               push hl
  60++0937 CD 3E 09         call drawBox
  61++093A E1               pop hl
  62++093B C3 E1 01         jp TextMode.printZ
  63++093E
  64++093E              drawBox:
  65++093E 26 0A 3E 07      ld h, #0a, a, BORDER_TOP
  66++0942 CD 0F 02         call TextMode.fillLine
  67++0945 26 0B 3E 20      ld h, #0b, a, ' '
  68++0949 CD 0F 02         call TextMode.fillLine
  69++094C 26 0C 3E 08      ld h, #0c, a, BORDER_BOTTOM
  70++0950 CD 0F 02         call TextMode.fillLine
  71++0953 3E 0A            ld a, #0a
  72++0955 CD BD 01         call TextMode.highlightLine
  73++0958 3E 0C            ld a, #0c
  74++095A CD BD 01         call TextMode.highlightLine
  75++095D 11 03 0B         ld de,#0B03
  76++0960 CD 70 02         call TextMode.gotoXY
  77++0963 C9               ret
  78++0964                  endmodule
  79++0964
# file closed: gopher/render/dialogbox.asm
# file closed: gopher/render/index.asm
   8+ 0964                  include "dos/msxdos.asm"
# file opened: dos/msxdos.asm
   1++0964              BDOS = 5
   2++0964                  include "msxfiles.asm"
# file opened: dos/msxfiles.asm
   1++0964              FMODE_RW       = %000
   2++0964              FMODE_NO_WRITE = %001
   3++0964              FMODE_NO_READ  = %010
   4++0964              FMODE_INHERIT  = %100
   5++0964
   6++0964              ATTR_NOTHING   = #00
   7++0964              ATTR_RDONLY    = #01
   8++0964              ATTR_HIDDEN    = #02
   9++0964              ATTR_SYSTEM    = #04
  10++0964              ATTR_VOLUME    = #08
  11++0964              ATTR_DIRECTORY = #10
  12++0964              ATTR_ARCHIVE   = #20
  13++0964              ATTR_DEVICE    = #80
  14++0964
  15++0964                  module Dos
  16++0964              ; DE -> filename
  17++0964              ; A -> mode
  18++0964              ;
  19++0964              ; A <- Error
  20++0964              ; B <- Handle
  21++0964              fopen:
  22++0964 0E 43            ld c, #43
  23++0966 C3 05 00         jp BDOS
  24++0969
  25++0969              ; DE -> filename
  26++0969              ; A  -> mode
  27++0969              ; B  -> attribute
  28++0969              ;
  29++0969              ; A <- error
  30++0969              ; B <- handle
  31++0969              fcreate:
  32++0969 0E 44            ld c, #44
  33++096B C3 05 00         jp BDOS
  34++096E
  35++096E              ; B <- Handle
  36++096E              ;
  37++096E              ; A <- Error
  38++096E              fclose:
  39++096E 0E 45            ld c, #45
  40++0970 C3 05 00         jp BDOS
  41++0973
  42++0973              ; B <- Handle
  43++0973              fsync:
  44++0973 0E 46            ld c, #46
  45++0975 C3 05 00         jp BDOS
  46++0978
  47++0978              ; B <- Handle
  48++0978              ; DE <- buffer
  49++0978              ; HL <- Count
  50++0978              ;
  51++0978              ; A <- error
  52++0978              ; HL <- actually read
  53++0978              fread:
  54++0978 0E 48            ld c, #48
  55++097A C3 05 00         jp BDOS
  56++097D              ; B <- Handle
  57++097D              ; DE <- Buffer
  58++097D              ; HL <- Count
  59++097D              ;
  60++097D              ; HL <- actully written
  61++097D              ; A <- Error
  62++097D              fwrite:
  63++097D 0E 49            ld c, #49
  64++097F C3 05 00         jp BDOS
  65++0982                  endmodule
  66++0982
# file closed: dos/msxfiles.asm
   3++0982                  include "msxconsole.asm"
# file opened: dos/msxconsole.asm
   1++0982                  module Console
   2++0982              KEY_UP = 30
   3++0982              KEY_DN = 31
   4++0982              KEY_LT = 29
   5++0982              KEY_RT = 28
   6++0982              BACKSPACE = 8
   7++0982              newLine:
   8++0982 3E 0D            ld a, CR
   9++0984 CD 89 09         call putC
  10++0987 3E 0A            ld a, LF
  11++0989              putC:
  12++0989 5F               ld e, a
  13++098A 0E 02            ld c, 2
  14++098C C3 05 00         jp BDOS
  15++098F
  16++098F              getC:
  17++098F DD 21 9F 00      ld ix, #9f
  18++0993 C3 42 03         jp biosC
  19++0996
  20++0996              peekC:
  21++0996 0E 06 1E FF      ld c, 6, e, #ff
  22++099A C3 05 00         jp BDOS
  23++099D
  24++099D              putStringZ:
  25++099D 7E               ld a, (hl)
  26++099E A7               and a
  27++099F C8               ret z
  28++09A0 E5               push hl
  29++09A1 CD 89 09         call putC
  30++09A4 E1               pop hl
  31++09A5 23               inc hl
  32++09A6 18 F5            jr putStringZ
  33++09A8
  34++09A8              waitForKeyUp:
  35++09A8 C9               ret
  36++09A9
  37++09A9                  endmodule
# file closed: dos/msxconsole.asm
   4++09A9
   5++09A9
# file closed: dos/msxdos.asm
   9+ 09A9                  include "gopher/engine/history/index.asm"
# file opened: gopher/engine/history/index.asm
   1++09A9                  include "controler.asm"
# file opened: gopher/engine/history/controler.asm
   1++09A9                  module History
   2++09A9              back:
   3++09A9 3A DE 0A         ld a, (depth)
   3++09AC FE 01          cp 1
   3++09AE CA C0 09       jp z, load
   4++09B1 21 2D 0D 11      ld hl, historyBlock + HistoryRecord, de, historyBlock, bc, (total - 1) * HistoryRecord
   4++09B5 DF 0A 01 38
   4++09B9 09
   4++09BA ED B0          ldir ; Move history up
   5++09BC 21 DE 0A         ld hl, depth
   5++09BF 35             dec (hl)
   6++09C0              ; Loads current resource
   7++09C0              load:
   8++09C0 21 DF 09         ld hl, .msg
   8++09C3 CD 36 09       call DialogBox.msgNoWait
   9++09C6 AF               xor a
   9++09C7 21 F9 2F 11    ld hl, outputBuffer, de, outputBuffer + 1
   9++09CB FA 2F
  10++09CD              	IFDEF MSX
  11++09CD ED 4B F7 2F      	ld bc, (ramtop)
  12++09D1 0B               	dec bc
  13++09D2              	ELSE
  14++09D2 ~                	ld bc, #ffff - outputBuffer - 1
  15++09D2              	ENDIF
  16++09D2
  17++09D2 77               ld (hl), a
  18++09D3 ED B0            ldir
  19++09D5
  20++09D5 3A DF 0A         ld a, (historyBlock.isFile)
  20++09D8 A7             and a
  20++09D9 C2 C8 1A       jp nz, Fetcher.fetchFromFS
  21++09DC C3 7B 1A         jp Fetcher.fetchFromNet
  22++09DF
  23++09DF 20 20 20 20  .msg db "    Loading resource! Please wait! It will be here soon!", 0
  23++09E3 4C 6F 61 64
  23++09E7 69 6E 67 20
  23++09EB 72 65 73 6F
  23++09EF 75 72 63 65
  23++09F3 21 20 50 6C
  23++09F7 65 61 73 65
  23++09FB 20 77 61 69
  23++09FF 74 21 20 49
  23++0A03 74 20 77 69
  23++0A07 6C 6C 20 62
  23++0A0B 65 20 68 65
  23++0A0F 72 65 20 73
  23++0A13 6F 6F 6E 21
  23++0A17 00
  24++0A18
  25++0A18              home:
  26++0A18 21 C4 0A         ld hl, homePage
  27++0A1B              ; HL - gopher row
  28++0A1B              navigate:
  29++0A1B 54 5D            ld de, hl
  30++0A1D CD F4 18         call UrlEncoder.isValidGopherRow
  31++0A20 30 9E            jr nc, load ; Not valid - reload last
  32++0A22 62 6B            ld hl, de
  33++0A24 E5               push hl
  34++0A25
  35++0A25 E5               push hl
  36++0A26 21 64 16 11      ld hl, HistoryEnd - HistoryRecord, de, HistoryEnd, bc,  HistoryRecord * total
  36++0A2A B2 18 01 86
  36++0A2E 0B
  36++0A2F ED B8          lddr
  37++0A31
  38++0A31 ED 5B 25 0D      ld de, (Render.position), (historyBlock.position + HistoryRecord), de
  38++0A35 ED 53 73 0F
  39++0A39                  ; Clean up struct
  40++0A39 AF               xor a
  40++0A3A 21 DF 0A 11    ld hl, historyBlock, de, historyBlock + 1, bc, historyBlockSize - 1, (hl), a
  40++0A3E E0 0A 01 4D
  40++0A42 02 77
  40++0A44 ED B0          ldir
  41++0A46 E1               pop hl
  42++0A47
  43++0A47                  ; Fill record
  44++0A47 54 5D            ld de, hl
  45++0A49 CD B3 18         call UrlEncoder.isFile
  46++0A4C EB               ex hl, de
  47++0A4D 11 DF 0A         ld de, historyBlock
  48++0A50 12               ld (de), a
  48++0A51 13             inc de
  49++0A52 7E               ld a, (hl)
  49++0A53 E5 D5          push hl, de
  49++0A55 CD C6 03       call Render.getIcon
  49++0A58 D1 E1          pop de, hl
  50++0A5A 12               ld (de), a
  50++0A5B 13             inc de
  51++0A5C 3E 09            ld a, 9
  52++0A5E
  53++0A5E                  IFDEF MSX
  54++0A5E 01 FF 00         	ld bc, #ff
  55++0A61                  ELSE
  56++0A61 ~                	ld bc, #ff
  57++0A61                  ENDIF
  58++0A61
  59++0A61 ED B1            cpir
  60++0A63              .locatorCopy
  61++0A63 7E               ld a, (hl)
  61++0A64 FE 09          cp 9
  61++0A66 28 05          jr z, 1f
  62++0A68 12               ld (de), a
  62++0A69 23 13          inc hl, de
  63++0A6B 18 F6            jr .locatorCopy
  64++0A6D              1
  65++0A6D 23               inc hl
  65++0A6E AF             xor a
  65++0A6F 12             ld (de), a
  66++0A70 11 E0 0B         ld de, historyBlock.host
  67++0A73              .hostCopy
  68++0A73 7E               ld a, (hl)
  68++0A74 FE 09          cp 9
  68++0A76 28 05          jr z, 1f
  69++0A78 12               ld (de), a
  69++0A79 23 13          inc hl, de
  70++0A7B 18 F6            jr .hostCopy
  71++0A7D              1
  72++0A7D 23               inc hl
  72++0A7E AF             xor a
  72++0A7F 12             ld (de), a
  73++0A80 11 20 0C         ld de, historyBlock.port
  74++0A83              .portCopy
  75++0A83 7E               ld a, (hl)
  76++0A84 FE 09            cp 9
  76++0A86 28 11          jr z, 1f
  77++0A88 FE 0D            cp 13
  77++0A8A 28 0D          jr z, 1f
  78++0A8C FE 0A            cp 10
  78++0A8E 28 09          jr z, 1f
  79++0A90 FE 00            cp 0
  79++0A92 28 05          jr z, 1f
  80++0A94 12               ld (de), a
  80++0A95 23 13          inc hl, de
  81++0A97 18 EA            jr .portCopy
  82++0A99 AF           1   xor a
  82++0A9A 12             ld (de), a
  83++0A9B 21 DD 08 11      ld hl, DialogBox.inputBuffer, de, historyBlock.search, bc, #ff
  83++0A9F 26 0C 01 FF
  83++0AA3 00
  83++0AA4 ED B0          ldir
  84++0AA6 11 00 00 ED      ld de, 0, (historyBlock.position), de
  84++0AAA 53 25 0D
  85++0AAD E1               pop hl
  86++0AAE 3A DE 0A         ld a, (depth)
  86++0AB1 FE 05          cp total
  86++0AB3 30 04          jr nc, 1f
  87++0AB5 3C               inc a
  87++0AB6 32 DE 0A       ld (depth), a
  88++0AB9              1
  89++0AB9 3A E0 0A         ld a,(historyBlock.mediaType)
  89++0ABC FE 01          cp MIME_DOWNLOAD
  89++0ABE CA 27 22       jp z, Gopher.download
  90++0AC1
  91++0AC1                  ifdef GS
  92++0AC1 ~                cp MIME_MOD
  92++0AC1 ~              jp z, Gopher.loadMod
  93++0AC1                  endif
  94++0AC1
  95++0AC1 C3 C0 09         jp load
  96++0AC4
  97++0AC4              homePage:
  98++0AC4              	IFDEF MSX
  99++0AC4 31 48 6F 6D      	db "1Home", TAB, "index.gph"
  99++0AC8 65 09 69 6E
  99++0ACC 64 65 78 2E
  99++0AD0 67 70 68
 100++0AD3 09 66 69 6C      	db TAB, "file", TAB, "70", CR, LF, 0
 100++0AD7 65 09 37 30
 100++0ADB 0D 0A 00
 101++0ADE                  ELSE
 102++0ADE ~                	db "1Home", TAB, "browser/index.gph"
 103++0ADE ~                	db TAB, "file", TAB, "70", CR, LF, 0
 104++0ADE                  ENDIF
 105++0ADE                  endmodule
# file closed: gopher/engine/history/controler.asm
   2++0ADE                  include "model.asm"
# file opened: gopher/engine/history/model.asm
   1++0ADE              total   equ 5
   2++0ADE 00           depth   db 0
   3++0ADF
   4++0ADF              historyBlock:
   5++0ADF 00           .isFile    db  0
   6++0AE0 00           .mediaType db  0
   7++0AE1 00 00 00...  .locator   ds  #ff
   8++0BE0 00 00 00...  .host      ds  64
   9++0C20 00 00 00...  .port      ds  6
  10++0C26 00 00 00...  .search    ds  #ff
  11++0D25 00 00        .position  dw  #0000    ;position
  12++0D27
  13++0D27 00 00 00 00      db 0,0,0,0,0,0  ;cursor_position page_offset
  13++0D2B 00 00
  14++0D2D
  15++0D2D              historyBlockSize = $ - historyBlock
  16++0D2D
  17++0D2D              HistoryRecord EQU $ - historyBlock
  18++0D2D                  dup total
  19++0D2D 00 00 00... >    ds HistoryRecord
  19++0F7B 00 00 00... >    ds HistoryRecord
  19++11C9 00 00 00... >    ds HistoryRecord
  19++1417 00 00 00... >    ds HistoryRecord
  19++1665 00 00 00... >    ds HistoryRecord
  20++18B3                  edup
  21++18B3              HistoryEnd equ $ - 1
  22++18B3
# file closed: gopher/engine/history/model.asm
# file closed: gopher/engine/history/index.asm
  10+ 18B3                  include "gopher/engine/urlencoder.asm"
# file opened: gopher/engine/urlencoder.asm
   1++18B3                  MODULE UrlEncoder
   2++18B3              ; HL - pointer to line in gopher page
   3++18B3              ; C - flag set when it's file
   4++18B3              isFile:
   5++18B3              .findServerLoop
   6++18B3 7E               ld a, (hl)
   6++18B4 A7             and a
   6++18B5 28 3B          jr z, .notFile
   6++18B7 23             inc hl
   7++18B8 FE 0D            cp 13
   7++18BA 28 36          jr z, .notFile
   8++18BC FE 09            cp 9
   8++18BE 28 02          jr z, .skipPath
   9++18C0 18 F1            jr .findServerLoop
  10++18C2              .skipPath
  11++18C2 7E               ld a, (hl)
  11++18C3 A7             and a
  11++18C4 28 2C          jr z, .notFile
  11++18C6 23             inc hl
  12++18C7 FE 0D            cp 13
  12++18C9 28 27          jr z, .notFile
  13++18CB FE 09            cp 9
  13++18CD 28 02          jr z, .compareServer
  14++18CF 18 F1            jr .skipPath
  15++18D1              .compareServer
  16++18D1 7E               ld a, (hl)
  16++18D2 FE 66          cp "f"
  16++18D4 20 1C          jr nz, .notFile
  16++18D6 23             inc hl
  17++18D7 7E               ld a, (hl)
  17++18D8 FE 69          cp "i"
  17++18DA 20 16          jr nz, .notFile
  17++18DC 23             inc hl
  18++18DD 7E               ld a, (hl)
  18++18DE FE 6C          cp "l"
  18++18E0 20 10          jr nz, .notFile
  18++18E2 23             inc hl
  19++18E3 7E               ld a, (hl)
  19++18E4 FE 65          cp "e"
  19++18E6 20 0A          jr nz, .notFile
  19++18E8 23             inc hl
  20++18E9 7E               ld a, (hl)
  20++18EA FE 09          cp 9
  20++18EC 20 04          jr nz, .notFile
  20++18EE 23             inc hl
  21++18EF 3E 01            ld a, 1
  22++18F1 C9               ret
  23++18F2              .notFile
  24++18F2 AF               xor a
  25++18F3 C9               ret
  26++18F4
  27++18F4              ; Is enough fields to encode
  28++18F4              ; HL - pointer to line in gopher page
  29++18F4              ; C - flag set when there is enough fields
  30++18F4              isValidGopherRow:
  31++18F4 7E               ld a, (hl)
  31++18F5 A7             and a
  31++18F6 28 FA          jr z, isFile.notFile
  31++18F8 23             inc hl
  32++18F9 FE 0D            cp 13
  32++18FB 28 F5          jr z, isFile.notFile
  33++18FD FE 09            cp 9
  33++18FF 28 02          jr z, .skipPath
  34++1901 18 F1            jr isValidGopherRow
  35++1903              .skipPath
  36++1903 7E               ld a, (hl)
  36++1904 A7             and a
  36++1905 28 EB          jr z, isFile.notFile
  36++1907 23             inc hl
  37++1908 FE 0D            cp 13
  37++190A 28 E6          jr z, isFile.notFile
  38++190C FE 09            cp 9
  38++190E 28 02          jr z, .skipHost
  39++1910 18 F1            jr .skipPath
  40++1912              .skipHost
  41++1912 7E               ld a, (hl)
  41++1913 A7             and a
  41++1914 28 DC          jr z, isFile.notFile
  41++1916 23             inc hl
  42++1917 FE 0D            cp 13
  42++1919 28 D7          jr z, isFile.notFile
  43++191B FE 09            cp 9
  43++191D 28 02           jr z, .isValid
  44++191F 18 F1            jr .skipHost
  45++1921              .isValid:
  46++1921 37               scf
  47++1922 C9               ret
  48++1923
  49++1923              extractPath:
  50++1923 21 E1 0A 11      ld hl, historyBlock.locator, de, nameBuffer, bc, #ff
  50++1927 3B 19 01 FF
  50++192B 00
  50++192C ED B0          ldir
  51++192E C9               ret
  52++192F
  53++192F              extractHostName:
  54++192F 21 E0 0B 11      ld hl, historyBlock.host, de, hostName, bc, 64
  54++1933 3B 1A 01 40
  54++1937 00
  54++1938 ED B0          ldir
  55++193A C9               ret
  56++193B
  57++193B                  ENDMODULE
  58++193B
  59++193B 00 00 00...  nameBuffer ds #ff, 0
  60++1A3A
  61++1A3A 00                    db 0
  62++1A3B 00 00 00...  hostName ds 64
# file closed: gopher/engine/urlencoder.asm
  11+ 1A7B                  include "gopher/engine/fetcher.asm"
# file opened: gopher/engine/fetcher.asm
   1++1A7B                  MODULE Fetcher
   2++1A7B
   3++1A7B              fetchFromNet:
   4++1A7B
   5++1A7B              	IFDEF MSX
   6++1A7B CD A7 21         	call Gopher.makeRequest
   6++1A7E 20 06          jr nz, .error
   7++1A80                  ELSE
   8++1A80 ~                	call Gopher.makeRequest
   8++1A80 ~              jr c, .error
   9++1A80                  ENDIF
  10++1A80
  11++1A80 CD DE 21         call Gopher.loadBuffer
  12++1A83 C3 EB 1A         jp MediaProcessor.processResource
  13++1A86              .error
  14++1A86 21 8F 1A         ld hl, .err
  14++1A89 CD 2D 09       call DialogBox.msgBox
  15++1A8C C3 A9 09         jp History.back
  16++1A8F
  17++1A8F 44 6F 63 75  .err db "Document fetch error! Check your connection or hostname!", 0
  17++1A93 6D 65 6E 74
  17++1A97 20 66 65 74
  17++1A9B 63 68 20 65
  17++1A9F 72 72 6F 72
  17++1AA3 21 20 43 68
  17++1AA7 65 63 6B 20
  17++1AAB 79 6F 75 72
  17++1AAF 20 63 6F 6E
  17++1AB3 6E 65 63 74
  17++1AB7 69 6F 6E 20
  17++1ABB 6F 72 20 68
  17++1ABF 6F 73 74 6E
  17++1AC3 61 6D 65 21
  17++1AC7 00
  18++1AC8
  19++1AC8
  20++1AC8              fetchFromFS:
  21++1AC8 CD 23 19         call UrlEncoder.extractPath
  22++1ACB              loadFile
  23++1ACB              	IFDEF MSX
  24++1ACB 11 3B 19 3E      ld de, nameBuffer, a, FMODE_NO_WRITE
  24++1ACF 01
  25++1AD0 CD 64 09         call Dos.fopen
  26++1AD3 78 32 EA 1A      ld a, b, (.fp), a
  27++1AD7 11 F9 2F 2A      ld de, outputBuffer, hl, (ramtop)
  27++1ADB F7 2F
  28++1ADD CD 78 09         call Dos.fread
  29++1AE0 3A EA 1A 47      ld a, (.fp), b, a
  30++1AE4 CD 6E 09         call Dos.fclose
  31++1AE7 C3 EB 1A         jp MediaProcessor.processResource
  32++1AEA 00           .fp db 0
  33++1AEB              	ELSE
  34++1AEB ~                ld hl, nameBuffer
  35++1AEB ~                call Dos.loadBuffer
  36++1AEB ~                jp MediaProcessor.processResource
  37++1AEB              	ENDIF
  38++1AEB                  ENDMODULE
# file closed: gopher/engine/fetcher.asm
  12+ 1AEB                  include "gopher/engine/media-processor.asm"
# file opened: gopher/engine/media-processor.asm
   1++1AEB                  MODULE MediaProcessor
   2++1AEB              processResource:
   3++1AEB CD 2F 19         call UrlEncoder.extractHostName
   4++1AEE 3A E0 0A         ld a, (historyBlock.mediaType)
   5++1AF1 FE 05            cp MIME_MUSIC
   5++1AF3 28 13          jr z, processPT
   6++1AF5 FE 02            cp MIME_LINK
   6++1AF7 28 15          jr z, processPage
   7++1AF9 FE 06            cp MIME_INPUT
   7++1AFB 28 11          jr z, processPage
   8++1AFD FE 04            cp MIME_IMAGE
   8++1AFF CA 41 25       jp z, ScreenViewer.display
   9++1B02              	ifdef GS
  10++1B02 ~                cp MIME_MOD
  10++1B02 ~              jr z, processMOD
  11++1B02              	endif
  12++1B02              ; Fallback to plain text
  13++1B02              processText:
  14++1B02 CD A5 07         call Render.renderPlainTextScreen
  15++1B05 C3 ED 07         jp   Render.plainTextLoop
  16++1B08
  17++1B08              processPT:
  18++1B08 CD 65 26         call VortexProcessor.play
  19++1B0B C3 A9 09         jp History.back
  20++1B0E
  21++1B0E                  ifdef GS
  22++1B0E ~            processMOD:
  23++1B0E ~                call ModProcessor.play
  24++1B0E ~                jp History.back
  25++1B0E              	endif
  26++1B0E
  27++1B0E              processPage:
  28++1B0E 3A 82 08         ld a, (Render.play_next)
  28++1B11 A7             and a
  28++1B12 20 06          jr nz, .playNext
  29++1B14 CD FE 05         call Render.renderGopherScreen
  30++1B17 C3 4D 06         jp   Render.workLoop
  31++1B1A              .playNext
  32++1B1A 21 27 0D         ld hl, Render.cursor_position
  33++1B1D 34               inc (hl)
  34++1B1E CD FE 05         call Render.renderGopherScreen
  35++1B21 C3 37 06         jp Render.checkBorder
  36++1B24                  ENDMODULE
# file closed: gopher/engine/media-processor.asm
  13+ 1B24                  include "drivers/index.asm"
# file opened: drivers/index.asm
   1++1B24                  IFDEF UNO
   2++1B24 ~                	include "uart-uno.asm"
   3++1B24                  ENDIF
   4++1B24
   5++1B24                  IFDEF UNOUART
   6++1B24 ~                	include "uart-uno.asm"
   7++1B24                  ENDIF
   8++1B24
   9++1B24                  IFDEF MB03
  10++1B24 ~                	include "uart-mb03.asm"
  11++1B24                  ENDIF
  12++1B24
  13++1B24                  IFDEF AY
  14++1B24 ~                	include "uart-ay.asm"
  15++1B24                  ENDIF
  16++1B24
  17++1B24                  IFDEF ZW
  18++1B24 ~                	include "uart-zxwifi.asm"
  19++1B24                  ENDIF
  20++1B24
  21++1B24              	include "utils.asm"
# file opened: drivers/utils.asm
   1++1B24              ;;; Macroses!!!!
   2++1B24                  MACRO EspSend Text
   3++1B24 ~                ld hl, .txtB
   4++1B24 ~                ld e, (.txtE - .txtB)
   5++1B24 ~                call espSend
   6++1B24 ~                jr .txtE
   7++1B24 ~            .txtB
   8++1B24 ~                db Text
   9++1B24 ~            .txtE
  10++1B24                  ENDM
  11++1B24
  12++1B24                  MACRO EspCmd Text
  13++1B24 ~                ld hl, .txtB
  14++1B24 ~                ld e, (.txtE - .txtB)
  15++1B24 ~                call espSend
  16++1B24 ~                jr .txtE
  17++1B24 ~            .txtB
  18++1B24 ~                db Text
  19++1B24 ~                db 13, 10
  20++1B24 ~            .txtE
  21++1B24                  ENDM
  22++1B24
  23++1B24                  MACRO EspCmdOkErr text
  24++1B24 ~                EspCmd text
  25++1B24 ~                call checkOkErr
  26++1B24                  ENDM
  27++1B24
  28++1B24              ; IN DE - string pointer
  29++1B24              ; OUT HL - string len
  30++1B24              strLen:
  31++1B24 21 00 00         ld hl, 0
  32++1B27              .loop
  33++1B27 1A               ld a, (de)
  33++1B28 A7             and a
  33++1B29 C8             ret z
  34++1B2A 13 23            inc de, hl
  35++1B2C 18 F9            jr .loop
# file closed: drivers/utils.asm
  22++1B2E
  23++1B2E              	IFDEF UARTATM
  24++1B2E ~            		include "uart-atm.asm"
  25++1B2E              	ENDIF
  26++1B2E
  27++1B2E              	IFDEF UARTEVO
  28++1B2E ~            		include "uart-evo.asm"
  29++1B2E                  ENDIF
  30++1B2E
  31++1B2E              	IFDEF NEDONET
  32++1B2E ~            		include "nedowifi.asm"
  33++1B2E              	ELSE
  34++1B2E              	IFNDEF MSX
  35++1B2E ~            		include "wifi.asm"
  36++1B2E              	ENDIF
  37++1B2E              	ENDIF
  38++1B2E
  39++1B2E                  IFDEF NEDOOS
  40++1B2E ~                	include "rtc-nos.asm"
  41++1B2E                  ENDIF
  42++1B2E
  43++1B2E
  44++1B2E                  IFDEF SMUCRTC
  45++1B2E ~                	include "rtc-smuc.asm"
  46++1B2E                  ENDIF
  47++1B2E
  48++1B2E              	IFDEF MSX
  49++1B2E                      include "drivers/unapi/unapi.asm"
# file opened: ./drivers/unapi/unapi.asm
   1++1B2E                  module UnApi
   2++1B2E              EXTBIOS = #FFCA
   3++1B2E              TPASLOT1 = #F342
   4++1B2E              MAPPER = #0402
   5++1B2E              ARG = #F847
   6++1B2E              DISCOVER = #2222
   7++1B2E              ENABLE_SLOT = #0024
   8++1B2E              TPA_SLOT_1 = #F342
   9++1B2E
  10++1B2E              preinit:
  11++1B2E 11 02 04         ld de, MAPPER
  12++1B31 AF               xor a
  13++1B32 CD CA FF         call EXTBIOS
  14++1B35 B7               or a
  15++1B36 28 13            jr z, .noMapper
  16++1B38
  17++1B38 01 1E 00         ld bc, 30 ; skip all_segs mapper
  18++1B3B 09               add hl, bc
  19++1B3C 11 D1 1B         ld de, put_p1 ; replace direct routines
  20++1B3F 0E 06            ld c, 6
  21++1B41 ED B0            ldir
  22++1B43
  23++1B43 CD D4 1B         call get_p1
  24++1B46 32 D7 1B         ld (tpa_seg_1), a
  25++1B49 B7               or a
  26++1B4A C9               ret
  27++1B4B              .noMapper
  28++1B4B 37               scf
  29++1B4C C9               ret
  30++1B4D
  31++1B4D              ; HL - string to implementation
  32++1B4D              initApi:
  33++1B4D 11 47 F8         ld de, ARG
  34++1B50 01 0F 00         ld bc, 15
  35++1B53 ED B0            ldir
  36++1B55              .copied
  37++1B55 AF               xor a
  38++1B56 12               ld (de), a
  39++1B57 47               ld b, a
  40++1B58 11 22 22         ld de, DISCOVER
  41++1B5B CD CA FF         call EXTBIOS
  42++1B5E 78               ld a, b
  43++1B5F B7               or a
  44++1B60 32 91 1B         ld (.num + 1), a
  45++1B63 C8               ret z
  46++1B64
  47++1B64 3E 01            ld a, 1 ; First implementation
  48++1B66 11 22 22         ld de, DISCOVER
  49++1B69 CD CA FF         call EXTBIOS
  50++1B6C
  51++1B6C 22 B1 1B         ld (unapiCall + 1), hl ; Store address
  52++1B6F 4F               ld c, a
  53++1B70 7C               ld a, h
  54++1B71 FE C0            cp #c0
  55++1B73 79               ld a, c
  56++1B74 38 07            jr c, .noP3
  57++1B76
  58++1B76 3E C9            ld a, #c9
  59++1B78 32 93 1B         ld (setUnApi), a
  60++1B7B 18 12            jr .okSet
  61++1B7D              .noP3
  62++1B7D 32 9D 1B         ld (unApiSlot + 1), a
  63++1B80 78               ld a, b
  64++1B81 FE FF            cp #ff
  65++1B83 20 07            jr nz, .noRom
  66++1B85
  67++1B85 3E C9            ld a, #c9
  68++1B87 32 A3 1B         ld (unApiSeg), a
  69++1B8A 18 03            jr .okSet
  70++1B8C              .noRom
  71++1B8C 32 A4 1B         ld (unApiSeg + 1), a
  72++1B8F              .okSet
  73++1B8F 37               scf
  74++1B90              .num
  75++1B90 3E 00            ld a, 0
  76++1B92 C9               ret
  77++1B93
  78++1B93              setUnApi:
  79++1B93 3A D8 1B         ld a, (unapi_is_set)
  80++1B96 B7               or a
  81++1B97 C0               ret nz
  82++1B98 3D               dec a
  83++1B99 32 D8 1B         ld (unapi_is_set), a
  84++1B9C              unApiSlot:
  85++1B9C 3E 00            ld a, 0
  86++1B9E 26 40            ld h, #40
  87++1BA0 CD 24 00         call ENABLE_SLOT
  88++1BA3              unApiSeg
  89++1BA3 3E 00            ld a, 0
  90++1BA5 C3 D1 1B         jp put_p1
  91++1BA8
  92++1BA8              callUnApi:
  93++1BA8 08               ex af, af'
  94++1BA9 D9               exx
  95++1BAA CD 93 1B         call setUnApi
  96++1BAD FB               ei
  97++1BAE 08               ex af, af'
  98++1BAF D9               exx
  99++1BB0              unapiCall:
 100++1BB0 C3 00 00         jp 0
 101++1BB3
 102++1BB3              tpaUnApiCall:
 103++1BB3 CD A8 1B         call callUnApi
 104++1BB6              exit:
 105++1BB6 F5 C5 D5 E5      push af, bc, de, hl
 106++1BBA AF               xor a
 107++1BBB 32 D8 1B         ld (unapi_is_set), a
 108++1BBE 3A 42 F3         ld a, (TPA_SLOT_1)
 109++1BC1 26 40            ld h, #40
 110++1BC3 CD 24 00         call ENABLE_SLOT
 111++1BC6 3A D7 1B         ld a, (tpa_seg_1)
 112++1BC9 CD D1 1B         call put_p1
 113++1BCC E1 D1 C1 F1      pop hl, de, bc, af
 114++1BD0 C9               ret
 115++1BD1
 116++1BD1              put_p1:
 117++1BD1 D3 FE            out (#fe), a
 118++1BD3 C9               ret
 119++1BD4              get_p1:
 120++1BD4 DB FE            in a, (#fe)
 121++1BD6 C9               ret
 122++1BD7
 123++1BD7 00           tpa_seg_1 db 0
 124++1BD8 00           unapi_is_set db 0
 125++1BD9                  endmodule
# file closed: ./drivers/unapi/unapi.asm
  50++1BD9                  	include "drivers/unapi/tcp.asm"
# file opened: ./drivers/unapi/tcp.asm
   1++1BD9              ;;; TPA SAFE TcpIP operations
   2++1BD9                  module TcpIP
   3++1BD9              START_RESOLVE = 6
   4++1BD9              GET_DNS_RESULT = 7
   5++1BD9              TCP_WAIT = 29
   6++1BD9
   7++1BD9              OPEN_TCP = 13
   8++1BD9              CLOSE_TCP = 14
   9++1BD9              ABORT_TCP = 15
  10++1BD9              STATE_TCP = 16
  11++1BD9              SEND_TCP = 17
  12++1BD9              RECV_TCP = 18
  13++1BD9
  14++1BD9              ; C - init successful
  15++1BD9              ; Closes all connections
  16++1BD9              init:
  17++1BD9 CD 2E 1B         call UnApi.preinit
  18++1BDC 21 D2 20         ld hl, api
  19++1BDF CD 4D 1B         call UnApi.initApi
  20++1BE2 D0               ret nc ; If error
  21++1BE3 CD 86 1C         call closeAll
  22++1BE6 37               scf
  23++1BE7 C9               ret
  24++1BE8
  25++1BE8
  26++1BE8              ; HL - domain string
  27++1BE8              ; C - success flag
  28++1BE8              ; L.H.E.D. - IP addr(if no error)
  29++1BE8              resolveIp:
  30++1BE8 11 92 1C         ld de, dnsbuff
  31++1BEB              .loop
  32++1BEB 7E               ld a, (hl)
  33++1BEC 12               ld (de), a
  34++1BED 23               inc hl
  35++1BEE 13               inc de
  36++1BEF A7               and a
  37++1BF0 20 F9            jr nz, .loop
  38++1BF2 12               ld (de), a
  39++1BF3
  40++1BF3 21 92 1C         ld hl, dnsbuff
  41++1BF6 3E 06            ld a, START_RESOLVE
  42++1BF8 06 00            ld b, 0
  43++1BFA CD B3 1B         call UnApi.tpaUnApiCall
  44++1BFD
  45++1BFD 3E 1D            ld a, TCP_WAIT
  46++1BFF CD B3 1B         call UnApi.tpaUnApiCall
  47++1C02              .resolveLoop
  48++1C02 3E 07            ld a, GET_DNS_RESULT
  49++1C04 06 01            ld b, 1
  50++1C06 CD B3 1B         call UnApi.tpaUnApiCall
  51++1C09 A7               and a
  51++1C0A C2 14 1C       jp nz, .err
  52++1C0D 78               ld a, b
  53++1C0E FE 02            cp 2
  53++1C10 20 F0          jr nz, .resolveLoop
  54++1C12              .fin
  55++1C12 37               scf
  56++1C13 C9               ret
  57++1C14              .err
  58++1C14 B7               or a
  59++1C15 C9               ret
  60++1C16
  61++1C16              ; L.H.E.D - IP addr
  62++1C16              ; BC - port
  63++1C16              ; Output:
  64++1C16              ; NZ - error flag
  65++1C16              ; A - error code
  66++1C16              ; B - socket id
  67++1C16              openTcp:
  68++1C16 22 46 1C         ld (.ip), hl
  69++1C19 ED 53 48 1C      ld (.ip + 2), de
  70++1C1D ED 43 4A 1C      ld (.port), bc
  71++1C21 21 46 1C         ld hl, .buff
  72++1C24 3E 0D            ld a, OPEN_TCP
  73++1C26 CD B3 1B         call UnApi.tpaUnApiCall
  74++1C29 A7               and a
  74++1C2A C0             ret nz
  75++1C2B
  76++1C2B 78               ld a, b
  77++1C2C 32 51 1C         ld (.socket), a
  78++1C2F              .establishWait
  79++1C2F CD 8D 1C         call TcpIP.wait
  80++1C32
  81++1C32 3A 51 1C         ld a, (.socket)
  82++1C35 47               ld b, a
  83++1C36 CD 52 1C         call TcpIP.stateTcp
  84++1C39
  85++1C39 A7               and a
  86++1C3A C0               ret nz
  87++1C3B
  88++1C3B 78               ld a, b
  89++1C3C FE 04            cp 4
  90++1C3E 20 EF            jr nz, .establishWait
  91++1C40
  92++1C40 3A 51 1C         ld a, (.socket)
  93++1C43 47               ld b, a
  94++1C44 AF               xor a
  95++1C45 C9               ret
  96++1C46              .buff
  97++1C46 00 00 00 00  .ip        ds 4
  98++1C4A 00 00        .port      dw 0
  99++1C4C FF FF        .localPort dw #ffff
 100++1C4E 00 00        .timeout   dw 0
 101++1C50 00           .flags     db 0
 102++1C51 00           .socket    db 0
 103++1C52
 104++1C52              ; A - socket
 105++1C52              ; Output:
 106++1C52              ; B - connection state
 107++1C52              ; HL - bytes avail
 108++1C52              ; IX - free bytes in output buffer
 109++1C52              stateTcp:
 110++1C52 47               ld b, a
 111++1C53 21 00 00         ld hl, 0
 112++1C56 3E 10            ld a, STATE_TCP
 113++1C58 C3 B3 1B         jp UnApi.tpaUnApiCall
 114++1C5B
 115++1C5B
 116++1C5B              ; A - socket
 117++1C5B              ; DE - buffer
 118++1C5B              ; HL - data len
 119++1C5B              sendTCP:
 120++1C5B E5               push hl
 121++1C5C 44 4D            ld bc, hl
 122++1C5E EB               ex hl, de
 123++1C5F 11 D2 1C         ld de, tcpBuff
 124++1C62 ED B0            ldir
 125++1C64 E1               pop hl
 126++1C65 47               ld b, a
 127++1C66 11 D2 1C         ld de, tcpBuff
 128++1C69 0E 00            ld c, 0
 129++1C6B 3E 11            ld a, TcpIP.SEND_TCP
 130++1C6D C3 B3 1B         jp UnApi.tpaUnApiCall
 131++1C70
 132++1C70              ; A - socket
 133++1C70              ; HL - data len
 134++1C70              ; BC - actually received
 135++1C70              recvTCP:
 136++1C70 47               ld b, a
 137++1C71
 138++1C71              ; 512 Bytes buffer limit
 139++1C71 7C               ld a, h
 140++1C72 A7               and a
 141++1C73 28 02            jr z, .skip
 142++1C75 3E 01            ld a, 1
 143++1C77              .skip
 144++1C77 67               ld h, a
 145++1C78
 146++1C78 3E 12            ld a, RECV_TCP
 147++1C7A 11 D2 1C         ld de, tcpBuff
 148++1C7D C3 B3 1B         jp UnApi.tpaUnApiCall
 149++1C80
 150++1C80
 151++1C80              ; A - socket id
 152++1C80              closeTcp:
 153++1C80 47               ld b, a
 154++1C81 3E 0E            ld a, CLOSE_TCP
 155++1C83 C3 B3 1B         jp UnApi.tpaUnApiCall
 156++1C86
 157++1C86
 158++1C86              closeAll:
 159++1C86 3E 0E            ld a, CLOSE_TCP
 160++1C88 06 00            ld b, 0
 161++1C8A CD B3 1B         call UnApi.tpaUnApiCall
 162++1C8D              wait:
 163++1C8D 3E 1D            ld a, TCP_WAIT
 164++1C8F C3 B3 1B         jp UnApi.tpaUnApiCall
 165++1C92
 166++1C92 00 00 00...  dnsbuff ds 64
 167++1CD2 00 00 00...  tcpBuff ds 1024
 168++20D2
 169++20D2 54 43 50 2F  api  db "TCP/IP", 0
 169++20D6 49 50 00
 170++20D9                  endmodule
# file closed: ./drivers/unapi/tcp.asm
  51++20D9              		include "rtc-msx.asm"
# file opened: drivers/rtc-msx.asm
   1++20D9              ;clock driver MSX2
   2++20D9              	module Clock
   3++20D9                  define RTCreg 0xb4
   4++20D9                  define RTCdat 0xb5
   5++20D9                  define MODEreg 0x0d
   6++20D9
   7++20D9              readTime:
   8++20D9              ;I/O Ports
   9++20D9              ;Port 00B4h allows you to specify the RTC register (0-15) to access, and
  10++20D9              ;port 00B5h allows you to read or write data in the specified register. Bits 4 to 7 of these ports are not used.
  11++20D9              ;
  12++20D9              ;Block 0
  13++20D9              ;Register	Bit 3	Bit 2	Bit 1	Bit 0
  14++20D9              ;0	        Units counter for seconds
  15++20D9              ;1	        0	    Tens counter for seconds
  16++20D9              ;2	        Units counter for minutes
  17++20D9              ;3	        0	    Tens counter for minutes
  18++20D9              ;4	        Units counter for hours
  19++20D9              ;5	        0	    0	    Tens counter for hours
  20++20D9              ;
  21++20D9
  22++20D9 01 B4 00     	ld bc, 0xb4
  23++20DC 3E 0D        	ld a,0x0d
  24++20DE ED 79            out (c),a           ; Selecting MODE register
  25++20E0
  26++20E0 01 B5 00     	ld bc, 0xb5
  27++20E3 ED 78            in a, (c)           ; Reading MODE register
  28++20E5 E6 0C            and 12
  29++20E7 ED 79            out (c),a           ;Selecting BLOCK0
  30++20E9
  31++20E9              ; Seconds-----------------------------------------------------------------
  32++20E9 01 B4 00     	ld bc, 0xb4
  33++20EC 3E 00            ld a,0
  34++20EE ED 79            out (c),a           ;Selecting 0 register (Units counter for seconds)
  35++20F0
  36++20F0 01 B5 00         ld bc, 0xb5
  37++20F3 ED 78            in  a, (c)          ; Reading 0 register
  38++20F5 E6 0F            and 15
  39++20F7 5F               ld e,a
  40++20F8
  41++20F8 01 B4 00     	ld bc, 0xb4
  42++20FB 3E 01            ld a, 1
  43++20FD ED 79            out (c),a           ;Selecting 1 register (Tens counter for seconds)
  44++20FF
  45++20FF 01 B5 00         ld bc, 0xb5
  46++2102 ED 78            in  a, (c)          ; Reading 1 register
  47++2104 E6 07            and 7
  48++2106 FE 00            cp 0
  49++2108 CA 13 21         jp z,zerosecs
  50++210B 57               ld d,a
  51++210C AF               xor a
  52++210D              secCounter:
  53++210D C6 0A            add 10
  54++210F 15               dec d
  55++2110 C2 0D 21         jp nz,secCounter
  56++2113              zerosecs:
  57++2113 83               add e
  58++2114 32 97 2F     	ld (seconds),a
  59++2117              ; Minites-----------------------------------------------------------------
  60++2117 01 B4 00     	ld bc, 0xb4
  61++211A 3E 02            ld a,2
  62++211C ED 79            out (c),a           ;Selecting 2 register
  63++211E
  64++211E 01 B5 00         ld bc, 0xb5
  65++2121 ED 78            in  a, (c)          ; Reading 2 register
  66++2123 E6 0F            and 15
  67++2125 5F               ld e,a
  68++2126
  69++2126 01 B4 00     	ld bc, 0xb4
  70++2129 3E 03            ld a, 3
  71++212B ED 79            out (c),a           ;Selecting 3 register
  72++212D
  73++212D 01 B5 00         ld bc, 0xb5
  74++2130 ED 78            in  a, (c)          ; Reading 3 register
  75++2132 E6 07            and 7
  76++2134 FE 00            cp 0
  77++2136 CA 41 21         jp z,zerominutes
  78++2139 57               ld d,a
  79++213A AF               xor a
  80++213B              minCounter:
  81++213B C6 0A            add 10
  82++213D 15               dec d
  83++213E C2 3B 21         jp nz,minCounter
  84++2141              zerominutes:
  85++2141 83               add e
  86++2142 32 96 2F         ld (minutes),a
  87++2145              ; Hours-----------------------------------------------------------------
  88++2145
  89++2145 01 B4 00     	ld bc, 0xb4
  90++2148 3E 04            ld a,4
  91++214A ED 79            out (c),a          ;Selecting 4 register
  92++214C
  93++214C 01 B5 00         ld bc, 0xb5
  94++214F ED 78            in  a, (c)         ; Reading 4 register
  95++2151 E6 07            and 7
  96++2153 5F               ld e,a
  97++2154
  98++2154 01 B4 00     	ld bc, 0xb4
  99++2157 3E 05            ld a, 5
 100++2159 ED 79            out (c),a          ;Selecting 5 register
 101++215B
 102++215B 01 B5 00         ld bc, 0xb5
 103++215E ED 78            in  a, (c)         ; Reading 5 register
 104++2160 E6 03            and 3
 105++2162 FE 00            cp 0
 106++2164 CA 6F 21         jp z,zerohour
 107++2167 57               ld d,a
 108++2168 AF               xor a
 109++2169              hourCounter:
 110++2169 C6 0A            add 10
 111++216B 15               dec d
 112++216C C2 69 21         jp nz,hourCounter
 113++216F              zerohour:
 114++216F 83               add e
 115++2170 32 95 2F         ld (hours),a
 116++2173 C9             	ret
 117++2174                  endmodule
 118++2174
# file closed: drivers/rtc-msx.asm
  52++2174                  ELSE
  53++2174 ~            		include "proxy.asm"
  54++2174 ~            		include "memory.asm"
  55++2174              	ENDIF
  56++2174
  57++2174              	IFDEF GS
  58++2174 ~            		include "general-sound.asm"
  59++2174              	ENDIF
# file closed: drivers/index.asm
  14+ 2174                  include "gopher/msxgopher.asm"
# file opened: gopher/msxgopher.asm
   1++2174                  module Gopher
   2++2174              ; HL - gopher row
   3++2174              extractRequest:
   4++2174 21 E1 0A         ld hl, historyBlock.locator
   5++2177 11 42 23         ld de, requestbuffer
   6++217A              .loop
   7++217A 7E               ld a, (hl)
   8++217B 12               ld (de), a
   9++217C 23               inc hl
  10++217D 13               inc de
  11++217E FE 00            cp 0
  12++2180 28 02            jr z, .search
  13++2182 18 F6            jr .loop
  14++2184              .search
  15++2184 1B               dec de
  16++2185 3A E0 0A         ld a, (historyBlock.mediaType)
  17++2188 FE 06            cp MIME_INPUT
  18++218A 20 10            jr nz, .exit
  19++218C 21 26 0C         ld hl, historyBlock.search
  20++218F 3E 09            ld a, TAB
  21++2191 12               ld (de), a
  22++2192 13               inc de
  23++2193              .searchCopy
  24++2193 7E               ld a, (hl)
  25++2194 A7               and a
  25++2195 28 05          jr z, .exit
  26++2197 12               ld (de), a
  27++2198 23               inc hl
  27++2199 13             inc de
  28++219A 18 F7            jr .searchCopy
  29++219C              .exit
  30++219C 3E 0D            ld a, CR
  30++219E 12             ld (de), a
  30++219F 13             inc de
  31++21A0 3E 0A            ld a, LF
  31++21A2 12             ld (de), a
  31++21A3 13             inc de
  32++21A4 AF               xor a
  33++21A5 12               ld (de), a
  34++21A6 C9               ret
  35++21A7
  36++21A7
  37++21A7              makeRequest:
  38++21A7 CD 86 1C         call TcpIP.closeAll
  39++21AA CD 74 21         call extractRequest
  40++21AD 11 20 0C         ld de, historyBlock.port
  41++21B0 CD A4 02         call atohl
  42++21B3 22 C0 21         ld (.port + 1), hl
  43++21B6
  44++21B6 21 E0 0B         ld hl, historyBlock.host
  45++21B9 CD E8 1B         call TcpIP.resolveIp
  46++21BC D2 DC 21         jp nc, .error
  47++21BF              .port
  48++21BF 01 AF BE         ld bc, #beaf
  49++21C2 CD 16 1C         call TcpIP.openTcp
  50++21C5 C2 DC 21         jp nz, .error
  51++21C8
  52++21C8 78               ld a, b
  53++21C9 32 19 23         ld (socket), a
  54++21CC
  55++21CC 11 42 23         ld de, requestbuffer
  56++21CF D5               push de
  57++21D0 CD CB 02         call strlen
  58++21D3 D1               pop de
  59++21D4 3A 19 23         ld a, (socket)
  60++21D7 CD 5B 1C         call TcpIP.sendTCP
  61++21DA B7               or a
  62++21DB C9               ret
  63++21DC              .error
  64++21DC 37               scf
  65++21DD C9               ret
  66++21DE
  67++21DE              loadBuffer:
  68++21DE 21 F9 2F         ld hl, outputBuffer
  69++21E1 22 25 22         ld (.pointer), hl
  70++21E4              .loop
  71++21E4 3A 19 23         ld a, (socket)
  72++21E7 CD 52 1C         call TcpIP.stateTcp
  73++21EA A7               and a
  73++21EB C0             ret nz ; If there some error
  74++21EC 7C               ld a, h
  74++21ED B5             or l
  74++21EE 20 06          jr nz, .getPacket ; if there some data
  75++21F0 78               ld a, b
  75++21F1 FE 04          cp 4
  75++21F3 C0             ret nz ; If there no established status
  76++21F4 18 EE            jr .loop
  77++21F6              .getPacket
  78++21F6 21 00 04         ld hl, 1024
  79++21F9 3A 19 23         ld a, (socket)
  80++21FC CD 70 1C         call TcpIP.recvTCP
  81++21FF C5               push bc
  82++2200 2A 25 22             ld hl, (.pointer)
  83++2203 09                   add hl, bc
  83++2204 7C             ld a, h
  83++2205 FE C0          cp #c0
  83++2207 D2 1E 22       jp nc, .skiploop
  84++220A ED 5B 25 22          ld de, (.pointer), hl, TcpIP.tcpBuff
  84++220E 21 D2 1C
  85++2211 ED B0                ldir
  86++2213 C1               pop bc
  87++2214 2A 25 22         ld hl, (.pointer)
  88++2217 09               add hl, bc
  89++2218 22 25 22         ld (.pointer), hl
  90++221B C3 E4 21         jp .loop
  91++221E              .skiploop
  92++221E C1               pop bc
  93++221F CD 86 1C         call TcpIP.closeAll
  94++2222 C3 E4 21         jp .loop
  95++2225 F9 2F        .pointer dw outputBuffer
  96++2227
  97++2227              download:
  98++2227 11 E1 0A         ld de, historyBlock.locator
  99++222A 62 6B            ld hl, de
 100++222C              .findFileName
 101++222C 1A               ld a, (de)
 101++222D 13             inc de
 102++222E FE 2F            cp '/'
 102++2230 20 02          jr nz, .skip
 103++2232 62 6B            ld hl, de
 104++2234              .skip
 105++2234 A7               and a
 105++2235 20 F5          jr nz, .findFileName
 106++2237              .copy
 107++2237                  ;; HL - filename pointer
 108++2237 11 DD 08         ld de, DialogBox.inputBuffer
 109++223A              .copyFileName
 110++223A 7E               ld a, (hl)
 110++223B A7             and a
 110++223C 28 05          jr z, .finishCopy
 111++223E
 112++223E 12               ld (de), a
 112++223F 23 13          inc hl, de
 113++2241 18 F7            jr .copyFileName
 114++2243              .finishCopy
 115++2243 12               ld (de), a
 116++2244 CD 87 08         call DialogBox.inputBox.noclear
 117++2247 3A DD 08         ld a, (DialogBox.inputBuffer)
 117++224A A7             and a
 117++224B CA A9 09       jp z, History.back
 118++224E
 119++224E CD A7 21         call makeRequest
 119++2251 DA 86 1A       jp c, Fetcher.fetchFromNet.error
 120++2254
 121++2254 3E 02 06 00      ld a, FMODE_NO_READ, b, ATTR_NOTHING, de, DialogBox.inputBuffer
 121++2258 11 DD 08
 122++225B CD 69 09         call Dos.fcreate
 123++225E A7               and a
 123++225F 20 48          jr nz, .error
 124++2261 78               ld a, b
 124++2262 32 18 23       ld (.fp), a
 125++2265 21 F3 22         ld hl, .progress
 125++2268 CD 36 09       call DialogBox.msgNoWait
 126++226B              .loop
 127++226B 3A 19 23         ld a, (socket)
 128++226E CD 52 1C         call TcpIP.stateTcp
 129++2271 A7               and a
 129++2272 C2 9C 22       jp nz, .exit ; If there some error
 130++2275 7C               ld a, h
 130++2276 B5             or l
 130++2277 20 08          jr nz, .getPacket ; if there some data
 131++2279 78               ld a, b
 131++227A FE 04          cp 4
 131++227C C2 9C 22       jp nz, .exit ; If there no established status
 132++227F 18 EA            jr .loop
 133++2281              .getPacket
 134++2281 CD 1B 23         call pulsing
 135++2284 21 00 02         ld hl, 512
 136++2287 3A 19 23         ld a, (socket)
 137++228A CD 70 1C         call TcpIP.recvTCP
 138++228D 60 69 3A 18      ld hl, bc, a, (.fp), b, a, de, TcpIP.tcpBuff
 138++2291 23 47 11 D2
 138++2295 1C
 139++2296 CD 7D 09         call Dos.fwrite
 140++2299 C3 6B 22         jp .loop
 141++229C              .exit
 142++229C 3A 18 23 47      ld a, (.fp), b, a
 143++22A0 CD 6E 09         call Dos.fclose
 144++22A3 CD 86 1C         call TcpIP.closeAll
 145++22A6 C3 A9 09         jp History.back
 146++22A9              .error
 147++22A9 3A 18 23 47      ld a, (.fp), b, a
 148++22AD CD 6E 09         call Dos.fclose
 149++22B0 CD 86 1C         call TcpIP.closeAll
 150++22B3 21 BC 22         ld hl, .err
 151++22B6 CD 2D 09         call DialogBox.msgBox
 152++22B9 C3 A9 09         jp History.back
 153++22BC 4F 70 65 72  .err db "Operation failed! Sorry! Check filename or disk space!",0
 153++22C0 61 74 69 6F
 153++22C4 6E 20 66 61
 153++22C8 69 6C 65 64
 153++22CC 21 20 53 6F
 153++22D0 72 72 79 21
 153++22D4 20 43 68 65
 153++22D8 63 6B 20 66
 153++22DC 69 6C 65 6E
 153++22E0 61 6D 65 20
 153++22E4 6F 72 20 64
 153++22E8 69 73 6B 20
 153++22EC 73 70 61 63
 153++22F0 65 21 00
 154++22F3 44 6F 77 6E  .progress db "Downloading in progress! Wait a bit!", 0
 154++22F7 6C 6F 61 64
 154++22FB 69 6E 67 20
 154++22FF 69 6E 20 70
 154++2303 72 6F 67 72
 154++2307 65 73 73 21
 154++230B 20 57 61 69
 154++230F 74 20 61 20
 154++2313 62 69 74 21
 154++2317 00
 155++2318 00           .fp db 0
 156++2319
 157++2319 00           socket db 0
 158++231A 20           pulsator db " "
 159++231B              pulsing
 160++231B D5               push de
 161++231C 11 01 0B         ld de, #0B01
 161++231F CD 70 02       call TextMode.gotoXY
 162++2322 3A 1A 23         ld a, (pulsator)
 163++2325 FE 2A            cp '*'
 164++2327 CA 36 23         jp z, printasterix
 165++232A 3E 2A            ld a, '*'
 166++232C 32 1A 23         ld (pulsator),a
 167++232F 3E 20            ld a,' '
 168++2331 CD EC 01         call TextMode.putC
 169++2334 D1               pop de
 170++2335 C9               ret
 171++2336              printasterix
 172++2336 3E 20            ld a, ' '
 173++2338 32 1A 23         ld (pulsator),a
 174++233B 3E 2A            ld a,'*'
 175++233D CD EC 01         call TextMode.putC
 176++2340 D1               pop de
 177++2341 C9               ret
 178++2342
 179++2342 00 00 00...  requestbuffer ds #1ff
 180++2541                  endmodule
 181++2541
# file closed: gopher/msxgopher.asm
  15+ 2541                  include "screen/msxscreen.asm"
# file opened: screen/msxscreen.asm
   1++2541                  module ScreenViewer
   2++2541              PGT EQU 0		; начало таблицы шаблонов screen2
   3++2541              CT EQU #2000
   4++2541              display:
   5++2541
   6++2541 3E 02        	ld a,2			; screen2
   7++2543 CD 50 26     	call CHGMOD
   8++2546                  ;ld hl,MSX1paletteData
   9++2546              	;call set_palette_registre
  10++2546
  11++2546 21 F9 2F     	ld hl,outputBuffer
  12++2549 DD 21 F9 4F  	ld ix,outputBuffer + 0x2000
  13++254D
  14++254D 3E 03        	ld a,3			; 3 сегмента экрана
  15++254F              loop3:
  16++254F 08           	ex af,af'
  17++2550 E5           	push hl
  18++2551 0E 00        	ld c,0
  19++2553              loop256:
  20++2553 06 08        	ld b,8
  21++2555 E5           	push hl
  22++2556              loop8:
  23++2556 7E           	ld a,(hl)
  24++2557 DD 77 00     	ld (ix+0),a
  25++255A 11 00 01     	ld de,#0100
  26++255D 19           	add hl,de
  27++255E DD 23        	inc ix
  28++2560 10 F4        	djnz loop8
  29++2562 E1           	pop hl
  30++2563 23           	inc hl
  31++2564 0D           	dec c
  32++2565 20 EC        	jr nz,loop256
  33++2567 E1           	pop hl
  34++2568 11 00 08     	ld de,2048
  35++256B 19           	add hl,de
  36++256C 08           	ex af,af'
  37++256D 3D           	dec a
  38++256E 20 DF        	jr nz,loop3
  39++2570
  40++2570 21 F9 4F     	ld hl,outputBuffer + 0x2000
  41++2573 11 00 00     	ld de,PGT
  42++2576 01 00 18     	ld bc,6144
  43++2579 CD 4B 26     	call LDIRVM
  44++257C
  45++257C              	;jr keywait
  46++257C
  47++257C 01 00 03     	ld bc,768
  48++257F 21 F9 47     	ld hl,outputBuffer+6144
  49++2582 11 F9 4F     	ld de,outputBuffer + 0x2000
  50++2585              colorloop2:
  51++2585 C5           	push bc
  52++2586 06 08        	ld b,8
  53++2588 7E           	ld a,(hl)
  54++2589 CD B5 25     	call convertpalete
  55++258C              colorloop1:
  56++258C 12           	ld (de),a
  57++258D 13           	inc de
  58++258E 10 FC        	djnz colorloop1
  59++2590 23           	inc hl
  60++2591 C1           	pop bc
  61++2592 0B           	dec bc
  62++2593 78           	ld a,b
  63++2594 B1           	or c
  64++2595 20 EE        	jr nz,colorloop2
  65++2597
  66++2597 21 F9 4F     	ld hl,outputBuffer + 0x2000
  67++259A 11 00 20     	ld de,CT
  68++259D 01 00 18     	ld bc,6144
  69++25A0 CD 4B 26     	call LDIRVM
  70++25A3
  71++25A3              keywait:
  72++25A3 F7           	RST #30			; Читает один символ из буфера клавиатуры. Если буфер пуст,
  73++25A4 00           	db 0			; выводит курсор и ждет нажатия клавиши.
  74++25A5 9F 00         	dw #009F 		; CHGET A = код символа
  75++25A7
  76++25A7 AF           	xor a			; screen0
  77++25A8 CD 50 26     	call CHGMOD
  78++25AB CD 77 02         call TextMode.loadFont
  79++25AE CD 03 01         call TextMode.init
  80++25B1 C3 A9 09         jp History.back
  81++25B4 C9           	ret
  82++25B5              convertpalete:
  83++25B5 E5           	push hl
  84++25B6 D5           	push de
  85++25B7 C5           	push bc
  86++25B8 47           	ld b,a
  87++25B9 E6 07        	and #07
  88++25BB 21 55 26     	ld hl,colors0
  89++25BE CB 70        	bit 6,b
  90++25C0 28 03        	jr z,col0
  91++25C2 21 5D 26     	ld hl,colors1
  92++25C5              col0:
  93++25C5 16 00        	ld d,0
  94++25C7 5F           	ld e,a
  95++25C8 19           	add hl,de
  96++25C9 7E           	ld a,(hl)
  97++25CA A7           	and a
  98++25CB 07           	rlca
  99++25CC 07           	rlca
 100++25CD 07           	rlca
 101++25CE 07           	rlca
 102++25CF 4F           	ld c,a
 103++25D0 78           	ld a,b
 104++25D1 0F           	rrca
 105++25D2 0F           	rrca
 106++25D3 0F           	rrca
 107++25D4 E6 07        	and #07
 108++25D6 21 55 26     	ld hl,colors0
 109++25D9 CB 70        	bit 6,b
 110++25DB 28 03        	jr z,col00
 111++25DD 21 5D 26     	ld hl,colors1
 112++25E0              col00:
 113++25E0 16 00        	ld d,0
 114++25E2 5F           	ld e,a
 115++25E3 19           	add hl,de
 116++25E4 7E           	ld a,(hl)
 117++25E5 B1           	or c
 118++25E6 C1           	pop bc
 119++25E7 D1           	pop de
 120++25E8 E1           	pop hl
 121++25E9 C9           	ret
 122++25EA
 123++25EA              calcxy:
 124++25EA 7B           	ld a,e
 125++25EB E6 18        	and #18
 126++25ED F6 40        	or #40
 127++25EF 67           	ld h,a
 128++25F0 7B           	ld a,e
 129++25F1 E6 07        	and #07
 130++25F3 0F           	rrca
 131++25F4 0F           	rrca
 132++25F5 0F           	rrca
 133++25F6 82           	add a,d
 134++25F7 6F           	ld l,a
 135++25F8 C9           	ret
 136++25F9              ;-----------------------------------------------------------------------------------
 137++25F9              ; Routine to set colors palette MSX1 like
 138++25F9
 139++25F9              VDP_DW	equ	#00007
 140++25F9              RG16SAV	equ	#FFEF
 141++25F9
 142++25F9              MSX1palette:
 143++25F9 3A 07 00     	ld	a,(VDP_DW)
 144++25FC 4F           	ld	c,a		; C= CPU port connected to the VDP writing port #1
 145++25FD
 146++25FD AF           	xor	a		; Set color 0 ...
 147++25FE F3           	di
 148++25FF ED 79        	out	(c),a
 149++2601 32 EF FF     	ld	(RG16SAV),a
 150++2604 3E 90        	ld	a,#80+16	; ...into register 16 (+80h)
 151++2606 ED 79        	out	(c),a
 152++2608 FB           	ei
 153++2609
 154++2609 0C           	inc	c		; C= CPU port connected to the VDP writing port #2
 155++260A 06 1F        	ld	b,31
 156++260C 21 26 26     	ld	hl,MSX1paletteData
 157++260F ED B3        	otir
 158++2611 C9           	ret
 159++2612
 160++2612              set_palette_registre:
 161++2612 AF           	xor a
 162++2613 D3 99        	out (#99),a		; номер регистра цвета
 163++2615 3E 90        	ld a,#90		; reg 16(#10) +7бит=1(запись)
 164++2617 00           	nop
 165++2618 D3 99        	out (#99),a
 166++261A 3E 10        	ld a,16			; сколько регистров
 167++261C 0E 9A        	ld c,#9A		; Color Palette Register
 168++261E              set_palette_loop:
 169++261E ED A3        	outi			; SET RED BLUE
 170++2620 ED A3        	outi			; SET GREEN
 171++2622 3D           	dec a
 172++2623 20 F9        	jr nz, set_palette_loop
 173++2625 C9           	ret
 174++2626
 175++2626              MSX1paletteData:
 176++2626 00 00        	db	00h,0	; Color 0
 177++2628 00 00        	db	00h,0	; Color 1
 178++262A 11 05        	db	11h,5	; Color 2
 179++262C 33 06        	db	33h,6	; Color 3
 180++262E 26 02        	db	26h,2	; Color 4
 181++2630 37 03        	db	37h,3	; Color 5
 182++2632 52 02        	db	52h,2	; Color 6
 183++2634 27 06        	db	27h,6	; Color 7
 184++2636 62 02        	db	62h,2	; Color 8
 185++2638 63 03        	db	63h,3	; Color 9
 186++263A 52 05        	db	52h,5	; Color A
 187++263C 63 06        	db	63h,6	; Color B
 188++263E 11 04        	db	11h,4	; Color C
 189++2640 55 02        	db	55h,2	; Color D
 190++2642 55 05        	db	55h,5	; Color E
 191++2644 77 07        	db	77h,7	; Color F
 192++2646              ;----------------------------------------------------------------------------------
 193++2646
 194++2646              WRTVRM:
 195++2646 F7           	rst #30
 196++2647 00           	db 0
 197++2648 4D 00        	dw #004D
 198++264A C9           	ret
 199++264B              LDIRVM:				; копирует блок данных из RAM в VRAM
 200++264B F7           	RST #30
 201++264C 00           	db 0
 202++264D 5C 00        	dw #005C
 203++264F C9           	ret
 204++2650              CHGMOD:
 205++2650 F7           	rst #30
 206++2651 00           	db 0
 207++2652 5F 00        	dw #005F
 208++2654 C9           	ret
 209++2655
 210++2655              colors0:
 211++2655 01 04 08 0D  	db #01,#04,#08,13,#02,7,10,14
 211++2659 02 07 0A 0E
 212++265D              colors1:
 213++265D 01 05 09 0D  	db #01,#05,#09,13,#03,7,11,15
 213++2661 03 07 0B 0F
 214++2665                  endmodule
# file closed: screen/msxscreen.asm
  16+ 2665                  include "player/vortex-processor.asm"
# file opened: player/vortex-processor.asm
   1++2665                  MODULE VortexProcessor
   2++2665              	IFDEF MSX
   3++2665              play:
   4++2665 CD 96 09         call Console.peekC
   4++2668 A7             and a
   5++2669 20 FA            jr nz, play
   6++266B
   7++266B 21 90 26         ld hl, message
   7++266E CD 36 09       call DialogBox.msgNoWait
   8++2671
   9++2671 21 F9 2F         ld hl, outputBuffer
   9++2674 CD CF 26       call VTPL.INIT
  10++2677              .loop
  11++2677 76               halt
  11++2678 F3             di
  11++2679 CD 4A 2B       call VTPL.PLAY
  11++267C FB             ei
  12++267D CD 96 09         call Console.peekC
  12++2680 A7             and a
  12++2681 C2 86 26       jp nz, .stop
  13++2684 30 F1            jr nc, .loop
  14++2686              .stop
  15++2686 CD C3 26         call VTPL.MUTE
  16++2689              .wlp
  17++2689 CD 96 09         call Console.peekC
  17++268C A7             and a
  18++268D 20 FA            jr nz, .wlp
  19++268F C9               ret
  20++2690
  21++2690 50 72 65 73  message db "Press key to stop...", 0
  21++2694 73 20 6B 65
  21++2698 79 20 74 6F
  21++269C 20 73 74 6F
  21++26A0 70 2E 2E 2E
  21++26A4 00
  22++26A5                  ENDMODULE
  23++26A5                  include "msxplayer.asm"
# file opened: player/msxplayer.asm
   1++26A5              ;Vortex Tracker II v1.0 PT3 player for MSX
   2++26A5              ;Adapted by Alfonso D. C. aka Dioniso <dioniso072@yahoo.es>
   3++26A5              ;09-Jan-05
   4++26A5              ;From:
   5++26A5              ;Vortex Tracker II v1.0 PT3 player for ZX Spectrum
   6++26A5              ;(c)2004 S.V.Bulba <vorobey@mail.khstu.ru> http://bulba.at.kz
   7++26A5
   8++26A5              ;Release number
   9++26A5              Release: .equ '6'
  10++26A5
  11++26A5              ;Features
  12++26A5              ;--------
  13++26A5              ;-Can be compiled at any address (i.e. no need rounding .org
  14++26A5              ; address).
  15++26A5              ;-Variables (VARS) can be located at any address (not only after
  16++26A5              ;code block).
  17++26A5              ;-INIT subroutine detects module version and rightly generates
  18++26A5              ; both note and volume tables outside of code block (in VARS).
  19++26A5              ;-Two portamento (spc. command 3xxx) algorithms (depending of
  20++26A5              ; module version).
  21++26A5              ;-Any Tempo value are accepted (including Tempo=1 and Tempo=2).
  22++26A5              ;-Fully compatible with Ay_Emul PT3 player codes.
  23++26A5              ;-See also notes at the end of this source code.
  24++26A5
  25++26A5              ;Limitations
  26++26A5              ;-----------
  27++26A5              ;-Can run in RAM only (self-modified code is used).
  28++26A5
  29++26A5              ;Warning!!! PLAY subroutine can crash if no module are loaded
  30++26A5              ;into RAM or INIT subroutine was not called before.
  31++26A5
  32++26A5              ;Call MUTE or INIT one more time to mute sound after stopping
  33++26A5              ;playing
  34++26A5
  35++26A5              ;Entry and other points
  36++26A5              ;START initialization
  37++26A5              ;START+3 initialization with module address in HL
  38++26A5              ;START+5 play one quark
  39++26A5              ;START+8 mute
  40++26A5              ;START+10 setup and status flags
  41++26A5              ;START+11 pointer to current position value in PT3 module;
  42++26A5              ;After INIT (START+11) points to Postion0-1 (optimization)
  43++26A5              	module VTPL
  44++26A5              START:
  45++26A5 21 F9 2F     	LD HL,outputBuffer	;Address of PT3 module
  46++26A8 18 25        	JR INIT		;START+3
  47++26AA C3 4A 2B     	JP PLAY		;START+5
  48++26AD 18 14        	JR MUTE		;START+8
  49++26AF 00           SETUP:	.db 0 ;set bit0 to 1, if you want to play without looping
  50++26B0              	     ;bit7 is set each time, when loop point is passed
  51++26B0 00 00        CrPsPtr:	.dw 0
  52++26B2
  53++26B2 21 AF 26     CHECKLP:	LD HL,SETUP
  54++26B5 CB FE        	SET 7,(HL)
  55++26B7 CB 46        	BIT 0,(HL)
  56++26B9 C8           	RET Z
  57++26BA E1           	POP HL
  58++26BB 21 35 2D     	LD HL,DelyCnt
  59++26BE 34           	INC (HL)
  60++26BF 21 F9 2C     	LD HL,ChanA+CHNPRM_NtSkCn
  61++26C2 34           	INC (HL)
  62++26C3 AF           MUTE:	XOR A
  63++26C4 67           	LD H,A
  64++26C5 6F           	LD L,A
  65++26C6 32 43 2D     	LD (AYREGS+AR_AmplA),A
  66++26C9 22 44 2D     	LD (AYREGS+AR_AmplB),HL
  67++26CC C3 3C 2C     	JP ROUT_A0
  68++26CF
  69++26CF              INIT:
  70++26CF              ;HL - AddressOfModule
  71++26CF
  72++26CF 22 3D 28     	LD (MODADDR),HL
  73++26D2 22 CF 29     	LD (MDADDR2),HL
  74++26D5 E5           	PUSH HL
  75++26D6 11 64 00     	LD DE,100
  76++26D9 19           	ADD HL,DE
  77++26DA 7E           	LD A,(HL)
  78++26DB 32 D6 2B     	LD (Delay),A
  79++26DE E5           	PUSH HL
  80++26DF DD E1        	POP IX
  81++26E1 19           	ADD HL,DE
  82++26E2 22 B0 26     	LD (CrPsPtr),HL
  83++26E5 DD 5E 02     	LD E,(IX+102-100)
  84++26E8 19           	ADD HL,DE
  85++26E9 23           	INC HL
  86++26EA 22 78 2B     	LD (LPosPtr),HL
  87++26ED D1           	POP DE
  88++26EE DD 6E 03     	LD L,(IX+103-100)
  89++26F1 DD 66 04     	LD H,(IX+104-100)
  90++26F4 19           	ADD HL,DE
  91++26F5 22 85 2B     	LD (PatsPtr),HL
  92++26F8 21 A9 00     	LD HL,169
  93++26FB 19           	ADD HL,DE
  94++26FC 22 C8 29     	LD (OrnPtrs),HL
  95++26FF 21 69 00     	LD HL,105
  96++2702 19           	ADD HL,DE
  97++2703 22 36 28     	LD (SamPtrs),HL
  98++2706 21 AF 26     	LD HL,SETUP
  99++2709 CB BE        	RES 7,(HL)
 100++270B
 101++270B              ;note table data depacker
 102++270B 11 A9 2C     	LD DE,T_PACK
 103++270E 01 AC 2D     	LD BC,T1_+(2*49)-1
 104++2711 1A           TP_0:	LD A,(DE)
 105++2712 13           	INC DE
 106++2713 FE 1E        	CP 15*2
 107++2715 30 06        	JR NC,TP_1
 108++2717 67           	LD H,A
 109++2718 1A           	LD A,(DE)
 110++2719 6F           	LD L,A
 111++271A 13           	INC DE
 112++271B 18 07        	JR TP_2
 113++271D D5           TP_1:	PUSH DE
 114++271E 16 00        	LD D,0
 115++2720 5F           	LD E,A
 116++2721 19           	ADD HL,DE
 117++2722 19           	ADD HL,DE
 118++2723 D1           	POP DE
 119++2724 7C           TP_2:	LD A,H
 120++2725 02           	LD (BC),A
 121++2726 0B           	DEC BC
 122++2727 7D           	LD A,L
 123++2728 02           	LD (BC),A
 124++2729 0B           	DEC BC
 125++272A D6 F0        	SUB $F0
 126++272C 20 E3        	JR NZ,TP_0
 127++272E
 128++272E 21 DE 2C     	LD HL,VARS
 129++2731 77           	LD (HL),A
 130++2732 11 DF 2C     	LD DE,VARS+1
 131++2735 01 6C 00     	LD BC,VAR0END-VARS-1
 132++2738 ED B0        	LDIR
 133++273A 3C           	INC A
 134++273B 32 35 2D     	LD (DelyCnt),A
 135++273E 21 01 F0     	LD HL,$F001 ;H - CHNPRM_Volume, L - CHNPRM_NtSkCn
 136++2741 22 F9 2C     	LD (ChanA+CHNPRM_NtSkCn),HL
 137++2744 22 16 2D     	LD (ChanB+CHNPRM_NtSkCn),HL
 138++2747 22 33 2D     	LD (ChanC+CHNPRM_NtSkCn),HL
 139++274A
 140++274A 21 A5 2C     	LD HL,EMPTYSAMORN
 141++274D 22 62 2B     	LD (AdInPtA),HL ;ptr to zero
 142++2750 22 EB 2C     	LD (ChanA+CHNPRM_OrnPtr),HL ;ornament 0 is "0,1,0"
 143++2753 22 08 2D     	LD (ChanB+CHNPRM_OrnPtr),HL ;in all versions from
 144++2756 22 25 2D     	LD (ChanC+CHNPRM_OrnPtr),HL ;3.xx to 3.6x and VTII
 145++2759
 146++2759 22 ED 2C     	LD (ChanA+CHNPRM_SamPtr),HL ;S1 There is no default
 147++275C 22 0A 2D     	LD (ChanB+CHNPRM_SamPtr),HL ;S2 sample in PT3, so, you
 148++275F 22 27 2D     	LD (ChanC+CHNPRM_SamPtr),HL ;S3 can comment S1,2,3; see
 149++2762              				    ;also EMPTYSAMORN comment
 150++2762
 151++2762 DD 7E A9     	LD A,(IX+13-100) ;EXTRACT VERSION NUMBER
 152++2765 D6 30        	SUB $30
 153++2767 38 04        	JR C,L20
 154++2769 FE 0A        	CP 10
 155++276B 38 02        	JR C,L21
 156++276D 3E 06        L20:	LD A,6
 157++276F 32 28 29     L21:	LD (Version),A
 158++2772 F5           	PUSH AF
 159++2773 FE 04        	CP 4
 160++2775 DD 7E FF     	LD A,(IX+99-100) ;TONE TABLE NUMBER
 161++2778 17           	RLA
 162++2779 E6 07        	AND 7
 163++277B
 164++277B              ;NoteTableCreator (c) Ivan Roshin
 165++277B              ;A - NoteTableNumber*2+VersionForNoteTable
 166++277B              ;(xx1b - 3.xx..3.4r, xx0b - 3.4x..3.6x..VTII1.0)
 167++277B
 168++277B 21 55 2C     	LD HL,NT_DATA
 169++277E D5           	PUSH DE
 170++277F 50           	LD D,B
 171++2780 87           	ADD A,A
 172++2781 5F           	LD E,A
 173++2782 19           	ADD HL,DE
 174++2783 5E           	LD E,(HL)
 175++2784 23           	INC HL
 176++2785 CB 3B        	SRL E
 177++2787 9F           	SBC A,A
 178++2788 E6 A7        	AND $A7 ;$00 (NOP) or $A7 (AND A)
 179++278A 32 B1 27     	LD (L3),A
 180++278D EB           	EX DE,HL
 181++278E C1           	POP BC ;BC=T1_
 182++278F 09           	ADD HL,BC
 183++2790
 184++2790 1A           	LD A,(DE)
 185++2791
 186++2791 01 65 2C     	LD BC,T_
 187++2794 81           	ADD A,C
 188++2795 4F           	LD C,A
 189++2796 88           	ADC A,B
 190++2797
 191++2797 91           	SUB C
 192++2798 47           	LD B,A
 193++2799 C5           	PUSH BC
 194++279A 11 3B 2E     	LD DE,NT_
 195++279D D5           	PUSH DE
 196++279E
 197++279E 06 0C        	LD B,12
 198++27A0 C5           L1:	PUSH BC
 199++27A1 4E           	LD C,(HL)
 200++27A2 23           	INC HL
 201++27A3 E5           	PUSH HL
 202++27A4 46           	LD B,(HL)
 203++27A5
 204++27A5 D5           	PUSH DE
 205++27A6 EB           	EX DE,HL
 206++27A7 11 17 00     	LD DE,23
 207++27AA DD 26 08     	.db $DD,$26,$08	;LD XH,8
 208++27AD
 209++27AD CB 38        L2:	SRL B
 210++27AF CB 19        	RR C
 211++27B1 19           L3:	.db $19	;AND A or NOP
 212++27B2 79           	LD A,C
 213++27B3 8A           	ADC A,D	;=ADC 0
 214++27B4 77           	LD (HL),A
 215++27B5 23           	INC HL
 216++27B6 78           	LD A,B
 217++27B7 8A           	ADC A,D
 218++27B8 77           	LD (HL),A
 219++27B9 19           	ADD HL,DE
 220++27BA DD 25        	.db $DD,$25	;DEC XH
 221++27BC 20 EF        	JR NZ,L2
 222++27BE
 223++27BE D1           	POP DE
 224++27BF 13           	INC DE
 225++27C0 13           	INC DE
 226++27C1 E1           	POP HL
 227++27C2 23           	INC HL
 228++27C3 C1           	POP BC
 229++27C4 10 DA        	DJNZ L1
 230++27C6
 231++27C6 E1           	POP HL
 232++27C7 D1           	POP DE
 233++27C8
 234++27C8 7B           	LD A,E
 235++27C9 D5           	PUSH DE
 236++27CA 11 71 2C     	LD DE,TCOLD_1
 237++27CD BB           	CP E
 238++27CE D1           	POP DE
 239++27CF 20 05        	JR NZ,CORR_1
 240++27D1 3E FD        	LD A,$FD
 241++27D3 32 69 2E     	LD (NT_+$2E),A
 242++27D6
 243++27D6              CORR_1:
 244++27D6 1A           	LD A,(DE)
 245++27D7 A7           	AND A
 246++27D8 28 11        	JR Z,TC_EXIT
 247++27DA 1F           	RRA
 248++27DB F5           	PUSH AF
 249++27DC 87           	ADD A,A
 250++27DD 4F           	LD C,A
 251++27DE 09           	ADD HL,BC
 252++27DF F1           	POP AF
 253++27E0 30 02        	JR NC,CORR_2
 254++27E2 35           	DEC (HL)
 255++27E3 35           	DEC (HL)
 256++27E4 34           CORR_2:	INC (HL)
 257++27E5 A7           	AND A
 258++27E6 ED 42        	SBC HL,BC
 259++27E8 13           	INC DE
 260++27E9 18 EB        	JR CORR_1
 261++27EB
 262++27EB              TC_EXIT:
 263++27EB
 264++27EB F1           	POP AF
 265++27EC
 266++27EC              ;VolTableCreator (c) Ivan Roshin
 267++27EC              ;A - VersionForVolumeTable (0..4 - 3.xx..3.4x;
 268++27EC              			   ;5.. - 3.5x..3.6x..VTII1.0)
 269++27EC
 270++27EC FE 05        	CP 5
 271++27EE 21 11 00     	LD HL,$11
 272++27F1 54           	LD D,H
 273++27F2 5C           	LD E,H
 274++27F3 3E 17        	LD A,$17
 275++27F5 30 03        	JR NC,M1
 276++27F7 2D           	DEC L
 277++27F8 5D           	LD E,L
 278++27F9 AF           	XOR A
 279++27FA 32 09 28     M1:      LD (M2),A
 280++27FD
 281++27FD DD 21 4B 2D  	LD IX,VT_+16
 282++2801 0E 10        	LD C,$10
 283++2803
 284++2803 E5           INITV2:  PUSH HL
 285++2804
 286++2804 19           	ADD HL,DE
 287++2805 EB           	EX DE,HL
 288++2806 ED 62        	SBC HL,HL
 289++2808
 290++2808 7D           INITV1:  LD A,L
 291++2809 7D           M2:      .db $7D
 292++280A 7C           	LD A,H
 293++280B CE 00        	ADC A,0
 294++280D DD 77 00     	LD (IX),A
 295++2810 DD 23        	INC IX
 296++2812 19           	ADD HL,DE
 297++2813 0C           	INC C
 298++2814 79           	LD A,C
 299++2815 E6 0F        	AND 15
 300++2817 20 EF        	JR NZ,INITV1
 301++2819
 302++2819 E1           	POP HL
 303++281A 7B           	LD A,E
 304++281B FE 77        	CP $77
 305++281D 20 01        	JR NZ,M3
 306++281F 1C           	INC E
 307++2820 79           M3:      LD A,C
 308++2821 A7           	AND A
 309++2822 20 DF        	JR NZ,INITV2
 310++2824
 311++2824 C3 3C 2C     	JP ROUT_A0
 312++2827
 313++2827              ;pattern decoder
 314++2827 DD 36 08 00  PD_OrSm:	LD (IX-12+CHNPRM_Env_En),0
 315++282B CD C0 29     	CALL SETORN
 316++282E 0A           	LD A,(BC)
 317++282F 03           	INC BC
 318++2830 0F           	RRCA
 319++2831
 320++2831 87           PD_SAM:	ADD A,A
 321++2832 5F           PD_SAM_:	LD E,A
 322++2833 16 00        	LD D,0
 323++2835              SamPtrs: .equ $+1
 324++2835 21 21 21     	LD HL,$2121
 325++2838 19           	ADD HL,DE
 326++2839 5E           	LD E,(HL)
 327++283A 23           	INC HL
 328++283B 56           	LD D,(HL)
 329++283C              MODADDR: .equ $+1
 330++283C 21 21 21     	LD HL,$2121
 331++283F 19           	ADD HL,DE
 332++2840 DD 75 03     	LD (IX-12+CHNPRM_SamPtr),L
 333++2843 DD 74 04     	LD (IX-12+CHNPRM_SamPtr+1),H
 334++2846 18 41        	JR PD_LOOP
 335++2848
 336++2848 07           PD_VOL:	RLCA
 337++2849 07           	RLCA
 338++284A 07           	RLCA
 339++284B 07           	RLCA
 340++284C DD 77 10     	LD (IX-12+CHNPRM_Volume),A
 341++284F 18 3B        	JR PD_LP2
 342++2851
 343++2851 DD 77 08     PD_EOff:	LD (IX-12+CHNPRM_Env_En),A
 344++2854 DD 77 F4     	LD (IX-12+CHNPRM_PsInOr),A
 345++2857 18 33        	JR PD_LP2
 346++2859
 347++2859 3D           PD_SorE:	DEC A
 348++285A 20 07        	JR NZ,PD_ENV
 349++285C 0A           	LD A,(BC)
 350++285D 03           	INC BC
 351++285E DD 77 05     	LD (IX-12+CHNPRM_NNtSkp),A
 352++2861 18 29        	JR PD_LP2
 353++2863
 354++2863 CD A4 29     PD_ENV:	CALL SETENV
 355++2866 18 24        	JR PD_LP2
 356++2868
 357++2868 CD C0 29     PD_ORN:	CALL SETORN
 358++286B 18 1C        	JR PD_LOOP
 359++286D
 360++286D DD 77 08     PD_ESAM:	LD (IX-12+CHNPRM_Env_En),A
 361++2870 DD 77 F4     	LD (IX-12+CHNPRM_PsInOr),A
 362++2873 C4 A4 29     	CALL NZ,SETENV
 363++2876 0A           	LD A,(BC)
 364++2877 03           	INC BC
 365++2878 18 B8        	JR PD_SAM_
 366++287A
 367++287A DD 7E 06     PTDECOD: LD A,(IX-12+CHNPRM_Note)
 368++287D 32 0C 29     	LD (PrNote+1),A
 369++2880 DD 6E FA     	LD L,(IX-12+CHNPRM_CrTnSl)
 370++2883 DD 66 FB     	LD H,(IX-12+CHNPRM_CrTnSl+1)
 371++2886 22 2E 29     	LD (PrSlide+1),HL
 372++2889
 373++2889 11 10 20     PD_LOOP:	LD DE,$2010
 374++288C 0A           PD_LP2:	LD A,(BC)
 375++288D 03           	INC BC
 376++288E 83           	ADD A,E
 377++288F 38 96        	JR C,PD_OrSm
 378++2891 82           	ADD A,D
 379++2892 28 4F        	JR Z,PD_FIN
 380++2894 38 9B        	JR C,PD_SAM
 381++2896 83           	ADD A,E
 382++2897 28 2B        	JR Z,PD_REL
 383++2899 38 AD        	JR C,PD_VOL
 384++289B 83           	ADD A,E
 385++289C 28 B3        	JR Z,PD_EOff
 386++289E 38 B9        	JR C,PD_SorE
 387++28A0 C6 60        	ADD A,96
 388++28A2 38 26        	JR C,PD_NOTE
 389++28A4 83           	ADD A,E
 390++28A5 38 C1        	JR C,PD_ORN
 391++28A7 82           	ADD A,D
 392++28A8 38 15        	JR C,PD_NOIS
 393++28AA 83           	ADD A,E
 394++28AB 38 C0        	JR C,PD_ESAM
 395++28AD 87           	ADD A,A
 396++28AE 5F           	LD E,A
 397++28AF
 398++28AF D5           	PUSH DE
 399++28B0 11 20 DF     	LD DE,$DF20
 400++28B3 21 D9 29     	LD HL,SPCCOMS
 401++28B6 19           	ADD HL,DE
 402++28B7 D1           	POP DE
 403++28B8
 404++28B8 19           	ADD HL,DE
 405++28B9 5E           	LD E,(HL)
 406++28BA 23           	INC HL
 407++28BB 56           	LD D,(HL)
 408++28BC D5           	PUSH DE
 409++28BD 18 CA        	JR PD_LOOP
 410++28BF
 411++28BF 32 39 2D     PD_NOIS:	LD (Ns_Base),A
 412++28C2 18 C8        	JR PD_LP2
 413++28C4
 414++28C4 DD CB 09 86  PD_REL:	RES 0,(IX-12+CHNPRM_Flags)
 415++28C8 18 08        	JR PD_RES
 416++28CA
 417++28CA DD 77 06     PD_NOTE:	LD (IX-12+CHNPRM_Note),A
 418++28CD DD CB 09 C6  	SET 0,(IX-12+CHNPRM_Flags)
 419++28D1 AF           	XOR A
 420++28D2
 421++28D2 ED 73 E1 28  PD_RES:	LD (PDSP_+1),SP
 422++28D6 DD F9        	LD SP,IX
 423++28D8 67           	LD H,A
 424++28D9 6F           	LD L,A
 425++28DA E5           	PUSH HL
 426++28DB E5           	PUSH HL
 427++28DC E5           	PUSH HL
 428++28DD E5           	PUSH HL
 429++28DE E5           	PUSH HL
 430++28DF E5           	PUSH HL
 431++28E0 31 31 31     PDSP_:	LD SP,$3131
 432++28E3
 433++28E3 DD 7E 05     PD_FIN:	LD A,(IX-12+CHNPRM_NNtSkp)
 434++28E6 DD 77 0F     	LD (IX-12+CHNPRM_NtSkCn),A
 435++28E9 C9           	RET
 436++28EA
 437++28EA DD CB 09 96  C_PORTM: RES 2,(IX-12+CHNPRM_Flags)
 438++28EE 0A           	LD A,(BC)
 439++28EF 03           	INC BC
 440++28F0              ;SKIP PRECALCULATED TONE DELTA (BECAUSE
 441++28F0              ;CANNOT BE RIGHT AFTER PT3 COMPILATION)
 442++28F0 03           	INC BC
 443++28F1 03           	INC BC
 444++28F2 DD 77 0A     	LD (IX-12+CHNPRM_TnSlDl),A
 445++28F5 DD 77 F9     	LD (IX-12+CHNPRM_TSlCnt),A
 446++28F8 11 3B 2E     	LD DE,NT_
 447++28FB DD 7E 06     	LD A,(IX-12+CHNPRM_Note)
 448++28FE DD 77 07     	LD (IX-12+CHNPRM_SlToNt),A
 449++2901 87           	ADD A,A
 450++2902 6F           	LD L,A
 451++2903 26 00        	LD H,0
 452++2905 19           	ADD HL,DE
 453++2906 7E           	LD A,(HL)
 454++2907 23           	INC HL
 455++2908 66           	LD H,(HL)
 456++2909 6F           	LD L,A
 457++290A E5           	PUSH HL
 458++290B 3E 3E        PrNote:	LD A,$3E
 459++290D DD 77 06     	LD (IX-12+CHNPRM_Note),A
 460++2910 87           	ADD A,A
 461++2911 6F           	LD L,A
 462++2912 26 00        	LD H,0
 463++2914 19           	ADD HL,DE
 464++2915 5E           	LD E,(HL)
 465++2916 23           	INC HL
 466++2917 56           	LD D,(HL)
 467++2918 E1           	POP HL
 468++2919 ED 52        	SBC HL,DE
 469++291B DD 75 0D     	LD (IX-12+CHNPRM_TnDelt),L
 470++291E DD 74 0E     	LD (IX-12+CHNPRM_TnDelt+1),H
 471++2921 DD 5E FA     	LD E,(IX-12+CHNPRM_CrTnSl)
 472++2924 DD 56 FB     	LD D,(IX-12+CHNPRM_CrTnSl+1)
 473++2927              Version: .equ $+1
 474++2927 3E 3E        	LD A,$3E
 475++2929 FE 06        	CP 6
 476++292B 38 09        	JR C,OLDPRTM ;Old 3xxx for PT v3.5-
 477++292D 11 11 11     PrSlide:	LD DE,$1111
 478++2930 DD 73 FA     	LD (IX-12+CHNPRM_CrTnSl),E
 479++2933 DD 72 FB     	LD (IX-12+CHNPRM_CrTnSl+1),D
 480++2936 0A           OLDPRTM:	LD A,(BC) ;SIGNED TONE STEP
 481++2937 03           	INC BC
 482++2938 08           	EX AF,AF'
 483++2939 0A           	LD A,(BC)
 484++293A 03           	INC BC
 485++293B A7           	AND A
 486++293C 28 01        	JR Z,NOSIG
 487++293E EB           	EX DE,HL
 488++293F ED 52        NOSIG:	SBC HL,DE
 489++2941 F2 49 29     	JP P,SET_STP
 490++2944 2F           	CPL
 491++2945 08           	EX AF,AF'
 492++2946 ED 44        	NEG
 493++2948 08           	EX AF,AF'
 494++2949 DD 77 0C     SET_STP:	LD (IX-12+CHNPRM_TSlStp+1),A
 495++294C 08           	EX AF,AF'
 496++294D DD 77 0B     	LD (IX-12+CHNPRM_TSlStp),A
 497++2950 DD 36 FE 00  	LD (IX-12+CHNPRM_COnOff),0
 498++2954 C9           	RET
 499++2955
 500++2955 DD CB 09 D6  C_GLISS:	SET 2,(IX-12+CHNPRM_Flags)
 501++2959 0A           	LD A,(BC)
 502++295A 03           	INC BC
 503++295B DD 77 0A     	LD (IX-12+CHNPRM_TnSlDl),A
 504++295E DD 77 F9     	LD (IX-12+CHNPRM_TSlCnt),A
 505++2961 0A           	LD A,(BC)
 506++2962 03           	INC BC
 507++2963 08           	EX AF,AF'
 508++2964 0A           	LD A,(BC)
 509++2965 03           	INC BC
 510++2966 18 E1        	JR SET_STP
 511++2968
 512++2968 0A           C_SMPOS:	LD A,(BC)
 513++2969 03           	INC BC
 514++296A DD 77 F5     	LD (IX-12+CHNPRM_PsInSm),A
 515++296D C9           	RET
 516++296E
 517++296E 0A           C_ORPOS:	LD A,(BC)
 518++296F 03           	INC BC
 519++2970 DD 77 F4     	LD (IX-12+CHNPRM_PsInOr),A
 520++2973 C9           	RET
 521++2974
 522++2974 0A           C_VIBRT:	LD A,(BC)
 523++2975 03           	INC BC
 524++2976 DD 77 FF     	LD (IX-12+CHNPRM_OnOffD),A
 525++2979 DD 77 FE     	LD (IX-12+CHNPRM_COnOff),A
 526++297C 0A           	LD A,(BC)
 527++297D 03           	INC BC
 528++297E DD 77 00     	LD (IX-12+CHNPRM_OffOnD),A
 529++2981 AF           	XOR A
 530++2982 DD 77 F9     	LD (IX-12+CHNPRM_TSlCnt),A
 531++2985 DD 77 FA     	LD (IX-12+CHNPRM_CrTnSl),A
 532++2988 DD 77 FB     	LD (IX-12+CHNPRM_CrTnSl+1),A
 533++298B C9           	RET
 534++298C
 535++298C 0A           C_ENGLS:	LD A,(BC)
 536++298D 03           	INC BC
 537++298E 32 32 2C     	LD (Env_Del),A
 538++2991 32 38 2D     	LD (CurEDel),A
 539++2994 0A           	LD A,(BC)
 540++2995 03           	INC BC
 541++2996 6F           	LD L,A
 542++2997 0A           	LD A,(BC)
 543++2998 03           	INC BC
 544++2999 67           	LD H,A
 545++299A 22 35 2C     	LD (ESldAdd),HL
 546++299D C9           	RET
 547++299E
 548++299E 0A           C_DELAY:	LD A,(BC)
 549++299F 03           	INC BC
 550++29A0 32 D6 2B     	LD (Delay),A
 551++29A3 C9           	RET
 552++29A4
 553++29A4 DD 73 08     SETENV:	LD (IX-12+CHNPRM_Env_En),E
 554++29A7 32 48 2D     	LD (AYREGS+AR_EnvTp),A
 555++29AA 0A           	LD A,(BC)
 556++29AB 03           	INC BC
 557++29AC 67           	LD H,A
 558++29AD 0A           	LD A,(BC)
 559++29AE 03           	INC BC
 560++29AF 6F           	LD L,A
 561++29B0 22 49 2D     	LD (EnvBase),HL
 562++29B3 AF           	XOR A
 563++29B4 DD 77 F4     	LD (IX-12+CHNPRM_PsInOr),A
 564++29B7 32 38 2D     	LD (CurEDel),A
 565++29BA 67           	LD H,A
 566++29BB 6F           	LD L,A
 567++29BC 22 36 2D     	LD (CurESld),HL
 568++29BF C9           C_NOP:	RET
 569++29C0
 570++29C0 87           SETORN:	ADD A,A
 571++29C1 5F           	LD E,A
 572++29C2 16 00        	LD D,0
 573++29C4 DD 72 F4     	LD (IX-12+CHNPRM_PsInOr),D
 574++29C7              OrnPtrs:	.equ $+1
 575++29C7 21 21 21     	LD HL,$2121
 576++29CA 19           	ADD HL,DE
 577++29CB 5E           	LD E,(HL)
 578++29CC 23           	INC HL
 579++29CD 56           	LD D,(HL)
 580++29CE              MDADDR2:	.equ $+1
 581++29CE 21 21 21     	LD HL,$2121
 582++29D1 19           	ADD HL,DE
 583++29D2 DD 75 01     	LD (IX-12+CHNPRM_OrnPtr),L
 584++29D5 DD 74 02     	LD (IX-12+CHNPRM_OrnPtr+1),H
 585++29D8 C9           	RET
 586++29D9
 587++29D9              ;ALL 16 ADDRESSES TO PROTECT FROM BROKEN PT3 MODULES
 588++29D9 BF 29        SPCCOMS: .dw C_NOP
 589++29DB 55 29        	.dw C_GLISS
 590++29DD EA 28        	.dw C_PORTM
 591++29DF 68 29        	.dw C_SMPOS
 592++29E1 6E 29        	.dw C_ORPOS
 593++29E3 74 29        	.dw C_VIBRT
 594++29E5 BF 29        	.dw C_NOP
 595++29E7 BF 29        	.dw C_NOP
 596++29E9 8C 29        	.dw C_ENGLS
 597++29EB 9E 29        	.dw C_DELAY
 598++29ED BF 29        	.dw C_NOP
 599++29EF BF 29        	.dw C_NOP
 600++29F1 BF 29        	.dw C_NOP
 601++29F3 BF 29        	.dw C_NOP
 602++29F5 BF 29        	.dw C_NOP
 603++29F7 BF 29        	.dw C_NOP
 604++29F9
 605++29F9 AF           CHREGS:	XOR A
 606++29FA 32 45 2D     	LD (Ampl),A
 607++29FD DD CB 15 46  	BIT 0,(IX+CHNPRM_Flags)
 608++2A01 E5           	PUSH HL
 609++2A02 CA 27 2B     	JP Z,CH_EXIT
 610++2A05 ED 73 72 2A  	LD (CSP_+1),SP
 611++2A09 DD 6E 0D     	LD L,(IX+CHNPRM_OrnPtr)
 612++2A0C DD 66 0E     	LD H,(IX+CHNPRM_OrnPtr+1)
 613++2A0F F9           	LD SP,HL
 614++2A10 D1           	POP DE
 615++2A11 67           	LD H,A
 616++2A12 DD 7E 00     	LD A,(IX+CHNPRM_PsInOr)
 617++2A15 6F           	LD L,A
 618++2A16 39           	ADD HL,SP
 619++2A17 3C           	INC A
 620++2A18 BA           	CP D
 621++2A19 38 01        	JR C,CH_ORPS
 622++2A1B 7B           	LD A,E
 623++2A1C DD 77 00     CH_ORPS:	LD (IX+CHNPRM_PsInOr),A
 624++2A1F DD 7E 12     	LD A,(IX+CHNPRM_Note)
 625++2A22 86           	ADD A,(HL)
 626++2A23 F2 27 2A     	JP P,CH_NTP
 627++2A26 AF           	XOR A
 628++2A27 FE 60        CH_NTP:	CP 96
 629++2A29 38 02        	JR C,CH_NOK
 630++2A2B 3E 5F        	LD A,95
 631++2A2D 87           CH_NOK:	ADD A,A
 632++2A2E 08           	EX AF,AF'
 633++2A2F DD 6E 0F     	LD L,(IX+CHNPRM_SamPtr)
 634++2A32 DD 66 10     	LD H,(IX+CHNPRM_SamPtr+1)
 635++2A35 F9           	LD SP,HL
 636++2A36 D1           	POP DE
 637++2A37 26 00        	LD H,0
 638++2A39 DD 7E 01     	LD A,(IX+CHNPRM_PsInSm)
 639++2A3C 47           	LD B,A
 640++2A3D 87           	ADD A,A
 641++2A3E 87           	ADD A,A
 642++2A3F 6F           	LD L,A
 643++2A40 39           	ADD HL,SP
 644++2A41 F9           	LD SP,HL
 645++2A42 78           	LD A,B
 646++2A43 3C           	INC A
 647++2A44 BA           	CP D
 648++2A45 38 01        	JR C,CH_SMPS
 649++2A47 7B           	LD A,E
 650++2A48 DD 77 01     CH_SMPS:	LD (IX+CHNPRM_PsInSm),A
 651++2A4B C1           	POP BC
 652++2A4C E1           	POP HL
 653++2A4D DD 5E 08     	LD E,(IX+CHNPRM_TnAcc)
 654++2A50 DD 56 09     	LD D,(IX+CHNPRM_TnAcc+1)
 655++2A53 19           	ADD HL,DE
 656++2A54 CB 70        	BIT 6,B
 657++2A56 28 06        	JR Z,CH_NOAC
 658++2A58 DD 75 08     	LD (IX+CHNPRM_TnAcc),L
 659++2A5B DD 74 09     	LD (IX+CHNPRM_TnAcc+1),H
 660++2A5E EB           CH_NOAC: EX DE,HL
 661++2A5F 08           	EX AF,AF'
 662++2A60 6F           	LD L,A
 663++2A61 26 00        	LD H,0
 664++2A63 31 3B 2E     	LD SP,NT_
 665++2A66 39           	ADD HL,SP
 666++2A67 F9           	LD SP,HL
 667++2A68 E1           	POP HL
 668++2A69 19           	ADD HL,DE
 669++2A6A DD 5E 06     	LD E,(IX+CHNPRM_CrTnSl)
 670++2A6D DD 56 07     	LD D,(IX+CHNPRM_CrTnSl+1)
 671++2A70 19           	ADD HL,DE
 672++2A71 31 31 31     CSP_:	LD SP,$3131
 673++2A74 E3           	EX (SP),HL
 674++2A75 AF           	XOR A
 675++2A76 DD B6 05     	OR (IX+CHNPRM_TSlCnt)
 676++2A79 28 3E        	JR Z,CH_AMP
 677++2A7B DD 35 05     	DEC (IX+CHNPRM_TSlCnt)
 678++2A7E 20 39        	JR NZ,CH_AMP
 679++2A80 DD 7E 16     	LD A,(IX+CHNPRM_TnSlDl)
 680++2A83 DD 77 05     	LD (IX+CHNPRM_TSlCnt),A
 681++2A86 DD 6E 17     	LD L,(IX+CHNPRM_TSlStp)
 682++2A89 DD 66 18     	LD H,(IX+CHNPRM_TSlStp+1)
 683++2A8C 7C           	LD A,H
 684++2A8D 19           	ADD HL,DE
 685++2A8E DD 75 06     	LD (IX+CHNPRM_CrTnSl),L
 686++2A91 DD 74 07     	LD (IX+CHNPRM_CrTnSl+1),H
 687++2A94 DD CB 15 56  	BIT 2,(IX+CHNPRM_Flags)
 688++2A98 20 1F        	JR NZ,CH_AMP
 689++2A9A DD 5E 19     	LD E,(IX+CHNPRM_TnDelt)
 690++2A9D DD 56 1A     	LD D,(IX+CHNPRM_TnDelt+1)
 691++2AA0 A7           	AND A
 692++2AA1 28 01        	JR Z,CH_STPP
 693++2AA3 EB           	EX DE,HL
 694++2AA4 ED 52        CH_STPP: SBC HL,DE
 695++2AA6 FA B9 2A     	JP M,CH_AMP
 696++2AA9 DD 7E 13     	LD A,(IX+CHNPRM_SlToNt)
 697++2AAC DD 77 12     	LD (IX+CHNPRM_Note),A
 698++2AAF AF           	XOR A
 699++2AB0 DD 77 05     	LD (IX+CHNPRM_TSlCnt),A
 700++2AB3 DD 77 06     	LD (IX+CHNPRM_CrTnSl),A
 701++2AB6 DD 77 07     	LD (IX+CHNPRM_CrTnSl+1),A
 702++2AB9 DD 7E 02     CH_AMP:	LD A,(IX+CHNPRM_CrAmSl)
 703++2ABC CB 79        	BIT 7,C
 704++2ABE 28 13        	JR Z,CH_NOAM
 705++2AC0 CB 71        	BIT 6,C
 706++2AC2 28 07        	JR Z,CH_AMIN
 707++2AC4 FE 0F        	CP 15
 708++2AC6 28 0B        	JR Z,CH_NOAM
 709++2AC8 3C           	INC A
 710++2AC9 18 05        	JR CH_SVAM
 711++2ACB FE F1        CH_AMIN:	CP -15
 712++2ACD 28 04        	JR Z,CH_NOAM
 713++2ACF 3D           	DEC A
 714++2AD0 DD 77 02     CH_SVAM:	LD (IX+CHNPRM_CrAmSl),A
 715++2AD3 6F           CH_NOAM:	LD L,A
 716++2AD4 78           	LD A,B
 717++2AD5 E6 0F        	AND 15
 718++2AD7 85           	ADD A,L
 719++2AD8 F2 DC 2A     	JP P,CH_APOS
 720++2ADB AF           	XOR A
 721++2ADC FE 10        CH_APOS:	CP 16
 722++2ADE 38 02        	JR C,CH_VOL
 723++2AE0 3E 0F        	LD A,15
 724++2AE2 DD B6 1C     CH_VOL:	OR (IX+CHNPRM_Volume)
 725++2AE5 6F           	LD L,A
 726++2AE6 26 00        	LD H,0
 727++2AE8 11 3B 2D     	LD DE,VT_
 728++2AEB 19           	ADD HL,DE
 729++2AEC 7E           	LD A,(HL)
 730++2AED CB 41        CH_ENV:	BIT 0,C
 731++2AEF 20 03        	JR NZ,CH_NOEN
 732++2AF1 DD B6 14     	OR (IX+CHNPRM_Env_En)
 733++2AF4 32 45 2D     CH_NOEN:	LD (Ampl),A
 734++2AF7 CB 78        	BIT 7,B
 735++2AF9 79           	LD A,C
 736++2AFA 28 19        	JR Z,NO_ENSL
 737++2AFC 17           	RLA
 738++2AFD 17           	RLA
 739++2AFE CB 2F        	SRA A
 740++2B00 CB 2F        	SRA A
 741++2B02 CB 2F        	SRA A
 742++2B04 DD 86 04     	ADD A,(IX+CHNPRM_CrEnSl) ;SEE COMMENT BELOW
 743++2B07 CB 68        	BIT 5,B
 744++2B09 28 03        	JR Z,NO_ENAC
 745++2B0B DD 77 04     	LD (IX+CHNPRM_CrEnSl),A
 746++2B0E 21 16 2C     NO_ENAC:	LD HL,AddToEn
 747++2B11 86           	ADD A,(HL) ;BUG IN PT3 - NEED WORD HERE.
 748++2B12              		   ;FIX IT IN NEXT VERSION?
 749++2B12 77           	LD (HL),A
 750++2B13 18 0E        	JR CH_MIX
 751++2B15 1F           NO_ENSL: RRA
 752++2B16 DD 86 03     	ADD A,(IX+CHNPRM_CrNsSl)
 753++2B19 32 3A 2D     	LD (AddToNs),A
 754++2B1C CB 68        	BIT 5,B
 755++2B1E 28 03        	JR Z,CH_MIX
 756++2B20 DD 77 03     	LD (IX+CHNPRM_CrNsSl),A
 757++2B23 78           CH_MIX:	LD A,B
 758++2B24 1F           	RRA
 759++2B25 E6 48        	AND $48
 760++2B27 21 42 2D     CH_EXIT:	LD HL,AYREGS+AR_Mixer
 761++2B2A B6           	OR (HL)
 762++2B2B 0F           	RRCA
 763++2B2C 77           	LD (HL),A
 764++2B2D E1           	POP HL
 765++2B2E AF           	XOR A
 766++2B2F DD B6 0A     	OR (IX+CHNPRM_COnOff)
 767++2B32 C8           	RET Z
 768++2B33 DD 35 0A     	DEC (IX+CHNPRM_COnOff)
 769++2B36 C0           	RET NZ
 770++2B37 DD AE 15     	XOR (IX+CHNPRM_Flags)
 771++2B3A DD 77 15     	LD (IX+CHNPRM_Flags),A
 772++2B3D 1F           	RRA
 773++2B3E DD 7E 0B     	LD A,(IX+CHNPRM_OnOffD)
 774++2B41 38 03        	JR C,CH_ONDL
 775++2B43 DD 7E 0C     	LD A,(IX+CHNPRM_OffOnD)
 776++2B46 DD 77 0A     CH_ONDL:	LD (IX+CHNPRM_COnOff),A
 777++2B49 C9           	RET
 778++2B4A
 779++2B4A AF           PLAY:    XOR A
 780++2B4B 32 16 2C     	LD (AddToEn),A
 781++2B4E 32 42 2D     	LD (AYREGS+AR_Mixer),A
 782++2B51 3D           	DEC A
 783++2B52 32 48 2D     	LD (AYREGS+AR_EnvTp),A
 784++2B55 21 35 2D     	LD HL,DelyCnt
 785++2B58 35           	DEC (HL)
 786++2B59 20 7F        	JR NZ,PL2
 787++2B5B 21 F9 2C     	LD HL,ChanA+CHNPRM_NtSkCn
 788++2B5E 35           	DEC (HL)
 789++2B5F 20 4C        	JR NZ,PL1B
 790++2B61              AdInPtA:	.equ $+1
 791++2B61 01 01 01     	LD BC,$0101
 792++2B64 0A           	LD A,(BC)
 793++2B65 A7           	AND A
 794++2B66 20 3A        	JR NZ,PL1A
 795++2B68 57           	LD D,A
 796++2B69 32 39 2D     	LD (Ns_Base),A
 797++2B6C 2A B0 26     	LD HL,(CrPsPtr)
 798++2B6F 23           	INC HL
 799++2B70 7E           	LD A,(HL)
 800++2B71 3C           	INC A
 801++2B72 20 08        	JR NZ,PLNLP
 802++2B74 CD B2 26     	CALL CHECKLP
 803++2B77              LPosPtr:	.equ $+1
 804++2B77 21 21 21     	LD HL,$2121
 805++2B7A 7E           	LD A,(HL)
 806++2B7B 3C           	INC A
 807++2B7C 22 B0 26     PLNLP:	LD (CrPsPtr),HL
 808++2B7F 3D           	DEC A
 809++2B80 87           	ADD A,A
 810++2B81 5F           	LD E,A
 811++2B82 CB 12        	RL D
 812++2B84              PatsPtr:	.equ $+1
 813++2B84 21 21 21     	LD HL,$2121
 814++2B87 19           	ADD HL,DE
 815++2B88 ED 5B 3D 28  	LD DE,(MODADDR)
 816++2B8C ED 73 A0 2B  	LD (PSP_+1),SP
 817++2B90 F9           	LD SP,HL
 818++2B91 E1           	POP HL
 819++2B92 19           	ADD HL,DE
 820++2B93 44           	LD B,H
 821++2B94 4D           	LD C,L
 822++2B95 E1           	POP HL
 823++2B96 19           	ADD HL,DE
 824++2B97 22 B8 2B     	LD (AdInPtB),HL
 825++2B9A E1           	POP HL
 826++2B9B 19           	ADD HL,DE
 827++2B9C 22 CC 2B     	LD (AdInPtC),HL
 828++2B9F 31 31 31     PSP_:	LD SP,$3131
 829++2BA2 DD 21 EA 2C  PL1A:	LD IX,ChanA+12
 830++2BA6 CD 7A 28     	CALL PTDECOD
 831++2BA9 ED 43 62 2B  	LD (AdInPtA),BC
 832++2BAD
 833++2BAD 21 16 2D     PL1B:	LD HL,ChanB+CHNPRM_NtSkCn
 834++2BB0 35           	DEC (HL)
 835++2BB1 20 0E        	JR NZ,PL1C
 836++2BB3 DD 21 07 2D  	LD IX,ChanB+12
 837++2BB7              AdInPtB:	.equ $+1
 838++2BB7 01 01 01     	LD BC,$0101
 839++2BBA CD 7A 28     	CALL PTDECOD
 840++2BBD ED 43 B8 2B  	LD (AdInPtB),BC
 841++2BC1
 842++2BC1 21 33 2D     PL1C:	LD HL,ChanC+CHNPRM_NtSkCn
 843++2BC4 35           	DEC (HL)
 844++2BC5 20 0E        	JR NZ,PL1D
 845++2BC7 DD 21 24 2D  	LD IX,ChanC+12
 846++2BCB              AdInPtC:	.equ $+1
 847++2BCB 01 01 01     	LD BC,$0101
 848++2BCE CD 7A 28     	CALL PTDECOD
 849++2BD1 ED 43 CC 2B  	LD (AdInPtC),BC
 850++2BD5
 851++2BD5              Delay:	.equ $+1
 852++2BD5 3E 3E        PL1D:	LD A,$3E
 853++2BD7 32 35 2D     	LD (DelyCnt),A
 854++2BDA
 855++2BDA DD 21 DE 2C  PL2:	LD IX,ChanA
 856++2BDE 2A 3B 2D     	LD HL,(AYREGS+AR_TonA)
 857++2BE1 CD F9 29     	CALL CHREGS
 858++2BE4 22 3B 2D     	LD (AYREGS+AR_TonA),HL
 859++2BE7 3A 45 2D     	LD A,(Ampl)
 860++2BEA 32 43 2D     	LD (AYREGS+AR_AmplA),A
 861++2BED DD 21 FB 2C  	LD IX,ChanB
 862++2BF1 2A 3D 2D     	LD HL,(AYREGS+AR_TonB)
 863++2BF4 CD F9 29     	CALL CHREGS
 864++2BF7 22 3D 2D     	LD (AYREGS+AR_TonB),HL
 865++2BFA 3A 45 2D     	LD A,(Ampl)
 866++2BFD 32 44 2D     	LD (AYREGS+AR_AmplB),A
 867++2C00 DD 21 18 2D  	LD IX,ChanC
 868++2C04 2A 3F 2D     	LD HL,(AYREGS+AR_TonC)
 869++2C07 CD F9 29     	CALL CHREGS
 870++2C0A              ;	LD A,(Ampl) ;Ampl = AYREGS+AR_AmplC
 871++2C0A              ;	LD (AYREGS+AR_AmplC),A
 872++2C0A 22 3F 2D     	LD (AYREGS+AR_TonC),HL
 873++2C0D
 874++2C0D 2A 39 2D     	LD HL,(Ns_Base_AddToNs)
 875++2C10 7C           	LD A,H
 876++2C11 85           	ADD A,L
 877++2C12 32 41 2D     	LD (AYREGS+AR_Noise),A
 878++2C15
 879++2C15              AddToEn: .equ $+1
 880++2C15 3E 3E        	LD A,$3E
 881++2C17 5F           	LD E,A
 882++2C18 87           	ADD A,A
 883++2C19 9F           	SBC A,A
 884++2C1A 57           	LD D,A
 885++2C1B 2A 49 2D     	LD HL,(EnvBase)
 886++2C1E 19           	ADD HL,DE
 887++2C1F ED 5B 36 2D  	LD DE,(CurESld)
 888++2C23 19           	ADD HL,DE
 889++2C24 22 46 2D     	LD (AYREGS+AR_Env),HL
 890++2C27
 891++2C27 AF           	XOR A
 892++2C28 21 38 2D     	LD HL,CurEDel
 893++2C2B B6           	OR (HL)
 894++2C2C 28 0E        	JR Z,ROUT_A0
 895++2C2E 35           	DEC (HL)
 896++2C2F 20 0A        	JR NZ,ROUT
 897++2C31              Env_Del:	.equ $+1
 898++2C31 3E 3E        	LD A,$3E
 899++2C33 77           	LD (HL),A
 900++2C34              ESldAdd:	.equ $+1
 901++2C34 21 21 21     	LD HL,$2121
 902++2C37 19           	ADD HL,DE
 903++2C38 22 36 2D     	LD (CurESld),HL
 904++2C3B
 905++2C3B AF           ROUT:	XOR A
 906++2C3C              ROUT_A0:
 907++2C3C 0E A0        	LD C,$A0
 908++2C3E 21 3B 2D     	LD HL,AYREGS
 909++2C41 ED 79        LOUT:	OUT (C),A
 910++2C43 0C           	INC C
 911++2C44 ED A3        	OUTI
 912++2C46 0D           	DEC C
 913++2C47 3C           	INC A
 914++2C48 FE 0D        	CP 13
 915++2C4A 20 F5        	JR NZ,LOUT
 916++2C4C ED 79        	OUT (C),A
 917++2C4E 7E           	LD A,(HL)
 918++2C4F A7           	AND A
 919++2C50 F8           	RET M
 920++2C51 0C           	INC C
 921++2C52 ED 79        	OUT (C),A
 922++2C54 C9           	RET
 923++2C55
 924++2C55 64           NT_DATA:	.db (T_NEW_0-T1_)*2
 925++2C56 2A           	.db TCNEW_0-T_
 926++2C57 65           	.db (T_OLD_0-T1_)*2+1
 927++2C58 00           	.db TCOLD_0-T_
 928++2C59 01           	.db (T_NEW_1-T1_)*2+1
 929++2C5A 0C           	.db TCNEW_1-T_
 930++2C5B 01           	.db (T_OLD_1-T1_)*2+1
 931++2C5C 0C           	.db TCOLD_1-T_
 932++2C5D 94           	.db (T_NEW_2-T1_)*2
 933++2C5E 35           	.db TCNEW_2-T_
 934++2C5F 30           	.db (T_OLD_2-T1_)*2
 935++2C60 0E           	.db TCOLD_2-T_
 936++2C61 60           	.db (T_NEW_3-T1_)*2
 937++2C62 20           	.db TCNEW_3-T_
 938++2C63 60           	.db (T_OLD_3-T1_)*2
 939++2C64 21           	.db TCOLD_3-T_
 940++2C65
 941++2C65              T_:
 942++2C65
 943++2C65 01 05 09 0B  TCOLD_0:	.db $00+1,$04+1,$08+1,$0A+1,$0C+1,$0E+1,$12+1,$14+1
 943++2C69 0D 0F 13 15
 944++2C6D 19 25 3D 00  	.db $18+1,$24+1,$3C+1,0
 945++2C71 5D 00        TCOLD_1:	.db $5C+1,0
 946++2C73 31 37 4D 53  TCOLD_2:	.db $30+1,$36+1,$4C+1,$52+1,$5E+1,$70+1,$82,$8C,$9C
 946++2C77 5F 71 82 8C
 946++2C7B 9C
 947++2C7C 9E A0 A6 A8  	.db $9E,$A0,$A6,$A8,$AA,$AC,$AE,$AE,0
 947++2C80 AA AC AE AE
 947++2C84 00
 948++2C85 57           TCNEW_3:	.db $56+1
 949++2C86 1F 23 25 29  TCOLD_3:	.db $1E+1,$22+1,$24+1,$28+1,$2C+1,$2E+1,$32+1,$BE+1,0
 949++2C8A 2D 2F 33 BF
 949++2C8E 00
 950++2C8F 1D 21 23 27  TCNEW_0:	.db $1C+1,$20+1,$22+1,$26+1,$2A+1,$2C+1,$30+1,$54+1
 950++2C93 2B 2D 31 55
 951++2C97 BD BF 00     	.db $BC+1,$BE+1,0
 952++2C9A              TCNEW_1: .equ TCOLD_1
 953++2C9A 1B 21 25 29  TCNEW_2:	.db $1A+1,$20+1,$24+1,$28+1,$2A+1,$3A+1,$4C+1,$5E+1
 953++2C9E 2B 3B 4D 5F
 954++2CA2 BB BD BF 00  	.db $BA+1,$BC+1,$BE+1,0
 955++2CA6
 956++2CA6              EMPTYSAMORN: .equ $-1
 957++2CA6 01 00 90     	.db 1,0,$90 ;delete $90 if you don't need default sample
 958++2CA9
 959++2CA9              ;first 12 values of tone tables (packed)
 960++2CA9
msxplayer.asm(961): warning: value 0xDD8 is truncated to 8bit value: 0xD8
 961++2CA9 0D D8        T_PACK:	.db $06EC*2/256,$06EC*2
 962++2CAB 69           	.db $0755-$06EC
 963++2CAC 70           	.db $07C5-$0755
 964++2CAD 76           	.db $083B-$07C5
 965++2CAE 7D           	.db $08B8-$083B
 966++2CAF 85           	.db $093D-$08B8
 967++2CB0 8D           	.db $09CA-$093D
 968++2CB1 95           	.db $0A5F-$09CA
 969++2CB2 9D           	.db $0AFC-$0A5F
 970++2CB3 A8           	.db $0BA4-$0AFC
 971++2CB4 B1           	.db $0C55-$0BA4
 972++2CB5 BB           	.db $0D10-$0C55
msxplayer.asm(973): warning: value 0xCDA is truncated to 8bit value: 0xDA
 973++2CB6 0C DA        	.db $066D*2/256,$066D*2
 974++2CB8 62           	.db $06CF-$066D
 975++2CB9 68           	.db $0737-$06CF
 976++2CBA 6D           	.db $07A4-$0737
 977++2CBB 75           	.db $0819-$07A4
 978++2CBC 7B           	.db $0894-$0819
 979++2CBD 83           	.db $0917-$0894
 980++2CBE 8A           	.db $09A1-$0917
 981++2CBF 92           	.db $0A33-$09A1
 982++2CC0 9C           	.db $0ACF-$0A33
 983++2CC1 A4           	.db $0B73-$0ACF
 984++2CC2 AF           	.db $0C22-$0B73
 985++2CC3 B8           	.db $0CDA-$0C22
msxplayer.asm(986): warning: value 0xE08 is truncated to 8bit value: 0x08
 986++2CC4 0E 08        	.db $0704*2/256,$0704*2
 987++2CC6 6A           	.db $076E-$0704
 988++2CC7 72           	.db $07E0-$076E
 989++2CC8 78           	.db $0858-$07E0
 990++2CC9 7E           	.db $08D6-$0858
 991++2CCA 86           	.db $095C-$08D6
 992++2CCB 90           	.db $09EC-$095C
 993++2CCC 96           	.db $0A82-$09EC
 994++2CCD A0           	.db $0B22-$0A82
 995++2CCE AA           	.db $0BCC-$0B22
 996++2CCF B4           	.db $0C80-$0BCC
 997++2CD0 BE           	.db $0D3E-$0C80
msxplayer.asm(998): warning: value 0xFC0 is truncated to 8bit value: 0xC0
 998++2CD1 0F C0        	.db $07E0*2/256,$07E0*2
 999++2CD3 78           	.db $0858-$07E0
1000++2CD4 88           	.db $08E0-$0858
1001++2CD5 80           	.db $0960-$08E0
1002++2CD6 90           	.db $09F0-$0960
1003++2CD7 98           	.db $0A88-$09F0
1004++2CD8 A0           	.db $0B28-$0A88
1005++2CD9 B0           	.db $0BD8-$0B28
1006++2CDA A8           	.db $0C80-$0BD8
1007++2CDB E0           	.db $0D60-$0C80
1008++2CDC B0           	.db $0E10-$0D60
1009++2CDD E8           	.db $0EF8-$0E10
1010++2CDE
1011++2CDE              ;vars from here can be stripped
1012++2CDE              ;you can move VARS to any other address
1013++2CDE
1014++2CDE              VARS:
1015++2CDE
1016++2CDE              ;ChannelsVars
1017++2CDE              ;struc	CHNPRM
1018++2CDE              ;reset group
1019++2CDE              CHNPRM_PsInOr:	.equ 0	;RESB 1
1020++2CDE              CHNPRM_PsInSm:	.equ 1	;RESB 1
1021++2CDE              CHNPRM_CrAmSl:	.equ 2	;RESB 1
1022++2CDE              CHNPRM_CrNsSl:	.equ 3	;RESB 1
1023++2CDE              CHNPRM_CrEnSl:	.equ 4	;RESB 1
1024++2CDE              CHNPRM_TSlCnt:	.equ 5	;RESB 1
1025++2CDE              CHNPRM_CrTnSl:	.equ 6	;RESW 1
1026++2CDE              CHNPRM_TnAcc:	.equ 8	;RESW 1
1027++2CDE              CHNPRM_COnOff:	.equ 10	;RESB 1
1028++2CDE              ;reset group
1029++2CDE
1030++2CDE              CHNPRM_OnOffD:	.equ 11	;RESB 1
1031++2CDE
1032++2CDE              ;IX for PTDECOD here (+12)
1033++2CDE              CHNPRM_OffOnD:	.equ 12	;RESB 1
1034++2CDE              CHNPRM_OrnPtr:	.equ 13	;RESW 1
1035++2CDE              CHNPRM_SamPtr:	.equ 15	;RESW 1
1036++2CDE              CHNPRM_NNtSkp:	.equ 17	;RESB 1
1037++2CDE              CHNPRM_Note:	.equ 18	;RESB 1
1038++2CDE              CHNPRM_SlToNt:	.equ 19	;RESB 1
1039++2CDE              CHNPRM_Env_En:	.equ 20	;RESB 1
1040++2CDE              CHNPRM_Flags:	.equ 21	;RESB 1
1041++2CDE               ;Enabled - 0,SimpleGliss - 2
1042++2CDE              CHNPRM_TnSlDl:	.equ 22	;RESB 1
1043++2CDE              CHNPRM_TSlStp:	.equ 23	;RESW 1
1044++2CDE              CHNPRM_TnDelt:	.equ 25	;RESW 1
1045++2CDE              CHNPRM_NtSkCn:	.equ 27	;RESB 1
1046++2CDE              CHNPRM_Volume:	.equ 28	;RESB 1
1047++2CDE              CHNPRM_Size	.equ 29	;RESB 1
1048++2CDE              ;endstruc
1049++2CDE
1050++2CDE 00 00 00...  ChanA:	.ds CHNPRM_Size
1051++2CFB 00 00 00...  ChanB:	.ds CHNPRM_Size
1052++2D18 00 00 00...  ChanC:	.ds CHNPRM_Size
1053++2D35
1054++2D35              ;struc	AR
1055++2D35              AR_TonA:	.equ 0	;RESW 1
1056++2D35              AR_TonB:	.equ 2	;RESW 1
1057++2D35              AR_TonC:	.equ 4	;RESW 1
1058++2D35              AR_Noise:	.equ 6	;RESB 1
1059++2D35              AR_Mixer:	.equ 7	;RESB 1
1060++2D35              AR_AmplA:	.equ 8	;RESB 1
1061++2D35              AR_AmplB:	.equ 9	;RESB 1
1062++2D35              AR_AmplC:	.equ 10	;RESB 1
1063++2D35              AR_Env:	.equ 11	;RESW 1
1064++2D35              AR_EnvTp:	.equ 13	;RESB 1
1065++2D35              ;endstruc
1066++2D35
1067++2D35              ;GlobalVars
1068++2D35 00           DelyCnt:	.db 0
1069++2D36 00 00        CurESld:	.dw 0
1070++2D38 00           CurEDel:	.db 0
1071++2D39              Ns_Base_AddToNs:
1072++2D39 00           Ns_Base:	.db 0
1073++2D3A 00           AddToNs:	.db 0
1074++2D3B
1075++2D3B              AYREGS:
1076++2D3B
1077++2D3B 00 00 00...  VT_:	.ds 256 ;CreatedVolumeTableAddress
1078++2E3B
1079++2E3B              EnvBase:	.equ VT_+14
1080++2E3B
1081++2E3B              T1_:	.equ VT_+16 ;Tone tables data depacked here
1082++2E3B
1083++2E3B              T_OLD_1:	.equ T1_
1084++2E3B              T_OLD_2:	.equ T_OLD_1+24
1085++2E3B              T_OLD_3:	.equ T_OLD_2+24
1086++2E3B              T_OLD_0:	.equ T_OLD_3+2
1087++2E3B              T_NEW_0:	.equ T_OLD_0
1088++2E3B              T_NEW_1:	.equ T_OLD_1
1089++2E3B              T_NEW_2:	.equ T_NEW_0+24
1090++2E3B              T_NEW_3:	.equ T_OLD_3
1091++2E3B
1092++2E3B 00 00 00...  NT_:	.ds 192 ;CreatedNoteTableAddress
1093++2EFB
1094++2EFB              ;local var
1095++2EFB              Ampl:	.equ AYREGS+AR_AmplC
1096++2EFB
1097++2EFB              VAR0END:	.equ VT_+16 ;INIT zeroes from VARS to VAR0END-1
1098++2EFB
1099++2EFB              VARSEND: .equ $
1100++2EFB              	endmodule
1101++2EFB              ;Release 0 steps:
1102++2EFB              ;11.Sep.2004 - Note tables creator
1103++2EFB              ;12.Sep.2004 - Volume tables creator; INIT subroutine
1104++2EFB              ;13.Sep.2004 - Play counters, position counters
1105++2EFB              ;14.Sep.2004 - Patterns decoder subroutine
1106++2EFB              ;15.Sep.2004 - Resting (no code)
1107++2EFB              ;16.Sep.2004 - CHREGS subroutine; global debugging; 1st stable
1108++2EFB              ;version was born
1109++2EFB              ;17.Sep.2004 - Debugging and optimization. First release!
1110++2EFB              ;Release 1 steps:
1111++2EFB              ;20.Sep.2004 - local vars moved to code (selfmodified code
1112++2EFB              ;smaller and faster)
1113++2EFB              ;22.Sep.2004 - added mute sound entry at START+8; position
1114++2EFB              ;pointer moved to START+11; added setup and status byte at
1115++2EFB              ;START+10 noloop mode and loop passed flags added
1116++2EFB              ;Release 2 steps:
1117++2EFB              ;28.Sep.2004 - Optimization: code around CHREGS's volume and
1118++2EFB              ;vibrato faster now; zeroing PD_RES through stack; Ton and Ampl
1119++2EFB              ;moved from channel vars to global ones; first position selector
1120++2EFB              ;removed from INIT; optimization for packers(Ivan Roshin method)
1121++2EFB              ;Release 3 steps:
1122++2EFB              ;2.Oct.2004 - optimization in INIT and PD_LOOP (thanks to Ivan
1123++2EFB              ;Roshin)
1124++2EFB              ;4.Oct.2004 - load delay from (hl) in INIT (2 bytes shorter)
1125++2EFB              ;5.Oct.2004 - optimization in PD_LOOP (->PD_LP2)
1126++2EFB              ;7.Oct.2004 - swaping some commands for better packing
1127++2EFB              ;Release 4 steps:
1128++2EFB              ;9.Oct.2004 - optimization around LD HL,SPCCOMS (thanks to Ivan
1129++2EFB              ;Roshin); in PTDECOD swapped BC and DE to optimize C_PORTM;
1130++2EFB              ;removed sam and orn len and loop channel vars; CHREGS totally
1131++2EFB              ;optimized
1132++2EFB              ;Release 5 steps:
1133++2EFB              ;11.Oct.2004 - PD_OrSm and C_PORTM optimized; Ivan Roshin's
1134++2EFB              ;volume tables creator algorithm (51 bytes shorter than mine)
1135++2EFB              ;12.Oct.2004 - Ivan Roshin's note tables creator algorithm (74
1136++2EFB              ;bytes shorter than mine)
1137++2EFB              ;Release 6 steps:
1138++2EFB              ;14.Oct.2004 - loop and next position calculations moved to INIT
1139++2EFB              ;15.Oct.2004 - AdInPt moved to code
1140++2EFB              ;19.Oct.2004 - Env_Del moved to code
1141++2EFB              ;20.Oct.2004 - Version PUSH and POP (1 byte shorter, thanks to
1142++2EFB              ;Ivan Roshin)
1143++2EFB              ;22.Oct.2004 - Env_En moved from Flags' bit to byte (shorter and
1144++2EFB              ;faster code)
1145++2EFB              ;25.Oct.2004 - SETENV optimized
1146++2EFB              ;29.Oct.2004 - Optimized around AddToEn (SBC A,A, thanks to Ivan
1147++2EFB              ;Roshin)
1148++2EFB              ;3.Nov.2004 - Note tables data was compressed; with depacker it
1149++2EFB              ;is 9 bytes shorter than uncompressed (thanks to Ivan Roshin)
1150++2EFB              ;4.Nov.2004 - default sample and ornament both are fixed now
1151++2EFB              ;and placed into code block (6 bytes shorter)
1152++2EFB              ;7.Nov.2004 - LD A,(Ns_Base):LD L,A changed to LD HL,(Ns_Base)
1153++2EFB              ;(thanks to Dima Bystrov)
1154++2EFB              ;9.Nov.2004 - Ns_Base and AddToNs are merged to Ns_Base_AddToNs;
1155++2EFB              ;LD A,255 changed to DEC A (at start of PLAY); added ROUT_A0
1156++2EFB              ;12.Nov.2004 - NtSkCn&Volume are merged (8 bytes smaller init);
1157++2EFB              ;LD BC,T1_ changed to PUSH DE...POP BC in note table creator
1158++2EFB              ;19.Dec.2004 - NT_DATA reorganized (6 bytes shorter, thanks to
1159++2EFB              ;Ivan Roshin); C_PORTM and C_GLISS are merged via SET_STP (48
1160++2EFB              ;tacts slower, but 8 bytes smaller, thanks to Ivan Roshin)
1161++2EFB              ;09.Jan.2005 - Adapted to MSX by Alfonso D.C. a.k.a. Dioniso
1162++2EFB
1163++2EFB              ;Notes:
1164++2EFB              ;Pro Tracker 3.4r can not be detected by header, so PT3.4r tone
1165++2EFB              ;tables realy used only for modules of 3.3 and older versions.
# file closed: player/msxplayer.asm
  24++2EFB              	ELSE
  25++2EFB ~            play:
  26++2EFB ~                ld a, 255
  27++2EFB ~                ld (oldminutes), a
  28++2EFB ~
  29++2EFB ~                call Console.waitForKeyUp
  30++2EFB ~
  31++2EFB ~                ld hl, message
  31++2EFB ~              call DialogBox.msgNoWait
  32++2EFB ~
  33++2EFB ~                ld hl, outputBuffer
  33++2EFB ~              call VTPL.INIT
  34++2EFB ~
  35++2EFB ~
  36++2EFB ~                ld a, 1, (Render.play_next), a
  37++2EFB ~
  38++2EFB ~                IFDEF GS
  39++2EFB ~                call GeneralSound.stopModule
  40++2EFB ~                ENDIF
  41++2EFB ~            .loop
  42++2EFB ~                halt
  42++2EFB ~              di
  42++2EFB ~              call VTPL.PLAY
  42++2EFB ~              ei
  43++2EFB ~                xor a
  43++2EFB ~              in a, (#fe)
  43++2EFB ~              cpl
  43++2EFB ~              and 31
  43++2EFB ~              jp nz, .stopKey
  44++2EFB ~                call printRTC
  45++2EFB ~                ld a, (VTPL.SETUP)
  45++2EFB ~              rla
  45++2EFB ~              jr nc, .loop
  46++2EFB ~                ld a, 1, (Render.play_next), a
  47++2EFB ~            .stop
  48++2EFB ~                call VTPL.MUTE
  49++2EFB ~
  50++2EFB ~                IFDEF AY
  51++2EFB ~                call restoreAyState
  52++2EFB ~                ENDIF
  53++2EFB ~
  54++2EFB ~                call Console.waitForKeyUp
  55++2EFB ~                ret
  56++2EFB ~            .stopKey
  57++2EFB ~                xor a
  57++2EFB ~              ld (Render.play_next), a
  58++2EFB ~                jr .stop
  59++2EFB ~
  60++2EFB ~                IFDEF AY
  61++2EFB ~            restoreAyState:
  62++2EFB ~                ld a, #07
  63++2EFB ~                ld bc, #fffd
  64++2EFB ~                out (c), a
  65++2EFB ~                ld a, #fc
  66++2EFB ~                ld b, #bf
  67++2EFB ~                out (c), a ; Enable read mode
  68++2EFB ~
  69++2EFB ~                ld a, #0e
  70++2EFB ~                ld bc, #fffd
  71++2EFB ~                out (c), a
  72++2EFB ~                ret
  73++2EFB ~            	ENDIF
  74++2EFB ~            message db "Press key to stop...", 0
  75++2EFB ~                ENDMODULE
  76++2EFB ~                include "player.asm"
  77++2EFB                  ENDIF
# file closed: player/vortex-processor.asm
  17+ 2EFB                  include "player/mod-processor.asm"
# file opened: player/mod-processor.asm
   1++2EFB                  MODULE ModProcessor
   2++2EFB                  ifdef GS
   3++2EFB ~
   4++2EFB ~                macro GS_WaitCommand2
   5++2EFB ~            .wait
   6++2EFB ~                in a, (CMD)
   7++2EFB ~                rrca
   8++2EFB ~                jr c, .wait
   9++2EFB ~                endm
  10++2EFB ~
  11++2EFB ~                macro GS_SendCommand2 nn
  12++2EFB ~                ld a, nn
  12++2EFB ~              out (CMD), a
  13++2EFB ~                endm
  14++2EFB ~
  15++2EFB ~            play:
  16++2EFB ~                ld a, 255
  17++2EFB ~                ld (oldminutes), a
  18++2EFB ~
  19++2EFB ~                call Console.waitForKeyUp
  20++2EFB ~
  21++2EFB ~                ld hl, Gopher.requestbuffer
  21++2EFB ~              call DialogBox.msgNoWait
  22++2EFB ~
  23++2EFB ~                ;ld a, 1, (Render.play_next), a
  24++2EFB ~            	xor a
  25++2EFB ~            	ld (last_song_position),a
  26++2EFB ~
  27++2EFB ~                ld h, #00, a, 32
  28++2EFB ~                call TextMode.fillLine
  29++2EFB ~                ld de, #0001
  29++2EFB ~              call TextMode.gotoXY
  30++2EFB ~                ld hl, message
  30++2EFB ~              call TextMode.printZ
  31++2EFB ~                ld a, #00
  32++2EFB ~                call TextMode.highlightLine
  33++2EFB ~
  34++2EFB ~            .loop
  35++2EFB ~                halt
  36++2EFB ~                xor a
  37++2EFB ~                call Console.peekC
  38++2EFB ~                cp Console.BACKSPACE
  39++2EFB ~                jp z, .stopKey
  40++2EFB ~            	cp SPACE
  41++2EFB ~                jp z, .playNext
  42++2EFB ~
  43++2EFB ~                call printRTC
  44++2EFB ~
  45++2EFB ~               ;проверка что MOD начал играть сначала
  46++2EFB ~                GS_SendCommand2 CMD_GET_SONG_POSITION
  47++2EFB ~                GS_WaitCommand2
  48++2EFB ~            	ld a,(last_song_position) ;предыдущая позиция
  49++2EFB ~            	ld c,a
  50++2EFB ~            	in a,(DATA) ;текущая позиция
  51++2EFB ~            	ld (last_song_position),a
  52++2EFB ~            	cp c
  53++2EFB ~            	jr nc, .loop ;если не меньше, продолжаем играть
  54++2EFB ~            .playNext
  55++2EFB ~                ld a, 1, (Render.play_next), a ;флаг что надо будет играть следующий файл
  56++2EFB ~            .stop
  57++2EFB ~                call GeneralSound.stopModule
  58++2EFB ~
  59++2EFB ~                call Console.waitForKeyUp
  60++2EFB ~                ret
  61++2EFB ~            .stopKey
  62++2EFB ~                xor a
  62++2EFB ~              ld (Render.play_next), a ;флаг что не надо играть следующий файл
  63++2EFB ~                jr .stop
  64++2EFB ~
  65++2EFB ~            message
  66++2EFB ~                IFDEF SCREEN64
  67++2EFB ~                ENDIF
  68++2EFB ~                IFDEF SCREEN80
  69++2EFB ~                db "       "
  70++2EFB ~                ENDIF
  71++2EFB ~                IFDEF SCREEN85
  72++2EFB ~                db "         "
  73++2EFB ~                ENDIF
  74++2EFB ~
  75++2EFB ~                db "Playing MODs [SPACE] for next song [BACKSPACE] for stop playing.", 0
  76++2EFB ~
  77++2EFB ~            CMD_GET_SONG_POSITION     = #60
  78++2EFB ~            last_song_position db 0
  79++2EFB ~
  80++2EFB ~            ;; Control ports
  81++2EFB ~            CMD  = 187
  82++2EFB ~            DATA = 179
  83++2EFB                  endif
  84++2EFB                  ENDMODULE
  85++2EFB
# file closed: player/mod-processor.asm
  18+ 2EFB                  include "screen/rtc.asm"
# file opened: screen/rtc.asm
   1++2EFB              printRTC
   2++2EFB              	IFDEF RTC
   3++2EFB CD D9 20     	call Clock.readTime
   4++2EFE
   5++2EFE 3A A0 2F     	ld a, (oldminutes)
   6++2F01 57           	ld d,a
   7++2F02 3A 96 2F     	ld a, (minutes)
   8++2F05 BA           	cp d					; Update only if minutes changed
   9++2F06 C8           	ret z
  10++2F07 32 A0 2F     	ld (oldminutes), a
  11++2F0A
  12++2F0A 16 01        	ld d,1 ;координаты Y,X
  13++2F0C 1E 49        	ld e,80 - 7
  14++2F0E CD 70 02     	call TextMode.gotoXY
  15++2F11 3E 5B        	ld a,'['
  16++2F13 CD EC 01     	call TextMode.putC
  17++2F16 26 00        	ld h,0
  18++2F18 3A 95 2F     	ld a,(hours) ;часы
  19++2F1B 6F           	ld l,a
  20++2F1C CD 3F 2F     	call toDecimal
  21++2F1F 21 9B 2F     	ld hl,decimalS+3
  22++2F22 CD E1 01     	call TextMode.printZ
  23++2F25 3E 3A        	ld a,':'
  24++2F27 CD EC 01     	call TextMode.putC
  25++2F2A 26 00        	ld h,0
  26++2F2C 3A 96 2F     	ld a,(minutes) ;минуты
  27++2F2F 6F           	ld l,a
  28++2F30 CD 3F 2F     	call toDecimal
  29++2F33 21 9B 2F     	ld hl,decimalS+3
  30++2F36 CD E1 01     	call TextMode.printZ
  31++2F39              	;ld a,':'
  32++2F39              	;call TextMode.putC
  33++2F39              	;ld h,0
  34++2F39              	;ld a,(seconds) ;секунды
  35++2F39              	;ld l,a
  36++2F39              	;call toDecimal
  37++2F39              	;ld hl,decimalS+3
  38++2F39              	;call TextMode.printZ
  39++2F39 3E 5D        	ld a,']'
  40++2F3B CD EC 01     	call TextMode.putC
  41++2F3E C9           	ret
  42++2F3F
  43++2F3F              toDecimal		;конвертирует 2 байта в 5 десятичных цифр
  44++2F3F              				;на входе в HL число
  45++2F3F 11 10 27     	ld de,10000 ;десятки тысяч
  46++2F42 3E FF        	ld a,255
  47++2F44              toDecimal10k
  48++2F44 A7           	and a
  49++2F45 ED 52        	sbc hl,de
  50++2F47 3C           	inc a
  51++2F48 30 FA        	jr nc,toDecimal10k
  52++2F4A 19           	add hl,de
  53++2F4B C6 30        	add a,48
  54++2F4D 32 98 2F     	ld (decimalS),a
  55++2F50 11 E8 03     	ld de,1000 ;тысячи
  56++2F53 3E FF        	ld a,255
  57++2F55              toDecimal1k
  58++2F55 A7           	and a
  59++2F56 ED 52        	sbc hl,de
  60++2F58 3C           	inc a
  61++2F59 30 FA        	jr nc,toDecimal1k
  62++2F5B 19           	add hl,de
  63++2F5C C6 30        	add a,48
  64++2F5E 32 99 2F     	ld (decimalS+1),a
  65++2F61 11 64 00     	ld de,100 ;сотни
  66++2F64 3E FF        	ld a,255
  67++2F66              toDecimal01k
  68++2F66 A7           	and a
  69++2F67 ED 52        	sbc hl,de
  70++2F69 3C           	inc a
  71++2F6A 30 FA        	jr nc,toDecimal01k
  72++2F6C 19           	add hl,de
  73++2F6D C6 30        	add a,48
  74++2F6F 32 9A 2F     	ld (decimalS+2),a
  75++2F72 11 0A 00     	ld de,10 ;десятки
  76++2F75 3E FF        	ld a,255
  77++2F77              toDecimal001k
  78++2F77 A7           	and a
  79++2F78 ED 52        	sbc hl,de
  80++2F7A 3C           	inc a
  81++2F7B 30 FA        	jr nc,toDecimal001k
  82++2F7D 19           	add hl,de
  83++2F7E C6 30        	add a,48
  84++2F80 32 9B 2F     	ld (decimalS+3),a
  85++2F83 11 01 00     	ld de,1 ;единицы
  86++2F86 3E FF        	ld a,255
  87++2F88              toDecimal0001k
  88++2F88 A7           	and a
  89++2F89 ED 52        	sbc hl,de
  90++2F8B 3C           	inc a
  91++2F8C 30 FA        	jr nc,toDecimal0001k
  92++2F8E 19           	add hl,de
  93++2F8F C6 30        	add a,48
  94++2F91 32 9C 2F     	ld (decimalS+4),a
  95++2F94 C9           	ret
  96++2F95              hours
  97++2F95 00           	db 0
  98++2F96              minutes
  99++2F96 00           	db 0
 100++2F97              seconds
 101++2F97 00           	db 0
 102++2F98 00 00 00...  decimalS	ds 7 ;десятичные цифры
 103++2F9F              	ENDIF
 104++2F9F C9           	ret
 105++2FA0              oldminutes		; не убирать под услоаие
 106++2FA0 FF           	db 255
 107++2FA1
 108++2FA1
 109++2FA1
 110++2FA1
# file closed: screen/rtc.asm
  19+ 2FA1 66 6F 6E 74  fontName db "font.bin",0
  19+ 2FA5 2E 62 69 6E
  19+ 2FA9 00
  20+ 2FAA              start:
  21+ 2FAA 2A 06 00         ld hl,(0x0006)
  22+ 2FAD 01 F9 2F         ld bc,outputBuffer
  23+ 2FB0 ED 42            sbc hl,bc
  24+ 2FB2 01 00 01         ld bc, 0x100
  25+ 2FB5 ED 42            sbc hl,bc
  26+ 2FB7 22 F7 2F         ld (ramtop),hl
  27+ 2FBA
  28+ 2FBA CD D9 1B         call TcpIP.init
  28+ 2FBD D2 CC 2F       jp nc, noTcpIP ; No TCP/IP - no browser! Anyway you can use "useless tcp/ip driver"
  29+ 2FC0 CD 77 02         call TextMode.loadFont
  30+ 2FC3 CD 03 01         call TextMode.init
  31+ 2FC6 CD 18 0A         call History.home
  32+ 2FC9 C3 8E 02         jp exit
  33+ 2FCC              noTcpIP:
  34+ 2FCC 21 D3 2F         ld hl, .err
  35+ 2FCF CD 9D 09         call Console.putStringZ
  36+ 2FD2 C7               rst 0
  37+ 2FD3 0D 0A 4E 6F  .err db 13,10,"No TCP/IP implementation found!",13,10,0
  37+ 2FD7 20 54 43 50
  37+ 2FDB 2F 49 50 20
  37+ 2FDF 69 6D 70 6C
  37+ 2FE3 65 6D 65 6E
  37+ 2FE7 74 61 74 69
  37+ 2FEB 6F 6E 20 66
  37+ 2FEF 6F 75 6E 64
  37+ 2FF3 21 0D 0A 00
  38+ 2FF7              ramtop:
  39+ 2FF7 00 D0            db 0x00, 0xD0
  40+ 2FF9              outputBuffer:
  41+ 2FF9              font:
  42+ 2FF9                  display "ENDS: ", $
  43+ 2FF9                  display "Buff size: ", #D000 - $  ;ramtop
# file closed: main-msx.asm
  15  2FF9                  ELSE
  16  2FF9 ~                    include "main-all.asm"
  17  2FF9                  ENDIF
# file closed: main.asm
