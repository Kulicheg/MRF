# file opened: main.asm
   1  0000                  DEFINE TCP_BUF_SIZE 1024
   2  0000              ; Generate version string
   3  0000                  LUA ALLPASS
   4  0000 ~                v = tostring(sj.get_define("V"))
   5  0000 ~                maj = string.sub(v, 1,1)
   6  0000 ~                min = string.sub(v, 2,2)
   7  0000 ~                sj.insert_define("VERSION_STRING", "\"" .. maj .. "." .. min .. "\"")
   8  0000 ~
   9  0000 ~                b = tostring(sj.get_define("BLD"))
  10  0000 ~                sj.insert_define("BUILD_STRING", "\"" .. b .. "\"")
  11  0000                  ENDLUA
  12  0000
  13  0000                  IFNDEF MSX
  14  0000                  device	zxspectrum128
  15  0000                  IFDEF NEDOOS
  16  0000              	DEFINE CRLF "\r\n"
  17  0000                      MODULE nos
  18  0000                          include "../_sdk/sysdefs.asm"
# file opened: ../_sdk/sysdefs.asm
   1+ 0000              BDOS=0x0005
   2+ 0000              COMMANDLINE=0x0080
   3+ 0000              COMMANDLINE_sz=0x0080
   4+ 0000              PROGSTART=0x0100
   5+ 0000
   6+ 0000              ;from userkrnl.asm:
   7+ 0000              curpg4000=0x0043
   8+ 0000              curpg16k=curpg4000;0x0043
   9+ 0000              curpg8000=0x0049
  10+ 0000              curpg32klow=curpg8000;0x0049
  11+ 0000              curpgc000=0x004f
  12+ 0000              curpg32khigh=curpgc000;0x004f
  13+ 0000              user_scr0_low=0x0017
  14+ 0000              user_scr0_high=0x0035
  15+ 0000              user_scr1_low=0x0036
  16+ 0000              user_scr1_high=0x0037
  17+ 0000
  18+ 0000              MAXPATH_sz=256;64
  19+ 0000              DIRMAXFILENAME64=64 ;including EOL
  20+ 0000
  21+ 0000              ;------------------------СТРУКТУРЫ CP/M --------------------------------------
  22+ 0000              ;from CP/M (try to avoid use!):
  23+ 0000              CMD_PRCHAR=0x05 ;e=char
  24+ 0000              CMD_SETDRV=0x0e ;e=drive ;out: a!=0 => not mounted, [l=number of drives]
  25+ 0000              CMD_FOPEN=0x0f ;de = pointer to unopened FCB
  26+ 0000              CMD_FCLOSE=0x10 ;de = pointer to opened FCB
  27+ 0000              CMD_FSEARCHFIRST=0x11 ;de = pointer to unopened FCB (filename with ????????), read matching FCB to DTA. DTA had to set every time
  28+ 0000              CMD_FSEARCHNEXT=0x12 ;(NOT CP/M compatible!!!)de = pointer to unopened FCB (filename with ????????), read matching FCB to DTA. DTA had to set every time
  29+ 0000              CMD_FDEL=0x13 ;DEPRECATED!!!!! ;DE = Pointer to unopened FCB
  30+ 0000              CMD_FREAD=0x14 ;DE = Pointer to opened FCB, read 128 bytes in DTA, out: a=128^bytes actually read (not CP/M!)
  31+ 0000              CMD_FWRITE=0x15 ;DE = Pointer to opened FCB, write 128 bytes from DTA
  32+ 0000              CMD_FCREATE=0x16 ;DE = Pointer to unopened FCB
  33+ 0000              CMD_SETDTA=0x1a ;DE = data transfer address (DTA)
  34+ 0000              CMD_RNDRD=0x21 ;DE = Pointer to opened FCB. The file position is defined by the three byte random record number in the FCB (bytes 21h...23h). TP uses 21,22
  35+ 0000              CMD_RNDWR=0x22 ;DE = Pointer to opened FCB. The file position is defined by the three byte random record number in the FCB (bytes 21h...23h). TP uses 21,22
  36+ 0000
  37+ 0000              ;from MSX-DOS:
  38+ 0000              CMD_SEEKHANDLE=0x4a ;b=file handle, dehl=offset [signed, a=method:0=begin,1=cur,2=end TODO]
  39+ 0000              CMD_OPENHANDLE=0x43 ;DE = Drive/path/file ASCIIZ string
  40+ 0000                                      ;[A = Open mode. b0 set => no write, b1 set => no read, b2 set => inheritable, b3..b7   -  must be clear]
  41+ 0000                                      ;out: B = new file handle, A=error
  42+ 0000              CMD_CREATEHANDLE=0x44 ;DE = Drive/path/file ASCIIZ string
  43+ 0000                                      ;[A = Open mode. b0 set => no write, b1 set => no read, b2 set => inheritable, b3..b7   -  must be clear]
  44+ 0000                                      ;[B = b0..b6 = Required attributes, b7 = Create new flag]
  45+ 0000                                      ;out: B = new file handle, A=error
  46+ 0000              CMD_CLOSEHANDLE=0x45 ;B = file handle, out: A=error
  47+ 0000              CMD_READHANDLE=0x48 ;B = file handle, DE = Buffer address, HL = Number of bytes to read, out: HL = Number of bytes actually read, A=error(=0)
  48+ 0000              CMD_WRITEHANDLE=0x49 ;B = file handle, DE = Buffer address, HL = Number of bytes to write, out: HL = Number of bytes actually written, A=error(=0)
  49+ 0000              CMD_RENAME=0x4e ;DE = Drive/path/file ASCIIZ string, HL = New filename ASCIIZ string (NOT MSXDOS compatible! with Drive/path!) ;RENAME OR MOVE FILE
  50+ 0000              CMD_CHDIR=0x5a ;DE = Pointer to ASCIIZ string. Out A=error
  51+ 0000              CMD_PARSEFNAME=0x5c ;NOT RECOMMENDED ;de(dotname) -> hl(cpmname) ;out: de=pointer to termination character, hl=buffer filled in
  52+ 0000              CMD_GETPATH=0x5e ;DE = Pointer to MAXPATH_sz byte buffer ;out: DE = Filled in with whole path string (WITH DRIVE! Finished by slash only if root dir), HL = Pointer to start of last item
  53+ 0000              CMD_DELETE=0x4d ;DE = Drive/path/file ASCIIZ string, out: A = Error
  54+ 0000
  55+ 0000              ;invented:
  56+ 0000              CMD_SETTIME=0xc9 ;ix=date, hl=time
  57+ 0000              CMD_GETMEMPORTS=0xca ;out: ix=memport0000, bc=memport4000, de=memport8000, hl=memportc000
  58+ 0000              CMD_GETPAGEOWNER=0x0cb ;e=page ;out: e=owner id (0=free, 0xff=system)
  59+ 0000              CMD_GETCONFIG=0xcc ;out: H=system drive, L= 1-Evo 2-ATM2 3-ATM3 6-p2.666, E=pgsys(system page), D= TR-DOS page, IXBC=SVN revision
  60+ 0000              CMD_GETCHILDRESULT=0xcd ;hl=childresult
  61+ 0000              CMD_RESERV_1=0xce
  62+ 0000              CMD_OPENDIR=0xcf ;de=path
  63+ 0000              CMD_READDIR=0xd0 ;de=buf for FILINFO (if no LNAME, use FNAME), 0x00 in FILINFO_FNAME = end dir
  64+ 0000              CMD_HIDEFROMPARENT=0xd1 ;for tasks with their own screen handling ;hl=result
  65+ 0000              CMD_SETSTDINOUT=0xd2 ;b=id, e=stdin, d=stdout, h=stderr
  66+ 0000              CMD_GETSTDINOUT=0xd3 ;e=stdin, d=stdout, h=stderr, l=hgt of stdout
  67+ 0000              CMD_PLAYCOVOX=0xd4 ;hl=data (0xc000+, 0x00=end), de=pagetable (0x0000+), hx=delay (18=11kHz, 7=22kHz, 1=44kHz)
  68+ 0000              CMD_SETMUSIC=0xd5 ;hl=muzaddr (0x4000..0x7fff, 0=killmuz), a=muzpg (pages in 0x8000, 0xc000 are taken from current user memory)
  69+ 0000              CMD_READSECTORS=0xd6 ;b=drive, de=buffer, ixhl=sector number, a=count ;out: a=error
  70+ 0000              CMD_WRITESECTORS=0xd7 ;b=drive, de=buffer, ixhl=sector number, a=count ;out: a=error
  71+ 0000              CMD_SETBORDER=0xd8 ;e=0..15
  72+ 0000              CMD_SETWAITING=0xd9 ;don't use directly! ;set WAITING state for current task
  73+ 0000              CMD_GETFILESIZE=0xda ;b=handle, out: dehl=file size
  74+ 0000              CMD_WIZNETOPEN=0xdb ;A=SOCKET, L=subfunction (see sys_h.asm)
  75+ 0000              CMD_WIZNETCLOSE=0xdc ;A=SOCKET, E=(0 - закрыть сразу, 1 - закрыть только если буфер приёма пуст)
  76+ 0000              CMD_WIZNETREAD=0xdd 	;if TCP: A=SOCKET, de=buffer_ptr, HL=sizeof(buffer)
  77+ 0000              						;else:	 A=SOCKET, IX=buffer_ptr, HL=sizeof(buffer), de=sockaddr_in ptr
  78+ 0000              						;out: HL=count if HL < 0 then A=error
  79+ 0000              CMD_WIZNETWRITE=0xde 	;if TCP: A=SOCKET, de=buffer_ptr, HL=sizeof(buffer)
  80+ 0000              						;else:	 A=SOCKET, IX=buffer_ptr, HL=sizeof(buffer), de=sockaddr_in ptr
  81+ 0000              						;out: HL=count if HL < 0 then A=error
  82+ 0000              CMD_DROPAPP=0xdf ;e=id
  83+ 0000              CMD_GETAPPMAINPAGES=0xe0 ;e=id ;out: d,e,h,l=pages in 0000,4000,8000,c000, c=flags, a=error
  84+ 0000              CMD_GETXY=0xe1 ;OBSOLETE ;out: de=yx ;GET CURSOR POSITION
  85+ 0000              CMD_GETTIME=0xe2 ;out: ix=date, hl=time
  86+ 0000              CMD_GETFILETIME=0xe3 ;de=Drive/path/file ASCIIZ string, out: ix=date, hl=time
  87+ 0000              CMD_SETFILETIME=0xe4 ;de=Drive/path/file ASCIIZ string, ix=date, hl=time
  88+ 0000              CMD_TELLHANDLE=0xe5 ;b=file handle, out: dehl=offset ;GET POSITION IN FILE
  89+ 0000              CMD_SCROLLUP=0xe6 ;OBSOLETE ;de=topyx, hl=hgt,wid ;x, wid even ;TEXTMODE ONLY
  90+ 0000              CMD_SCROLLDOWN=0xe7 ;OBSOLETE ;de=topyx, hl=hgt,wid ;x, wid even ;TEXTMODE ONLY
  91+ 0000              CMD_GETFILINFO=0xe8 ;de=filename, hl=buf[FILINFO_sz] to get FILINFO
  92+ 0000              CMD_SETMAINPAGE=0xe9 ;e=page for 0x0000
  93+ 0000              CMD_SETSYSDRV=0xea ;out: a!=0 => not mounted, l=number of drives
  94+ 0000              CMD_MKDIR=0xeb ;DE = Pointer to ASCIIZ string, out: a
  95+ 0000              CMD_CHECKPID=0xec ;e=id ;check if this child(!) app exists, out: a!=0 => OK, or else a=0
  96+ 0000              CMD_FREEZEAPP=0xed ;e=id ;disable app and make non-graphic
  97+ 0000              CMD_GETATTR=0xee ;DEPRECATED!!! ;out: a ;READ ATTR AT CURSOR POSITION
  98+ 0000              CMD_MOUNT=0xef ;e=drive, out: a
  99+ 0000              CMD_GETKEYMATRIX=0xf0 ;out: bcdehlix = halfrows cs...space
 100+ 0000              CMD_GETTIMER=0xf1 ;out: dehl=timer
 101+ 0000              CMD_YIELD=0xf2 ;schedule to another app (use YIELD macro instead of HALT!!!)
 102+ 0000              CMD_RUNAPP=0xf3 ;e=id ;ACTIVATE DISABLED APP
 103+ 0000              CMD_NEWAPP=0xf4 ;out: b=id, a=error, dehl=newapp pages in 0000,4000,8000,c000 ;MAKE NEW DISABLED APP
 104+ 0000              CMD_PRATTR=0xf5 ;OBSOLETE ;e=color byte ;DRAW ATTR AT CURSOR POSITION
 105+ 0000              CMD_CLS=0xf6 ;e=color byte
 106+ 0000              CMD_SETCOLOR=0xf7 ;e=color byte
 107+ 0000              CMD_SETXY=0xf8 ;de=yx ;SET CURSOR POSITION
 108+ 0000              CMD_SETGFX=0xf9 ;e=0:EGA, e=2:MC, e=3:6912, e=6:text ;+8 for noturbo ;+0x80 for auto screen pages keeping ;+SET FOCUS ;e=-1: disable gfx (out: e=old gfxmode)
 109+ 0000              CMD_SETPAL=0xfa ;de=palette (32 bytes)
 110+ 0000              CMD_GETMAINPAGES=0xfb ;out: d,e,h,l=pages in 0000,4000,8000,c000, c=flags, b=id
 111+ 0000              CMD_NEWPAGE=0xfc ;out: a=0 (OK)/!=0 (fail), e=page
 112+ 0000              CMD_DELPAGE=0xfd ;e=page ;GIVE SOME PAGE BACK TO THE OS
 113+ 0000              CMD_SETSCREEN=0xfe ;e=screen=0..1
 114+ 0000              CMD_YIELDKEEP=0xff
 115+ 0000
 116+ 0000              ;	STRUCT FILINFO
 117+ 0000              FILINFO_FSIZE=0;	        DWORD		;/* FILE SIZE */
 118+ 0000              FILINFO_FDATE=4;	        WORD		;/* LAST MODIFIED DATE */
 119+ 0000              FILINFO_FTIME=6;	        WORD		;/* LAST MODIFIED TIME */
 120+ 0000              FILINFO_FATTRIB=8;	        BYTE		;/* ATTRIBUTE */
 121+ 0000              FILINFO_FNAME=9;	        BLOCK 13,0	;/* SHORT FILE NAME (8.3 FORMAT with dot and terminator) */
 122+ 0000              FILINFO_LNAME=22;	        BLOCK DIRMAXFILENAME64,0	;/* LONG FILE NAME (ASCIIZ) */
 123+ 0000              FILINFO_sz=FILINFO_LNAME+DIRMAXFILENAME64
 124+ 0000
 125+ 0000              ;        STRUCT FCB
 126+ 0000              FCB_drv=0 ;drv             BYTE; /* drive number */
 127+ 0000              FCB_FNAME=1 ;FNAME           BLOCK 11;
 128+ 0000              FCB_EXTENTNUMBERLO=12 ;EXTENTNUMBERLO  BYTE; ;NU
 129+ 0000              FCB_FATTRIB=13 ;FATTRIB         BYTE;
 130+ 0000              FCB_EXTENTNUMBERHI=14 ;EXTENTNUMBERHI  BYTE; ;NU
 131+ 0000              FCB_RECORDCOUNT=15 ;RECORDCOUNT     BYTE; ;NU
 132+ 0000              FCB_FSIZE=16 ;FSIZE           DWORD;
 133+ 0000              FCB_FTIME=20 ;FTIME           WORD;
 134+ 0000              FCB_FFSFCB=22 ;FFSFCB          WORD; /* TRDOSFCB или FIL */
 135+ 0000              FCB_DIRPOS=24 ;DIRPOS          WORD; /* привязка к точке поиска */
 136+ 0000              ;RESERVED        BLOCK 2 ;reserved (14 in MS-DOS???)
 137+ 0000              FCB_RECORDSIZE=28 ;RECORDSIZE      WORD; /* must be 128 */
 138+ 0000              FCB_FDATE=30 ;FDATE           WORD
 139+ 0000              FCB_FRECORD=32 ;FRECORD         BYTE; /*номер записи внутри экстента*/
 140+ 0000              ;	ENDS
 141+ 0000              FCB_sz=33
 142+ 0000
 143+ 0000              FATTRIB_DIR=0x10 ;mask for FCB_FATTRIB
 144+ 0000
 145+ 0000              ;Application flags:
 146+ 0000
 147+ 0000              factive=0 ;0=zombie, 1=scheduled ;TODO есть сообщения: SET при добавлении сообщения, RES при взятии последнего сообщения
 148+ 0000              fchildfinished=1 ;устанавливается при завершении дочернего процесса (чтобы в этом случае проскочить SETWAITING), сбрасывается по GETCHILDRESULT
 149+ 0000              ;fcritical=4 (чтобы не портить hl)
 150+ 0000              fgfx=5 ;app can take focus
 151+ 0000              ;ffocus=6 ;app has focus (only one can)
 152+ 0000              fwaiting=7 ;app is waiting for another app, can't take focus by hand
 153+ 0000
 154+ 0000              ;Internal keyboard values:
 155+ 0000
 156+ 0000              extbase=0xb0 ;with H=1 ;can't mix with 32..127 ;temporary internal code
 157+ 0000              csbase=0xf3 ;temporary internal code
 158+ 0000              extenter=csbase+12 ;temporary internal code
 159+ 0000              graphlock=extenter ;temporary internal code
 160+ 0000              csnoshifts=0;NOKEY ;cs release result for AltGr ;temporary internal code
 161+ 0000              csspace=27 ;temporary internal code
 162+ 0000              csss=9 ;Tab ;temporary internal code
 163+ 0000              key_extspace=0;NOKEY ;extbase+14 ;unusable because happens simultaneously with extZ because of keyboard matrix
 164+ 0000              cssspress=csss ;temporary internal code (impossible to type without AltGr before language recoding)
 165+ 0000              ssnoshifts=0xd1 ;temporary internal code (impossible to type without AltGr before language recoding)
 166+ 0000              ext0=extbase+0
 167+ 0000              ext1=extbase+1
 168+ 0000              ext2=extbase+2
 169+ 0000              ext3=extbase+3
 170+ 0000              ext4=extbase+4
 171+ 0000              ext5=extbase+5
 172+ 0000              ext6=extbase+6
 173+ 0000              ext7=extbase+7
 174+ 0000              ext8=extbase+8
 175+ 0000              ext9=extbase+9
 176+ 0000              cs0=8 ;as extH (CP/M) ;csbase+0 reserved
 177+ 0000              cs1=csbase+1 ;readable only in keynolang (switches language)
 178+ 0000              cs2=csbase+2 ;readable only in keynolang (switches Caps Lock)
 179+ 0000              cs3=csbase+3
 180+ 0000              cs4=csbase+4
 181+ 0000              cs5=csbase+5
 182+ 0000              cs6=csbase+6
 183+ 0000              cs7=csbase+7
 184+ 0000              cs8=csbase+8
 185+ 0000              cs9=csbase+9
 186+ 0000
 187+ 0000              ;Usable key codes:
 188+ 0000
 189+ 0000              extA=1
 190+ 0000              extB=2
 191+ 0000              extC=3
 192+ 0000              extD=4
 193+ 0000              extE=5
 194+ 0000              extF=6
 195+ 0000              extG=7
 196+ 0000              extH=8 ;as cs0 (BackSpace)
 197+ 0000              extI=9 ;as csss (Tab)
 198+ 0000              extJ=10
 199+ 0000              extK=11
 200+ 0000              extL=12
 201+ 0000              extM=13 ;as Enter
 202+ 0000              extN=14
 203+ 0000              extO=15
 204+ 0000              extP=16
 205+ 0000              extQ=17
 206+ 0000              extR=18
 207+ 0000              extS=19
 208+ 0000              extT=20
 209+ 0000              extU=21
 210+ 0000              extV=22
 211+ 0000              extW=23
 212+ 0000              extX=24
 213+ 0000              extY=25
 214+ 0000              extZ=26
 215+ 0000
 216+ 0000              ss0='_'
 217+ 0000              ss1='!'
 218+ 0000              ss2='@'
 219+ 0000              ss3='#'
 220+ 0000              ss4='$'
 221+ 0000              ss5='%'
 222+ 0000              ss6='&'
 223+ 0000              ss7=0x27;'\''
 224+ 0000              ss8='('
 225+ 0000              ss9=')'
 226+ 0000              ssA='~'
 227+ 0000              ssB='*'
 228+ 0000              ssC='?'
 229+ 0000              ssD=0x5c;'\\'
 230+ 0000              ssE=30;extbase+30
 231+ 0000              ssF='{'
 232+ 0000              ssG='}'
 233+ 0000              ssH='^'
 234+ 0000              ssI=127;extbase+12
 235+ 0000              ssJ='-'
 236+ 0000              ssK='+'
 237+ 0000              ssL='='
 238+ 0000              ssM='.'
 239+ 0000              ssN=','
 240+ 0000              ssO=';'
 241+ 0000              ssP=0x22;'"'
 242+ 0000              ssQ=28;extbase+28
 243+ 0000              ssR='<'
 244+ 0000              ssS='|'
 245+ 0000              ssT='>'
 246+ 0000              ssU=']'
 247+ 0000              ssV='/'
 248+ 0000              ssW=29;extbase+29
 249+ 0000              ssX='`'
 250+ 0000              ssY='['
 251+ 0000              ssZ=':'
 252+ 0000
 253+ 0000              key_home=ssQ
 254+ 0000              key_end=ssE
 255+ 0000              key_ins=ssW
 256+ 0000              key_enter=13
 257+ 0000              key_left=cs5
 258+ 0000              key_right=cs8
 259+ 0000              key_up=cs7
 260+ 0000              key_down=cs6
 261+ 0000              key_pgup=cs3
 262+ 0000              key_pgdown=cs4
 263+ 0000              key_backspace=cs0
 264+ 0000              key_del=cs9
 265+ 0000              key_ssleft=ext5
 266+ 0000              key_ssright=ext8
 267+ 0000              key_ssup=ext7
 268+ 0000              key_ssdown=ext6
 269+ 0000              key_sspgup=ext3
 270+ 0000              key_sspgdown=ext4
 271+ 0000              key_ssbackspace=ext0
 272+ 0000              key_ssdel=ext9
 273+ 0000              key_tab=csss
 274+ 0000              key_esc=csspace
 275+ 0000              key_csenter=csbase+10
 276+ 0000              key_ssspace=csbase+11
 277+ 0000              key_F1=ext1
 278+ 0000              key_F2=ext2
 279+ 0000              key_F3=ext3
 280+ 0000              key_F4=ext4
 281+ 0000              key_F5=ext5
 282+ 0000              key_F6=ext6
 283+ 0000              key_F7=ext7
 284+ 0000              key_F8=ext8
 285+ 0000              key_F9=ext9
 286+ 0000              key_F10=ext0
 287+ 0000
 288+ 0000              NOKEY=0
 289+ 0000              key_redraw=31 ;if equal to ssEnter, then scheduling through idle will catch ssEnter twice
 290+ 0000              ;single ext (Tab) is returned at key release (TODO keypress in keynolang)
 291+ 0000              ;single ss, cs keypresses are not returned, or else CP/M-like apps can't filter them out (TODO in keynolang, and all other key releases too)
 292+ 0000
# file closed: ../_sdk/sysdefs.asm
  19  0000                      ENDMODULE
  20  0000                      org nos.PROGSTART
  21  0100                      ELSE
  22  0100 ~            	DEFINE CRLF "\r"
  23  0100 ~                    org 24576
  24  0100                  ENDIF
  25  0100              asmOrg:
  26  0100                  align 256
  27  0100 C3 F7 4B         jp start
  28  0103                  include "vdp/index.asm"
# file opened: vdp/index.asm
   1+ 0103                  IFDEF TIMEX
   2+ 0103 ~                include "timex.asm"
   3+ 0103                  ENDIF
   4+ 0103
   5+ 0103                  IFDEF TIMEX80
   6+ 0103 ~                include "timex80.asm"
   7+ 0103                  ENDIF
   8+ 0103
   9+ 0103                  IFDEF ZXSCR
  10+ 0103 ~                include "zx.asm"
  11+ 0103                  ENDIF
  12+ 0103
  13+ 0103              	IFDEF NEDOOS
  14+ 0103                  include "nedotext.asm"
# file opened: vdp/nedotext.asm
   1++0103
   2++0103                  MODULE TextMode
   3++0103 00           pg4	defb 0
   4++0104 00           pg0	defb 0
   5++0105 00           pgC	defb 0
   6++0106 00           pg8	defb 0
   7++0107              init
   8++0107 0E D1        	ld c,nos.CMD_HIDEFROMPARENT
   9++0109 CD 05 00     	call nos.BDOS
  10++010C 1E 86        	ld e,0x86
  11++010E 0E F9        	ld c,nos.CMD_SETGFX
  12++0110 CD 05 00     	call nos.BDOS
  13++0113 0E F2        	ld c,nos.CMD_YIELD
  14++0115 CD 05 00     	call nos.BDOS
  15++0118 0E FB        	ld c,nos.CMD_GETMAINPAGES
  16++011A CD 05 00     	call nos.BDOS
  17++011D ED 53 03 01  	ld (pg4),de
  18++0121 22 05 01     	ld (pgC),hl
  19++0124 C3 30 01     	jp cls
  20++0127
  21++0127              printZ
  22++0127 7E           	ld a,(hl)
  23++0128 B7           	or a
  24++0129 C8           	ret z
  25++012A 23           	inc hl
  26++012B E5           	push hl
  27++012C D7           	rst 0x10
  28++012D E1           	pop hl
  29++012E 18 F7        	jr printZ
  30++0130
  31++0130              cls
  32++0130 1E 07        	ld e,7
  33++0132 0E F6        	ld c,nos.CMD_CLS
  34++0134 C3 05 00     	jp nos.BDOS
  35++0137
  36++0137              putC
  37++0137 C3 10 00     	jp 0x0010
  38++013A
  39++013A              gotoXY
  40++013A E5           	push hl
  41++013B 0E F8        	ld c,nos.CMD_SETXY
  42++013D CD 05 00     	call nos.BDOS
  43++0140 E1           	pop hl
  44++0141 C9           	ret
  45++0142
  46++0142              fillLine:
  47++0142 54 1E 00         ld d, h, e, 0
  47++0145 CD 3A 01       call gotoXY
  48++0148 06 50            ld b, 80
  49++014A              .loop
  50++014A F5 C5            push af, bc
  51++014C D7               rst 0x10
  52++014D C1 F1            pop bc, af
  53++014F 10 F9            djnz .loop
  54++0151 C9               ret
  55++0152
  56++0152              usualLine
  57++0152 57           	ld d,a
  58++0153 1E 00        	ld e,0
  59++0155              .mloop
  60++0155 D5           	push de
  61++0156 0E F8        	ld c,nos.CMD_SETXY
  62++0158 CD 05 00     	call nos.BDOS
  63++015B 1E 07        	ld e,7
  64++015D 0E F5        	ld c,nos.CMD_PRATTR
  65++015F CD 05 00     	call nos.BDOS
  66++0162 D1           	pop de
  67++0163 1C           	inc e
  68++0164 7B           	ld a,e
  69++0165 FE 50        	cp 80
  70++0167 20 EC        	jr nz,.mloop
  71++0169 C9           	ret
  72++016A
  73++016A              highlightLine
  74++016A 57           	ld d,a
  75++016B 1E 00        	ld e,0
  76++016D              .mloop
  77++016D D5           	push de
  78++016E 0E F8        	ld c,nos.CMD_SETXY
  79++0170 CD 05 00     	call nos.BDOS
  80++0173 1E 4F        	ld e,79
  81++0175 0E F5        	ld c,nos.CMD_PRATTR
  82++0177 CD 05 00     	call nos.BDOS
  83++017A D1           	pop de
  84++017B 1C           	inc e
  85++017C 7B           	ld a,e
  86++017D FE 50        	cp 80
  87++017F 20 EC        	jr nz,.mloop
  88++0181 C9           	ret
  89++0182                  ENDMODULE
  90++0182
# file closed: vdp/nedotext.asm
  15+ 0182                  ENDIF
# file closed: vdp/index.asm
  29  0182                  include "utils/index.asm"
# file opened: utils/index.asm
   1+ 0182                  include "atoi.asm"
# file opened: utils/atoi.asm
   1++0182              ; DE - buffer
   2++0182              ; HL - output
   3++0182              atohl:
   4++0182 21 00 00         ld hl, 0
   5++0185              .loop
   6++0185 1A               ld a, (de)
   7++0186 13               inc de
   8++0187                  ; Sepparators
   9++0187 C5 E5            push bc, hl
  10++0189 01 05 00             ld bc, sepparators_len
  11++018C 21 A4 01             ld hl, sepparators
  12++018F ED B1                cpir
  13++0191 E1 C1            pop hl, bc
  14++0193 C8               ret z
  15++0194
  16++0194 D6 30            sub '0'
  17++0196
  18++0196 C5               push bc
  19++0197 4D                   ld c, l
  20++0198 44                   ld b, h
  21++0199
  22++0199 29                   add hl, hl
  23++019A 29                   add hl, hl
  24++019B 09                   add hl, bc
  25++019C 29                   add hl, hl
  26++019D 4F                   ld c, a
  27++019E 06 00                ld b, 0
  28++01A0 09                   add hl, bc
  29++01A1 C1               pop bc
  30++01A2 18 E1            jr .loop
  31++01A4
# file closed: utils/atoi.asm
   2+ 01A4                  include "constants.asm"
# file opened: utils/constants.asm
   1++01A4              TAB = 9
   2++01A4              CR = 13
   3++01A4              LF = 10
   4++01A4              NULL = 0
   5++01A4              SPACE = ' '
   6++01A4              ESC = 27
   7++01A4              BACKSPACE = 8
   8++01A4
   9++01A4                  IFDEF TIMEX80
  10++01A4 ~            MIME_DOWNLOAD 	= #19
  11++01A4 ~            MIME_LINK 		= #1A
  12++01A4 ~            MIME_TEXT 		= #10
  13++01A4 ~            MIME_IMAGE 		= #01
  14++01A4 ~            MIME_MUSIC 		= #0e
  15++01A4 ~            MIME_INPUT 		= #b3
  16++01A4 ~            MIME_MOD 		= #0d
  17++01A4 ~
  18++01A4 ~            BORDER_TOP = #b2
  19++01A4 ~            BORDER_BOTTOM = #b1
  20++01A4                  ELSE
  21++01A4              	IFDEF MSX
  22++01A4 ~            MIME_DOWNLOAD 	= 1
  23++01A4 ~            MIME_LINK		= 2
  24++01A4 ~            MIME_TEXT 		= 3
  25++01A4 ~            MIME_IMAGE 		= 4
  26++01A4 ~            MIME_MUSIC 		= 5
  27++01A4 ~            MIME_INPUT 		= 6
  28++01A4 ~            MIME_MOD      	= 7
  29++01A4 ~            BORDER_TOP    = 7
  30++01A4 ~            BORDER_BOTTOM = 8
  31++01A4              	ELSE
  32++01A4              MIME_DOWNLOAD = 1
  33++01A4              MIME_LINK     = 2
  34++01A4              MIME_TEXT     = 3
  35++01A4              MIME_IMAGE    = 6
  36++01A4              MIME_MUSIC    = 5
  37++01A4              MIME_INPUT    = 4
  38++01A4              MIME_MOD      = 7
  39++01A4
  40++01A4              BORDER_TOP    = 9
  41++01A4              BORDER_BOTTOM = 8
  42++01A4              	ENDIF
  43++01A4
  44++01A4
  45++01A4
  46++01A4
  47++01A4              	ENDIF
  48++01A4
  49++01A4 0D 0A 09 00  sepparators db CR, LF, TAB, NULL, SPACE
  49++01A8 20
  50++01A9              sepparators_len = $ - sepparators
# file closed: utils/constants.asm
   3+ 01A9                  include "strutils.asm"
# file opened: utils/strutils.asm
   1++01A9              ; de - pointer
   2++01A9              ; hl - count
   3++01A9              strlen:
   4++01A9 21 00 00         ld hl, 0
   5++01AC              .loop
   6++01AC 1A               ld a, (de)
   7++01AD A7               and a
   7++01AE 28 04          jr z, .exit
   8++01B0 23               inc hl
   9++01B1 13               inc de
  10++01B2 18 F8            jr .loop
  11++01B4              .exit
  12++01B4 C9               ret
  13++01B5
  14++01B5                  module CompareBuff
  15++01B5
  16++01B5              ; Pushes A to buffer
  17++01B5              push
  18++01B5 F5               push af
  19++01B6 06 20            ld b, 32
  19++01B8 21 01 02       ld hl, buffer + 1
  19++01BB 11 00 02       ld de, buffer
  20++01BE              .loop
  21++01BE 7E               ld a, (hl)
  21++01BF 12             ld (de), a
  21++01C0 23             inc hl
  21++01C1 13             inc de
  21++01C2 10 FA          djnz .loop
  22++01C4 F1               pop af
  23++01C5 21 1F 02         ld hl, buffer + 31
  23++01C8 77             ld (hl), a
  24++01C9 C9               ret
  25++01CA
  26++01CA              ; HL - Compare string(null terminated)
  27++01CA              ; A - 0 NOT Found
  28++01CA              ;     1 Found
  29++01CA              search:
  30++01CA 06 00            ld b, 0
  30++01CC E5             push hl
  31++01CD              .loop:
  32++01CD 7E               ld a, (hl)
  32++01CE 23             inc hl
  32++01CF 04             inc b
  32++01D0 A7             and a
  32++01D1 C2 CD 01       jp nz, .loop
  33++01D4 05               dec b
  33++01D5 E1             pop hl
  33++01D6 C5             push bc
  33++01D7 E5             push hl
  34++01D8 E1               pop hl
  35++01D9 11 20 02         ld de, buffer + 32
  36++01DC              .sourceLoop
  37++01DC 1B               dec de
  37++01DD 10 FD          djnz .sourceLoop
  38++01DF C1               pop bc
  39++01E0              .compare
  40++01E0 C5               push bc
  40++01E1 F5             push af
  41++01E2 1A               ld a, (de)
  41++01E3 47             ld b, a
  42++01E4 F1               pop af
  42++01E5 7E             ld a, (hl)
  42++01E6 B8             cp b
  42++01E7 C1             pop bc
  42++01E8 3E 00          ld a, 0
  42++01EA C0             ret nz
  43++01EB 13               inc de
  43++01EC 23             inc hl
  44++01ED 10 F1            djnz .compare
  45++01EF 3E 01            ld a, 1
  46++01F1 C9               ret
  47++01F2
  48++01F2              clear:
  49++01F2 AF               xor a
  49++01F3 21 00 02       ld hl, buffer
  49++01F6 11 01 02       ld de, buffer + 1
  49++01F9 01 20 00       ld bc, 32
  49++01FC 77             ld (hl), a
  49++01FD ED B0          ldir
  50++01FF C9               ret
  51++0200
  52++0200 00 00 00...  buffer ds 32
  53++0220
  54++0220                  endmodule
# file closed: utils/strutils.asm
   4+ 0220                  IFDEF MSX
   5+ 0220 ~            	    include "bios.asm"
   6+ 0220                  ENDIF
   7+ 0220                  include "screen.asm"
# file opened: utils/screen.asm
   1++0220              LINE_LIMIT = 63
   2++0220
   3++0220                  IFDEF NEDOOS
   4++0220              LINE_LIMIT = 79
   5++0220                  ENDIF
   6++0220
   7++0220                  IFDEF TIMEX80
   8++0220 ~            LINE_LIMIT = 84
   9++0220                  ENDIF
  10++0220
  11++0220                  IFDEF MSX
  12++0220 ~            LINE_LIMIT = 79
  13++0220                  ENDIF
  14++0220              ; HL - string pointer
  15++0220              print70Text:
  16++0220 06 4F            ld b, LINE_LIMIT
  17++0222              .loop
  18++0222 7E               ld a, (hl)
  19++0223 A7               and a
  19++0224 C8             ret z
  20++0225 FE 0D            cp 13
  20++0227 C8             ret z
  21++0228 FE 0A            cp 10
  21++022A C8             ret z
  22++022B C5               push bc
  23++022C E5               push hl
  24++022D CD 37 01         call TextMode.putC
  25++0230 E1               pop hl
  26++0231 23               inc hl
  27++0232 C1               pop bc
  28++0233 05               dec b
  29++0234 78               ld a, b
  29++0235 A7             and a
  29++0236 C8             ret z
  30++0237 C3 22 02         jp .loop
  31++023A
  32++023A              ; HL - string pointer
  33++023A              print70Goph:
  34++023A 06 4F            ld b, LINE_LIMIT
  35++023C              .loop
  36++023C 7E               ld a, (hl)
  36++023D FE 09          cp 09
  36++023F C8             ret z
  37++0240 A7               and a
  37++0241 C8             ret z
  38++0242 C5               push bc
  39++0243 E5               push hl
  40++0244 CD 37 01         call TextMode.putC
  41++0247 E1               pop hl
  42++0248 23               inc hl
  43++0249 C1               pop bc
  44++024A 05               dec b
  45++024B 78               ld a, b
  45++024C A7             and a
  45++024D C8             ret z
  46++024E C3 3C 02         jp .loop
# file closed: utils/screen.asm
# file closed: utils/index.asm
  30  0251                  include "gopher/render/index.asm"
# file opened: gopher/render/index.asm
   1+ 0251                  MODULE Render
   2+ 0251              PER_PAGE = 22
   3+ 0251              CURSOR_OFFSET = 2
   4+ 0251                  include "row.asm"
# file opened: gopher/render/row.asm
   1++0251              ; A - row number
   2++0251              ; HL - pointer to row
   3++0251              renderRow:
   4++0251 C6 02            add CURSOR_OFFSET
   5++0253 57               ld d,a
   6++0254 1E 00            ld e,0
   7++0256 CD 3A 01         call TextMode.gotoXY
   8++0259 7E               ld a,(hl)
   9++025A E5               push hl
  10++025B CD 66 02         call getIcon
  11++025E CD 37 01         call TextMode.putC
  12++0261 E1               pop hl
  13++0262 23               inc hl
  14++0263 C3 3A 02         jp print70Goph
  15++0266
  16++0266              ; A - gopher id char
  17++0266              getIcon:
  18++0266 FE 69            cp 'i'
  18++0268 CA 82 02       jp z, .info
  19++026B FE 39            cp '9'
  19++026D CA 85 02       jp z, .down
  20++0270 FE 31            cp '1'
  20++0272 CA FD 02       jp z, .page
  21++0275 FE 30            cp '0'
  21++0277 CA 00 03       jp z, .text
  22++027A FE 37            cp '7'
  22++027C CA 03 03       jp z, .input
  23++027F 3E 20            ld a, ' '
  24++0281 C9               ret
  25++0282              .info
  26++0282 3E 20            ld a, SPACE
  26++0284 C9             ret
  27++0285              .down
  28++0285 54 5D            ld de, hl
  29++0287 01 FF 00 3E      ld bc, #ff, a, TAB
  29++028B 09
  29++028C ED B1          cpir
  30++028E 78               ld a, b
  30++028F B1             or c
  30++0290 28 68          jr z, .downExit
  31++0292 D5               push de
  32++0293              .nameLoop
  33++0293 7E               ld a, (hl)
  33++0294 A7             and a
  33++0295 28 10          jr z, .check
  34++0297 FE 09            cp TAB
  34++0299 28 0C          jr z, .check
  35++029B FE 0D            cp CR
  35++029D 28 08          jr z, .check
  36++029F E5               push hl
  37++02A0 CD B5 01         call CompareBuff.push
  38++02A3 E1               pop hl
  39++02A4 23               inc hl
  40++02A5 18 EC            jr .nameLoop
  41++02A7              .check
  42++02A7 21 12 03         ld hl, scrExt1
  42++02AA CD CA 01       call CompareBuff.search
  42++02AD A7             and a
  42++02AE 20 56          jr nz, .image
  43++02B0 21 17 03         ld hl, scrExt2
  43++02B3 CD CA 01       call CompareBuff.search
  43++02B6 A7             and a
  43++02B7 20 4D          jr nz, .image
  44++02B9 3E 03            ld a, 3
  44++02BB 32 0A 40       ld (VTPL.SETUP), a ; 0 bit - looping, 1 bit - pt2 file
  45++02BE 21 26 03         ld hl, pt2Ext1
  45++02C1 CD CA 01       call CompareBuff.search
  45++02C4 A7             and a
  45++02C5 20 43          jr nz, .music
  46++02C7 21 2B 03         ld hl, pt2Ext2
  46++02CA CD CA 01       call CompareBuff.search
  46++02CD A7             and a
  46++02CE 20 3A          jr nz, .music
  47++02D0 3E 01            ld a, 1
  47++02D2 32 0A 40       ld (VTPL.SETUP), a
  48++02D5 21 1C 03         ld hl, pt3Ext1
  48++02D8 CD CA 01       call CompareBuff.search
  48++02DB A7             and a
  48++02DC 20 2C          jr nz, .music
  49++02DE 21 21 03         ld hl, pt3Ext2
  49++02E1 CD CA 01       call CompareBuff.search
  49++02E4 A7             and a
  49++02E5 20 23          jr nz, .music
  50++02E7
  51++02E7                  ; General Sound support
  52++02E7                  ifdef GS
  53++02E7 21 30 03         ld hl, modExt1
  53++02EA CD CA 01       call CompareBuff.search
  53++02ED A7             and a
  53++02EE 20 1E          jr nz, .mod
  54++02F0 21 35 03         ld hl, modExt2
  54++02F3 CD CA 01       call CompareBuff.search
  54++02F6 A7             and a
  54++02F7 20 15          jr nz, .mod
  55++02F9                  endif
  56++02F9
  57++02F9              .checkExit
  58++02F9 E1               pop hl
  59++02FA              .downExit
  60++02FA 3E 01            ld a, MIME_DOWNLOAD
  60++02FC C9             ret
  61++02FD              .page
  62++02FD 3E 02            ld a, MIME_LINK
  62++02FF C9             ret
  63++0300              .text
  64++0300 3E 03            ld a, MIME_TEXT
  64++0302 C9             ret
  65++0303              .input
  66++0303 3E 04            ld a, MIME_INPUT
  66++0305 C9             ret
  67++0306              .image
  68++0306 E1               pop hl
  68++0307 3E 06          ld a, MIME_IMAGE
  68++0309 C9             ret
  69++030A              .music
  70++030A E1               pop hl
  70++030B 3E 05          ld a, MIME_MUSIC
  70++030D C9             ret
  71++030E              .mod
  72++030E E1               pop hl
  72++030F 3E 07          ld a, MIME_MOD
  72++0311 C9             ret
  73++0312
  74++0312 2E 73 63 72  scrExt1 db ".scr", 0
  74++0316 00
  75++0317 2E 53 43 52  scrExt2 db ".SCR", 0
  75++031B 00
  76++031C
  77++031C 2E 70 74 33  pt3Ext1 db ".pt3", 0
  77++0320 00
  78++0321 2E 50 54 33  pt3Ext2 db ".PT3", 0
  78++0325 00
  79++0326 2E 70 74 32  pt2Ext1 db ".pt2", 0
  79++032A 00
  80++032B 2E 50 54 32  pt2Ext2 db ".PT2", 0
  80++032F 00
  81++0330 2E 6D 6F 64  modExt1 db ".mod", 0
  81++0334 00
  82++0335 2E 4D 4F 44  modExt2 db ".MOD", 0
  82++0339 00
# file closed: gopher/render/row.asm
   5+ 033A                  include "buffer.asm"
# file opened: gopher/render/buffer.asm
   1++033A              ; BC - line count
   2++033A              findLine:
   3++033A 21 0F 4C         ld hl, outputBuffer
   4++033D 78               ld a,b
   5++033E B1               or c
   6++033F CA 6D 03         jp z, .checkEmpty
   7++0342              .preloop
   8++0342 16 0D            ld d,13
   9++0344              .loop
  10++0344 7E               ld a, (hl)
  10++0345 A7             and a
  10++0346 CA 70 03       jp z, .nope
  11++0349 BA               cp d
  11++034A 23             inc hl
  11++034B CA 63 03       jp z, .checkLF  ;13
  12++034E FE 0A            cp 10
  12++0350 CA 56 03       jp z, .nextCheck     ;10
  13++0353 C3 44 03         jp .loop
  14++0356              .nextCheck
  15++0356 A7               and a
  15++0357 CA 70 03       jp z, .nope
  16++035A 0B               dec bc
  17++035B 5F               ld e,a
  18++035C 78               ld a,b
  19++035D B1               or c
  20++035E 7B               ld a,e
  21++035F C2 44 03         jp nz, .loop
  22++0362 C9               ret
  23++0363              .checkLF
  24++0363 7E               ld a, (hl)
  25++0364 FE 0A            cp 10
  25++0366 C2 56 03       jp nz, .nextCheck    ;10
  26++0369 23               inc hl
  27++036A C3 56 03         jp  .nextCheck
  28++036D              .checkEmpty
  29++036D 7E               ld a, (hl)
  29++036E A7             and a
  29++036F C0             ret nz
  30++0370              .nope
  31++0370 21 00 00         ld hl, 0
  31++0373 C9             ret
  32++0374
# file closed: gopher/render/buffer.asm
   6+ 0374                  include "ui.asm"
# file opened: gopher/render/ui.asm
   1++0374                  IFDEF ZXSCR
   2++0374 ~                DEFINE LEFT_TAB "[D]omain:                                  "
   3++0374                  ENDIF
   4++0374
   5++0374                  IFDEF TIMEX     ;UNKNOWM fallback to 64
   6++0374 ~                DEFINE LEFT_TAB "[D]omain:                                  "
   7++0374                  ENDIF
   8++0374
   9++0374                  IFDEF TIMEX80
  10++0374 ~                DEFINE LEFT_TAB "[D]omain:                                                      "
  11++0374                  ENDIF
  12++0374
  13++0374                  IFDEF NEDOOS
  14++0374                  DEFINE LEFT_TAB "[D]omain:                                                  "
  15++0374                  ENDIF
  16++0374
  17++0374                  IFDEF MSX
  18++0374 ~                DEFINE LEFT_TAB "[D]omain:                                              "
  19++0374                  ENDIF
  20++0374              prepareScreen:
  21++0374 CD 30 01         call TextMode.cls
  22++0377 21 47 04         ld hl, header
  22++037A CD 27 01       call TextMode.printZ
  23++037D 11 0A 00         ld de, #000A
  23++0380 CD 3A 01       call TextMode.gotoXY
  24++0383 21 FA 1E         ld hl, hostName
  24++0386 CD 27 01       call TextMode.printZ
  25++0389 AF               xor a
  25++038A CD 6A 01       call TextMode.highlightLine
  26++038D C9               ret
  27++038E
  28++038E              inputHost:
  29++038E CD FA 07         	call Console.waitForKeyUp
  30++0391              .loop
  31++0391 11 0A 00         ld de, #000A
  31++0394 CD 3A 01       call TextMode.gotoXY
  31++0397 21 FA 1E       ld hl, hostName
  31++039A CD 27 01       call TextMode.printZ
  32++039D 3E 04            ld a, MIME_INPUT
  32++039F CD 37 01       call TextMode.putC
  33++03A2 3E 20            ld a, ' '
  33++03A4 CD 37 01       call TextMode.putC
  34++03A7              .wait
  35++03A7 CD E1 07         call Console.getC
  36++03AA 5F               ld e, a
  37++03AB FE 08            cp Console.BACKSPACE
  37++03AD 28 17          jr z, .removeChar
  38++03AF FE 0D            cp CR
  38++03B1 CA D4 03       jp z, inputNavigate
  39++03B4 FE 20            cp 32
  39++03B6 38 EF          jr c, .wait
  40++03B8              .putC
  41++03B8 AF               xor a
  41++03B9 21 FA 1E 01    ld hl, hostName, bc, 48
  41++03BD 30 00
  41++03BF ED B1          cpir
  42++03C1 77               ld (hl), a
  42++03C2 2B             dec hl
  42++03C3 73             ld (hl), e
  43++03C4 18 CB            jr .loop
  44++03C6              .removeChar
  45++03C6 AF               xor a
  46++03C7 21 FA 1E 01      ld hl, hostName, bc, 48
  46++03CB 30 00
  46++03CD ED B1          cpir
  47++03CF 2B               dec hl
  47++03D0 2B             dec hl
  47++03D1 77             ld (hl), a
  48++03D2 18 BD            jr .loop
  49++03D4
  50++03D4              inputNavigate:
  51++03D4 21 FA 1E 11      ld hl, hostName, de, domain
  51++03D8 07 04
  52++03DA 7E               ld a,(hl)
  53++03DB A7               and a
  54++03DC CA 63 08         jp z, History.load
  55++03DF              .loop
  56++03DF 7E               ld a, (hl)
  56++03E0 A7             and a
  56++03E1 28 05          jr z, .complete
  57++03E3 12               ld (de), a
  57++03E4 23 13          inc hl, de
  58++03E6 18 F7            jr .loop
  59++03E8              .complete
  60++03E8 3E 09            ld a, TAB
  60++03EA 12             ld (de), a
  60++03EB 13             inc de
  61++03EC 3E 37            ld a, '7'
  61++03EE 12             ld (de), a
  61++03EF 13             inc de
  62++03F0 3E 30            ld a, '0'
  62++03F2 12             ld (de), a
  62++03F3 13             inc de
  63++03F4 3E 0D            ld a, CR
  63++03F6 12             ld (de), a
  63++03F7 13             inc de
  64++03F8 3E 0A            ld a, LF
  64++03FA 12             ld (de), a
  64++03FB 13             inc de
  65++03FC 21 02 04         ld hl, navRow
  65++03FF C3 BC 08       jp History.navigate
  66++0402
  67++0402 31 20 09 2F  navRow db "1 ", TAB, "/", TAB
  67++0406 09
  68++0407 6E 69 68 69  domain db "nihirash.net"
  68++040B 72 61 73 68
  68++040F 2E 6E 65 74
  69++0413 00 00 00...      ds 64 - ($ - domain)
  70++0447
  71++0447              	IFDEF MSX
  72++0447 ~            header db LEFT_TAB, "    MRF"
  73++0447 ~                   db VERSION_STRING
  74++0447 ~                   db "."
  75++0447 ~                   db BUILD_STRING
  76++0447 ~                   db " [MSX UNAPI]",13, 0
  77++0447              	ENDIF
  78++0447
  79++0447                  IFDEF MB03
  80++0447 ~            header db LEFT_TAB, "    MRF"
  81++0447 ~                   db VERSION_STRING
  82++0447 ~                   db "."
  83++0447 ~                   db BUILD_STRING
  84++0447 ~                   db " [MB03+]",13, 0
  85++0447                     ENDIF
  86++0447
  87++0447                  IFDEF UNO
  88++0447 ~            header db LEFT_TAB, "MRF"
  89++0447 ~                   db VERSION_STRING
  90++0447 ~                   db "."
  91++0447 ~                   db BUILD_STRING
  92++0447 ~                   db " [UNO UART]",13, 0
  93++0447                  ENDIF
  94++0447
  95++0447                  IFDEF AY
  96++0447 ~            header db LEFT_TAB, "  MRF"
  97++0447 ~                   db VERSION_STRING
  98++0447 ~                   db "."
  99++0447 ~                   db BUILD_STRING
 100++0447 ~                   db " [AYWIFI]",13, 0
 101++0447              	ENDIF
 102++0447
 103++0447                  IFDEF ZW
 104++0447 ~            header db LEFT_TAB, "  MRF"
 105++0447 ~                   db VERSION_STRING
 106++0447 ~                   db "."
 107++0447 ~                   db BUILD_STRING
 108++0447 ~                   db " [ZXWiFi]",13, 0
 109++0447                  ENDIF
 110++0447
 111++0447                   IFDEF NEDOOSATM
 112++0447 ~            header db LEFT_TAB, "MRF"
 113++0447 ~                   db VERSION_STRING
 114++0447 ~                   db "."
 115++0447 ~                   db BUILD_STRING
 116++0447 ~                   db " [ATM UART]",13, 0
 117++0447                  ENDIF
 118++0447
 119++0447                  IFDEF NEDOOSEVO
 120++0447 ~            header db LEFT_TAB, "MRF"
 121++0447 ~                   db VERSION_STRING
 122++0447 ~                   db "."
 123++0447 ~                   db BUILD_STRING
 124++0447 ~                   db " [EVO UART]",13, 0
 125++0447                  ENDIF
 126++0447
 127++0447                  IFDEF UNOUART
 128++0447 ~            header db LEFT_TAB, "MRF"
 129++0447 ~                   db VERSION_STRING
 130++0447 ~                   db "."
 131++0447 ~                   db BUILD_STRING
 132++0447 ~                   db " [UNO UART]",13, 0
 133++0447                  ENDIF
 134++0447
 135++0447                  IFDEF NEDOOS
 136++0447              	IFNDEF NEDOOSATM
 137++0447              	IFNDEF NEDOOSEVO
 138++0447 5B 44 5D 6F  header db "[D]omain:                                                  ", " MRF"
 138++044B 6D 61 69 6E
 138++044F 3A 20 20 20
 138++0453 20 20 20 20
 138++0457 20 20 20 20
 138++045B 20 20 20 20
 138++045F 20 20 20 20
 138++0463 20 20 20 20
 138++0467 20 20 20 20
 138++046B 20 20 20 20
 138++046F 20 20 20 20
 138++0473 20 20 20 20
 138++0477 20 20 20 20
 138++047B 20 20 20 20
 138++047F 20 20 20 20
 138++0483 4D 52 46
 139++0486 31 2E 37            db "1.7"
 140++0489 2E                  db "."
 141++048A 37                  db "7"
 142++048B 20 5B 6E 65         db " [nedoNET]",13, 0
 142++048F 64 6F 4E 45
 142++0493 54 5D 0D 00
 143++0497
 144++0497                  ENDIF
 145++0497              	ENDIF
 146++0497              	ENDIF
 147++0497
# file closed: gopher/render/ui.asm
   7+ 0497                  include "gopher-page.asm"
# file opened: gopher/render/gopher-page.asm
   1++0497              renderGopherScreen:
   2++0497 CD 74 03         call Render.prepareScreen
   3++049A 06 16            ld b, PER_PAGE
   4++049C              .loop
   5++049C C5               push bc
   6++049D 3E 16            ld a, PER_PAGE
   7++049F 90               sub b
   8++04A0 47               ld b,a
   9++04A1 5F               ld e,a
  10++04A2
  11++04A2 48                   ld c,b
  12++04A3 06 00                ld b,0
  13++04A5
  14++04A5 2A E8 0C             ld hl, (page_offset)
  15++04A8 09                   add hl,bc
  16++04A9 44 4D                ld bc,hl
  17++04AB D5                   push de
  18++04AC CD 3A 03         call Render.findLine
  19++04AF D1               pop de
  20++04B0
  21++04B0 7C               ld a, h
  22++04B1 B5               or l
  23++04B2 28 04            jr z, .exit
  24++04B4 7B               ld a, e
  25++04B5 CD 51 02         call renderRow
  26++04B8              .exit
  27++04B8 C1               pop bc
  28++04B9 10 E1            djnz .loop
  29++04BB CD C2 05         call showCursor
  30++04BE C9               ret
  31++04BF
  32++04BF              checkBorder:
  33++04BF 3A E6 0C         ld a, (cursor_position)
  33++04C2 FE FF          cp #ff
  33++04C4 CA E6 05       jp z, pageUp
  34++04C7 3A E6 0C         ld a, (cursor_position)
  34++04CA FE 16          cp PER_PAGE
  34++04CC CA 19 06       jp z, pageDn
  35++04CF CD C2 05         call showCursor
  36++04D2 C3 D5 04         jp workLoop
  37++04D5
  38++04D5              workLoop:
  39++04D5 3A F1 06         ld a, (play_next)
  39++04D8 A7             and a
  39++04D9 C2 77 05       jp nz, navigate
  40++04DC
  41++04DC                  dup 5
  42++04DC 76          >    halt
  42++04DD 76          >    halt
  42++04DE 76          >    halt
  42++04DF 76          >    halt
  42++04E0 76          >    halt
  43++04E1                  edup
  44++04E1              .nothing
  45++04E1 CD ED 07         call Console.peekC
  46++04E4 A7               and a
  46++04E5 CA E1 04       jp z, .nothing
  47++04E8
  48++04E8 FE 31            cp '1'
  48++04EA CA 4C 08       jp z, History.back
  49++04ED FE 32            cp '2'
  49++04EF CA 77 05       jp z, navigate
  50++04F2 FE 33            cp '3'
  50++04F4 CA D2 05       jp z, cursorDown
  51++04F7 FE 34            cp '4'
  51++04F9 CA DC 05       jp z, cursorUp
  52++04FC FE 35            cp '5'
  52++04FE CA E6 05       jp z, pageUp
  53++0501 FE 38            cp '8'
  53++0503 CA 19 06       jp z, pageDn
  54++0506 FE 36            cp '6'
  54++0508 CA D2 05       jp z, cursorDown
  55++050B FE 37            cp '7'
  55++050D CA DC 05       jp z, cursorUp
  56++0510
  57++0510 FE F9            cp Console.KEY_DN
  57++0512 CA D2 05       jp z, cursorDown
  58++0515 FE 61            cp 'a'
  58++0517 CA D2 05       jp z, cursorDown
  59++051A FE FA            cp Console.KEY_UP
  59++051C CA DC 05       jp z, cursorUp
  60++051F FE 71            cp 'q'
  60++0521 CA DC 05       jp z, cursorUp
  61++0524 FE F8            cp Console.KEY_LT
  61++0526 CA E6 05       jp z, pageUp
  62++0529 FE 6F            cp 'o'
  62++052B CA E6 05       jp z, pageUp
  63++052E FE FB            cp Console.KEY_RT
  63++0530 CA 19 06       jp z, pageDn
  64++0533 FE 70            cp 'p'
  64++0535 CA 19 06       jp z, pageDn
  65++0538
  66++0538 FE 68            cp 'h'
  66++053A CA B9 08       jp z, History.home
  67++053D FE 48            cp 'H'
  67++053F CA B9 08       jp z, History.home
  68++0542
  69++0542 FE 62            cp 'b'
  69++0544 CA 4C 08       jp z, History.back
  70++0547 FE 42            cp 'B'
  70++0549 CA 4C 08       jp z, History.back
  71++054C FE 08            cp Console.BACKSPACE
  71++054E CA 4C 08       jp z, History.back
  72++0551
  73++0551 FE 64            cp 'd'
  73++0553 CA 8E 03       jp z, inputHost
  74++0556 FE 44            cp 'D'
  74++0558 CA 8E 03       jp z, inputHost
  75++055B
  76++055B FE 0D            cp CR
  76++055D CA 77 05       jp z, navigate
  77++0560
  78++0560                  IFDEF MSX
  79++0560 ~                	cp ESC
  79++0560 ~              jp z, exit
  80++0560                  ENDIF
  81++0560
  82++0560                  IFDEF GS
  83++0560 FE 4D            cp 'M'
  83++0562 CC 0B 26       call z, GeneralSound.toggleModule
  84++0565 FE 6D            cp 'm'
  84++0567 CC 0B 26       call z, GeneralSound.toggleModule
  85++056A FE 67            cp 'g'
  85++056C CC 16 26       call z, GeneralSound.toggleDownload
  86++056F FE 47            cp 'G'
  86++0571 CC 16 26       call z, GeneralSound.toggleDownload
  87++0574                  ENDIF
  88++0574
  89++0574                  IFDEF TIMEX80
  90++0574 ~                cp 'T'
  90++0574 ~              call z, TextMode.toggleColor
  91++0574 ~                cp 't'
  91++0574 ~              call z, TextMode.toggleColor
  92++0574                  ENDIF
  93++0574
  94++0574 C3 D5 04         jp workLoop
  95++0577
  96++0577              navigate:
  97++0577 CD FA 07         call Console.waitForKeyUp
  98++057A AF               xor a
  98++057B 32 F1 06       ld (play_next), a
  99++057E CD CA 05         call hideCursor
 100++0581 ED 4B E8 0C      ld bc, (page_offset)
 101++0585 2A E6 0C         ld hl, (cursor_position)
 102++0588 09               add hl,bc
 103++0589 44               ld b, h ;HHHHH
 104++058A 4D               ld c, l ;LLLLL
 105++058B D5               push de
 106++058C CD 3A 03         call Render.findLine
 107++058F D1               pop de
 108++0590 7E               ld a, (hl)
 109++0591 FE 31            cp '1'
 109++0593 CA AB 05       jp z, .load
 110++0596 FE 30            cp '0'
 110++0598 CA AB 05       jp z, .load
 111++059B FE 39            cp '9'
 111++059D CA AB 05       jp z, .load
 112++05A0 FE 37            cp '7'
 112++05A2 CA B3 05       jp z, .input
 113++05A5 CD C2 05         call showCursor
 114++05A8 C3 D5 04         jp workLoop
 115++05AB              .load
 116++05AB E5               push hl
 117++05AC CD 66 02         call getIcon
 118++05AF E1               pop hl
 119++05B0 C3 BC 08         jp History.navigate
 120++05B3              .input
 121++05B3 E5               push hl
 122++05B4 CD F2 06         call DialogBox.inputBox
 123++05B7 E1               pop hl
 124++05B8 3A 5A 07         ld a, (DialogBox.inputBuffer)
 124++05BB A7             and a
 124++05BC CA 63 08       jp z, History.load
 125++05BF C3 AB 05         jp .load
 126++05C2
 127++05C2              showCursor:
 128++05C2 3A E6 0C         ld a, (cursor_position)
 128++05C5 C6 02          add CURSOR_OFFSET
 129++05C7 C3 6A 01         jp TextMode.highlightLine
 130++05CA
 131++05CA              hideCursor:
 132++05CA 3A E6 0C         ld a, (cursor_position)
 132++05CD C6 02          add CURSOR_OFFSET
 133++05CF C3 52 01         jp TextMode.usualLine
 134++05D2
 135++05D2              cursorDown:
 136++05D2 CD CA 05         call hideCursor
 137++05D5 21 E6 0C         ld hl, cursor_position
 138++05D8 34               inc (hl)
 139++05D9 C3 BF 04         jp checkBorder
 140++05DC
 141++05DC              cursorUp:
 142++05DC CD CA 05         call hideCursor
 143++05DF 21 E6 0C         ld hl, cursor_position
 144++05E2 35               dec (hl)
 145++05E3 C3 BF 04         jp checkBorder
 146++05E6
 147++05E6              pageUp:
 148++05E6 3A E8 0C         ld a, (page_offset)
 148++05E9 FE 00          cp 0
 148++05EB C2 F9 05       jp nz, .pageUp2
 149++05EE 3A E9 0C         ld a, (page_offset + 1)
 149++05F1 FE 00          cp 0
 149++05F3 C2 F9 05       jp nz, .pageUp2
 150++05F6 C3 0F 06         jp .skip
 151++05F9              .pageUp2:
 152++05F9 3E 15            ld a, PER_PAGE - 1
 152++05FB 32 E6 0C       ld (cursor_position), a
 153++05FE 2A E8 0C         ld hl, (page_offset)
 154++0601 11 16 00         ld de,PER_PAGE
 155++0604 ED 52            sbc hl,de
 156++0606 22 E8 0C         ld (page_offset), hl
 157++0609              .exit
 158++0609 CD 97 04         call renderGopherScreen
 159++060C C3 D5 04         jp workLoop
 160++060F              .skip
 161++060F AF               xor a
 161++0610 32 E6 0C       ld (cursor_position), a
 161++0613 CD 97 04       call renderGopherScreen
 161++0616 C3 D5 04       jp workLoop
 162++0619
 163++0619              pageDn:
 164++0619 AF                xor a
 164++061A 32 E6 0C       ld (cursor_position), a
 165++061D 2A E8 0C         ld hl,(page_offset)
 166++0620 11 16 00         ld de,PER_PAGE
 167++0623 19               add hl,de
 168++0624 22 E8 0C         ld (page_offset), hl
 169++0627 C3 09 06         jp pageUp.exit
 170++062A
 171++062A
 172++062A
# file closed: gopher/render/gopher-page.asm
   8+ 062A                  include "plaintext.asm"
# file opened: gopher/render/plaintext.asm
   1++062A              renderPlainTextScreen:
   2++062A CD 74 03         call prepareScreen
   3++062D 06 16            ld b, PER_PAGE
   4++062F              .loop
   5++062F C5               push bc
   6++0630 3E 16            ld a, PER_PAGE
   7++0632 90               sub b
   8++0633 47               ld b,a
   9++0634 5F               ld e,a
  10++0635 48               ld c,b
  11++0636 06 00            ld b,0
  12++0638 2A E8 0C         ld hl, (page_offset)
  13++063B 09               add hl,bc
  14++063C 44 4D            ld bc,hl
  15++063E D5               push de
  16++063F CD 3A 03         call Render.findLine
  17++0642 D1               pop de
  18++0643 7C               ld a, h
  18++0644 B5             or l
  18++0645 CA 58 06       jp z, .exit
  19++0648 7B               ld a, e
  20++0649 C6 02            add CURSOR_OFFSET
  20++064B 57 1E 01       ld d, a, e, 1
  20++064E CD 3A 01       call TextMode.gotoXY
  21++0651 CD 20 02         call print70Text
  22++0654 C1               pop bc
  23++0655 10 D8            djnz .loop
  24++0657 C9               ret
  25++0658              .exit
  26++0658 C1               pop bc
  27++0659 C9               ret
  28++065A
  29++065A              plainTextLoop:
  30++065A CD E1 07         call Console.getC
  31++065D
  32++065D FE 31            cp '1'
  32++065F CA 4C 08       jp z, History.back
  33++0662 FE 32            cp '2'
  33++0664 CA 77 05       jp z, navigate
  34++0667 FE 35            cp '5'
  34++0669 CA CF 06       jp z, textUp
  35++066C FE 38            cp '8'
  35++066E CA BF 06       jp z, textDown
  36++0671 FE F8            cp Console.KEY_LT
  36++0673 CA CF 06       jp z, textUp
  37++0676 FE FB            cp Console.KEY_RT
  37++0678 CA BF 06       jp z, textDown
  38++067B
  39++067B FE F9            cp Console.KEY_DN
  39++067D CA BF 06       jp z, textDown
  40++0680 FE 61            cp 'a'
  40++0682 CA BF 06       jp z, textDown
  41++0685
  42++0685 FE FA            cp Console.KEY_UP
  42++0687 CA CF 06       jp z, textUp
  43++068A FE 71            cp 'q'
  43++068C CA CF 06       jp z, textUp
  44++068F
  45++068F FE 68            cp 'h'
  45++0691 CA B9 08       jp z, History.home
  46++0694 FE 48            cp 'H'
  46++0696 CA B9 08       jp z, History.home
  47++0699
  48++0699 FE 62            cp 'b'
  48++069B CA 4C 08       jp z, History.back
  49++069E FE 42            cp 'B'
  49++06A0 CA 4C 08       jp z, History.back
  50++06A3
  51++06A3 FE 64            cp 'd'
  51++06A5 CA 8E 03       jp z, inputHost
  52++06A8 FE 44            cp 'D'
  52++06AA CA 8E 03       jp z, inputHost
  53++06AD
  54++06AD FE 08            cp Console.BACKSPACE
  54++06AF CA 4C 08       jp z, History.back
  55++06B2
  56++06B2                  IFDEF MSX
  57++06B2 ~                	cp ESC
  57++06B2 ~              jp z, exit
  58++06B2                  ENDIF
  59++06B2
  60++06B2                  IFDEF GS
  61++06B2 FE 4D            cp 'M'
  61++06B4 CC 0B 26       call z, GeneralSound.toggleModule
  62++06B7 FE 6D            cp 'm'
  62++06B9 CC 0B 26       call z, GeneralSound.toggleModule
  63++06BC                  ENDIF
  64++06BC
  65++06BC                  IFDEF TIMEX80
  66++06BC ~                cp 'T'
  66++06BC ~              call z, TextMode.toggleColor
  67++06BC ~                cp 't'
  67++06BC ~              call z, TextMode.toggleColor
  68++06BC                  ENDIF
  69++06BC
  70++06BC C3 5A 06         jp plainTextLoop
  71++06BF
  72++06BF
  73++06BF              textDown:
  74++06BF 2A E8 0C         ld hl,(page_offset)
  75++06C2 11 16 00         ld de,PER_PAGE
  76++06C5 19               add hl,de
  77++06C6 22 E8 0C         ld (page_offset), hl
  78++06C9 CD 2A 06         call renderPlainTextScreen
  79++06CC C3 5A 06         jp plainTextLoop
  80++06CF
  81++06CF              textUp:
  82++06CF 3A E8 0C         ld a, (page_offset)
  82++06D2 FE 00          cp 0
  82++06D4 20 0A          jr nz, .textUp2
  83++06D6 3A E9 0C         ld a, (page_offset + 1)
  83++06D9 FE 00          cp 0
  83++06DB 20 03          jr nz, .textUp2
  84++06DD C3 5A 06         jp plainTextLoop
  85++06E0
  86++06E0              .textUp2:
  87++06E0 2A E8 0C         ld hl,(page_offset)
  88++06E3 11 16 00         ld de,PER_PAGE
  89++06E6 ED 52            sbc hl,de
  90++06E8 22 E8 0C         ld (page_offset), hl
  91++06EB CD 2A 06         call renderPlainTextScreen
  92++06EE C3 5A 06         jp plainTextLoop
  93++06F1
# file closed: gopher/render/plaintext.asm
   9+ 06F1
  10+ 06F1 00           play_next       db  0
  11+ 06F2              position        EQU historyBlock.position
  12+ 06F2              cursor_position EQU position + 2
  13+ 06F2              page_offset     EQU position + 4
  14+ 06F2
  15+ 06F2                  ENDMODULE
  16+ 06F2
  17+ 06F2                  include "dialogbox.asm"
# file opened: gopher/render/dialogbox.asm
   1++06F2                  module DialogBox
   2++06F2
   3++06F2              inputBox:
   4++06F2 AF               xor a
   4++06F3 32 5A 07       ld (inputBuffer), a
   5++06F6              .noclear
   6++06F6 CD BB 07         call drawBox
   7++06F9              .loop
   8++06F9 11 05 0B         ld de, #0B05
   8++06FC CD 3A 01       call TextMode.gotoXY
   9++06FF 21 5A 07         ld hl, inputBuffer
   9++0702 CD 27 01       call TextMode.printZ
  10++0705 3E 04            ld a, MIME_INPUT
  10++0707 CD 37 01       call TextMode.putC
  10++070A 3E 20          ld a, ' '
  10++070C CD 37 01       call TextMode.putC
  11++070F              .checkkey
  12++070F CD E1 07         call Console.getC
  13++0712 FE 08            cp Console.BACKSPACE
  13++0714 28 16          jr z, .removeChar
  14++0716 FE 0D        	cp CR
  14++0718 C8             ret z
  15++0719 FE 20            cp SPACE
  15++071B 38 F2          jr c, .checkkey
  16++071D              .putC
  17++071D 5F               ld e, a
  18++071E AF               xor a
  18++071F 21 5A 07 01    ld hl, inputBuffer, bc, #ff
  18++0723 FF 00
  18++0725 ED B1          cpir
  19++0727 77               ld (hl), a
  19++0728 2B             dec hl
  19++0729 73             ld (hl), e
  20++072A 18 CD            jr .loop
  21++072C              .removeChar
  22++072C AF               xor a
  23++072D 21 5A 07 01      ld hl, inputBuffer, bc, #ff
  23++0731 FF 00
  23++0733 ED B1          cpir
  24++0735 E5               push hl
  25++0736 11 5B 07             ld de, inputBuffer + 1
  26++0739 B7                   or a
  26++073A ED 52          sbc hl, de
  27++073C 7C                   ld a, h
  27++073D B5             or l
  28++073E E1               pop hl
  29++073F 28 B8            jr z, .loop
  30++0741 AF               xor a
  31++0742 2B               dec hl
  31++0743 2B             dec hl
  31++0744 77             ld (hl), a
  32++0745 18 B2            jr .loop
  33++0747
  34++0747              	IFNDEF MSX
  35++0747              delayinput:
  36++0747 06 32           ld b, 50
  37++0749              .loop2
  38++0749 76               halt
  39++074A 10 FD            djnz .loop2
  40++074C C9               ret
  41++074D              namedownload
  42++074D                  IFDEF NEDOOS
  43++074D 2E 2E 5C 64  		db "..",92,"downloads",92
  43++0751 6F 77 6E 6C
  43++0755 6F 61 64 73
  43++0759 5C
  44++075A                  ENDIF
  45++075A                  ENDIF
  46++075A 00 00 00...  inputBuffer ds 80
  47++07AA
  48++07AA              msgBox:
  49++07AA CD B3 07         call msgNoWait
  50++07AD 06 96            ld b, 150
  51++07AF              .loop
  52++07AF 76               halt
  53++07B0 10 FD            djnz .loop
  54++07B2 C9               ret
  55++07B3
  56++07B3              msgNoWait:
  57++07B3 E5               push hl
  58++07B4 CD BB 07         call drawBox
  59++07B7 E1               pop hl
  60++07B8 C3 27 01         jp TextMode.printZ
  61++07BB
  62++07BB              drawBox:
  63++07BB 26 0A 3E 09      ld h, #0a, a, BORDER_TOP
  64++07BF CD 42 01         call TextMode.fillLine
  65++07C2 26 0B 3E 20      ld h, #0b, a, ' '
  66++07C6 CD 42 01         call TextMode.fillLine
  67++07C9 26 0C 3E 08      ld h, #0c, a, BORDER_BOTTOM
  68++07CD CD 42 01         call TextMode.fillLine
  69++07D0 3E 0A            ld a, #0a
  70++07D2 CD 6A 01         call TextMode.highlightLine
  71++07D5 3E 0C            ld a, #0c
  72++07D7 CD 6A 01         call TextMode.highlightLine
  73++07DA 11 03 0B         ld de,#0B03
  74++07DD CD 3A 01         call TextMode.gotoXY
  75++07E0 C9               ret
  76++07E1                  endmodule
  77++07E1
# file closed: gopher/render/dialogbox.asm
# file closed: gopher/render/index.asm
  31  07E1                  include "dos/index.asm"
# file opened: dos/index.asm
   1+ 07E1              	IFDEF NEDOOS
   2+ 07E1              	    include "nedoconsole.asm"
# file opened: dos/nedoconsole.asm
   1++07E1
   2++07E1              	    module Console
   3++07E1              KEY_UP = nos.key_up
   4++07E1              KEY_DN = nos.key_down
   5++07E1              KEY_LT = nos.key_left
   6++07E1              KEY_RT = nos.key_right
   7++07E1              BACKSPACE = nos.key_backspace
   8++07E1              getC:
   9++07E1 CD ED 07         call inkey
  10++07E4              .loop
  11++07E4 F5               push af
  12++07E5 CD ED 07         call inkey
  13++07E8 C1               pop bc
  14++07E9 B8               cp b
  15++07EA 28 F8            jr z, .loop
  16++07EC              .exit
  17++07EC C9               ret
  18++07ED
  19++07ED              peekC:
  20++07ED              inkey
  21++07ED 0E F2        	ld c,nos.CMD_YIELD
  22++07EF CD 05 00     	call nos.BDOS
  23++07F2 CF           	rst 0x08
  24++07F3 79           	ld a,c
  25++07F4 FE 1B        	cp nos.key_esc
  26++07F6 CA 00 00     	jp z,0x0000
  27++07F9 C9           	ret
  28++07FA              waitForKeyUp
  29++07FA CD ED 07     	call inkey
  30++07FD B7           	or a
  31++07FE C8           	ret z
  32++07FF 18 F9        	jr waitForKeyUp
  33++0801                  ENDMODULE
  34++0801
# file closed: dos/nedoconsole.asm
   3+ 0801              		include "nedoos.asm"
# file opened: dos/nedoos.asm
   1++0801              	MODULE Dos
   2++0801
   3++0801              FMODE_READ = #01
   4++0801              FMODE_CREATE = #0E
   5++0801
   6++0801              ; HL - filename in ASCIIZ
   7++0801              loadBuffer:
   8++0801 06 01            ld b, Dos.FMODE_READ
   8++0803 CD 1E 08       call Dos.fopen
   9++0806 F5               push af
  10++0807 21 0F 4C 01          ld hl, outputBuffer, bc, #ffff - outputBuffer
  10++080B F0 B3
  10++080D CD 40 08       call Dos.fread
  11++0810 21 0F 4C             ld hl, outputBuffer
  11++0813 09             add hl, bc
  11++0814 AF             xor a
  11++0815 77             ld (hl), a
  11++0816 23             inc hl
  11++0817 77             ld (hl), a
  12++0818 F1               pop af
  13++0819 CD 39 08         call Dos.fclose
  14++081C C9               ret
  15++081D C9           	ret
  16++081E
  17++081E              ; Opens file on default drive
  18++081E              ; B - File mode
  19++081E              ; HL - File name
  20++081E              ; Returns:
  21++081E              ;  A - file stream id
  22++081E              fopen
  23++081E EB           	ex de,hl
  24++081F 0E 43        	ld c,nos.CMD_OPENHANDLE
  25++0821 78           	ld a,b
  26++0822 FE 0E        	cp FMODE_CREATE
  27++0824 20 02        	jr nz,.noncreate
  28++0826 0E 44        	ld c,nos.CMD_CREATEHANDLE
  29++0828              .noncreate
  30++0828 CD 05 00     	call nos.BDOS
  31++082B 78           	ld a,b
  32++082C C9           	ret
  33++082D
  34++082D              ; A - file stream id
  35++082D              ; BC - length
  36++082D              ; HL - buffer
  37++082D              ; Returns:
  38++082D              ;   BC - actually written bytes
  39++082D              fwrite
  40++082D EB           	ex de,hl
  41++082E 60           	ld h,b
  42++082F 69           	ld l,c
  43++0830 47           	ld b,a
  44++0831 0E 49        	ld c,nos.CMD_WRITEHANDLE
  45++0833 CD 05 00     	call nos.BDOS
  46++0836 44           	ld b,h
  47++0837 4D           	ld c,l
  48++0838 C9           	ret
  49++0839
  50++0839              ; A - file stream id
  51++0839              fclose
  52++0839 47           	ld b,a
  53++083A 0E 45        	ld c,nos.CMD_CLOSEHANDLE
  54++083C CD 05 00     	call nos.BDOS
  55++083F C9           	ret
  56++0840
  57++0840              ; A - file stream id
  58++0840              ; BC - length
  59++0840              ; HL - buffer
  60++0840              ; Returns
  61++0840              ;  BC - length(how much was actually read)
  62++0840              fread:
  63++0840 EB           	ex de,hl
  64++0841 60           	ld h,b
  65++0842 69           	ld l,c
  66++0843 47           	ld b,a
  67++0844 0E 48        	ld c,nos.CMD_READHANDLE
  68++0846 CD 05 00     	call nos.BDOS
  69++0849 44           	ld b,h
  70++084A 4D           	ld c,l
  71++084B C9           	ret
  72++084C                  ENDMODULE
  73++084C
# file closed: dos/nedoos.asm
   4+ 084C              	ENDIF
   5+ 084C
   6+ 084C              	IFDEF TRDOS
   7+ 084C ~                	include "console.asm"
   8+ 084C ~            		include "trdos.asm"
   9+ 084C              	ENDIF
  10+ 084C
  11+ 084C              	IFDEF ESXDOS
  12+ 084C ~               		include "console.asm"
  13+ 084C ~               		include "esxdos.asm"
  14+ 084C              	ENDIF
  15+ 084C
  16+ 084C              	IFDEF P3DOS
  17+ 084C ~               		include "console.asm"
  18+ 084C ~               		include "p3dos.asm"
  19+ 084C              	ENDIF
  20+ 084C
# file closed: dos/index.asm
  32  084C                  include "gopher/engine/history/index.asm"
# file opened: gopher/engine/history/index.asm
   1+ 084C                  include "controler.asm"
# file opened: gopher/engine/history/controler.asm
   1++084C                  module History
   2++084C              back:
   3++084C 3A 9D 09         ld a, (depth)
   3++084F FE 01          cp 1
   3++0851 CA 63 08       jp z, load
   4++0854 21 EC 0C 11      ld hl, historyBlock + HistoryRecord, de, historyBlock, bc, (total - 1) * HistoryRecord
   4++0858 9E 09 01 38
   4++085C 0D
   4++085D ED B0          ldir ; Move history up
   5++085F 21 9D 09         ld hl, depth
   5++0862 35             dec (hl)
   6++0863              ; Loads current resource
   7++0863              load:
   8++0863 21 80 08         ld hl, .msg
   8++0866 CD B3 07       call DialogBox.msgNoWait
   9++0869 AF               xor a
   9++086A 21 0F 4C 11    ld hl, outputBuffer, de, outputBuffer + 1
   9++086E 10 4C
  10++0870              	IFDEF MSX
  11++0870 ~                	ld bc, (ramtop)
  12++0870 ~                	dec bc
  13++0870              	ELSE
  14++0870 01 EF B3         	ld bc, #ffff - outputBuffer - 1
  15++0873              	ENDIF
  16++0873
  17++0873 77               ld (hl), a
  18++0874 ED B0            ldir
  19++0876
  20++0876 3A 9E 09         ld a, (historyBlock.isFile)
  20++0879 A7             and a
  20++087A C2 87 1F       jp nz, Fetcher.fetchFromFS
  21++087D C3 3A 1F         jp Fetcher.fetchFromNet
  22++0880
  23++0880 20 20 20 20  .msg db "    Loading resource! Please wait! It will be here soon!", 0
  23++0884 4C 6F 61 64
  23++0888 69 6E 67 20
  23++088C 72 65 73 6F
  23++0890 75 72 63 65
  23++0894 21 20 50 6C
  23++0898 65 61 73 65
  23++089C 20 77 61 69
  23++08A0 74 21 20 49
  23++08A4 74 20 77 69
  23++08A8 6C 6C 20 62
  23++08AC 65 20 68 65
  23++08B0 72 65 20 73
  23++08B4 6F 6F 6E 21
  23++08B8 00
  24++08B9
  25++08B9              home:
  26++08B9 21 7B 09         ld hl, homePage
  27++08BC              ; HL - gopher row
  28++08BC              navigate:
  29++08BC 54 5D            ld de, hl
  30++08BE CD B3 1D         call UrlEncoder.isValidGopherRow
  31++08C1 30 A0            jr nc, load ; Not valid - reload last
  32++08C3 62 6B            ld hl, de
  33++08C5 E5               push hl
  34++08C6
  35++08C6 E5               push hl
  36++08C7 21 23 1A 11      ld hl, HistoryEnd - HistoryRecord, de, HistoryEnd, bc,  HistoryRecord * total
  36++08CB 71 1D 01 86
  36++08CF 10
  36++08D0 ED B8          lddr
  37++08D2
  38++08D2 ED 5B E4 0C      ld de, (Render.position), (historyBlock.position + HistoryRecord), de
  38++08D6 ED 53 32 10
  39++08DA                  ; Clean up struct
  40++08DA AF               xor a
  40++08DB 21 9E 09 11    ld hl, historyBlock, de, historyBlock + 1, bc, historyBlockSize - 1, (hl), a
  40++08DF 9F 09 01 4D
  40++08E3 03 77
  40++08E5 ED B0          ldir
  41++08E7 E1               pop hl
  42++08E8
  43++08E8                  ; Fill record
  44++08E8 54 5D            ld de, hl
  45++08EA CD 72 1D         call UrlEncoder.isFile
  46++08ED EB               ex hl, de
  47++08EE 11 9E 09         ld de, historyBlock
  48++08F1 12               ld (de), a
  48++08F2 13             inc de
  49++08F3 7E               ld a, (hl)
  49++08F4 E5 D5          push hl, de
  49++08F6 CD 66 02       call Render.getIcon
  49++08F9 D1 E1          pop de, hl
  50++08FB 12               ld (de), a
  50++08FC 13             inc de
  51++08FD 3E 09            ld a, 9
  52++08FF
  53++08FF                  IFDEF MSX
  54++08FF ~                	ld bc, #ff
  55++08FF                  ELSE
  56++08FF 01 FF 0F         	ld bc, #fff
  57++0902                  ENDIF
  58++0902
  59++0902 ED B1            cpir
  60++0904              .locatorCopy
  61++0904 7E               ld a, (hl)
  61++0905 FE 09          cp 9
  61++0907 28 05          jr z, 1f
  62++0909 12               ld (de), a
  62++090A 23 13          inc hl, de
  63++090C 18 F6            jr .locatorCopy
  64++090E              1
  65++090E 23               inc hl
  65++090F AF             xor a
  65++0910 12             ld (de), a
  66++0911 11 9F 0B         ld de, historyBlock.host
  67++0914              .hostCopy
  68++0914 7E               ld a, (hl)
  68++0915 FE 09          cp 9
  68++0917 28 05          jr z, 1f
  69++0919 12               ld (de), a
  69++091A 23 13          inc hl, de
  70++091C 18 F6            jr .hostCopy
  71++091E              1
  72++091E 23               inc hl
  72++091F AF             xor a
  72++0920 12             ld (de), a
  73++0921 11 DF 0B         ld de, historyBlock.port
  74++0924              .portCopy
  75++0924 7E               ld a, (hl)
  76++0925 FE 09            cp 9
  76++0927 28 11          jr z, 1f
  77++0929 FE 0D            cp 13
  77++092B 28 0D          jr z, 1f
  78++092D FE 0A            cp 10
  78++092F 28 09          jr z, 1f
  79++0931 FE 00            cp 0
  79++0933 28 05          jr z, 1f
  80++0935 12               ld (de), a
  80++0936 23 13          inc hl, de
  81++0938 18 EA            jr .portCopy
  82++093A AF           1   xor a
  82++093B 12             ld (de), a
  83++093C 21 5A 07 11      ld hl, DialogBox.inputBuffer, de, historyBlock.search, bc, #ff
  83++0940 E5 0B 01 FF
  83++0944 00
  83++0945 ED B0          ldir
  84++0947 11 00 00 ED      ld de, 0, (historyBlock.position), de
  84++094B 53 E4 0C
  85++094E E1               pop hl
  86++094F 3A 9D 09         ld a, (depth)
  86++0952 FE 05          cp total
  86++0954 30 04          jr nc, 1f
  87++0956 3C               inc a
  87++0957 32 9D 09       ld (depth), a
  88++095A              1
  89++095A 3A 9F 09         ld a,(historyBlock.mediaType)
  89++095D FE 01          cp MIME_DOWNLOAD
  89++095F CA 83 20       jp z, Gopher.download
  90++0962
  91++0962                  ifdef GS
  92++0962 3A 9F 09         ld a,(historyBlock.mediaType)
  93++0965 FE 07            cp MIME_MOD
  94++0967 C2 63 08         jp nz,load
  95++096A 3A 1F 26         ld a,(GeneralSound.GSdownType)
  96++096D EE 01            xor 1
  97++096F CA 75 09         jp z, downMod2file
  98++0972
  99++0972              downMod2GS
 100++0972 C3 1F 20         jp Gopher.loadMod
 101++0975              downMod2file
 102++0975 C3 83 20         jp Gopher.download
 103++0978                  else
 104++0978 ~                ld a,(historyBlock.mediaType)
 104++0978 ~              cp MIME_MOD
 104++0978 ~              jp z, Gopher.download
 105++0978                  endif
 106++0978
 107++0978 C3 63 08         jp load
 108++097B
 109++097B              homePage:
 110++097B              	IFDEF MSX
 111++097B ~                	db "1Home", TAB, "index.gph"
 112++097B ~                	db TAB, "file", TAB, "70", CR, LF, 0
 113++097B                  ELSE
 114++097B 31 48 6F 6D      	db "1Home", TAB, "browser/index.gph"
 114++097F 65 09 62 72
 114++0983 6F 77 73 65
 114++0987 72 2F 69 6E
 114++098B 64 65 78 2E
 114++098F 67 70 68
 115++0992 09 66 69 6C      	db TAB, "file", TAB, "70", CR, LF, 0
 115++0996 65 09 37 30
 115++099A 0D 0A 00
 116++099D                  ENDIF
 117++099D                  endmodule
# file closed: gopher/engine/history/controler.asm
   2+ 099D                  include "model.asm"
# file opened: gopher/engine/history/model.asm
   1++099D              total   equ 5
   2++099D 00           depth   db 0
   3++099E
   4++099E              historyBlock:
   5++099E 00           .isFile    db  0
   6++099F 00           .mediaType db  0
   7++09A0 00 00 00...  .locator   ds  #1ff
   8++0B9F 00 00 00...  .host      ds  64
   9++0BDF 00 00 00...  .port      ds  6
  10++0BE5 00 00 00...  .search    ds  #ff
  11++0CE4 00 00        .position  dw  #0000    ;position
  12++0CE6
  13++0CE6 00 00 00 00      db 0,0,0,0,0,0  ;cursor_position page_offset
  13++0CEA 00 00
  14++0CEC
  15++0CEC              historyBlockSize = $ - historyBlock
  16++0CEC
  17++0CEC              HistoryRecord EQU $ - historyBlock
  18++0CEC                  dup total
  19++0CEC 00 00 00... >    ds HistoryRecord
  19++103A 00 00 00... >    ds HistoryRecord
  19++1388 00 00 00... >    ds HistoryRecord
  19++16D6 00 00 00... >    ds HistoryRecord
  19++1A24 00 00 00... >    ds HistoryRecord
  20++1D72                  edup
  21++1D72              HistoryEnd equ $ - 1
  22++1D72
# file closed: gopher/engine/history/model.asm
# file closed: gopher/engine/history/index.asm
  33  1D72                  include "gopher/engine/urlencoder.asm"
# file opened: gopher/engine/urlencoder.asm
   1+ 1D72                  MODULE UrlEncoder
   2+ 1D72              ; HL - pointer to line in gopher page
   3+ 1D72              ; C - flag set when it's file
   4+ 1D72              isFile:
   5+ 1D72              .findServerLoop
   6+ 1D72 7E               ld a, (hl)
   6+ 1D73 A7             and a
   6+ 1D74 28 3B          jr z, .notFile
   6+ 1D76 23             inc hl
   7+ 1D77 FE 0D            cp 13
   7+ 1D79 28 36          jr z, .notFile
   8+ 1D7B FE 09            cp 9
   8+ 1D7D 28 02          jr z, .skipPath
   9+ 1D7F 18 F1            jr .findServerLoop
  10+ 1D81              .skipPath
  11+ 1D81 7E               ld a, (hl)
  11+ 1D82 A7             and a
  11+ 1D83 28 2C          jr z, .notFile
  11+ 1D85 23             inc hl
  12+ 1D86 FE 0D            cp 13
  12+ 1D88 28 27          jr z, .notFile
  13+ 1D8A FE 09            cp 9
  13+ 1D8C 28 02          jr z, .compareServer
  14+ 1D8E 18 F1            jr .skipPath
  15+ 1D90              .compareServer
  16+ 1D90 7E               ld a, (hl)
  16+ 1D91 FE 66          cp "f"
  16+ 1D93 20 1C          jr nz, .notFile
  16+ 1D95 23             inc hl
  17+ 1D96 7E               ld a, (hl)
  17+ 1D97 FE 69          cp "i"
  17+ 1D99 20 16          jr nz, .notFile
  17+ 1D9B 23             inc hl
  18+ 1D9C 7E               ld a, (hl)
  18+ 1D9D FE 6C          cp "l"
  18+ 1D9F 20 10          jr nz, .notFile
  18+ 1DA1 23             inc hl
  19+ 1DA2 7E               ld a, (hl)
  19+ 1DA3 FE 65          cp "e"
  19+ 1DA5 20 0A          jr nz, .notFile
  19+ 1DA7 23             inc hl
  20+ 1DA8 7E               ld a, (hl)
  20+ 1DA9 FE 09          cp 9
  20+ 1DAB 20 04          jr nz, .notFile
  20+ 1DAD 23             inc hl
  21+ 1DAE 3E 01            ld a, 1
  22+ 1DB0 C9               ret
  23+ 1DB1              .notFile
  24+ 1DB1 AF               xor a
  25+ 1DB2 C9               ret
  26+ 1DB3
  27+ 1DB3              ; Is enough fields to encode
  28+ 1DB3              ; HL - pointer to line in gopher page
  29+ 1DB3              ; C - flag set when there is enough fields
  30+ 1DB3              isValidGopherRow:
  31+ 1DB3 7E               ld a, (hl)
  31+ 1DB4 A7             and a
  31+ 1DB5 28 FA          jr z, isFile.notFile
  31+ 1DB7 23             inc hl
  32+ 1DB8 FE 0D            cp 13
  32+ 1DBA 28 F5          jr z, isFile.notFile
  33+ 1DBC FE 09            cp 9
  33+ 1DBE 28 02          jr z, .skipPath
  34+ 1DC0 18 F1            jr isValidGopherRow
  35+ 1DC2              .skipPath
  36+ 1DC2 7E               ld a, (hl)
  36+ 1DC3 A7             and a
  36+ 1DC4 28 EB          jr z, isFile.notFile
  36+ 1DC6 23             inc hl
  37+ 1DC7 FE 0D            cp 13
  37+ 1DC9 28 E6          jr z, isFile.notFile
  38+ 1DCB FE 09            cp 9
  38+ 1DCD 28 02          jr z, .skipHost
  39+ 1DCF 18 F1            jr .skipPath
  40+ 1DD1              .skipHost
  41+ 1DD1 7E               ld a, (hl)
  41+ 1DD2 A7             and a
  41+ 1DD3 28 DC          jr z, isFile.notFile
  41+ 1DD5 23             inc hl
  42+ 1DD6 FE 0D            cp 13
  42+ 1DD8 28 D7          jr z, isFile.notFile
  43+ 1DDA FE 09            cp 9
  43+ 1DDC 28 02           jr z, .isValid
  44+ 1DDE 18 F1            jr .skipHost
  45+ 1DE0              .isValid:
  46+ 1DE0 37               scf
  47+ 1DE1 C9               ret
  48+ 1DE2
  49+ 1DE2              extractPath:
  50+ 1DE2 21 A0 09 11      ld hl, historyBlock.locator, de, nameBuffer, bc, #ff
  50+ 1DE6 FA 1D 01 FF
  50+ 1DEA 00
  50+ 1DEB ED B0          ldir
  51+ 1DED C9               ret
  52+ 1DEE
  53+ 1DEE              extractHostName:
  54+ 1DEE 21 9F 0B 11      ld hl, historyBlock.host, de, hostName, bc, 64
  54+ 1DF2 FA 1E 01 40
  54+ 1DF6 00
  54+ 1DF7 ED B0          ldir
  55+ 1DF9 C9               ret
  56+ 1DFA
  57+ 1DFA                  ENDMODULE
  58+ 1DFA
  59+ 1DFA 00 00 00...  nameBuffer ds #ff, 0
  60+ 1EF9
  61+ 1EF9 00                    db 0
  62+ 1EFA 00 00 00...  hostName ds 64
# file closed: gopher/engine/urlencoder.asm
  34  1F3A                  include "gopher/engine/fetcher.asm"
# file opened: gopher/engine/fetcher.asm
   1+ 1F3A                  MODULE Fetcher
   2+ 1F3A
   3+ 1F3A              fetchFromNet:
   4+ 1F3A
   5+ 1F3A              	IFDEF MSX
   6+ 1F3A ~                	call Gopher.makeRequest
   6+ 1F3A ~              jr nz, .error
   7+ 1F3A                  ELSE
   8+ 1F3A CD F4 1F         	call Gopher.makeRequest
   8+ 1F3D 38 06          jr c, .error
   9+ 1F3F                  ENDIF
  10+ 1F3F
  11+ 1F3F CD 0C 20         call Gopher.loadBuffer
  12+ 1F42 C3 93 1F         jp MediaProcessor.processResource
  13+ 1F45              .error
  14+ 1F45 21 4E 1F         ld hl, .err
  14+ 1F48 CD AA 07       call DialogBox.msgBox
  15+ 1F4B C3 4C 08         jp History.back
  16+ 1F4E
  17+ 1F4E 44 6F 63 75  .err db "Document fetch error! Check your connection or hostname!", 0
  17+ 1F52 6D 65 6E 74
  17+ 1F56 20 66 65 74
  17+ 1F5A 63 68 20 65
  17+ 1F5E 72 72 6F 72
  17+ 1F62 21 20 43 68
  17+ 1F66 65 63 6B 20
  17+ 1F6A 79 6F 75 72
  17+ 1F6E 20 63 6F 6E
  17+ 1F72 6E 65 63 74
  17+ 1F76 69 6F 6E 20
  17+ 1F7A 6F 72 20 68
  17+ 1F7E 6F 73 74 6E
  17+ 1F82 61 6D 65 21
  17+ 1F86 00
  18+ 1F87
  19+ 1F87
  20+ 1F87              fetchFromFS:
  21+ 1F87 CD E2 1D         call UrlEncoder.extractPath
  22+ 1F8A              loadFile
  23+ 1F8A              	IFDEF MSX
  24+ 1F8A ~                ld de, nameBuffer, a, FMODE_NO_WRITE
  25+ 1F8A ~                call Dos.fopen
  26+ 1F8A ~                ld a, b, (.fp), a
  27+ 1F8A ~                ld de, outputBuffer, hl, (ramtop)
  28+ 1F8A ~                call Dos.fread
  29+ 1F8A ~                ld a, (.fp), b, a
  30+ 1F8A ~                call Dos.fclose
  31+ 1F8A ~                jp MediaProcessor.processResource
  32+ 1F8A ~            .fp db 0
  33+ 1F8A              	ELSE
  34+ 1F8A 21 FA 1D         ld hl, nameBuffer
  35+ 1F8D CD 01 08         call Dos.loadBuffer
  36+ 1F90 C3 93 1F         jp MediaProcessor.processResource
  37+ 1F93              	ENDIF
  38+ 1F93                  ENDMODULE
# file closed: gopher/engine/fetcher.asm
  35  1F93                  include "gopher/engine/media-processor.asm"
# file opened: gopher/engine/media-processor.asm
   1+ 1F93                  MODULE MediaProcessor
   2+ 1F93              processResource:
   3+ 1F93 CD EE 1D         call UrlEncoder.extractHostName
   4+ 1F96 3A 9F 09         ld a, (historyBlock.mediaType)
   5+ 1F99 FE 05            cp MIME_MUSIC
   5+ 1F9B 28 13          jr z, processPT
   6+ 1F9D FE 02            cp MIME_LINK
   6+ 1F9F 28 15          jr z, processPage
   7+ 1FA1 FE 04            cp MIME_INPUT
   7+ 1FA3 28 11          jr z, processPage
   8+ 1FA5 FE 06            cp MIME_IMAGE
   8+ 1FA7 CA 21 26       jp z, ScreenViewer.display
   9+ 1FAA              ; Fallback to plain text
  10+ 1FAA              processText:
  11+ 1FAA CD 2A 06         call Render.renderPlainTextScreen
  12+ 1FAD C3 5A 06         jp   Render.plainTextLoop
  13+ 1FB0
  14+ 1FB0              processPT:
  15+ 1FB0 CD 51 26         call VortexProcessor.play
  16+ 1FB3 C3 4C 08         jp History.back
  17+ 1FB6
  18+ 1FB6              processPage:
  19+ 1FB6 3A F1 06         ld a, (Render.play_next)
  19+ 1FB9 A7             and a
  19+ 1FBA 20 06          jr nz, .playNext
  20+ 1FBC CD 97 04         call Render.renderGopherScreen
  21+ 1FBF C3 D5 04         jp   Render.workLoop
  22+ 1FC2              .playNext
  23+ 1FC2 21 E6 0C         ld hl, Render.cursor_position
  24+ 1FC5 34               inc (hl)
  25+ 1FC6 C3 BF 04         jp Render.checkBorder
  26+ 1FC9                  ENDMODULE
# file closed: gopher/engine/media-processor.asm
  36  1FC9                  include "gopher/gopher.asm"
# file opened: gopher/gopher.asm
   1+ 1FC9                  module Gopher
   2+ 1FC9              ; HL - gopher row
   3+ 1FC9              extractRequest:
   4+ 1FC9 21 A0 09         ld hl, historyBlock.locator
   5+ 1FCC 11 80 21         ld de, requestbuffer
   6+ 1FCF              .loop
   7+ 1FCF 7E               ld a, (hl)
   8+ 1FD0 12               ld (de), a
   9+ 1FD1 23               inc hl
  10+ 1FD2 13               inc de
  11+ 1FD3 FE 00            cp 0
  12+ 1FD5 28 02            jr z, .search
  13+ 1FD7 18 F6            jr .loop
  14+ 1FD9              .search
  15+ 1FD9 1B               dec de
  16+ 1FDA 3A 9F 09         ld a, (historyBlock.mediaType)
  17+ 1FDD FE 04            cp MIME_INPUT
  18+ 1FDF 20 10            jr nz, .exit
  19+ 1FE1 21 E5 0B         ld hl, historyBlock.search
  20+ 1FE4 3E 09            ld a, TAB
  21+ 1FE6 12               ld (de), a
  22+ 1FE7 13               inc de
  23+ 1FE8              .searchCopy
  24+ 1FE8 7E               ld a, (hl)
  25+ 1FE9 A7               and a
  25+ 1FEA 28 05          jr z, .exit
  26+ 1FEC 12               ld (de), a
  27+ 1FED 23               inc hl
  27+ 1FEE 13             inc de
  28+ 1FEF 18 F7            jr .searchCopy
  29+ 1FF1              .exit
  30+ 1FF1 AF               xor a
  31+ 1FF2 12               ld (de), a
  32+ 1FF3 C9               ret
  33+ 1FF4
  34+ 1FF4
  35+ 1FF4              makeRequest:
  36+ 1FF4 CD C9 1F         call extractRequest
  37+ 1FF7
  38+ 1FF7 21 9F 0B         ld hl, historyBlock.host
  39+ 1FFA 11 DF 0B         ld de, historyBlock.port
  40+ 1FFD CD 3A 24         call Wifi.openTCP
  41+ 2000 D8               ret c
  42+ 2001
  43+ 2001 21 80 21         ld hl, requestbuffer
  44+ 2004 CD 91 23         call Wifi.tcpSendZ
  45+ 2007 AF               xor a
  45+ 2008 32 7C 24       ld (Wifi.closed), a
  46+ 200B C9               ret
  47+ 200C
  48+ 200C
  49+ 200C              loadBuffer:
  50+ 200C 21 0F 4C         ld hl, outputBuffer
  51+ 200F 22 7F 24         ld (Wifi.buffer_pointer), hl
  52+ 2012              .loop
  53+ 2012 CD B3 23         call Wifi.getPacket
  54+ 2015 3A 7C 24         ld a, (Wifi.closed)
  54+ 2018 A7             and a
  54+ 2019 C0             ret nz
  55+ 201A CD 39 24         call Wifi.continue
  56+ 201D 18 F3            jr .loop
  57+ 201F
  58+ 201F                  ifdef GS
  59+ 201F              loadMod:
  60+ 201F AF               xor a
  60+ 2020 CD B4 25       call GeneralSound.init
  61+ 2023 21 63 20         ld hl, .progress
  61+ 2026 CD B3 07       call DialogBox.msgNoWait
  62+ 2029 CD F4 1F         call makeRequest
  62+ 202C DA 45 1F       jp c, Fetcher.fetchFromNet.error
  63+ 202F CD C1 25         call GeneralSound.loadModule
  64+ 2032              .loop
  65+ 2032 21 0F 4C 22      ld hl, outputBuffer, (Wifi.buffer_pointer), hl
  65+ 2036 7F 24
  66+ 2038 CD B3 23         call Wifi.getPacket
  67+ 203B 3A 7C 24         ld a, (Wifi.closed)
  67+ 203E A7             and a
  67+ 203F 20 1C          jr nz, .exit
  68+ 2041 21 0F 4C ED      ld hl, outputBuffer, bc, (Wifi.bytes_avail)
  68+ 2045 4B 7D 24
  69+ 2048              .loadLoop
  70+ 2048 78               ld a, b
  70+ 2049 B1             or c
  70+ 204A A7             and a
  70+ 204B 28 08          jr z, .nextFrame
  71+ 204D 7E               ld a, (hl)
  71+ 204E CD D4 25       call GeneralSound.sendByte
  72+ 2051 0B               dec bc
  73+ 2052 23               inc hl
  74+ 2053 18 F3            jr .loadLoop
  75+ 2055              .nextFrame
  76+ 2055 CD 5C 21         call pulsing
  77+ 2058 CD 39 24         call Wifi.continue
  78+ 205B 18 D5            jr .loop
  79+ 205D              .exit
  80+ 205D CD DC 25         call GeneralSound.finishLoadingModule
  81+ 2060 C3 4C 08         jp History.back
  82+ 2063 4D 4F 44 20  .progress db "MOD downloading directly to GS!", 0
  82+ 2067 64 6F 77 6E
  82+ 206B 6C 6F 61 64
  82+ 206F 69 6E 67 20
  82+ 2073 64 69 72 65
  82+ 2077 63 74 6C 79
  82+ 207B 20 74 6F 20
  82+ 207F 47 53 21 00
  83+ 2083                  endif
  84+ 2083
  85+ 2083              download:
  86+ 2083 11 A0 09         ld de, historyBlock.locator
  87+ 2086 62 6B            ld hl, de
  88+ 2088              .findFileName
  89+ 2088 1A               ld a, (de)
  89+ 2089 13             inc de
  90+ 208A FE 2F            cp '/'
  90+ 208C 20 02          jr nz, .skip
  91+ 208E 62 6B            ld hl, de
  92+ 2090              .skip
  93+ 2090 A7               and a
  93+ 2091 20 F5          jr nz, .findFileName
  94+ 2093              .copy
  95+ 2093                  ;; HL - filename pointer
  96+ 2093 11 5A 07         ld de, DialogBox.inputBuffer
  97+ 2096              .copyFileName
  98+ 2096 7E               ld a, (hl)
  98+ 2097 A7             and a
  98+ 2098 28 05          jr z, .finishCopy
  99+ 209A
 100+ 209A 12               ld (de), a
 100+ 209B 23 13          inc hl, de
 101+ 209D 18 F7            jr .copyFileName
 102+ 209F              .finishCopy
 103+ 209F 12               ld (de), a
 104+ 20A0 CD F6 06         call DialogBox.inputBox.noclear
 105+ 20A3 3A 4D 07         ld a, (DialogBox.namedownload)
 105+ 20A6 A7             and a
 105+ 20A7 CA 4C 08       jp z, History.back
 106+ 20AA
 107+ 20AA CD F4 1F         call makeRequest
 107+ 20AD DA 45 1F       jp c, Fetcher.fetchFromNet.error
 108+ 20B0
 109+ 20B0 06 0E 21 4D      ld b, Dos.FMODE_CREATE, hl, DialogBox.namedownload
 109+ 20B4 07
 110+ 20B5 CD 1E 08         call Dos.fopen
 111+ 20B8 32 59 21         ld (.fp), a
 112+ 20BB
 113+ 20BB 21 34 21         ld hl, .progress
 113+ 20BE CD B3 07       call DialogBox.msgNoWait
 114+ 20C1              .loop
 115+ 20C1 21 0F 4C 22      ld hl, outputBuffer, (Wifi.buffer_pointer), hl
 115+ 20C5 7F 24
 116+ 20C7 CD B3 23         call Wifi.getPacket
 117+ 20CA 3A 7C 24         ld a, (Wifi.closed)
 117+ 20CD A7             and a
 117+ 20CE 20 15          jr nz, .exit
 118+ 20D0
 119+ 20D0 3A 59 21 21      ld a, (.fp), hl, outputBuffer, bc, (Wifi.bytes_avail)
 119+ 20D4 0F 4C ED 4B
 119+ 20D8 7D 24
 120+ 20DA CD 2D 08         call Dos.fwrite
 121+ 20DD CD 5C 21         call pulsing
 122+ 20E0 CD 39 24         call Wifi.continue
 123+ 20E3 18 DC            jr .loop
 124+ 20E5              .exit
 125+ 20E5 3A 59 21         ld a, (.fp)
 126+ 20E8 CD 39 08         call Dos.fclose
 127+ 20EB C3 4C 08         jp History.back
 128+ 20EE              .error
 129+ 20EE 3A 59 21         ld a, (.fp)
 130+ 20F1 CD 39 08         call Dos.fclose
 131+ 20F4 21 FD 20         ld hl, .err
 132+ 20F7 CD AA 07         call DialogBox.msgBox
 133+ 20FA C3 4C 08         jp History.back
 134+ 20FD
 135+ 20FD 4F 70 65 72  .err db "Operation failed! Sorry! Check filename or disk space!",0
 135+ 2101 61 74 69 6F
 135+ 2105 6E 20 66 61
 135+ 2109 69 6C 65 64
 135+ 210D 21 20 53 6F
 135+ 2111 72 72 79 21
 135+ 2115 20 43 68 65
 135+ 2119 63 6B 20 66
 135+ 211D 69 6C 65 6E
 135+ 2121 61 6D 65 20
 135+ 2125 6F 72 20 64
 135+ 2129 69 73 6B 20
 135+ 212D 73 70 61 63
 135+ 2131 65 21 00
 136+ 2134 44 6F 77 6E  .progress db "Downloading in progress! Wait a bit!", 0
 136+ 2138 6C 6F 61 64
 136+ 213C 69 6E 67 20
 136+ 2140 69 6E 20 70
 136+ 2144 72 6F 67 72
 136+ 2148 65 73 73 21
 136+ 214C 20 57 61 69
 136+ 2150 74 20 61 20
 136+ 2154 62 69 74 21
 136+ 2158 00
 137+ 2159 00           .fp db 0
 138+ 215A 00           socket db 0
 139+ 215B 20           pulsator db " "
 140+ 215C              pulsing
 141+ 215C 11 01 0B         ld de, #0B01
 141+ 215F CD 3A 01       call TextMode.gotoXY
 142+ 2162 3A 5B 21         ld a, (pulsator)
 143+ 2165 FE 2A            cp '*'
 144+ 2167 CA 75 21         jp z, printasterix
 145+ 216A 3E 2A            ld a, '*'
 146+ 216C 32 5B 21         ld (pulsator),a
 147+ 216F 3E 20            ld a,' '
 148+ 2171 CD 37 01         call TextMode.putC
 149+ 2174 C9               ret
 150+ 2175              printasterix
 151+ 2175 3E 20            ld a, ' '
 152+ 2177 32 5B 21         ld (pulsator),a
 153+ 217A 3E 2A            ld a,'*'
 154+ 217C CD 37 01         call TextMode.putC
 155+ 217F C9               ret
 156+ 2180
 157+ 2180 00 00 00...  requestbuffer ds #1ff
 158+ 237F                  endmodule
 159+ 237F
# file closed: gopher/gopher.asm
  37  237F                  include "drivers/index.asm"
# file opened: drivers/index.asm
   1+ 237F                  IFDEF UNO
   2+ 237F ~                	include "uno-uart.asm"
   3+ 237F                  ENDIF
   4+ 237F
   5+ 237F                  IFDEF UNOUART
   6+ 237F ~                	include "uno-uart.asm"
   7+ 237F                  ENDIF
   8+ 237F
   9+ 237F                  IFDEF MB03
  10+ 237F ~                	include "mb03-uart.asm"
  11+ 237F                  ENDIF
  12+ 237F
  13+ 237F                  IFDEF AY
  14+ 237F ~                	include "ay-uart.asm"
  15+ 237F                  ENDIF
  16+ 237F
  17+ 237F                  IFDEF ZW
  18+ 237F ~                	include "zx-wifi.asm"
  19+ 237F                  ENDIF
  20+ 237F
  21+ 237F              	include "utils.asm"
# file opened: drivers/utils.asm
   1++237F              ;;; Macroses!!!!
   2++237F                  MACRO EspSend Text
   3++237F ~                ld hl, .txtB
   4++237F ~                ld e, (.txtE - .txtB)
   5++237F ~                call espSend
   6++237F ~                jr .txtE
   7++237F ~            .txtB
   8++237F ~                db Text
   9++237F ~            .txtE
  10++237F                  ENDM
  11++237F
  12++237F                  MACRO EspCmd Text
  13++237F ~                ld hl, .txtB
  14++237F ~                ld e, (.txtE - .txtB)
  15++237F ~                call espSend
  16++237F ~                jr .txtE
  17++237F ~            .txtB
  18++237F ~                db Text
  19++237F ~                db 13, 10
  20++237F ~            .txtE
  21++237F                  ENDM
  22++237F
  23++237F                  MACRO EspCmdOkErr text
  24++237F ~                EspCmd text
  25++237F ~                call checkOkErr
  26++237F                  ENDM
  27++237F
  28++237F              ; IN DE - string pointer
  29++237F              ; OUT HL - string len
  30++237F              strLen:
  31++237F 21 00 00         ld hl, 0
  32++2382              .loop
  33++2382 1A               ld a, (de)
  33++2383 A7             and a
  33++2384 C8             ret z
  34++2385 13 23            inc de, hl
  35++2387 18 F9            jr .loop
# file closed: drivers/utils.asm
  22+ 2389
  23+ 2389              	IFDEF NEDOOSATM
  24+ 2389 ~            		include "atm-uart.asm"
  25+ 2389              	ENDIF
  26+ 2389
  27+ 2389              	IFDEF NEDOOSEVO
  28+ 2389 ~            		include "evo-uart.asm"
  29+ 2389                     	ENDIF
  30+ 2389
  31+ 2389              	IFDEF NEDONET
  32+ 2389              		include "nedowifi.asm"
# file opened: drivers/nedowifi.asm
   1++2389                  MODULE Wifi
   2++2389              	macro OS_NETSOCKET ;D=address family (2=inet, 23=inet6), E=socket type (0x01 tcp/ip, 0x02 icmp, 0x03 udp/ip) ;out: L=SOCKET (if L < 0 then A=error)
   3++2389 ~            		ld l,0x01
   4++2389 ~            		ld c,nos.CMD_WIZNETOPEN
   5++2389 ~            		call nos.BDOS
   6++2389              	endm
   7++2389              	macro OS_NETCONNECT;A=SOCKET, DE=sockaddr ptr {unsigned char sin_family /*net type*/; unsigned short sin_port; struct in_addr sin_addr /*4 bytes IP*/; char sin_zero[8];}; out: if HL < 0 then A=error
   8++2389 ~            		ld l,0x03
   9++2389 ~            		ld c,nos.CMD_WIZNETOPEN
  10++2389 ~            		ex af,af'
  11++2389 ~            		call nos.BDOS
  12++2389              	endm
  13++2389              	macro OS_WIZNETWRITE;A=SOCKET, de=buffer_ptr, HL=sizeof(buffer) ; out: HL=count if HL < 0 then A=error
  14++2389 ~            		ld c,nos.CMD_WIZNETWRITE
  15++2389 ~            		ex af,af'
  16++2389 ~            		call nos.BDOS
  17++2389              	endm
  18++2389              	macro OS_WIZNETREAD;A=SOCKET, de=buffer_ptr, HL=sizeof(buffer) ; out: HL=count if HL < 0 then A=error
  19++2389 ~            		ld c,nos.CMD_WIZNETREAD
  20++2389 ~            		ex af,af'
  21++2389 ~            		call nos.BDOS
  22++2389              	endm
  23++2389              	macro OS_NETSHUTDOWN;A=SOCKET ; out: if HL < 0 then A=error
  24++2389 ~            		ld l,0x02
  25++2389 ~            		ld c,nos.CMD_WIZNETOPEN
  26++2389 ~            		ex af,af'
  27++2389 ~            		call nos.BDOS
  28++2389              	endm
  29++2389
  30++2389              	macro OS_GETDNS;DE= ptr to DNS buffer(4 bytes)
  31++2389 ~            		ld l, 0x08
  32++2389 ~            		ld c, nos.CMD_WIZNETOPEN
  33++2389 ~            		ex af,af' ;'
  34++2389 ~            		call nos.BDOS ;c=CMD
  35++2389              	endm
  36++2389
  37++2389              	macro OS_YIELD
  38++2389 ~            		push bc
  39++2389 ~                	ld c,nos.CMD_YIELD
  40++2389 ~                    call nos.BDOS
  41++2389 ~                    pop bc
  42++2389              	endm
  43++2389
  44++2389
  45++2389
  46++2389              init:
  47++2389 C9           	ret
  48++238A
  49++238A
  50++238A
  51++238A
  52++238A
  53++238A              host_ia:
  54++238A              .curport=$+1
  55++238A 00 00 50 08  	defb 0,0,80,8,8,8,8
  55++238E 08 08 08
  56++2391
  57++2391              tcpSendZ
  58++2391 E5           	push hl
  59++2392 D1           	pop de
  60++2393 D5           	push de
  61++2394 CD 7F 23     	call strLen
  62++2397 D1           	pop de
  63++2398 3A 9E 25     	ld a,(sock_fd)
  64++239B              	OS_WIZNETWRITE
  64++239B 0E DE       >		ld c,nos.CMD_WIZNETWRITE
  64++239D 08          >		ex af,af'
  64++239E CD 05 00    >		call nos.BDOS
  65++23A1 21 02 00     	ld hl,2
  66++23A4 11 B1 23     	ld de,.rn
  67++23A7 3A 9E 25     	ld a,(sock_fd)
  68++23AA              	OS_WIZNETWRITE
  68++23AA 0E DE       >		ld c,nos.CMD_WIZNETWRITE
  68++23AC 08          >		ex af,af'
  68++23AD CD 05 00    >		call nos.BDOS
  69++23B0 C9           	ret
  70++23B1 0D 0A        .rn defb "\r\n"
  71++23B3
  72++23B3              getPacket
  73++23B3
  74++23B3 ED 5B 7F 24      ld de,(buffer_pointer)
  75++23B7 3E FB        	ld a,0xfb
  76++23B9 BA           	cp d
  77++23BA C2 F0 23     	jp nz, letsgo
  78++23BD 21 CD 23     	ld hl, .errMem
  78++23C0 CD AA 07       call DialogBox.msgBox
  79++23C3 3E 01        	ld a,1
  80++23C5 32 7C 24     	ld (closed),a
  81++23C8 AF           	xor a
  82++23C9 32 7D 24     	ld (bytes_avail),a
  83++23CC C9           	ret
  84++23CD              .errMem:
  85++23CD 4F 75 74 20  	db "Out of memory. Page loading error.",0
  85++23D1 6F 66 20 6D
  85++23D5 65 6D 6F 72
  85++23D9 79 2E 20 50
  85++23DD 61 67 65 20
  85++23E1 6C 6F 61 64
  85++23E5 69 6E 67 20
  85++23E9 65 72 72 6F
  85++23ED 72 2E 00
  86++23F0              letsgo:
  87++23F0 ED 5B 7F 24      ld de,(buffer_pointer)
  88++23F4 21 00 10         ld hl,4096
  89++23F7 3A 9E 25         ld a,(sock_fd)
  90++23FA              	OS_WIZNETREAD
  90++23FA 0E DD       >		ld c,nos.CMD_WIZNETREAD
  90++23FC 08          >		ex af,af'
  90++23FD CD 05 00    >		call nos.BDOS
  91++2400 CB 7C            BIT 7,H
  92++2402 28 24            JR Z,RECEIVED	;╨╛╤И╨╕╨▒╨╛╨║ ╨╜╨╡╤В
  93++2404 FE 23        	CP 35   ;ERR_EAGAIN
  94++2406 CA B3 23         jp z, getPacket
  95++2409                  ;╨╛╨▒╤А╨░╨▒╨╛╤В╨║╨░ ╨╛╤И╨╕╨▒╨║╨╕
  96++2409 3E 01            ld a,1
  97++240B 32 7C 24         ld (closed), a
  98++240E 3A 9E 25         LD	a,(sock_fd)
  99++2411 1E 00            LD	E,0
 100++2413              	OS_NETSHUTDOWN
 100++2413 2E 02       >		ld l,0x02
 100++2415 0E DB       >		ld c,nos.CMD_WIZNETOPEN
 100++2417 08          >		ex af,af'
 100++2418 CD 05 00    >		call nos.BDOS
 101++241B 2A 7F 24     	ld hl,(buffer_pointer)
 102++241E 11 0F 4C     	ld de,outputBuffer
 103++2421 B7           	or a
 104++2422 ED 52        	sbc hl,de
 105++2424 22 7D 24         ld (bytes_avail),HL
 106++2427 C9               ret
 107++2428              RECEIVED
 108++2428 EB           	ex hl,de
 109++2429 2A 7F 24         ld hl,(buffer_pointer)
 110++242C 19           	add hl,de
 111++242D 22 7F 24     	ld (buffer_pointer),hl
 112++2430 11 0F 4C     	ld de,outputBuffer
 113++2433 B7           	or a
 114++2434 ED 52        	sbc hl,de
 115++2436 22 7D 24         ld (bytes_avail),HL
 116++2439              continue
 117++2439 C9               ret
 118++243A
 119++243A
 120++243A              openTCP ;DE - port_str, HL - domain name
 121++243A E5           	push hl
 122++243B CD 82 01     	call atohl
 123++243E 7C 65 6F     	ld a,h,h,l,l,a
 124++2441 22 8B 23     	ld (host_ia.curport),hl
 125++2444 D1           	pop de
 126++2445 CD 98 24     	call dns_resolver
 127++2448 7C           	ld a,h
 127++2449 B5             or l
 127++244A CA 81 24       jp z,reqErr
 128++244D 11 8D 23     	ld de,host_ia+3
 129++2450 01 04 00     	ld bc,4
 130++2453 ED B0        	ldir
 131++2455 11 01 02     	ld de,1+(2<<8)
 132++2458              	OS_NETSOCKET
 132++2458 2E 01       >		ld l,0x01
 132++245A 0E DB       >		ld c,nos.CMD_WIZNETOPEN
 132++245C CD 05 00    >		call nos.BDOS
 133++245F 7D           	ld a,l
 133++2460 B7             or a
 133++2461 FA 81 24       jp m,reqErr
 134++2464 32 9E 25     	ld (sock_fd),a
 135++2467 11 8A 23     	ld de,host_ia
 136++246A              	OS_NETCONNECT
 136++246A 2E 03       >		ld l,0x03
 136++246C 0E DB       >		ld c,nos.CMD_WIZNETOPEN
 136++246E 08          >		ex af,af'
 136++246F CD 05 00    >		call nos.BDOS
 137++2472 7D               ld a,l
 137++2473 B7             or a
 137++2474 FA 81 24       jp m,reqErr
 138++2477 AF               xor a
 138++2478 32 7C 24       ld (closed), a
 139++247B C9           	ret
 140++247C
 141++247C              closed
 142++247C 01               defb 1
 143++247D              bytes_avail
 144++247D 00 00            defw 0
 145++247F              buffer_pointer
 146++247F 00 00            defw 0
 147++2481
 148++2481              reqErr
 149++2481 21 89 24         ld hl, .errMsg
 149++2484 CD AA 07       call DialogBox.msgBox
 150++2487 37               scf
 151++2488 C9               ret
 152++2489 53 6F 63 6B  .errMsg db "Socket failed!",0
 152++248D 65 74 20 66
 152++2491 61 69 6C 65
 152++2495 64 21 00
 153++2498
 154++2498              dns_resolver:		;DE-domain name
 155++2498 ED 53 BB 24      ld (.httphostname),de
 156++249C 3E FE            ld a,254
 157++249E 32 1D 25         ld (.dns_err_count),a
 158++24A1              .dns_err_loop
 159++24A1              	;push de
 160++24A1 21 91 25     	ld hl,.dns_head
 161++24A4 11 0F 4C     	ld de,outputBuffer
 162++24A7 01 06 00     	ld bc,6
 163++24AA ED B0        	ldir
 164++24AC EB           	ex de,hl
 165++24AD 11 16 4C     	ld de,outputBuffer+7
 166++24B0 70           	ld (hl),b;0
 167++24B1 0E F9        	ld  c,256-7
 168++24B3 ED B0        	ldir
 169++24B5 11 1B 4C     	ld de,outputBuffer+12
 170++24B8 62           	ld h,d
 171++24B9 6B           	ld l,e
 172++24BA 01 BB 24     	ld bc,.httphostname ;pop bc
 173++24BD              .httphostname=$-2
 174++24BD              .name_loop:
 175++24BD 23           	inc hl
 176++24BE 0A           	ld a,(bc)
 177++24BF 77           	ld (hl),a
 178++24C0 03           	inc bc
 179++24C1 FE 2E        	cp '.'
 180++24C3 28 03        	jr z,.is_dot
 181++24C5 B7           	or a
 182++24C6 20 F5        	jr nz,.name_loop
 183++24C8              .is_dot:
 184++24C8 ED 52        	sbc hl,de
 185++24CA EB           	ex de,hl
 186++24CB 1D           	dec e
 187++24CC 73           	ld (hl),e
 188++24CD 1C           	inc e
 189++24CE 19           	add hl,de
 190++24CF 54           	ld d,h
 191++24D0 5D           	ld e,l
 192++24D1 B7           	or a
 193++24D2 20 E9        	jr nz,.name_loop
 194++24D4 3C           	inc a
 195++24D5 23           	inc hl
 196++24D6 23           	inc hl
 197++24D7 77           	ld (hl),a
 198++24D8 23           	inc hl
 199++24D9 23           	inc hl
 200++24DA 77           	ld (hl),a
 201++24DB 23           	inc hl
 202++24DC E5           	push hl
 203++24DD              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 204++24DD 3A 9A 25     	ld a, (.dns_ia2)
 205++24E0 FE 00        	cp 0
 206++24E2 C2 F0 24     	jp nz, .skipgetdns
 207++24E5 11 9A 25     	ld de, .dns_ia2;DE= ptr to DNS buffer(4 bytes)
 208++24E8              	OS_GETDNS
 208++24E8 2E 08       >		ld l, 0x08
 208++24EA 0E DB       >		ld c, nos.CMD_WIZNETOPEN
 208++24EC 08          >		ex af,af' ;'
 208++24ED CD 05 00    >		call nos.BDOS ;c=CMD
 209++24F0              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 210++24F0              .skipgetdns:
 211++24F0 11 03 02     	ld de,0x0203
 212++24F3                  OS_NETSOCKET
 212++24F3 2E 01       >		ld l,0x01
 212++24F5 0E DB       >		ld c,nos.CMD_WIZNETOPEN
 212++24F7 CD 05 00    >		call nos.BDOS
 213++24FA 7D           	ld a,l
 214++24FB 32 9E 25     	ld (sock_fd),a
 215++24FE B7           	or a
 216++24FF FA 6E 25     	jp m,.dns_exiterr
 217++2502 E1           	pop hl
 218++2503 E5           	push hl
 219++2504 11 F1 B3     	ld de,0xffff&(-outputBuffer)
 220++2507 19           	add hl,de
 221++2508 3A 9E 25     	LD	a,(sock_fd)
 222++250B DD 21 0F 4C  	LD	IX,outputBuffer
 223++250F 11 97 25     	LD	DE,.dns_ia
 224++2512              	OS_WIZNETWRITE
 224++2512 0E DE       >		ld c,nos.CMD_WIZNETWRITE
 224++2514 08          >		ex af,af'
 224++2515 CD 05 00    >		call nos.BDOS
 225++2518 CB 7C        	bit 7,h
 226++251A 20 2F        	jr nz,.dns_exitcode
 227++251C              .dns_err_count=$+1
 228++251C 06 20        	ld b,32
 229++251E 18 07        	jr .recv_wait1
 230++2520              .recv_wait:
 231++2520 C5                   push bc
 232++2521 0E F2                ld c,nos.CMD_YIELD
 233++2523 CD 05 00             call nos.BDOS
 234++2526 C1                   pop bc
 235++2527              .recv_wait1:
 236++2527 C5           	push bc
 237++2528 21 00 01     	ld hl,256
 238++252B 3A 9E 25     	LD	a,(sock_fd)
 239++252E 11 0F 4C     	LD	DE,outputBuffer
 240++2531 DD 21 0F 4C  	LD	IX,outputBuffer
 241++2535              	OS_WIZNETREAD
 241++2535 0E DD       >		ld c,nos.CMD_WIZNETREAD
 241++2537 08          >		ex af,af'
 241++2538 CD 05 00    >		call nos.BDOS
 242++253B C1           	pop bc
 243++253C CB 7C        	bit 7,h
 244++253E 28 04        	jr z,.recv_wait_end
 245++2540 10 DE        	djnz .recv_wait
 246++2542 18 2A        	jr .dns_exiterr
 247++2544              .recv_wait_end:
 248++2544 3A 12 4C     	ld a,(outputBuffer+3)
 249++2547 E6 0F        	and 0x0f
 250++2549 20 23        	jr nz,.dns_exiterr
 251++254B              .dns_exitcode:
 252++254B 3A 9E 25     	LD	a,(sock_fd)
 253++254E 1E 00        	LD	E,0
 254++2550              	OS_NETSHUTDOWN
 254++2550 2E 02       >		ld l,0x02
 254++2552 0E DB       >		ld c,nos.CMD_WIZNETOPEN
 254++2554 08          >		ex af,af'
 254++2555 CD 05 00    >		call nos.BDOS
 255++2558 E1           	pop hl
 256++2559              .reqpars_l
 257++2559 23           	inc hl
 258++255A 23           	inc hl
 259++255B 23           	inc hl
 260++255C 7E           	ld a,(hl)
 261++255D 11 07 00     	ld de,7
 262++2560 19           	add hl,de
 263++2561 46           	ld b,(hl)
 264++2562 23           	inc hl
 265++2563 4E           	ld c,(hl)
 266++2564 23           	inc hl
 267++2565 3D           	dec a
 268++2566 C8           	ret z
 269++2567 FE 04        	cp 4
 270++2569 20 22        	jr nz,.exiterr1
 271++256B 09           	add hl,bc
 272++256C 18 EB        	jr .reqpars_l
 273++256E              .dns_exiterr:
 274++256E F1           	pop af
 275++256F 3A 9E 25     	LD	a,(sock_fd)
 276++2572 1E 00        	LD	E,0
 277++2574              	OS_NETSHUTDOWN
 277++2574 2E 02       >		ld l,0x02
 277++2576 0E DB       >		ld c,nos.CMD_WIZNETOPEN
 277++2578 08          >		ex af,af'
 277++2579 CD 05 00    >		call nos.BDOS
 278++257C 3A 1D 25         ld a,(.dns_err_count)
 279++257F 87               add a,a
 280++2580 32 1D 25         ld (.dns_err_count),a
 281++2583              	OS_YIELD
 281++2583 C5          >		push bc
 281++2584 0E F2       >    	ld c,nos.CMD_YIELD
 281++2586 CD 05 00    >        call nos.BDOS
 281++2589 C1          >        pop bc
 282++258A D2 A1 24         jp nc,.dns_err_loop
 283++258D              .exiterr1:
 284++258D 21 00 00         ld hl,0
 285++2590 C9           	ret
 286++2591              .dns_head
 287++2591 11 22 01 00  	defb 0x11,0x22,0x01,0x00,0x00,0x01
 287++2595 00 01
 288++2597
 289++2597              ;struct sockaddr_in {unsigned char sin_family;unsigned short sin_port;
 290++2597              ;	struct in_addr sin_addr;char sin_zero[8];};
 291++2597              .dns_ia:
 292++2597 00           	defb 0
 293++2598 00 35                db 0,53 ;port (big endian)
 294++259A              .dns_ia2:
 295++259A 00 00 00 00          db 0,0,0,0 ;ip (big endian)
 296++259E
 297++259E 00           sock_fd     defb 0
 298++259F                  ENDMODULE
# file closed: drivers/nedowifi.asm
  33+ 259F              	ELSE
  34+ 259F ~            		include "wifi.asm"
  35+ 259F              	ENDIF
  36+ 259F
  37+ 259F              ;	IFDEF NEDOOS
  38+ 259F              ;       	include "nedoos.asm"
  39+ 259F              ;	ENDIF
  40+ 259F
  41+ 259F              	include "proxy.asm"
# file opened: drivers/proxy.asm
   1++259F                  IFDEF PROXY
   2++259F ~                MODULE Wifi
   3++259F ~            ; Same singature as wifi.openTCP
   4++259F ~            ; HL - host pointer in gopher row
   5++259F ~            ; DE - port pointer in gopher row
   6++259F ~            openTCP:
   7++259F ~                push de
   8++259F ~                push hl
   9++259F ~
  10++259F ~                xor a
  10++259F ~              ld hl, hostBuff, de, hostBuff + 1, bc, 102, (hl), a
  10++259F ~              ldir
  11++259F ~
  12++259F ~                EspCmdOkErr "AT+CIPCLOSE"
  13++259F ~                EspCmdOkErr 'AT+CIPSTART="TCP","138.68.76.243",6912' // Replace here for yourown proxy. If you wish
  14++259F ~                jr c, .error
  15++259F ~                pop hl
  15++259F ~              ld de, hostBuff
  16++259F ~            .copyHost
  17++259F ~                ld a, (hl)
  17++259F ~              and a
  17++259F ~              jr z, 1F
  17++259F ~              and a
  17++259F ~              jr z, 1F
  18++259F ~                ld (de), a
  18++259F ~              inc hl, de
  19++259F ~                jr .copyHost
  20++259F ~            1   xor a
  20++259F ~              ld (de), a
  21++259F ~                pop hl
  21++259F ~              ld de, portBuff
  22++259F ~            .copyPort
  23++259F ~                ld a, (hl)
  23++259F ~              and a
  23++259F ~              jr z, 1F
  23++259F ~              and a
  23++259F ~              jr z, 1F
  24++259F ~                ld (de), a
  24++259F ~              inc hl, de
  25++259F ~                jr .copyPort
  26++259F ~            1   ld hl, hostBuff
  26++259F ~              call tcpSendZ
  27++259F ~                ld hl, portBuff
  27++259F ~              call tcpSendZ
  28++259F ~                xor a
  28++259F ~              ld (closed), a
  29++259F ~                ret
  30++259F ~            .error
  31++259F ~                pop hl
  31++259F ~              pop de
  32++259F ~                ret
  33++259F ~
  34++259F ~            continue:
  35++259F ~                EspCmdOkErr "AT+CIPSEND=1"
  36++259F ~                ret c
  37++259F ~            .wait
  38++259F ~                call Uart.read
  38++259F ~              cp '>'
  38++259F ~              jr nz, .wait
  39++259F ~                ld a, 'c'
  39++259F ~              call Uart.write
  40++259F ~                jp checkOkErr
  41++259F ~
  42++259F ~            hostBuff ds 96
  43++259F ~            portBuff ds 7
  44++259F ~                ENDMODULE
  45++259F                  ENDIF
# file closed: drivers/proxy.asm
  42+ 259F              	include "memory.asm"
# file opened: drivers/memory.asm
   1++259F                  module Memory
   2++259F              BANKM = #5b5c
   3++259F              MEM_PORT = #7ffd
   4++259F
   5++259F              init:
   6++259F F3               di
   7++25A0 FD CB 01 A6      res 4, (iy + 1)
   8++25A4
   9++25A4 AF               xor a
   9++25A5 CD A9 25       call setPage
  10++25A8 C9               ret
  11++25A9
  12++25A9              ; a - page
  13++25A9              setPage:
  14++25A9 F6 18            or #18
  14++25AB 32 5C 5B       ld (BANKM), a
  15++25AE 01 FD 7F         ld bc, MEM_PORT
  15++25B1 ED 79          out (c), a
  16++25B3 C9               ret
  17++25B4
  18++25B4                  endmodule
# file closed: drivers/memory.asm
  43+ 25B4              	include "general-sound.asm"
# file opened: drivers/general-sound.asm
   1++25B4                  ifdef GS
   2++25B4                  macro _WaitCommand
   3++25B4 ~            .wait
   4++25B4 ~                in a, (GeneralSound.CMD)
   5++25B4 ~                rrca
   6++25B4 ~                jr c, .wait
   7++25B4                  endm
   8++25B4
   9++25B4                  macro _WaitData
  10++25B4 ~            .wait
  11++25B4 ~                in a, (GeneralSound.CMD)
  12++25B4 ~                rlca
  13++25B4 ~                jr c, .wait
  14++25B4                  endm
  15++25B4
  16++25B4                  macro _SendCommand nn
  17++25B4 ~                ld a, nn
  17++25B4 ~              out (GeneralSound.CMD), a
  18++25B4                  endm
  19++25B4
  20++25B4                  module GeneralSound
  21++25B4              ;; Control ports
  22++25B4              CMD  = 187
  23++25B4              DATA = 179
  24++25B4
  25++25B4              ;; Commands
  26++25B4              CMD_WARM_RESET      = #F3
  27++25B4              CMD_COLD_RESET      = #F4
  28++25B4              CMD_LOAD_MODULE     = #30
  29++25B4              CMD_PLAY_MODULE     = #31
  30++25B4              CMD_STOP_MODULE     = #32
  31++25B4              CMD_CONTINUE_MODULE = #33
  32++25B4              CMD_OPEN_STREAM     = #D1
  33++25B4              CMD_CLOSE_STREAM    = #D2
  34++25B4
  35++25B4              ; A - 0 warm reset, other - cold
  36++25B4              init:
  37++25B4 A7               and a
  37++25B5 20 05          jr nz, .cold
  38++25B7                  _SendCommand CMD_WARM_RESET
  38++25B7 3E F3       >    ld a, CMD_WARM_RESET
  38++25B9 D3 BB       >  out (GeneralSound.CMD), a
  39++25BB C9               ret
  40++25BC              .cold
  41++25BC                  _SendCommand CMD_COLD_RESET
  41++25BC 3E F4       >    ld a, CMD_COLD_RESET
  41++25BE D3 BB       >  out (GeneralSound.CMD), a
  42++25C0 C9               ret
  43++25C1
  44++25C1              ;; Initializes loading module
  45++25C1              loadModule:
  46++25C1                  _SendCommand CMD_LOAD_MODULE
  46++25C1 3E 30       >    ld a, CMD_LOAD_MODULE
  46++25C3 D3 BB       >  out (GeneralSound.CMD), a
  47++25C5                  _WaitCommand
  47++25C5             >.wait
  47++25C5 DB BB       >    in a, (GeneralSound.CMD)
  47++25C7 0F          >    rrca
  47++25C8 38 FB       >    jr c, .wait
  48++25CA                  _SendCommand CMD_OPEN_STREAM
  48++25CA 3E D1       >    ld a, CMD_OPEN_STREAM
  48++25CC D3 BB       >  out (GeneralSound.CMD), a
  49++25CE                  _WaitCommand
  49++25CE             >.wait
  49++25CE DB BB       >    in a, (GeneralSound.CMD)
  49++25D0 0F          >    rrca
  49++25D1 38 FB       >    jr c, .wait
  50++25D3 C9               ret
  51++25D4
  52++25D4              ;; Use it for streaming mod file
  53++25D4              sendByte:
  54++25D4 D3 B3            out (DATA), a
  55++25D6                  _WaitData
  55++25D6             >.wait
  55++25D6 DB BB       >    in a, (GeneralSound.CMD)
  55++25D8 07          >    rlca
  55++25D9 38 FB       >    jr c, .wait
  56++25DB C9               ret
  57++25DC
  58++25DC              ;; Call it when module was loaded
  59++25DC              finishLoadingModule:
  60++25DC                  _SendCommand CMD_CLOSE_STREAM
  60++25DC 3E D2       >    ld a, CMD_CLOSE_STREAM
  60++25DE D3 BB       >  out (GeneralSound.CMD), a
  61++25E0                  _WaitCommand
  61++25E0             >.wait
  61++25E0 DB BB       >    in a, (GeneralSound.CMD)
  61++25E2 0F          >    rrca
  61++25E3 38 FB       >    jr c, .wait
  62++25E5              rewind:
  63++25E5 3E 01            ld a, 1
  63++25E7 D3 B3          out (DATA), a
  64++25E9                  _SendCommand CMD_PLAY_MODULE
  64++25E9 3E 31       >    ld a, CMD_PLAY_MODULE
  64++25EB D3 BB       >  out (GeneralSound.CMD), a
  65++25ED                  _WaitCommand
  65++25ED             >.wait
  65++25ED DB BB       >    in a, (GeneralSound.CMD)
  65++25EF 0F          >    rrca
  65++25F0 38 FB       >    jr c, .wait
  66++25F2 3E 01 32 20      ld a, 1, (state),a
  66++25F6 26
  67++25F7 C9               ret
  68++25F8
  69++25F8              ;; Works like pause too
  70++25F8              stopModule:
  71++25F8 AF               xor a
  71++25F9 32 20 26       ld (state), a
  72++25FC                  _SendCommand CMD_STOP_MODULE
  72++25FC 3E 32       >    ld a, CMD_STOP_MODULE
  72++25FE D3 BB       >  out (GeneralSound.CMD), a
  73++2600 C9               ret
  74++2601
  75++2601              continueModule:
  76++2601 3E 01            ld a, 1
  76++2603 32 20 26       ld (state), a
  77++2606                  _SendCommand CMD_CONTINUE_MODULE
  77++2606 3E 33       >    ld a, CMD_CONTINUE_MODULE
  77++2608 D3 BB       >  out (GeneralSound.CMD), a
  78++260A C9               ret
  79++260B
  80++260B              ; Pauses resumes
  81++260B              toggleModule:
  82++260B CD FA 07         call Console.waitForKeyUp
  83++260E 3A 20 26         ld a, (state)
  83++2611 A7             and a
  84++2612 28 ED            jr z, continueModule
  85++2614 18 E2            jr stopModule
  86++2616
  87++2616              toggleDownload:
  88++2616 3A 1F 26         ld a,(GSdownType)
  89++2619 EE 01            xor 1
  90++261B 32 1F 26         ld (GSdownType),a
  91++261E C9               ret
  92++261F
  93++261F 00           GSdownType  db 0
  94++2620 00           state db 0
  95++2621                  endmodule
  96++2621
  97++2621                  endif
# file closed: drivers/general-sound.asm
  44+ 2621
# file closed: drivers/index.asm
  38  2621                  IFNDEF NEDOOS
  39  2621 ~                include "player/vortex-processor.asm"
  40  2621 ~                include "screen/screen.asm"
  41  2621              	ELSE
  42  2621                  include "screen/nedoscreen.asm"
# file opened: screen/nedoscreen.asm
   1+ 2621
   2+ 2621              	module ScreenViewer
   3+ 2621              display:
   4+ 2621 CD FA 07         call Console.waitForKeyUp
   5+ 2624 1E 83        	ld e,0x83
   6+ 2626 0E F9        	ld c,nos.CMD_SETGFX
   7+ 2628 CD 05 00     	call nos.BDOS
   8+ 262B 3A 35 00     	ld a,(nos.user_scr0_high)
   9+ 262E EF           	rst 0x28
  10+ 262F 21 0F 4C 11      ld hl, outputBuffer, de, #c000, bc, 6912
  10+ 2633 00 C0 01 00
  10+ 2637 1B
  10+ 2638 ED B0          ldir
  11+ 263A AF               xor a
  11+ 263B D3 FE          out (#fe), a
  12+ 263D              .wait
  13+ 263D CD E1 07         call Console.getC
  14+ 2640 1E 86        	ld e,0x86
  15+ 2642 0E F9        	ld c,nos.CMD_SETGFX
  16+ 2644 CD 05 00     	call nos.BDOS
  17+ 2647 3A 05 01     	ld a,(TextMode.pgC)
  18+ 264A EF           	rst 0x28
  19+ 264B CD 30 01         call TextMode.cls
  20+ 264E C3 4C 08         jp History.back
  21+ 2651                  endmodule
# file closed: screen/nedoscreen.asm
  43  2651                  include "player/vortexnedoos.asm"
# file opened: player/vortexnedoos.asm
   1+ 2651                  MODULE VortexProcessor
   2+ 2651              play:
   3+ 2651 CD FA 07         call Console.waitForKeyUp
   4+ 2654
   5+ 2654 21 8A 26         ld hl, message
   5+ 2657 CD B3 07       call DialogBox.msgNoWait
   6+ 265A
   7+ 265A 21 0F 4C         ld hl, outputBuffer
   7+ 265D CD 41 40       call VTPL.INIT
   8+ 2660
   9+ 2660
  10+ 2660 3E 00 32 F1      ld a, 0, (Render.play_next), a
  10+ 2664 06
  11+ 2665                  ifdef GS
  12+ 2665 CD F8 25         call GeneralSound.stopModule
  13+ 2668                  endif
  14+ 2668 3A 03 01     	ld a,(TextMode.pg4)
  15+ 266B 21 64 48     	ld hl,VTPL.PLAY
  16+ 266E 0E D5        	ld c,nos.CMD_SETMUSIC
  17+ 2670 08           	ex af,af'
  18+ 2671 CD 05 00     	call nos.BDOS
  19+ 2674 CD E1 07         call Console.getC
  20+ 2677 3A 03 01     	ld a,(TextMode.pg4)
  21+ 267A 21 F6 4B     	ld hl,fakemod.fakeret
  22+ 267D 0E D5        	ld c,nos.CMD_SETMUSIC
  23+ 267F 08           	ex af,af'
  24+ 2680 CD 05 00     	call nos.BDOS
  25+ 2683 CD 2F 40         call VTPL.MUTE
  26+ 2686 CD FA 07         call Console.waitForKeyUp
  27+ 2689 C9               ret
  28+ 268A
  29+ 268A 20 20 20 20  message db "    Press key to stop...", 0
  29+ 268E 50 72 65 73
  29+ 2692 73 20 6B 65
  29+ 2696 79 20 74 6F
  29+ 269A 20 73 74 6F
  29+ 269E 70 2E 2E 2E
  29+ 26A2 00
  30+ 26A3                  ENDMODULE
  31+ 26A3              	org 0x4000
  32+ 4000
  33+ 4000                  include "player.asm"
# file opened: player/player.asm
   1++4000              ;Universal PT2'n'PT3 Turbo Sound player for ZX Spectrum
   2++4000              ;(c)2004-2007 S.V.Bulba <vorobey@mail.khstu.ru>
   3++4000              ;Specially for AlCo
   4++4000              ;http://bulba.untergrund.net/ (http://bulba.at.kz/)
   5++4000              	MODULE VTPL
   6++4000              ;Release number
   7++4000              Release EQU "0"
   8++4000              ;Conditional assembly
   9++4000              ;1) Current position counters at (Vars1+0) and (Vars2+0)
  10++4000              CurPosCounter=0
  11++4000              ;2) Allow channels allocation bits at (START+10)
  12++4000              ACBBAC=0
  13++4000              ;3) Allow loop checking and disabling
  14++4000              LoopChecker=1
  15++4000              ;4) Insert official identificator
  16++4000              Id=0
  17++4000              ;5) Set IY for correct return to ZX Basic
  18++4000              Basic=1
  19++4000
  20++4000              ;Features
  21++4000              ;--------
  22++4000              ;-Can be compiled at any address (i.e. no need rounding ORG
  23++4000              ; address).
  24++4000              ;-Variables (VARS) can be located at any address (not only after
  25++4000              ; code block).
  26++4000              ;-INIT subprogram checks PT3-module version and rightly
  27++4000              ; generates both note and volume tables outside of code block
  28++4000              ; (in VARS).
  29++4000              ;-Two portamento (spc. command 3xxx) algorithms (depending of
  30++4000              ; PT3 module version).
  31++4000              ;-New 1.XX and 2.XX special command behaviour (only for PT v3.7
  32++4000              ; and higher).
  33++4000              ;-Any Tempo value are accepted (including Tempo=1 and Tempo=2).
  34++4000              ;-TS modes: 2xPT3, 2xPT2 and PT v3.7 TS standard.
  35++4000              ;-Fully compatible with Ay_Emul PT3 and PT2 players codes.
  36++4000              ;-See also notes at the end of this source code.
  37++4000
  38++4000              ;Limitations
  39++4000              ;-----------
  40++4000              ;-Can run in RAM only (self-modified code is used).
  41++4000              ;-PT2 position list must be end by #FF marker only.
  42++4000
  43++4000              ;Warning!!! PLAY subprogram can crash if no module are loaded
  44++4000              ;into RAM or INIT subprogram was not called before.
  45++4000
  46++4000              ;Call MUTE or INIT one more time to mute sound after stopping
  47++4000              ;playing
  48++4000
  49++4000              ;Test codes (commented)
  50++4000              ;	LD A,32 ;SinglePT3(TS if TSPT3.7),ABC,Looped
  51++4000              ;	LD (START+10),A
  52++4000              ;	LD HL,#8000 ;Mod1
  53++4000              ;	LD DE,#A000 ;Mod2 (optional)
  54++4000              ;	CALL START+3
  55++4000              ;	EI
  56++4000              ;_LP	HALT
  57++4000              ;	CALL START+5
  58++4000              ;	XOR A
  59++4000              ;	IN A,(#FE)
  60++4000              ;	CPL
  61++4000              ;	AND 15
  62++4000              ;	JR Z,_LP
  63++4000              ;	JR START+8
  64++4000
  65++4000              TonA	EQU 0
  66++4000              TonB	EQU 2
  67++4000              TonC	EQU 4
  68++4000              Noise	EQU 6
  69++4000              Mixer	EQU 7
  70++4000              AmplA	EQU 8
  71++4000              AmplB	EQU 9
  72++4000              AmplC	EQU 10
  73++4000              Env	EQU 11
  74++4000              EnvTp	EQU 13
  75++4000
  76++4000              ;Entry and other points
  77++4000              ;START initialize playing of modules at MDLADDR (single module)
  78++4000              ;START+3 initialization with module address in HL and DE (TS)
  79++4000              ;START+5 play one quark
  80++4000              ;START+8 mute
  81++4000              ;START+10 setup and status flags
  82++4000
  83++4000              START:
  84++4000 21 0F 4C     	LD HL,outputBuffer ;DE - address of 2nd module for TS
  85++4003 18 3C        	JR INIT
  86++4005 C3 64 48     	JP PLAY
  87++4008 18 25        	JR MUTE
  88++400A 00           SETUP	DB 0 ;set bit0, if you want to play without looping
  89++400B              	     ;(optional);
  90++400B              	     ;set bit1 for PT2 and reset for PT3 before
  91++400B              	     ;calling INIT;
  92++400B              	     ;bits2-3: %00-ABC, %01-ACB, %10-BAC (optional);
  93++400B              	     ;bits4-5: %00-no TS, %01-2 modules TS, %10-
  94++400B              	     ;autodetect PT3 TS-format by AlCo (PT 3.7+);
  95++400B              	     ;Remark: old PT3 TS-format by AlCo (PT 3.6) is not
  96++400B              	     ;documented and must be converted to new standard.
  97++400B              	     ;bit6 is set each time, when loop point of 2nd TS
  98++400B              	     ;module is passed (optional).
  99++400B              	     ;bit7 is set each time, when loop point of 1st TS
 100++400B              	     ;or of single module is passed (optional).
 101++400B
 102++400B              ;Identifier
 103++400B              	IF Id
 104++400B ~            	DB "=UniPT2/PT3/TS-Player r.",Release,"="
 105++400B              	ENDIF
 106++400B
 107++400B              	IF LoopChecker
 108++400B 21 0A 40     CHECKLP	LD HL,SETUP
 109++400E FD CB 9E 46  	BIT 0,(IY-100+VRS.ModNum)
 110++4012 28 04        	JR Z,CHL1
 111++4014 CB F6        	SET 6,(HL)
 112++4016 18 02        	JR CHL2
 113++4018 CB FE        CHL1	SET 7,(HL)
 114++401A CB 46        CHL2	BIT 0,(HL)
 115++401C C8           	RET Z
 116++401D E1           	POP HL
 117++401E FD 34 09     	INC (IY-100+VRS.DelyCnt)
 118++4021 FD 34 BA     	INC (IY-100+VRS.ChanA+CHP.NtSkCn)
 119++4024 AF           	XOR A
 120++4025 FD 77 1D     	LD (IY-100+VRS.AYREGS+AmplA),A
 121++4028 FD 77 1E     	LD (IY-100+VRS.AYREGS+AmplB),A
 122++402B FD 77 1F     	LD (IY-100+VRS.AYREGS+AmplC),A
 123++402E C9           	RET
 124++402F              	ENDIF
 125++402F
 126++402F AF           MUTE: XOR A
 127++4030 67           	LD H,A
 128++4031 6F           	LD L,A
 129++4032 32 B9 49     	LD (VARS1+VRS.AYREGS+AmplA),A
 130++4035 22 BA 49     	LD (VARS1+VRS.AYREGS+AmplB),HL
 131++4038 32 40 4A     	LD (VARS2+VRS.AYREGS+AmplA),A
 132++403B 22 41 4A     	LD (VARS2+VRS.AYREGS+AmplB),HL
 133++403E C3 7C 48     	JP ROUT
 134++4041
 135++4041              INIT:
 136++4041              ;HL - AddressOfModule
 137++4041              ;DE - AddresOf2ndModule
 138++4041 D5           	PUSH DE
 139++4042 E5           	PUSH HL
 140++4043 21 37 49     	LD HL,VARS
 141++4046 36 00        	LD (HL),0
 142++4048 11 38 49     	LD DE,VARS+1
 143++404B 01 0E 01     	LD BC,VAR0END-VARS-1
 144++404E ED B0        	LDIR
 145++4050 23           	INC HL
 146++4051 22 9A 49     	LD (VARS1+VRS.AdInPtA),HL ;ptr to zero
 147++4054 22 21 4A     	LD (VARS2+VRS.AdInPtA),HL
 148++4057
 149++4057 E1           	POP HL
 150++4058 FD 21 9C 49  	LD IY,VARS1+100
 151++405C 3A 0A 40     	LD A,(START+10)
 152++405F E6 02        	AND 2
 153++4061 C2 EA 40     	JP NZ,I_PT2
 154++4064
 155++4064 CD 37 42     	CALL INITPT3
 156++4067 21 18 1F     	LD HL,(e_-SamCnv-2)*256+#18
 157++406A 22 0A 46     	LD (SamCnv),HL
 158++406D 3E BA        	LD A,#BA
 159++406F 32 D5 45     	LD (OrnCP),A
 160++4072 32 01 46     	LD (SamCP),A
 161++4075 3E 7B        	LD A,#7B
 162++4077 32 D8 45     	LD (OrnLD),A
 163++407A 32 04 46     	LD (SamLD),A
 164++407D 3E 87        	LD A,#87
 165++407F 32 FB 45     	LD (SamClc2),A
 166++4082 E1           	POP HL
 167++4083              	;Use version and ton table of 1st module
 168++4083 DD 7E A9     	LD A,(IX+13-100) ;EXTRACT VERSION NUMBER
 169++4086 D6 30        	SUB #30
 170++4088 38 04        	JR C,L20
 171++408A FE 0A        	CP 10
 172++408C 38 02        	JR C,L21
 173++408E 3E 06        L20	LD A,6
 174++4090 32 A8 44     L21	LD (Version),A
 175++4093 F5           	PUSH AF ;VolTable version
 176++4094 FE 04        	CP 4
 177++4096 DD 7E FF     	LD A,(IX+99-100) ;TONE TABLE NUMBER
 178++4099 17           	RLA
 179++409A E6 07        	AND 7
 180++409C F5           	PUSH AF ;NoteTable number
 181++409D
 182++409D FD 21 23 4A  	LD IY,VARS2+100
 183++40A1 3A 0A 40     	LD A,(START+10)
 184++40A4 E6 30        	AND 48
 185++40A6 28 37        	JR Z,NOTS
 186++40A8 FE 10        	CP 16
 187++40AA 28 27        	JR Z,TwoPT3s
 188++40AC 3A A8 44     	LD A,(Version)
 189++40AF FE 07        	CP 7
 190++40B1 38 2C        	JR C,NOTS
 191++40B3 DD 7E FE     	LD A,(IX+98-100) ;ALCO TS MARKER
 192++40B6 FE 20        	CP #20
 193++40B8 28 25        	JR Z,NOTS
 194++40BA 21 38 49     	LD HL,VARS1
 195++40BD 11 BF 49     	LD DE,VARS2
 196++40C0 01 87 00     	LD BC,VRS
 197++40C3 ED B0        	LDIR
 198++40C5 FD CB 9E CE  	SET 1,(IY-100+VRS.ModNum)
 199++40C9 4F           	LD C,A
 200++40CA 87           	ADD A,A
 201++40CB 81           	ADD A,C
 202++40CC D6 02        	SUB 2
 203++40CE 32 6F 47     	LD (TSSub),A
 204++40D1 18 03        	JR AlCoTS_
 205++40D3 CD 37 42     TwoPT3s	CALL INITPT3
 206++40D6 3E 01        AlCoTS_	LD A,1
 207++40D8 32 37 49     	LD (is_ts),A
 208++40DB FD CB 9E C6  	SET 0,(IY-100+VRS.ModNum)
 209++40DF
 210++40DF 01 F4 43     NOTS	LD BC,PT3PD
 211++40E2 21 00 00     	LD HL,0
 212++40E5 11 FF 48     	LD DE,PT3EMPTYORN
 213++40E8 18 48        	JR INITCOMMON
 214++40EA
 215++40EA CD 6F 42     I_PT2	CALL INITPT2
 216++40ED 21 CB 51     	LD HL,#51CB
 217++40F0 22 0A 46     	LD (SamCnv),HL
 218++40F3 3E BB        	LD A,#BB
 219++40F5 32 D5 45     	LD (OrnCP),A
 220++40F8 32 01 46     	LD (SamCP),A
 221++40FB 3E 7A        	LD A,#7A
 222++40FD 32 D8 45     	LD (OrnLD),A
 223++4100 32 04 46     	LD (SamLD),A
 224++4103 3E 80        	LD A,#80
 225++4105 32 FB 45     	LD (SamClc2),A
 226++4108 E1           	POP HL
 227++4109 3E 05        	LD A,5
 228++410B 32 A8 44     	LD (Version),A
 229++410E F5           	PUSH AF
 230++410F 3E 02        	LD A,2
 231++4111 F5           	PUSH AF
 232++4112
 233++4112 3A 0A 40     	LD A,(START+10)
 234++4115 E6 30        	AND 48
 235++4117 28 10        	JR Z,NOTS2
 236++4119
 237++4119 FD 21 23 4A  	LD IY,VARS2+100
 238++411D 3E 01        	LD A,1
 239++411F 32 37 49     	LD (is_ts),A
 240++4122 FD CB 9E C6  	SET 0,(IY-100+VRS.ModNum)
 241++4126 CD 6F 42     	CALL INITPT2
 242++4129
 243++4129 01 2E 43     NOTS2	LD BC,PT2PD
 244++412C 21 87 86     	LD HL,#8687
 245++412F 11 55 4A     	LD DE,PT2EMPTYORN
 246++4132
 247++4132              INITCOMMON
 248++4132
 249++4132              	IF Basic
 250++4132 FD 21 3A 5C  	LD IY,#5C3A
 251++4136              	ENDIF
 252++4136
 253++4136 ED 43 DF 42  	LD (PTDEC),BC
 254++413A 22 71 47     	LD (PsCalc),HL
 255++413D D5           	PUSH DE
 256++413E
 257++413E              ;note table data depacker
 258++413E              ;(c) Ivan Roshin
 259++413E 11 02 49     	LD DE,T_PACK
 260++4141 01 A7 4A     	LD BC,T1_+(2*49)-1
 261++4144 1A           TP_0	LD A,(DE)
 262++4145 13           	INC DE
 263++4146 FE 1E        	CP 15*2
 264++4148 30 06        	JR NC,TP_1
 265++414A 67           	LD H,A
 266++414B 1A           	LD A,(DE)
 267++414C 6F           	LD L,A
 268++414D 13           	INC DE
 269++414E 18 07        	JR TP_2
 270++4150 D5           TP_1	PUSH DE
 271++4151 16 00        	LD D,0
 272++4153 5F           	LD E,A
 273++4154 19           	ADD HL,DE
 274++4155 19           	ADD HL,DE
 275++4156 D1           	POP DE
 276++4157 7C           TP_2	LD A,H
 277++4158 02           	LD (BC),A
 278++4159 0B           	DEC BC
 279++415A 7D           	LD A,L
 280++415B 02           	LD (BC),A
 281++415C 0B           	DEC BC
player.asm(282): warning: value 0x1F0 is truncated to 8bit value: 0xF0
 282++415D D6 F0        	SUB #F8*2
 283++415F 20 E3        	JR NZ,TP_0
 284++4161
 285++4161 3C           	INC A
 286++4162 32 A5 49     	LD (VARS1+VRS.DelyCnt),A
 287++4165 32 2C 4A     	LD (VARS2+VRS.DelyCnt),A
 288++4168 21 01 F0     	LD HL,#F001 ;H - CHP.Volume, L - CHP.NtSkCn
 289++416B 22 56 49     	LD (VARS1+VRS.ChanA+CHP.NtSkCn),HL
 290++416E 22 73 49     	LD (VARS1+VRS.ChanB+CHP.NtSkCn),HL
 291++4171 22 90 49     	LD (VARS1+VRS.ChanC+CHP.NtSkCn),HL
 292++4174 22 DD 49     	LD (VARS2+VRS.ChanA+CHP.NtSkCn),HL
 293++4177 22 FA 49     	LD (VARS2+VRS.ChanB+CHP.NtSkCn),HL
 294++417A 22 17 4A     	LD (VARS2+VRS.ChanC+CHP.NtSkCn),HL
 295++417D E1           	POP HL
 296++417E 22 48 49     	LD (VARS1+VRS.ChanA+CHP.OrnPtr),HL
 297++4181 22 65 49     	LD (VARS1+VRS.ChanB+CHP.OrnPtr),HL
 298++4184 22 82 49     	LD (VARS1+VRS.ChanC+CHP.OrnPtr),HL
 299++4187 22 CF 49     	LD (VARS2+VRS.ChanA+CHP.OrnPtr),HL
 300++418A 22 EC 49     	LD (VARS2+VRS.ChanB+CHP.OrnPtr),HL
 301++418D 22 09 4A     	LD (VARS2+VRS.ChanC+CHP.OrnPtr),HL
 302++4190
 303++4190 F1           	POP AF
 304++4191
 305++4191              ;NoteTableCreator (c) Ivan Roshin
 306++4191              ;A - NoteTableNumber*2+VersionForNoteTable
 307++4191              ;(xx1b - 3.xx..3.4r, xx0b - 3.4x..3.6x..VTII1.0)
 308++4191
 309++4191 21 AF 48     	LD HL,NT_DATA
 310++4194 16 00        	LD D,0
 311++4196 87           	ADD A,A
 312++4197 5F           	LD E,A
 313++4198 19           	ADD HL,DE
 314++4199 5E           	LD E,(HL)
 315++419A 23           	INC HL
 316++419B CB 3B        	SRL E
 317++419D 9F           	SBC A,A
 318++419E E6 A7        	AND #A7 ;#00 (NOP) or #A7 (AND A)
 319++41A0 32 C8 41     	LD (L3),A
 320++41A3 EB           	EX DE,HL
 321++41A4 01 46 4A     	LD BC,T1_
 322++41A7 09           	ADD HL,BC
 323++41A8
 324++41A8 1A           	LD A,(DE)
player.asm(325): warning: value 0x48BF is truncated to 8bit value: 0xBF
 325++41A9 C6 BF        	ADD A,T_
 326++41AB 4F           	LD C,A
 327++41AC CE 48        	ADC A,T_/256
 328++41AE 91           	SUB C
 329++41AF 47           	LD B,A
 330++41B0 C5           	PUSH BC
 331++41B1 11 36 4B     	LD DE,NT_
 332++41B4 D5           	PUSH DE
 333++41B5
 334++41B5 06 0C        	LD B,12
 335++41B7 C5           L1	PUSH BC
 336++41B8 4E           	LD C,(HL)
 337++41B9 23           	INC HL
 338++41BA E5           	PUSH HL
 339++41BB 46           	LD B,(HL)
 340++41BC
 341++41BC D5           	PUSH DE
 342++41BD EB           	EX DE,HL
 343++41BE 11 17 00     	LD DE,23
 344++41C1 DD 26 08     	LD IXH,8
 345++41C4
 346++41C4 CB 38        L2	SRL B
 347++41C6 CB 19        	RR C
 348++41C8 19           L3	DB #19	;AND A or NOP
 349++41C9 79           	LD A,C
 350++41CA 8A           	ADC A,D	;=ADC 0
 351++41CB 77           	LD (HL),A
 352++41CC 23           	INC HL
 353++41CD 78           	LD A,B
 354++41CE 8A           	ADC A,D
 355++41CF 77           	LD (HL),A
 356++41D0 19           	ADD HL,DE
 357++41D1 DD 25        	DEC IXH
 358++41D3 20 EF        	JR NZ,L2
 359++41D5
 360++41D5 D1           	POP DE
 361++41D6 13           	INC DE
 362++41D7 13           	INC DE
 363++41D8 E1           	POP HL
 364++41D9 23           	INC HL
 365++41DA C1           	POP BC
 366++41DB 10 DA        	DJNZ L1
 367++41DD
 368++41DD E1           	POP HL
 369++41DE D1           	POP DE
 370++41DF
 371++41DF 7B           	LD A,E
player.asm(372): warning: value 0x48CB is truncated to 8bit value: 0xCB
 372++41E0 FE CB        	CP TCOLD_1
 373++41E2 20 05        	JR NZ,CORR_1
 374++41E4 3E FD        	LD A,#FD
 375++41E6 32 64 4B     	LD (NT_+#2E),A
 376++41E9
 377++41E9 1A           CORR_1	LD A,(DE)
 378++41EA A7           	AND A
 379++41EB 28 11        	JR Z,TC_EXIT
 380++41ED 1F           	RRA
 381++41EE F5           	PUSH AF
 382++41EF 87           	ADD A,A
 383++41F0 4F           	LD C,A
 384++41F1 09           	ADD HL,BC
 385++41F2 F1           	POP AF
 386++41F3 30 02        	JR NC,CORR_2
 387++41F5 35           	DEC (HL)
 388++41F6 35           	DEC (HL)
 389++41F7 34           CORR_2	INC (HL)
 390++41F8 A7           	AND A
 391++41F9 ED 42        	SBC HL,BC
 392++41FB 13           	INC DE
 393++41FC 18 EB        	JR CORR_1
 394++41FE
 395++41FE              TC_EXIT
 396++41FE
 397++41FE F1           	POP AF
 398++41FF
 399++41FF              ;VolTableCreator (c) Ivan Roshin
 400++41FF              ;A - VersionForVolumeTable (0..4 - 3.xx..3.4x;
 401++41FF              			   ;5.. - 2.x,3.5x..3.6x..VTII1.0)
 402++41FF
 403++41FF FE 05        	CP 5
 404++4201 21 11 00     	LD HL,#11
 405++4204 54           	LD D,H
 406++4205 5C           	LD E,H
 407++4206 3E 17        	LD A,#17
 408++4208 30 03        	JR NC,M1
 409++420A 2D           	DEC L
 410++420B 5D           	LD E,L
 411++420C AF           	XOR A
 412++420D 32 1E 42     M1      LD (M2),A
 413++4210
 414++4210 DD 21 46 4A  	LD IX,VT_+16
 415++4214
 416++4214 0E 0F        	LD C,#F
 417++4216 E5           INITV2  PUSH HL
 418++4217
 419++4217 19           	ADD HL,DE
 420++4218 EB           	EX DE,HL
 421++4219 ED 62        	SBC HL,HL
 422++421B
 423++421B 06 10        	LD B,#10
 424++421D 7D           INITV1  LD A,L
 425++421E 7D           M2      DB #7D
 426++421F 7C           	LD A,H
 427++4220 CE 00        	ADC A,0
 428++4222 DD 77 00     	LD (IX),A
 429++4225 DD 23        	INC IX
 430++4227 19           	ADD HL,DE
 431++4228 10 F3        	DJNZ INITV1
 432++422A
 433++422A E1           	POP HL
 434++422B 7B           	LD A,E
 435++422C FE 77        	CP #77
 436++422E 20 01        	JR NZ,M3
 437++4230 1C           	INC E
 438++4231 0D           M3      DEC C
 439++4232 20 E2        	JR NZ,INITV2
 440++4234
 441++4234 C3 7C 48     	JP ROUT
 442++4237
 443++4237 CD AA 42     INITPT3	CALL SETMDAD
 444++423A E5           	PUSH HL
 445++423B 11 64 00     	LD DE,100
 446++423E 19           	ADD HL,DE
 447++423F 7E           	LD A,(HL)
 448++4240 FD 77 08     	LD (IY-100+VRS.Delay),A
 449++4243 E5           	PUSH HL
 450++4244 DD E1        	POP IX
 451++4246 19           	ADD HL,DE
 452++4247 CD B8 42     	CALL SETCPPT
 453++424A DD 5E 02     	LD E,(IX+102-100)
 454++424D 23           	INC HL
 455++424E
 456++424E              	IF CurPosCounter
 457++424E ~            	LD (IY-100+VRS.PosSub),L
 458++424E              	ENDIF
 459++424E
 460++424E 19           	ADD HL,DE
 461++424F CD BF 42     	CALL SETLPPT
 462++4252 D1           	POP DE
 463++4253 DD 6E 03     	LD L,(IX+103-100)
 464++4256 DD 66 04     	LD H,(IX+104-100)
 465++4259 19           	ADD HL,DE
 466++425A CD A3 42     	CALL SETPTPT
 467++425D 21 A9 00     	LD HL,169
 468++4260 19           	ADD HL,DE
 469++4261 CD B1 42     	CALL SETORPT
 470++4264 21 69 00     	LD HL,105
 471++4267 19           	ADD HL,DE
 472++4268
 473++4268 FD 75 FA     SETSMPT LD (IY-100+VRS.SamPtrs),L
 474++426B FD 74 FB     	LD (IY-100+VRS.SamPtrs+1),H
 475++426E C9           	RET
 476++426F
 477++426F 7E           INITPT2	LD A,(HL)
 478++4270 FD 77 08     	LD (IY-100+VRS.Delay),A
 479++4273 E5           	PUSH HL
 480++4274 E5           	PUSH HL
 481++4275 E5           	PUSH HL
 482++4276 23           	INC HL
 483++4277 23           	INC HL
 484++4278 7E           	LD A,(HL)
 485++4279 23           	INC HL
 486++427A CD 68 42     	CALL SETSMPT
 487++427D 5E           	LD E,(HL)
 488++427E 23           	INC HL
 489++427F 56           	LD D,(HL)
 490++4280 E1           	POP HL
 491++4281 A7           	AND A
 492++4282 ED 52        	SBC HL,DE
 493++4284 CD AA 42     	CALL SETMDAD
 494++4287 E1           	POP HL
 495++4288 11 43 00     	LD DE,67
 496++428B 19           	ADD HL,DE
 497++428C CD B1 42     	CALL SETORPT
 498++428F 1E 20        	LD E,32
 499++4291 19           	ADD HL,DE
 500++4292 4E           	LD C,(HL)
 501++4293 23           	INC HL
 502++4294 46           	LD B,(HL)
 503++4295 1E 1E        	LD E,30
 504++4297 19           	ADD HL,DE
 505++4298 CD B8 42     	CALL SETCPPT
 506++429B 5F           	LD E,A
 507++429C 23           	INC HL
 508++429D
 509++429D              	IF CurPosCounter
 510++429D ~            	LD (IY-100+VRS.PosSub),L
 511++429D              	ENDIF
 512++429D
 513++429D 19           	ADD HL,DE
 514++429E CD BF 42     	CALL SETLPPT
 515++42A1 E1           	POP HL
 516++42A2 09           	ADD HL,BC
 517++42A3
 518++42A3 FD 75 FC     SETPTPT	LD (IY-100+VRS.PatsPtr),L
 519++42A6 FD 74 FD     	LD (IY-100+VRS.PatsPtr+1),H
 520++42A9 C9           	RET
 521++42AA
 522++42AA FD 75 F6     SETMDAD	LD (IY-100+VRS.MODADDR),L
 523++42AD FD 74 F7     	LD (IY-100+VRS.MODADDR+1),H
 524++42B0 C9           	RET
 525++42B1
 526++42B1 FD 75 F8     SETORPT	LD (IY-100+VRS.OrnPtrs),L
 527++42B4 FD 74 F9     	LD (IY-100+VRS.OrnPtrs+1),H
 528++42B7 C9           	RET
 529++42B8
 530++42B8 FD 75 04     SETCPPT	LD (IY-100+VRS.CrPsPtr),L
 531++42BB FD 74 05     	LD (IY-100+VRS.CrPsPtr+1),H
 532++42BE C9           	RET
 533++42BF
 534++42BF FD 75 06     SETLPPT	LD (IY-100+VRS.LPosPtr),L
 535++42C2 FD 74 07     	LD (IY-100+VRS.LPosPtr+1),H
 536++42C5 C9           	RET
 537++42C6
 538++42C6 FD 75 13     SETENBS	LD (IY-100+VRS.EnvBase),L
 539++42C9 FD 74 14     	LD (IY-100+VRS.EnvBase+1),H
 540++42CC C9           	RET
 541++42CD
 542++42CD FD 75 0C     SETESLD	LD (IY-100+VRS.CurESld),L
 543++42D0 FD 74 0D     	LD (IY-100+VRS.CurESld+1),H
 544++42D3 C9           	RET
 545++42D4
 546++42D4 FD E5        GETIX	PUSH IY
 547++42D6 DD E1        	POP IX
 548++42D8 DD 19        	ADD IX,DE
 549++42DA C9           	RET
 550++42DB
 551++42DB CD D4 42     PTDECOD CALL GETIX
 552++42DE              PTDEC	EQU $+1
 553++42DE C3 C3 C3     	JP #C3C3
 554++42E1
 555++42E1              ;PT2 pattern decoder
 556++42E1 CD 77 45     PD2_SAM	CALL SETSAM
 557++42E4 18 4A        	JR PD2_LOOP
 558++42E6
 559++42E6 DD 77 08     PD2_EOff LD (IX-12+CHP.Env_En),A
 560++42E9 18 45        	JR PD2_LOOP
 561++42EB
 562++42EB DD 36 08 10  PD2_ENV	LD (IX-12+CHP.Env_En),16
 563++42EF FD 77 22     	LD (IY-100+VRS.AYREGS+EnvTp),A
 564++42F2 0A           	LD A,(BC)
 565++42F3 03           	INC BC
 566++42F4 6F           	LD L,A
 567++42F5 0A           	LD A,(BC)
 568++42F6 03           	INC BC
 569++42F7 67           	LD H,A
 570++42F8 CD C6 42     	CALL SETENBS
 571++42FB 18 33        	JR PD2_LOOP
 572++42FD
 573++42FD CD 58 45     PD2_ORN	CALL SETORN
 574++4300 18 2E        	JR PD2_LOOP
 575++4302
 576++4302 3C           PD2_SKIP INC A
 577++4303 DD 77 05     	LD (IX-12+CHP.NNtSkp),A
 578++4306 18 28        	JR PD2_LOOP
 579++4308
 580++4308 0F           PD2_VOL	RRCA
 581++4309 0F           	RRCA
 582++430A 0F           	RRCA
 583++430B 0F           	RRCA
 584++430C DD 77 10     	LD (IX-12+CHP.Volume),A
 585++430F 18 1F        	JR PD2_LOOP
 586++4311
 587++4311 CD 28 45     PD2_DEL	CALL C_DELAY
 588++4314 18 1A        	JR PD2_LOOP
 589++4316
 590++4316 DD CB 09 D6  PD2_GLIS SET 2,(IX-12+CHP.Flags)
 591++431A 3C           	INC A
 592++431B DD 77 0A     	LD (IX-12+CHP.TnSlDl),A
 593++431E DD 77 F9     	LD (IX-12+CHP.TSlCnt),A
 594++4321 0A           	LD A,(BC)
 595++4322 03           	INC BC
 596++4323 DD 77 0B             LD (IX-12+CHP.TSlStp),A
 597++4326 87           	ADD A,A
 598++4327 9F           	SBC A,A
 599++4328 DD 77 0C             LD (IX-12+CHP.TSlStp+1),A
 600++432B 37           	SCF
 601++432C 18 01        	JR PD2_LP2
 602++432E
 603++432E A7           PT2PD	AND A
 604++432F
 605++432F 08           PD2_LP2	EX AF,AF'
 606++4330
 607++4330 0A           PD2_LOOP LD A,(BC)
 608++4331 03           	INC BC
 609++4332 C6 20        	ADD A,#20
 610++4334 28 3F        	JR Z,PD2_REL
 611++4336 38 A9        	JR C,PD2_SAM
 612++4338 C6 60        	ADD A,96
 613++433A 38 3E        	JR C,PD2_NOTE
 614++433C 3C           	INC A
 615++433D 28 A7        	JR Z,PD2_EOff
 616++433F C6 0F        	ADD A,15
 617++4341 CA 57 44     	JP Z,PD_FIN
 618++4344 38 A5        	JR C,PD2_ENV
 619++4346 C6 10        	ADD A,#10
 620++4348 38 B3        	JR C,PD2_ORN
 621++434A C6 40        	ADD A,#40
 622++434C 38 B4        	JR C,PD2_SKIP
 623++434E C6 10        	ADD A,#10
 624++4350 38 B6        	JR C,PD2_VOL
 625++4352 3C           	INC A
 626++4353 28 BC        	JR Z,PD2_DEL
 627++4355 3C           	INC A
 628++4356 28 BE        	JR Z,PD2_GLIS
 629++4358 3C           	INC A
 630++4359 28 0A        	JR Z,PD2_PORT
 631++435B 3C           	INC A
 632++435C 28 12        	JR Z,PD2_STOP
 633++435E 0A           	LD A,(BC)
 634++435F 03           	INC BC
 635++4360 DD 77 F7     	LD (IX-12+CHP.CrNsSl),A
 636++4363 18 CB        	JR PD2_LOOP
 637++4365
 638++4365 DD CB 09 96  PD2_PORT RES 2,(IX-12+CHP.Flags)
 639++4369 0A           	LD A,(BC)
 640++436A 03           	INC BC
 641++436B 03           	INC BC ;ignoring precalc delta to right sound
 642++436C 03           	INC BC
 643++436D 37           	SCF
 644++436E 18 BF        	JR PD2_LP2
 645++4370
 646++4370 DD 77 F9     PD2_STOP LD (IX-12+CHP.TSlCnt),A
 647++4373 18 BB        	JR PD2_LOOP
 648++4375
 649++4375 DD 77 09     PD2_REL	LD (IX-12+CHP.Flags),A
 650++4378 18 2C        	JR PD2_EXIT
 651++437A
 652++437A 6F           PD2_NOTE LD L,A
 653++437B DD 7E 06     	LD A,(IX-12+CHP.Note)
 654++437E 32 91 44     	LD (PrNote+1),A
 655++4381 DD 75 06     	LD (IX-12+CHP.Note),L
 656++4384 AF           	XOR A
 657++4385 DD 77 F9     	LD (IX-12+CHP.TSlCnt),A
 658++4388 DD CB 09 C6  	SET 0,(IX-12+CHP.Flags)
 659++438C 08           	EX AF,AF'
 660++438D 30 16        	JR NC,NOGLIS2
 661++438F DD CB 09 56  	BIT 2,(IX-12+CHP.Flags)
 662++4393 20 0C        	JR NZ,NOPORT2
 663++4395 32 B7 44     	LD (LoStep),A
 664++4398 87           	ADD A,A
 665++4399 9F           	SBC A,A
 666++439A 08           	EX AF,AF'
 667++439B 67           	LD H,A
 668++439C 6F           	LD L,A
 669++439D 3C           	INC A
 670++439E CD 72 44     	CALL SETPORT
 671++43A1 DD 36 F9 01  NOPORT2	LD (IX-12+CHP.TSlCnt),1
 672++43A5 AF           NOGLIS2	XOR A
 673++43A6
 674++43A6
 675++43A6 DD 77 F5     PD2_EXIT LD (IX-12+CHP.PsInSm),A
 676++43A9 DD 77 F4     	LD (IX-12+CHP.PsInOr),A
 677++43AC DD 77 FA     	LD (IX-12+CHP.CrTnSl),A
 678++43AF DD 77 FB     	LD (IX-12+CHP.CrTnSl+1),A
 679++43B2 C3 57 44     	JP PD_FIN
 680++43B5
 681++43B5              ;PT3 pattern decoder
 682++43B5 DD 36 08 00  PD_OrSm	LD (IX-12+CHP.Env_En),0
 683++43B9 CD 58 45     	CALL SETORN
 684++43BC 0A           PD_SAM_	LD A,(BC)
 685++43BD 03           	INC BC
 686++43BE 0F           	RRCA
 687++43BF
 688++43BF CD 77 45     PD_SAM	CALL SETSAM
 689++43C2 18 3F        	JR PD_LOOP
 690++43C4
 691++43C4 0F           PD_VOL	RRCA
 692++43C5 0F           	RRCA
 693++43C6 0F           	RRCA
 694++43C7 0F           	RRCA
 695++43C8 DD 77 10     	LD (IX-12+CHP.Volume),A
 696++43CB 18 39        	JR PD_LP2
 697++43CD
 698++43CD DD 77 08     PD_EOff	LD (IX-12+CHP.Env_En),A
 699++43D0 DD 77 F4     	LD (IX-12+CHP.PsInOr),A
 700++43D3 18 31        	JR PD_LP2
 701++43D5
 702++43D5 3D           PD_SorE	DEC A
 703++43D6 20 07        	JR NZ,PD_ENV
 704++43D8 0A           	LD A,(BC)
 705++43D9 03           	INC BC
 706++43DA DD 77 05     	LD (IX-12+CHP.NNtSkp),A
 707++43DD 18 27        	JR PD_LP2
 708++43DF
 709++43DF CD 3D 45     PD_ENV	CALL SETENV
 710++43E2 18 22        	JR PD_LP2
 711++43E4
 712++43E4 CD 58 45     PD_ORN	CALL SETORN
 713++43E7 18 1A        	JR PD_LOOP
 714++43E9
 715++43E9 DD 77 08     PD_ESAM	LD (IX-12+CHP.Env_En),A
 716++43EC DD 77 F4     	LD (IX-12+CHP.PsInOr),A
 717++43EF C4 3D 45     	CALL NZ,SETENV
 718++43F2 18 C8        	JR PD_SAM_
 719++43F4
 720++43F4 DD 7E 06     PT3PD	LD A,(IX-12+CHP.Note)
 721++43F7 32 91 44     	LD (PrNote+1),A
 722++43FA DD 6E FA     	LD L,(IX-12+CHP.CrTnSl)
 723++43FD DD 66 FB     	LD H,(IX-12+CHP.CrTnSl+1)
 724++4400 22 AE 44     	LD (PrSlide+1),HL
 725++4403
 726++4403 11 10 20     PD_LOOP	LD DE,#2010
 727++4406 0A           PD_LP2	LD A,(BC)
 728++4407 03           	INC BC
 729++4408 83           	ADD A,E
 730++4409 38 AA        	JR C,PD_OrSm
 731++440B 82           	ADD A,D
 732++440C 28 49        	JR Z,PD_FIN
 733++440E 38 AF        	JR C,PD_SAM
 734++4410 83           	ADD A,E
 735++4411 28 25        	JR Z,PD_REL
 736++4413 38 AF        	JR C,PD_VOL
 737++4415 83           	ADD A,E
 738++4416 28 B5        	JR Z,PD_EOff
 739++4418 38 BB        	JR C,PD_SorE
 740++441A C6 60        	ADD A,96
 741++441C 38 20        	JR C,PD_NOTE
 742++441E 83           	ADD A,E
 743++441F 38 C3        	JR C,PD_ORN
 744++4421 82           	ADD A,D
 745++4422 38 0F        	JR C,PD_NOIS
 746++4424 83           	ADD A,E
 747++4425 38 C2        	JR C,PD_ESAM
 748++4427 87           	ADD A,A
 749++4428 5F           	LD E,A
player.asm(750): warning: value 0x124B3 is truncated to 16bit value: 0x24B3
 750++4429 21 B3 24     	LD HL,SPCCOMS+#FF20-#2000
 751++442C 19           	ADD HL,DE
 752++442D 5E           	LD E,(HL)
 753++442E 23           	INC HL
 754++442F 56           	LD D,(HL)
 755++4430 D5           	PUSH DE
 756++4431 18 D0        	JR PD_LOOP
 757++4433
 758++4433 FD 77 10     PD_NOIS	LD (IY-100+VRS.Ns_Base),A
 759++4436 18 CE        	JR PD_LP2
 760++4438
 761++4438 DD CB 09 86  PD_REL	RES 0,(IX-12+CHP.Flags)
 762++443C 18 08        	JR PD_RES
 763++443E
 764++443E DD 77 06     PD_NOTE	LD (IX-12+CHP.Note),A
 765++4441 DD CB 09 C6  	SET 0,(IX-12+CHP.Flags)
 766++4445 AF           	XOR A
 767++4446
 768++4446 ED 73 55 44  PD_RES	LD (PDSP_+1),SP
 769++444A DD F9        	LD SP,IX
 770++444C 67           	LD H,A
 771++444D 6F           	LD L,A
 772++444E E5           	PUSH HL
 773++444F E5           	PUSH HL
 774++4450 E5           	PUSH HL
 775++4451 E5           	PUSH HL
 776++4452 E5           	PUSH HL
 777++4453 E5           	PUSH HL
 778++4454 31 31 31     PDSP_	LD SP,#3131
 779++4457
 780++4457 DD 7E 05     PD_FIN	LD A,(IX-12+CHP.NNtSkp)
 781++445A DD 77 0F     	LD (IX-12+CHP.NtSkCn),A
 782++445D C9           	RET
 783++445E
 784++445E 0A           C_PORTM LD A,(BC)
 785++445F 03           	INC BC
 786++4460              ;SKIP PRECALCULATED TONE DELTA (BECAUSE
 787++4460              ;CANNOT BE RIGHT AFTER PT3 COMPILATION)
 788++4460 03           	INC BC
 789++4461 03           	INC BC
 790++4462 08           	EX AF,AF'
 791++4463 0A           	LD A,(BC) ;SIGNED TONE STEP
 792++4464 03           	INC BC
 793++4465 32 B7 44     	LD (LoStep),A
 794++4468 0A           	LD A,(BC)
 795++4469 03           	INC BC
 796++446A A7           	AND A
 797++446B 08           	EX AF,AF'
 798++446C DD 6E FA     	LD L,(IX-12+CHP.CrTnSl)
 799++446F DD 66 FB     	LD H,(IX-12+CHP.CrTnSl+1)
 800++4472
 801++4472              ;Set portamento variables
 802++4472              ;A - Delay; A' - Hi(Step); ZF' - (A'=0); HL - CrTnSl
 803++4472
 804++4472 DD CB 09 96  SETPORT	RES 2,(IX-12+CHP.Flags)
 805++4476 DD 77 0A     	LD (IX-12+CHP.TnSlDl),A
 806++4479 DD 77 F9     	LD (IX-12+CHP.TSlCnt),A
 807++447C E5           	PUSH HL
 808++447D 11 36 4B     	LD DE,NT_
 809++4480 DD 7E 06     	LD A,(IX-12+CHP.Note)
 810++4483 DD 77 07     	LD (IX-12+CHP.SlToNt),A
 811++4486 87           	ADD A,A
 812++4487 6F           	LD L,A
 813++4488 26 00        	LD H,0
 814++448A 19           	ADD HL,DE
 815++448B 7E           	LD A,(HL)
 816++448C 23           	INC HL
 817++448D 66           	LD H,(HL)
 818++448E 6F           	LD L,A
 819++448F E5           	PUSH HL
 820++4490 3E 3E        PrNote	LD A,#3E
 821++4492 DD 77 06     	LD (IX-12+CHP.Note),A
 822++4495 87           	ADD A,A
 823++4496 6F           	LD L,A
 824++4497 26 00        	LD H,0
 825++4499 19           	ADD HL,DE
 826++449A 5E           	LD E,(HL)
 827++449B 23           	INC HL
 828++449C 56           	LD D,(HL)
 829++449D E1           	POP HL
 830++449E ED 52        	SBC HL,DE
 831++44A0 DD 75 0D     	LD (IX-12+CHP.TnDelt),L
 832++44A3 DD 74 0E     	LD (IX-12+CHP.TnDelt+1),H
 833++44A6 D1           	POP DE
 834++44A7              Version EQU $+1
 835++44A7 3E 3E        	LD A,#3E
 836++44A9 FE 06        	CP 6
 837++44AB 38 09        	JR C,OLDPRTM ;Old 3xxx for PT v3.5-
 838++44AD 11 11 11     PrSlide	LD DE,#1111
 839++44B0 DD 73 FA     	LD (IX-12+CHP.CrTnSl),E
 840++44B3 DD 72 FB     	LD (IX-12+CHP.CrTnSl+1),D
 841++44B6              LoStep	EQU $+1
 842++44B6 3E 3E        OLDPRTM	LD A,#3E
 843++44B8 08           	EX AF,AF'
 844++44B9 28 01        	JR Z,NOSIG
 845++44BB EB           	EX DE,HL
 846++44BC ED 52        NOSIG	SBC HL,DE
 847++44BE F2 C6 44     	JP P,SET_STP
 848++44C1 2F           	CPL
 849++44C2 08           	EX AF,AF'
 850++44C3 ED 44        	NEG
 851++44C5 08           	EX AF,AF'
 852++44C6 DD 77 0C     SET_STP	LD (IX-12+CHP.TSlStp+1),A
 853++44C9 08           	EX AF,AF'
 854++44CA DD 77 0B     	LD (IX-12+CHP.TSlStp),A
 855++44CD DD 36 FE 00  	LD (IX-12+CHP.COnOff),0
 856++44D1 C9           	RET
 857++44D2
 858++44D2 DD CB 09 D6  C_GLISS	SET 2,(IX-12+CHP.Flags)
 859++44D6 0A           	LD A,(BC)
 860++44D7 03           	INC BC
 861++44D8 DD 77 0A     	LD (IX-12+CHP.TnSlDl),A
 862++44DB A7           	AND A
 863++44DC 20 07        	JR NZ,GL36
 864++44DE 3A A8 44     	LD A,(Version) ;AlCo PT3.7+
 865++44E1 FE 07        	CP 7
 866++44E3 9F           	SBC A,A
 867++44E4 3C           	INC A
 868++44E5 DD 77 F9     GL36	LD (IX-12+CHP.TSlCnt),A
 869++44E8 0A           	LD A,(BC)
 870++44E9 03           	INC BC
 871++44EA 08           	EX AF,AF'
 872++44EB 0A           	LD A,(BC)
 873++44EC 03           	INC BC
 874++44ED 18 D7        	JR SET_STP
 875++44EF
 876++44EF 0A           C_SMPOS	LD A,(BC)
 877++44F0 03           	INC BC
 878++44F1 DD 77 F5     	LD (IX-12+CHP.PsInSm),A
 879++44F4 C9           	RET
 880++44F5
 881++44F5 0A           C_ORPOS	LD A,(BC)
 882++44F6 03           	INC BC
 883++44F7 DD 77 F4     	LD (IX-12+CHP.PsInOr),A
 884++44FA C9           	RET
 885++44FB
 886++44FB 0A           C_VIBRT	LD A,(BC)
 887++44FC 03           	INC BC
 888++44FD DD 77 FF     	LD (IX-12+CHP.OnOffD),A
 889++4500 DD 77 FE     	LD (IX-12+CHP.COnOff),A
 890++4503 0A           	LD A,(BC)
 891++4504 03           	INC BC
 892++4505 DD 77 00     	LD (IX-12+CHP.OffOnD),A
 893++4508 AF           	XOR A
 894++4509 DD 77 F9     	LD (IX-12+CHP.TSlCnt),A
 895++450C DD 77 FA     	LD (IX-12+CHP.CrTnSl),A
 896++450F DD 77 FB     	LD (IX-12+CHP.CrTnSl+1),A
 897++4512 C9           	RET
 898++4513
 899++4513 0A           C_ENGLS	LD A,(BC)
 900++4514 03           	INC BC
 901++4515 FD 77 0E     	LD (IY-100+VRS.Env_Del),A
 902++4518 FD 77 0F     	LD (IY-100+VRS.CurEDel),A
 903++451B 0A           	LD A,(BC)
 904++451C 03           	INC BC
 905++451D 6F           	LD L,A
 906++451E 0A           	LD A,(BC)
 907++451F 03           	INC BC
 908++4520 67           	LD H,A
 909++4521 FD 75 0A     	LD (IY-100+VRS.ESldAdd),L
 910++4524 FD 74 0B     	LD (IY-100+VRS.ESldAdd+1),H
 911++4527 C9           	RET
 912++4528
 913++4528 0A           C_DELAY	LD A,(BC)
 914++4529 03           	INC BC
 915++452A FD 77 08     	LD (IY-100+VRS.Delay),A
 916++452D 21 C1 49     	LD HL,VARS2+VRS.ModNum ;if AlCo_TS
 917++4530 CB 4E        	BIT 1,(HL)
 918++4532 C8           	RET Z
 919++4533 32 A4 49     	LD (VARS1+VRS.Delay),A
 920++4536 32 A5 49     	LD (VARS1+VRS.DelyCnt),A
 921++4539 32 2B 4A     	LD (VARS2+VRS.Delay),A
 922++453C C9           	RET
 923++453D
 924++453D DD 73 08     SETENV	LD (IX-12+CHP.Env_En),E
 925++4540 FD 77 22     	LD (IY-100+VRS.AYREGS+EnvTp),A
 926++4543 0A           	LD A,(BC)
 927++4544 03           	INC BC
 928++4545 67           	LD H,A
 929++4546 0A           	LD A,(BC)
 930++4547 03           	INC BC
 931++4548 6F           	LD L,A
 932++4549 CD C6 42     	CALL SETENBS
 933++454C AF           	XOR A
 934++454D DD 77 F4     	LD (IX-12+CHP.PsInOr),A
 935++4550 FD 77 0F     	LD (IY-100+VRS.CurEDel),A
 936++4553 67           	LD H,A
 937++4554 6F           	LD L,A
 938++4555 C3 CD 42     	JP SETESLD
 939++4558
 940++4558 87           SETORN	ADD A,A
 941++4559 5F           	LD E,A
 942++455A 16 00        	LD D,0
 943++455C DD 72 F4     	LD (IX-12+CHP.PsInOr),D
 944++455F FD 6E F8     	LD L,(IY-100+VRS.OrnPtrs)
 945++4562 FD 66 F9     	LD H,(IY-100+VRS.OrnPtrs+1)
 946++4565 19           	ADD HL,DE
 947++4566 5E           	LD E,(HL)
 948++4567 23           	INC HL
 949++4568 56           	LD D,(HL)
 950++4569 FD 6E F6     	LD L,(IY-100+VRS.MODADDR)
 951++456C FD 66 F7     	LD H,(IY-100+VRS.MODADDR+1)
 952++456F 19           	ADD HL,DE
 953++4570 DD 75 01     	LD (IX-12+CHP.OrnPtr),L
 954++4573 DD 74 02     	LD (IX-12+CHP.OrnPtr+1),H
 955++4576 C9           C_NOP	RET
 956++4577
 957++4577 87           SETSAM	ADD A,A
 958++4578 5F           	LD E,A
 959++4579 16 00        	LD D,0
 960++457B FD 6E FA     	LD L,(IY-100+VRS.SamPtrs);
 961++457E FD 66 FB     	LD H,(IY-100+VRS.SamPtrs+1);
 962++4581 19           	ADD HL,DE
 963++4582 5E           	LD E,(HL)
 964++4583 23           	INC HL
 965++4584 56           	LD D,(HL)
 966++4585 FD 6E F6     	LD L,(IY-100+VRS.MODADDR)
 967++4588 FD 66 F7     	LD H,(IY-100+VRS.MODADDR+1)
 968++458B 19           	ADD HL,DE
 969++458C DD 75 03     	LD (IX-12+CHP.SamPtr),L
 970++458F DD 74 04     	LD (IX-12+CHP.SamPtr+1),H
 971++4592 C9           	RET
 972++4593
 973++4593              ;ALL 16 ADDRESSES TO PROTECT FROM BROKEN PT3 MODULES
 974++4593 76 45        SPCCOMS DW C_NOP
 975++4595 D2 44        	DW C_GLISS
 976++4597 5E 44        	DW C_PORTM
 977++4599 EF 44        	DW C_SMPOS
 978++459B F5 44        	DW C_ORPOS
 979++459D FB 44        	DW C_VIBRT
 980++459F 76 45        	DW C_NOP
 981++45A1 76 45        	DW C_NOP
 982++45A3 13 45        	DW C_ENGLS
 983++45A5 28 45        	DW C_DELAY
 984++45A7 76 45        	DW C_NOP
 985++45A9 76 45        	DW C_NOP
 986++45AB 76 45        	DW C_NOP
 987++45AD 76 45        	DW C_NOP
 988++45AF 76 45        	DW C_NOP
 989++45B1 76 45        	DW C_NOP
 990++45B3
 991++45B3 CD D4 42     CHREGS	CALL GETIX
 992++45B6 AF           	XOR A
 993++45B7 32 F3 47     	LD (Ampl),A
 994++45BA DD CB 15 46  	BIT 0,(IX+CHP.Flags)
 995++45BE E5           	PUSH HL
 996++45BF CA 06 47     	JP Z,CH_EXIT
 997++45C2 ED 73 50 46  	LD (CSP_+1),SP
 998++45C6 DD 6E 0D     	LD L,(IX+CHP.OrnPtr)
 999++45C9 DD 66 0E     	LD H,(IX+CHP.OrnPtr+1)
1000++45CC F9           	LD SP,HL
1001++45CD D1           	POP DE
1002++45CE 67           	LD H,A
1003++45CF DD 7E 00     	LD A,(IX+CHP.PsInOr)
1004++45D2 6F           	LD L,A
1005++45D3 39           	ADD HL,SP
1006++45D4 3C           	INC A
1007++45D5              		;PT2	PT3
1008++45D5 3C           OrnCP	INC A	;CP E	CP D
1009++45D6 38 01        	JR C,CH_ORPS
1010++45D8 01           OrnLD	DB 1	;LD A,D	LD A,E
1011++45D9 DD 77 00     CH_ORPS	LD (IX+CHP.PsInOr),A
1012++45DC DD 7E 12     	LD A,(IX+CHP.Note)
1013++45DF 86           	ADD A,(HL)
1014++45E0 F2 E4 45     	JP P,CH_NTP
1015++45E3 AF           	XOR A
1016++45E4 FE 60        CH_NTP	CP 96
1017++45E6 38 02        	JR C,CH_NOK
1018++45E8 3E 5F        	LD A,95
1019++45EA 87           CH_NOK	ADD A,A
1020++45EB 08           	EX AF,AF'
1021++45EC DD 6E 0F     	LD L,(IX+CHP.SamPtr)
1022++45EF DD 66 10     	LD H,(IX+CHP.SamPtr+1)
1023++45F2 F9           	LD SP,HL
1024++45F3 D1           	POP DE
1025++45F4 26 00        	LD H,0
1026++45F6 DD 7E 01     	LD A,(IX+CHP.PsInSm)
1027++45F9 47           	LD B,A
1028++45FA 87           	ADD A,A
1029++45FB 87           SamClc2	ADD A,A ;or ADD A,B for PT2
1030++45FC 6F           	LD L,A
1031++45FD 39           	ADD HL,SP
1032++45FE F9           	LD SP,HL
1033++45FF 78           	LD A,B
1034++4600 3C           	INC A
1035++4601              		;PT2	PT3
1036++4601 3C           SamCP	INC A	;CP E	CP D
1037++4602 38 01        	JR C,CH_SMPS
1038++4604 01           SamLD	DB 1	;LD A,D	LD A,E
1039++4605 DD 77 01     CH_SMPS	LD (IX+CHP.PsInSm),A
1040++4608 C1           	POP BC
1041++4609 E1           	POP HL
1042++460A
1043++460A              ;Convert PT2 sample to PT3
1044++460A              		;PT2		PT3
1045++460A E1           SamCnv	POP HL  ;BIT 2,C	JR e_
1046++460B E1           	POP HL
1047++460C 60           	LD H,B
1048++460D 20 06        	JR NZ,$+8
1049++460F EB           	EX DE,HL
1050++4610 A7           	AND A
1051++4611 ED 62        	SBC HL,HL
1052++4613 ED 52        	SBC HL,DE
1053++4615 51           	LD D,C
1054++4616 CB 19        	RR C
1055++4618 9F           	SBC A,A
1056++4619 2F           	CPL
1057++461A E6 3E        	AND #3E
1058++461C CB 19        	RR C
1059++461E CB 18        	RR B
1060++4620 A1           	AND C
1061++4621 4F           	LD C,A
1062++4622 78           	LD A,B
1063++4623 1F           	RRA
1064++4624 1F           	RRA
1065++4625 CB 1A        	RR D
1066++4627 1F           	RRA
1067++4628 E6 9F        	AND #9F
1068++462A 47           	LD B,A
1069++462B
1070++462B DD 5E 08     e_	LD E,(IX+CHP.TnAcc)
1071++462E DD 56 09     	LD D,(IX+CHP.TnAcc+1)
1072++4631 19           	ADD HL,DE
1073++4632 CB 70        	BIT 6,B
1074++4634 28 06        	JR Z,CH_NOAC
1075++4636 DD 75 08     	LD (IX+CHP.TnAcc),L
1076++4639 DD 74 09     	LD (IX+CHP.TnAcc+1),H
1077++463C EB           CH_NOAC EX DE,HL
1078++463D 08           	EX AF,AF'
player.asm(1079): warning: value 0x4B36 is truncated to 8bit value: 0x36
1079++463E C6 36        	ADD A,NT_
1080++4640 6F           	LD L,A
1081++4641 CE 4B        	ADC A,NT_/256
1082++4643 95           	SUB L
1083++4644 67           	LD H,A
1084++4645 F9           	LD SP,HL
1085++4646 E1           	POP HL
1086++4647 19           	ADD HL,DE
1087++4648 DD 5E 06     	LD E,(IX+CHP.CrTnSl)
1088++464B DD 56 07     	LD D,(IX+CHP.CrTnSl+1)
1089++464E 19           	ADD HL,DE
1090++464F 31 31 31     CSP_	LD SP,#3131
1091++4652 E3           	EX (SP),HL
1092++4653 AF           	XOR A
1093++4654 DD B6 05     	OR (IX+CHP.TSlCnt)
1094++4657 28 3E        	JR Z,CH_AMP
1095++4659 DD 35 05     	DEC (IX+CHP.TSlCnt)
1096++465C 20 39        	JR NZ,CH_AMP
1097++465E DD 7E 16     	LD A,(IX+CHP.TnSlDl)
1098++4661 DD 77 05     	LD (IX+CHP.TSlCnt),A
1099++4664 DD 6E 17     	LD L,(IX+CHP.TSlStp)
1100++4667 DD 66 18     	LD H,(IX+CHP.TSlStp+1)
1101++466A 7C           	LD A,H
1102++466B 19           	ADD HL,DE
1103++466C DD 75 06     	LD (IX+CHP.CrTnSl),L
1104++466F DD 74 07     	LD (IX+CHP.CrTnSl+1),H
1105++4672 DD CB 15 56  	BIT 2,(IX+CHP.Flags)
1106++4676 20 1F        	JR NZ,CH_AMP
1107++4678 DD 5E 19     	LD E,(IX+CHP.TnDelt)
1108++467B DD 56 1A     	LD D,(IX+CHP.TnDelt+1)
1109++467E A7           	AND A
1110++467F 28 01        	JR Z,CH_STPP
1111++4681 EB           	EX DE,HL
1112++4682 ED 52        CH_STPP SBC HL,DE
1113++4684 FA 97 46     	JP M,CH_AMP
1114++4687 DD 7E 13     	LD A,(IX+CHP.SlToNt)
1115++468A DD 77 12     	LD (IX+CHP.Note),A
1116++468D AF           	XOR A
1117++468E DD 77 05     	LD (IX+CHP.TSlCnt),A
1118++4691 DD 77 06     	LD (IX+CHP.CrTnSl),A
1119++4694 DD 77 07     	LD (IX+CHP.CrTnSl+1),A
1120++4697 DD 7E 02     CH_AMP	LD A,(IX+CHP.CrAmSl)
1121++469A CB 79        	BIT 7,C
1122++469C 28 13        	JR Z,CH_NOAM
1123++469E CB 71        	BIT 6,C
1124++46A0 28 07        	JR Z,CH_AMIN
1125++46A2 FE 0F        	CP 15
1126++46A4 28 0B        	JR Z,CH_NOAM
1127++46A6 3C           	INC A
1128++46A7 18 05        	JR CH_SVAM
1129++46A9 FE F1        CH_AMIN	CP -15
1130++46AB 28 04        	JR Z,CH_NOAM
1131++46AD 3D           	DEC A
1132++46AE DD 77 02     CH_SVAM	LD (IX+CHP.CrAmSl),A
1133++46B1 6F           CH_NOAM	LD L,A
1134++46B2 78           	LD A,B
1135++46B3 E6 0F        	AND 15
1136++46B5 85           	ADD A,L
1137++46B6 F2 BA 46     	JP P,CH_APOS
1138++46B9 AF           	XOR A
1139++46BA FE 10        CH_APOS	CP 16
1140++46BC 38 02        	JR C,CH_VOL
1141++46BE 3E 0F        	LD A,15
1142++46C0 DD B6 1C     CH_VOL	OR (IX+CHP.Volume)
player.asm(1143): warning: value 0x4A36 is truncated to 8bit value: 0x36
1143++46C3 C6 36        	ADD A,VT_
1144++46C5 6F           	LD L,A
1145++46C6 CE 4A        	ADC A,VT_/256
1146++46C8 95           	SUB L
1147++46C9 67           	LD H,A
1148++46CA 7E           	LD A,(HL)
1149++46CB CB 41        CH_ENV	BIT 0,C
1150++46CD 20 03        	JR NZ,CH_NOEN
1151++46CF DD B6 14     	OR (IX+CHP.Env_En)
1152++46D2 32 F3 47     CH_NOEN	LD (Ampl),A
1153++46D5 CB 78        	BIT 7,B
1154++46D7 79           	LD A,C
1155++46D8 28 1A        	JR Z,NO_ENSL
1156++46DA 17           	RLA
1157++46DB 17           	RLA
1158++46DC CB 2F        	SRA A
1159++46DE CB 2F        	SRA A
1160++46E0 CB 2F        	SRA A
1161++46E2 DD 86 04     	ADD A,(IX+CHP.CrEnSl) ;SEE COMMENT BELOW
1162++46E5 CB 68        	BIT 5,B
1163++46E7 28 03        	JR Z,NO_ENAC
1164++46E9 DD 77 04     	LD (IX+CHP.CrEnSl),A
1165++46EC FD 86 12     NO_ENAC	ADD A,(IY-100+VRS.AddToEn) ;BUG IN PT3 - NEED WORD HERE
1166++46EF FD 77 12     	LD (IY-100+VRS.AddToEn),A
1167++46F2 18 0E        	JR CH_MIX
1168++46F4 1F           NO_ENSL RRA
1169++46F5 DD 86 03     	ADD A,(IX+CHP.CrNsSl)
1170++46F8 FD 77 11     	LD (IY-100+VRS.AddToNs),A
1171++46FB CB 68        	BIT 5,B
1172++46FD 28 03        	JR Z,CH_MIX
1173++46FF DD 77 03     	LD (IX+CHP.CrNsSl),A
1174++4702 78           CH_MIX	LD A,B
1175++4703 1F           	RRA
1176++4704 E6 48        	AND #48
1177++4706 FD B6 1C     CH_EXIT	OR (IY-100+VRS.AYREGS+Mixer)
1178++4709 0F           	RRCA
1179++470A FD 77 1C     	LD (IY-100+VRS.AYREGS+Mixer),A
1180++470D E1           	POP HL
1181++470E AF           	XOR A
1182++470F DD B6 0A     	OR (IX+CHP.COnOff)
1183++4712 C8           	RET Z
1184++4713 DD 35 0A     	DEC (IX+CHP.COnOff)
1185++4716 C0           	RET NZ
1186++4717 DD AE 15     	XOR (IX+CHP.Flags)
1187++471A DD 77 15     	LD (IX+CHP.Flags),A
1188++471D 1F           	RRA
1189++471E DD 7E 0B     	LD A,(IX+CHP.OnOffD)
1190++4721 38 03        	JR C,CH_ONDL
1191++4723 DD 7E 0C     	LD A,(IX+CHP.OffOnD)
1192++4726 DD 77 0A     CH_ONDL	LD (IX+CHP.COnOff),A
1193++4729 C9           	RET
1194++472A
1195++472A AF           PLAY_	XOR A
1196++472B FD 77 12     	LD (IY-100+VRS.AddToEn),A
1197++472E FD 77 1C     	LD (IY-100+VRS.AYREGS+Mixer),A
1198++4731 3D           	DEC A
1199++4732 FD 77 22     	LD (IY-100+VRS.AYREGS+EnvTp),A
1200++4735 FD 35 09     	DEC (IY-100+VRS.DelyCnt)
1201++4738 C2 E0 47     	JP NZ,PL2
1202++473B FD 35 BA     	DEC (IY-100+VRS.ChanA+CHP.NtSkCn)
1203++473E 20 6C        	JR NZ,PL1B
1204++4740 FD 4E FE     	LD C,(IY-100+VRS.AdInPtA)
1205++4743 FD 46 FF     	LD B,(IY-100+VRS.AdInPtA+1)
1206++4746 0A           	LD A,(BC)
1207++4747 A7           	AND A
1208++4748 20 56        	JR NZ,PL1A
1209++474A 57           	LD D,A
1210++474B FD 77 10     	LD (IY-100+VRS.Ns_Base),A
1211++474E FD 6E 04     	LD L,(IY-100+VRS.CrPsPtr)
1212++4751 FD 66 05     	LD H,(IY-100+VRS.CrPsPtr+1)
1213++4754 23           	INC HL
1214++4755 7E           	LD A,(HL)
1215++4756 3C           	INC A
1216++4757 20 0B        	JR NZ,PLNLP
1217++4759
1218++4759              	IF LoopChecker
1219++4759 CD 0B 40     	CALL CHECKLP
1220++475C              	ENDIF
1221++475C
1222++475C FD 6E 06     	LD L,(IY-100+VRS.LPosPtr)
1223++475F FD 66 07     	LD H,(IY-100+VRS.LPosPtr+1)
1224++4762 7E           	LD A,(HL)
1225++4763 3C           	INC A
1226++4764 CD B8 42     PLNLP	CALL SETCPPT
1227++4767 3D           	DEC A
1228++4768 FD CB 9E 4E  	BIT 1,(IY-100+VRS.ModNum)
1229++476C 28 03        	JR Z,NoAlCo
1230++476E              TSSub	EQU $+1
1231++476E D6 D6        	SUB #D6
1232++4770 2F           	CPL
1233++4771              NoAlCo
1234++4771              		;PT2		PT3
1235++4771 3D           PsCalc	DEC A	;ADD A,A	NOP
1236++4772 3D           	DEC A	;ADD A,(HL)	NOP
1237++4773 87           	ADD A,A
1238++4774 5F           	LD E,A
1239++4775 CB 12        	RL D
1240++4777
1241++4777              	IF CurPosCounter
1242++4777 ~            	LD A,L
1243++4777 ~            	SUB (IY-100+VRS.PosSub)
1244++4777 ~            	LD (IY-100+VRS.CurPos),A
1245++4777              	ENDIF
1246++4777
1247++4777 FD 6E FC     	LD L,(IY-100+VRS.PatsPtr)
1248++477A FD 66 FD     	LD H,(IY-100+VRS.PatsPtr+1)
1249++477D 19           	ADD HL,DE
1250++477E FD 5E F6     	LD E,(IY-100+VRS.MODADDR)
1251++4781 FD 56 F7     	LD D,(IY-100+VRS.MODADDR+1)
1252++4784 ED 73 9E 47  	LD (PSP_+1),SP
1253++4788 F9           	LD SP,HL
1254++4789 E1           	POP HL
1255++478A 19           	ADD HL,DE
1256++478B 44           	LD B,H
1257++478C 4D           	LD C,L
1258++478D E1           	POP HL
1259++478E 19           	ADD HL,DE
1260++478F FD 75 00     	LD (IY-100+VRS.AdInPtB),L
1261++4792 FD 74 01     	LD (IY-100+VRS.AdInPtB+1),H
1262++4795 E1           	POP HL
1263++4796 19           	ADD HL,DE
1264++4797 FD 75 02     	LD (IY-100+VRS.AdInPtC),L
1265++479A FD 74 03     	LD (IY-100+VRS.AdInPtC+1),H
1266++479D 31 31 31     PSP_	LD SP,#3131
1267++47A0 11 AB FF     PL1A	LD DE,VRS.ChanA+12-100
1268++47A3 CD DB 42     	CALL PTDECOD
1269++47A6 FD 71 FE     	LD (IY-100+VRS.AdInPtA),C
1270++47A9 FD 70 FF     	LD (IY-100+VRS.AdInPtA+1),B
1271++47AC
1272++47AC FD 35 D7     PL1B	DEC (IY-100+VRS.ChanB+CHP.NtSkCn)
1273++47AF 20 12        	JR NZ,PL1C
1274++47B1 11 C8 FF     	LD DE,VRS.ChanB+12-100
1275++47B4 FD 4E 00     	LD C,(IY-100+VRS.AdInPtB)
1276++47B7 FD 46 01     	LD B,(IY-100+VRS.AdInPtB+1)
1277++47BA CD DB 42     	CALL PTDECOD
1278++47BD FD 71 00     	LD (IY-100+VRS.AdInPtB),C
1279++47C0 FD 70 01     	LD (IY-100+VRS.AdInPtB+1),B
1280++47C3
1281++47C3 FD 35 F4     PL1C	DEC (IY-100+VRS.ChanC+CHP.NtSkCn)
1282++47C6 20 12        	JR NZ,PL1D
1283++47C8 11 E5 FF     	LD DE,VRS.ChanC+12-100
1284++47CB FD 4E 02     	LD C,(IY-100+VRS.AdInPtC)
1285++47CE FD 46 03     	LD B,(IY-100+VRS.AdInPtC+1)
1286++47D1 CD DB 42     	CALL PTDECOD
1287++47D4 FD 71 02     	LD (IY-100+VRS.AdInPtC),C
1288++47D7 FD 70 03     	LD (IY-100+VRS.AdInPtC+1),B
1289++47DA
1290++47DA FD 7E 08     PL1D	LD A,(IY-100+VRS.Delay)
1291++47DD FD 77 09     	LD (IY-100+VRS.DelyCnt),A
1292++47E0
1293++47E0 11 9F FF     PL2	LD DE,VRS.ChanA-100
1294++47E3 FD 6E 15     	LD L,(IY-100+VRS.AYREGS+TonA)
1295++47E6 FD 66 16     	LD H,(IY-100+VRS.AYREGS+TonA+1)
1296++47E9 CD B3 45     	CALL CHREGS
1297++47EC FD 75 15     	LD (IY-100+VRS.AYREGS+TonA),L
1298++47EF FD 74 16     	LD (IY-100+VRS.AYREGS+TonA+1),H
1299++47F2              Ampl	EQU $+1
1300++47F2 3E 3E        	LD A,#3E
1301++47F4 FD 77 1D     	LD (IY-100+VRS.AYREGS+AmplA),A
1302++47F7 11 BC FF     	LD DE,VRS.ChanB-100
1303++47FA FD 6E 17     	LD L,(IY-100+VRS.AYREGS+TonB)
1304++47FD FD 66 18     	LD H,(IY-100+VRS.AYREGS+TonB+1)
1305++4800 CD B3 45     	CALL CHREGS
1306++4803 FD 75 17     	LD (IY-100+VRS.AYREGS+TonB),L
1307++4806 FD 74 18     	LD (IY-100+VRS.AYREGS+TonB+1),H
1308++4809 3A F3 47     	LD A,(Ampl)
1309++480C FD 77 1E     	LD (IY-100+VRS.AYREGS+AmplB),A
1310++480F 11 D9 FF     	LD DE,VRS.ChanC-100
1311++4812 FD 6E 19     	LD L,(IY-100+VRS.AYREGS+TonC)
1312++4815 FD 66 1A     	LD H,(IY-100+VRS.AYREGS+TonC+1)
1313++4818 CD B3 45     	CALL CHREGS
1314++481B FD 75 19     	LD (IY-100+VRS.AYREGS+TonC),L
1315++481E FD 74 1A     	LD (IY-100+VRS.AYREGS+TonC+1),H
1316++4821 3A F3 47     	LD A,(Ampl)
1317++4824 FD 77 1F     	LD (IY-100+VRS.AYREGS+AmplC),A
1318++4827
1319++4827 FD 7E 10     	LD A,(IY-100+VRS.Ns_Base)
1320++482A FD 86 11     	ADD (IY-100+VRS.AddToNs)
1321++482D FD 77 1B     	LD (IY-100+VRS.AYREGS+Noise),A
1322++4830
1323++4830 FD 7E 12     	LD A,(IY-100+VRS.AddToEn)
1324++4833 5F           	LD E,A
1325++4834 87           	ADD A,A
1326++4835 9F           	SBC A,A
1327++4836 57           	LD D,A
1328++4837 FD 6E 13     	LD L,(IY-100+VRS.EnvBase)
1329++483A FD 66 14     	LD H,(IY-100+VRS.EnvBase+1)
1330++483D 19           	ADD HL,DE
1331++483E FD 5E 0C     	LD E,(IY-100+VRS.CurESld)
1332++4841 FD 56 0D     	LD D,(IY-100+VRS.CurESld+1)
1333++4844 19           	ADD HL,DE
1334++4845 FD 75 20     	LD (IY-100+VRS.AYREGS+Env),L
1335++4848 FD 74 21     	LD (IY-100+VRS.AYREGS+Env+1),H
1336++484B
1337++484B AF           	XOR A
1338++484C FD B6 0F     	OR (IY-100+VRS.CurEDel)
1339++484F C8           	RET Z
1340++4850 FD 35 0F     	DEC (IY-100+VRS.CurEDel)
1341++4853 C0           	RET NZ
1342++4854 FD 7E 0E     	LD A,(IY-100+VRS.Env_Del)
1343++4857 FD 77 0F     	LD (IY-100+VRS.CurEDel),A
1344++485A FD 6E 0A     	LD L,(IY-100+VRS.ESldAdd)
1345++485D FD 66 0B     	LD H,(IY-100+VRS.ESldAdd+1)
1346++4860 19           	ADD HL,DE
1347++4861 C3 CD 42     	JP SETESLD
1348++4864
1349++4864 FD 21 9C 49  PLAY    LD IY,VARS1+100
1350++4868 CD 2A 47     	CALL PLAY_
1351++486B 3A 37 49     	LD A,(is_ts)
1352++486E A7           	AND A
1353++486F 28 07        	JR Z,PL_nts
1354++4871 FD 21 23 4A  	LD IY,VARS2+100
1355++4875 CD 2A 47     	CALL PLAY_
1356++4878              PL_nts
1357++4878              	IF Basic
1358++4878 FD 21 3A 5C  	LD IY,#5C3A
1359++487C              	ENDIF
1360++487C
1361++487C 01 FD FF     ROUT	LD BC,#FFFD
1362++487F 3A 37 49     	LD A,(is_ts)
1363++4882 A7           	AND A
1364++4883 28 02        	JR Z,r_nts ;keep old standard
1365++4885 ED 41        	OUT (C),B
1366++4887 08           r_nts	EX AF,AF'
1367++4888
1368++4888              	IF ACBBAC
1369++4888 ~            	LD IX,VARS1+VRS.AYREGS
1370++4888              	ELSE
1371++4888 21 B1 49     	LD HL,VARS1+VRS.AYREGS
1372++488B              	ENDIF
1373++488B
1374++488B CD 97 48     	CALL ROUT_
1375++488E 08           	EX AF,AF'
1376++488F C8           	RET Z
1377++4890 42           	LD B,D
1378++4891 2F           	CPL
1379++4892 ED 79        	OUT (C),A
1380++4894
1381++4894              	IF ACBBAC
1382++4894 ~            	LD IX,VARS2+VRS.AYREGS
1383++4894              	ELSE
1384++4894 21 38 4A     	LD HL,VARS2+VRS.AYREGS
1385++4897              	ENDIF
1386++4897
1387++4897              ROUT_
1388++4897              	IF ACBBAC
1389++4897 ~            	LD A,(SETUP)
1390++4897 ~            	AND 12
1391++4897 ~            	JR Z,ABC
1392++4897 ~            	ADD A,CHTABLE
1393++4897 ~            	LD E,A
1394++4897 ~            	ADC A,CHTABLE/256
1395++4897 ~            	SUB E
1396++4897 ~            	LD D,A
1397++4897 ~            	LD B,0
1398++4897 ~            	PUSH IX
1399++4897 ~            	POP HL
1400++4897 ~            	LD A,(DE)
1401++4897 ~            	INC DE
1402++4897 ~            	LD C,A
1403++4897 ~            	ADD HL,BC
1404++4897 ~            	LD A,(IX+TonB)
1405++4897 ~            	LD C,(HL)
1406++4897 ~            	LD (IX+TonB),C
1407++4897 ~            	LD (HL),A
1408++4897 ~            	INC HL
1409++4897 ~            	LD A,(IX+TonB+1)
1410++4897 ~            	LD C,(HL)
1411++4897 ~            	LD (IX+TonB+1),C
1412++4897 ~            	LD (HL),A
1413++4897 ~            	LD A,(DE)
1414++4897 ~            	INC DE
1415++4897 ~            	LD C,A
1416++4897 ~            	ADD HL,BC
1417++4897 ~            	LD A,(IX+AmplB)
1418++4897 ~            	LD C,(HL)
1419++4897 ~            	LD (IX+AmplB),C
1420++4897 ~            	LD (HL),A
1421++4897 ~            	LD A,(DE)
1422++4897 ~            	INC DE
1423++4897 ~            	LD (RxCA1),A
1424++4897 ~            	XOR 8
1425++4897 ~            	LD (RxCA2),A
1426++4897 ~            	LD A,(DE)
1427++4897 ~            	AND (IX+Mixer)
1428++4897 ~            	LD E,A
1429++4897 ~            	LD A,(IX+Mixer)
1430++4897 ~            RxCA1	DB #E6
1431++4897 ~            	AND %010010
1432++4897 ~            	OR E
1433++4897 ~            	LD E,A
1434++4897 ~            	LD A,(IX+Mixer)
1435++4897 ~            	AND %010010
1436++4897 ~            RxCA2	OR E
1437++4897 ~            	OR E
1438++4897 ~            	LD (IX+Mixer),A
1439++4897 ~            ABC
1440++4897              	ENDIF
1441++4897
1442++4897 AF           	XOR A
1443++4898 11 BF FF     	LD DE,#FFBF
1444++489B
1445++489B              	IF ACBBAC
1446++489B ~            	LD BC,#FFFD
1447++489B ~            	PUSH IX
1448++489B ~            	POP HL
1449++489B              	ENDIF
1450++489B
1451++489B ED 79        LOUT	OUT (C),A
1452++489D 43           	LD B,E
1453++489E ED A3        	OUTI
1454++48A0 42           	LD B,D
1455++48A1 3C           	INC A
1456++48A2 FE 0D        	CP 13
1457++48A4 20 F5        	JR NZ,LOUT
1458++48A6 ED 79        	OUT (C),A
1459++48A8 7E           	LD A,(HL)
1460++48A9 A7           	AND A
1461++48AA F8           	RET M
1462++48AB 43           	LD B,E
1463++48AC ED 79        	OUT (C),A
1464++48AE C9           	RET
1465++48AF
1466++48AF              	IF ACBBAC
1467++48AF ~            CHTABLE	EQU $-4
1468++48AF ~            	DB 4,5,15,%001001,0,7,7,%100100
1469++48AF              	ENDIF
1470++48AF
1471++48AF 64           NT_DATA	DB (T_NEW_0-T1_)*2
1472++48B0 2A           	DB TCNEW_0-T_
1473++48B1 65           	DB (T_OLD_0-T1_)*2+1
1474++48B2 00           	DB TCOLD_0-T_
1475++48B3 01           	DB (T_NEW_1-T1_)*2+1
1476++48B4 0C           	DB TCNEW_1-T_
1477++48B5 01           	DB (T_OLD_1-T1_)*2+1
1478++48B6 0C           	DB TCOLD_1-T_
1479++48B7 94           	DB (T_NEW_2-T1_)*2
1480++48B8 35           	DB TCNEW_2-T_
1481++48B9 30           	DB (T_OLD_2-T1_)*2
1482++48BA 0E           	DB TCOLD_2-T_
1483++48BB 60           	DB (T_NEW_3-T1_)*2
1484++48BC 20           	DB TCNEW_3-T_
1485++48BD 60           	DB (T_OLD_3-T1_)*2
1486++48BE 21           	DB TCOLD_3-T_
1487++48BF
1488++48BF              T_
1489++48BF
1490++48BF 01 05 09 0B  TCOLD_0	DB #00+1,#04+1,#08+1,#0A+1,#0C+1,#0E+1,#12+1,#14+1
1490++48C3 0D 0F 13 15
1491++48C7 19 25 3D 00  	DB #18+1,#24+1,#3C+1,0
1492++48CB 5D 00        TCOLD_1	DB #5C+1,0
1493++48CD 31 37 4D 53  TCOLD_2	DB #30+1,#36+1,#4C+1,#52+1,#5E+1,#70+1,#82,#8C,#9C
1493++48D1 5F 71 82 8C
1493++48D5 9C
1494++48D6 9E A0 A6 A8  	DB #9E,#A0,#A6,#A8,#AA,#AC,#AE,#AE,0
1494++48DA AA AC AE AE
1494++48DE 00
1495++48DF 57           TCNEW_3	DB #56+1
1496++48E0 1F 23 25 29  TCOLD_3	DB #1E+1,#22+1,#24+1,#28+1,#2C+1,#2E+1,#32+1,#BE+1,0
1496++48E4 2D 2F 33 BF
1496++48E8 00
1497++48E9 1D 21 23 27  TCNEW_0	DB #1C+1,#20+1,#22+1,#26+1,#2A+1,#2C+1,#30+1,#54+1
1497++48ED 2B 2D 31 55
1498++48F1 BD BF 00     	DB #BC+1,#BE+1,0
1499++48F4              TCNEW_1 EQU TCOLD_1
1500++48F4 1B 21 25 29  TCNEW_2	DB #1A+1,#20+1,#24+1,#28+1,#2A+1,#3A+1,#4C+1,#5E+1
1500++48F8 2B 3B 4D 5F
1501++48FC BB BD BF 00  	DB #BA+1,#BC+1,#BE+1,0
1502++4900
1503++4900              PT3EMPTYORN EQU $-1
1504++4900 01 00        	DB 1,0
1505++4902
1506++4902              ;first 12 values of tone tables (packed)
1507++4902
player.asm(1508): warning: value 0xDD8 is truncated to 8bit value: 0xD8
1508++4902 0D D8        T_PACK	DB #06EC*2/256,#06EC*2
1509++4904 69           	DB #0755-#06EC
1510++4905 70           	DB #07C5-#0755
1511++4906 76           	DB #083B-#07C5
1512++4907 7D           	DB #08B8-#083B
1513++4908 85           	DB #093D-#08B8
1514++4909 8D           	DB #09CA-#093D
1515++490A 95           	DB #0A5F-#09CA
1516++490B 9D           	DB #0AFC-#0A5F
1517++490C A8           	DB #0BA4-#0AFC
1518++490D B1           	DB #0C55-#0BA4
1519++490E BB           	DB #0D10-#0C55
player.asm(1520): warning: value 0xCDA is truncated to 8bit value: 0xDA
1520++490F 0C DA        	DB #066D*2/256,#066D*2
1521++4911 62           	DB #06CF-#066D
1522++4912 68           	DB #0737-#06CF
1523++4913 6D           	DB #07A4-#0737
1524++4914 75           	DB #0819-#07A4
1525++4915 7B           	DB #0894-#0819
1526++4916 83           	DB #0917-#0894
1527++4917 8A           	DB #09A1-#0917
1528++4918 92           	DB #0A33-#09A1
1529++4919 9C           	DB #0ACF-#0A33
1530++491A A4           	DB #0B73-#0ACF
1531++491B AF           	DB #0C22-#0B73
1532++491C B8           	DB #0CDA-#0C22
player.asm(1533): warning: value 0xE08 is truncated to 8bit value: 0x08
1533++491D 0E 08        	DB #0704*2/256,#0704*2
1534++491F 6A           	DB #076E-#0704
1535++4920 72           	DB #07E0-#076E
1536++4921 78           	DB #0858-#07E0
1537++4922 7E           	DB #08D6-#0858
1538++4923 86           	DB #095C-#08D6
1539++4924 90           	DB #09EC-#095C
1540++4925 96           	DB #0A82-#09EC
1541++4926 A0           	DB #0B22-#0A82
1542++4927 AA           	DB #0BCC-#0B22
1543++4928 B4           	DB #0C80-#0BCC
1544++4929 BE           	DB #0D3E-#0C80
player.asm(1545): warning: value 0xFC0 is truncated to 8bit value: 0xC0
1545++492A 0F C0        	DB #07E0*2/256,#07E0*2
1546++492C 78           	DB #0858-#07E0
1547++492D 88           	DB #08E0-#0858
1548++492E 80           	DB #0960-#08E0
1549++492F 90           	DB #09F0-#0960
1550++4930 98           	DB #0A88-#09F0
1551++4931 A0           	DB #0B28-#0A88
1552++4932 B0           	DB #0BD8-#0B28
1553++4933 A8           	DB #0C80-#0BD8
1554++4934 E0           	DB #0D60-#0C80
1555++4935 B0           	DB #0E10-#0D60
1556++4936 E8           	DB #0EF8-#0E10
1557++4937
1558++4937              ;vars from here can be stripped
1559++4937              ;you can move VARS to any other address
1560++4937
1561++4937              VARS
1562++4937
1563++4937 00           is_ts	DB 0
1564++4938
1565++4938              ;ChannelsVars
1566++4938              	STRUCT	CHP
1567++4938 ~            ;reset group
1568++4938 ~            PsInOr	DB 0
1569++4938 ~            PsInSm	DB 0
1570++4938 ~            CrAmSl	DB 0
1571++4938 ~            CrNsSl	DB 0
1572++4938 ~            CrEnSl	DB 0
1573++4938 ~            TSlCnt	DB 0
1574++4938 ~            CrTnSl	DW 0
1575++4938 ~            TnAcc	DW 0
1576++4938 ~            COnOff	DB 0
1577++4938 ~            ;reset group
1578++4938 ~
1579++4938 ~            OnOffD	DB 0
1580++4938 ~
1581++4938 ~            ;IX for PTDECOD here (+12)
1582++4938 ~            OffOnD	DB 0
1583++4938 ~            OrnPtr	DW 0
1584++4938 ~            SamPtr	DW 0
1585++4938 ~            NNtSkp	DB 0
1586++4938 ~            Note	DB 0
1587++4938 ~            SlToNt	DB 0
1588++4938 ~            Env_En	DB 0
1589++4938 ~            Flags	DB 0
1590++4938 ~             ;Enabled - 0, SimpleGliss - 2
1591++4938 ~            TnSlDl	DB 0
1592++4938 ~            TSlStp	DW 0
1593++4938 ~            TnDelt	DW 0
1594++4938 ~            NtSkCn	DB 0
1595++4938 ~            Volume	DB 0
1596++4938              	ENDS
1597++4938
1598++4938              	STRUCT	VRS
1599++4938 ~
1600++4938 ~            ;IF not works in STRUCT in SjASM :(
1601++4938 ~            ;	IF CurPosCounter
1602++4938 ~            CurPos	DB 0
1603++4938 ~            PosSub	DB 0
1604++4938 ~            ;	ENDIF
1605++4938 ~
1606++4938 ~            ModNum	DB 0 ;bit0: ChipNum
1607++4938 ~            	     ;bit1: 1-reversed patterns order (AlCo TS)
1608++4938 ~
1609++4938 ~            ChanA	DS CHP
1610++4938 ~            ChanB	DS CHP
1611++4938 ~            ChanC	DS CHP
1612++4938 ~
1613++4938 ~            ;GlobalVars
1614++4938 ~            MODADDR	DW 0
1615++4938 ~            OrnPtrs	DW 0
1616++4938 ~            SamPtrs	DW 0
1617++4938 ~            PatsPtr	DW 0
1618++4938 ~            AdInPtA	DW 0
1619++4938 ~            AdInPtB	DW 0
1620++4938 ~            AdInPtC	DW 0
1621++4938 ~            CrPsPtr	DW 0
1622++4938 ~            LPosPtr	DW 0
1623++4938 ~            Delay	DB 0
1624++4938 ~            DelyCnt	DB 0
1625++4938 ~            ESldAdd	DW 0
1626++4938 ~            CurESld	DW 0
1627++4938 ~            Env_Del	DB 0
1628++4938 ~            CurEDel	DB 0
1629++4938 ~            Ns_Base	DB 0
1630++4938 ~            AddToNs	DB 0
1631++4938 ~            AddToEn	DB 0
1632++4938 ~            EnvBase	DW 0
1633++4938 ~            AYREGS	DS 14
1634++4938              	ENDS
1635++4938
1636++4938 00 00 00...  VARS1	DS VRS
1637++49BF 00 00 00...  VARS2	DS VRS
1638++4A46
1639++4A46              VT_	EQU $-16
1640++4A46 00 00 00...  	DS 256-16 ;CreatedVolumeTableAddress
1641++4B36
1642++4B36              T1_	EQU VT_+16 ;Tone tables data depacked here
1643++4B36
1644++4B36              T_OLD_1	EQU T1_
1645++4B36              T_OLD_2	EQU T_OLD_1+24
1646++4B36              T_OLD_3	EQU T_OLD_2+24
1647++4B36              T_OLD_0	EQU T_OLD_3+2
1648++4B36              T_NEW_0	EQU T_OLD_0
1649++4B36              T_NEW_1	EQU T_OLD_1
1650++4B36              T_NEW_2	EQU T_NEW_0+24
1651++4B36              T_NEW_3	EQU T_OLD_3
1652++4B36
1653++4B36              PT2EMPTYORN EQU VT_+31 ;1,0,0 sequence
1654++4B36
1655++4B36 00 00 00...  NT_	DS 192 ;CreatedNoteTableAddress
1656++4BF6
1657++4BF6              VAR0END	EQU VT_+16 ;INIT zeroes from VARS to VAR0END-1
1658++4BF6
1659++4BF6              VARSEND EQU $
1660++4BF6
1661++4BF6              MDLADDR EQU outputBuffer
1662++4BF6
1663++4BF6              ;Release 0 steps:
1664++4BF6              ;04/21/2007
1665++4BF6              ;Works start (PTxPlay adaptation); first beta.
1666++4BF6              ;04/22/2007
1667++4BF6              ;Job finished; beta-testing.
1668++4BF6              ;04/23/2007
1669++4BF6              ;PT v3.7 TS mode corrected (after AlCo remarks).
1670++4BF6              ;04/29/2007
1671++4BF6              ;Added 1.XX and 2.XX special commands interpretation for PT3
1672++4BF6              ;modules of v3.7+.
1673++4BF6
1674++4BF6              ;Size (minimal build for ZX Spectrum):
1675++4BF6              ;Code block #908 bytes
1676++4BF6              ;Variables #2BF bytes (can be stripped)
1677++4BF6              ;Total size #908+#2BF=#BC7 (3015) bytes
1678++4BF6              	ENDMODULE
# file closed: player/player.asm
  34+ 4BF6              	MODULE fakemod
  35+ 4BF6              fakeret
  36+ 4BF6 C9           	ret
  37+ 4BF7                  ENDMODULE
  38+ 4BF7
# file closed: player/vortexnedoos.asm
  44  4BF7                  ENDIF
  45  4BF7              start:
  46  4BF7              	IFNDEF NEDOOS
  47  4BF7 ~            outputBuffer:
  48  4BF7 ~                di
  49  4BF7 ~                xor a
  49  4BF7 ~              ld (#5c6a), a  ; Thank you, Mario Prato, for feedback
  50  4BF7 ~                ld (#5c00),a
  51  4BF7 ~                ld sp, asmOrg
  52  4BF7 ~                call Memory.init
  53  4BF7 ~                xor a
  53  4BF7 ~              out (#fe),a
  54  4BF7 ~                ei
  55  4BF7 ~
  56  4BF7 ~                ld a, 7
  56  4BF7 ~              call Memory.setPage
  57  4BF7 ~                ;; Logo
  58  4BF7 ~                ld hl, logo, b, Dos.FMODE_READ
  58  4BF7 ~              call Dos.fopen
  59  4BF7 ~                push af
  60  4BF7 ~                ld hl, #c000, bc, 6912
  60  4BF7 ~              call Dos.fread
  61  4BF7 ~                pop af
  62  4BF7 ~                call Dos.fclose
  63  4BF7 ~
  64  4BF7 ~                ld b, 50
  65  4BF7 ~            1   halt
  66  4BF7 ~                djnz 1b
  67  4BF7 ~                ;; End of logo :-)
  68  4BF7 ~
  69  4BF7                  ELSE
  70  4BF7 31 00 40             ld sp, 0x4000
  71  4BFA 0E EA                ld c,nos.CMD_SETSYSDRV
  72  4BFC 08                	ex af,af'
  73  4BFD CD 05 00     	    call nos.BDOS
  74  4C00                  ENDIF
  75  4C00
  76  4C00 CD 07 01         call TextMode.init
  77  4C03 21 0F 4C     	ld hl, initing
  77  4C06 CD 27 01       call TextMode.printZ
  78  4C09 CD 89 23       	call Wifi.init
  79  4C0C
  80  4C0C C3 B9 08        jp History.home
  81  4C0F
  82  4C0F                  IFDEF NEDOOS
  83  4C0F              outputBuffer:
  84  4C0F              	ENDIF
  85  4C0F
  86  4C0F 49 6E 69 74  initing db "Initing Wifi...", "\r\n", 0
  86  4C13 69 6E 67 20
  86  4C17 57 69 66 69
  86  4C1B 2E 2E 2E 0D
  86  4C1F 0A 00
  87  4C21 62 72 6F 77  logo    db "browser/logo.scr", 0
  87  4C25 73 65 72 2F
  87  4C29 6C 6F 67 6F
  87  4C2D 2E 73 63 72
  87  4C31 00
  88  4C32 62 72 6F 77  creds   db "browser/auth.pwd", 0
  88  4C36 73 65 72 2F
  88  4C3A 61 75 74 68
  88  4C3E 2E 70 77 64
  88  4C42 00
  89  4C43
  90  4C43                  display "ENDS: ", $
  91  4C43                  display "Buff size", #ffff - $
  92  4C43                  IFDEF NEDOOS
  93  4C43                      savebin "moon.com", asmOrg, $ - asmOrg
  94  4C43                  ELSE
  95  4C43 ~            		IFDEF TRDOS
  96  4C43 ~            			SAVETRD "MOONR.TRD",|"moon.C",asmOrg, $ - asmOrg
  97  4C43 ~            		ELSE
  98  4C43 ~            			savebin "moon.bin", asmOrg, $ - asmOrg
  99  4C43 ~            	    	ENDIF
 100  4C43                  ENDIF
 101  4C43              outputBuffer2:
 102  4C43 41 54 45 30      db  "ATE0", 0
 102  4C47 00
 103  4C48
 104  4C48                  ELSE
 105  4C48 ~            ;****************************** MSX ***********************************************
 106  4C48 ~                output "moonr.com"
 107  4C48 ~                org 100h
 108  4C48 ~                jp start
 109  4C48 ~                include "vdp/vdpdriver.asm"
 110  4C48 ~                include "utils/index.asm"
 111  4C48 ~                include "gopher/render/index.asm"
 112  4C48 ~                include "dos/msxdos.asm"
 113  4C48 ~                include "gopher/engine/history/index.asm"
 114  4C48 ~                include "gopher/engine/urlencoder.asm"
 115  4C48 ~                include "gopher/engine/fetcher.asm"
 116  4C48 ~                include "gopher/engine/media-processor.asm"
 117  4C48 ~                include "drivers/unapi/unapi.asm"
 118  4C48 ~                include "drivers/unapi/tcp.asm"
 119  4C48 ~                include "gopher/msxgopher.asm"
 120  4C48 ~                include "screen/msxscreen.asm"
 121  4C48 ~                include "player/vortex-processor.asm"
 122  4C48 ~            fontName db "font.bin",0
 123  4C48 ~            start:
 124  4C48 ~                ld hl,(0x0006)
 125  4C48 ~                ld bc,outputBuffer
 126  4C48 ~                sbc hl,bc
 127  4C48 ~                ld bc, 0x100
 128  4C48 ~                sbc hl,bc
 129  4C48 ~                ld (ramtop),hl
 130  4C48 ~
 131  4C48 ~                call TcpIP.init
 131  4C48 ~              jp nc, noTcpIP ; No TCP/IP - no browser! Anyway you can use "useless tcp/ip driver"
 132  4C48 ~                ; Loading font
 133  4C48 ~                ;ld de, fontName, a, FMODE_NO_WRITE : call Dos.fopen
 134  4C48 ~                ;push bc
 135  4C48 ~                ;ld de, font, hl, 2048 :call Dos.fread
 136  4C48 ~                ;pop bc
 137  4C48 ~                ;call Dos.fclose
 138  4C48 ~                call TextMode.loadFont
 139  4C48 ~                call TextMode.init
 140  4C48 ~                call History.home
 141  4C48 ~                jp exit
 142  4C48 ~            noTcpIP:
 143  4C48 ~                ld hl, .err
 144  4C48 ~                call Console.putStringZ
 145  4C48 ~                rst 0
 146  4C48 ~            .err db 13,10,"No TCP/IP implementation found!",13,10,0
 147  4C48 ~            ramtop:
 148  4C48 ~                db 0x00, 0xD0
 149  4C48 ~            outputBuffer:
 150  4C48 ~            font:
 151  4C48 ~                display "ENDS: ", $
 152  4C48                  ENDIF
# file closed: main.asm
