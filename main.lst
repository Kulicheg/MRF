# file opened: main.asm
   1  0000                  DEFINE TCP_BUF_SIZE 1024
   2  0000              ; Generate version string
   3  0000                  LUA ALLPASS
   4  0000 ~                v = tostring(sj.get_define("V"))
   5  0000 ~                maj = string.sub(v, 1,1)
   6  0000 ~                min = string.sub(v, 2,2)
   7  0000 ~                sj.insert_define("VERSION_STRING", "\"" .. maj .. "." .. min .. "\"")
   8  0000 ~
   9  0000 ~                b = tostring(sj.get_define("BLD"))
  10  0000 ~                sj.insert_define("BUILD_STRING", "\"" .. b .. "\"")
  11  0000                  ENDLUA
  12  0000
  13  0000                  IFDEF MSX
  14  0000 ~                    include "main-msx.asm"
  15  0000                  ELSE
  16  0000                      include "main-all.asm"
# file opened: main-all.asm
   1+ 0000                  device	zxspectrum128
   2+ 0000                  IFDEF NEDOOS
   3+ 0000              	DEFINE CRLF "\r\n"
   4+ 0000                      MODULE nos
   5+ 0000                          include "../_sdk/sysdefs.asm"
# file opened: ../_sdk/sysdefs.asm
   1++0000              BDOS=0x0005
   2++0000              COMMANDLINE=0x0080
   3++0000              COMMANDLINE_sz=0x0080
   4++0000              PROGSTART=0x0100
   5++0000
   6++0000              ;from userkrnl.asm:
   7++0000              curpg4000=0x0043
   8++0000              curpg16k=curpg4000;0x0043
   9++0000              curpg8000=0x0049
  10++0000              curpg32klow=curpg8000;0x0049
  11++0000              curpgc000=0x004f
  12++0000              curpg32khigh=curpgc000;0x004f
  13++0000              user_scr0_low=0x0017
  14++0000              user_scr0_high=0x0035
  15++0000              user_scr1_low=0x0036
  16++0000              user_scr1_high=0x0037
  17++0000
  18++0000              MAXPATH_sz=256;64
  19++0000              DIRMAXFILENAME64=64 ;including EOL
  20++0000
  21++0000              ;------------------------СТРУКТУРЫ CP/M --------------------------------------
  22++0000              ;from CP/M (try to avoid use!):
  23++0000              CMD_PRCHAR=0x05 ;e=char
  24++0000              CMD_SETDRV=0x0e ;e=drive ;out: a!=0 => not mounted, [l=number of drives]
  25++0000              CMD_FOPEN=0x0f ;de = pointer to unopened FCB
  26++0000              CMD_FCLOSE=0x10 ;de = pointer to opened FCB
  27++0000              CMD_FSEARCHFIRST=0x11 ;de = pointer to unopened FCB (filename with ????????), read matching FCB to DTA. DTA had to set every time
  28++0000              CMD_FSEARCHNEXT=0x12 ;(NOT CP/M compatible!!!)de = pointer to unopened FCB (filename with ????????), read matching FCB to DTA. DTA had to set every time
  29++0000              CMD_FDEL=0x13 ;DEPRECATED!!!!! ;DE = Pointer to unopened FCB
  30++0000              CMD_FREAD=0x14 ;DE = Pointer to opened FCB, read 128 bytes in DTA, out: a=128^bytes actually read (not CP/M!)
  31++0000              CMD_FWRITE=0x15 ;DE = Pointer to opened FCB, write 128 bytes from DTA
  32++0000              CMD_FCREATE=0x16 ;DE = Pointer to unopened FCB
  33++0000              CMD_SETDTA=0x1a ;DE = data transfer address (DTA)
  34++0000              CMD_RNDRD=0x21 ;DE = Pointer to opened FCB. The file position is defined by the three byte random record number in the FCB (bytes 21h...23h). TP uses 21,22
  35++0000              CMD_RNDWR=0x22 ;DE = Pointer to opened FCB. The file position is defined by the three byte random record number in the FCB (bytes 21h...23h). TP uses 21,22
  36++0000
  37++0000              ;from MSX-DOS:
  38++0000              CMD_SEEKHANDLE=0x4a ;b=file handle, dehl=offset [signed, a=method:0=begin,1=cur,2=end TODO]
  39++0000              CMD_OPENHANDLE=0x43 ;DE = Drive/path/file ASCIIZ string
  40++0000                                      ;[A = Open mode. b0 set => no write, b1 set => no read, b2 set => inheritable, b3..b7   -  must be clear]
  41++0000                                      ;out: B = new file handle, A=error
  42++0000              CMD_CREATEHANDLE=0x44 ;DE = Drive/path/file ASCIIZ string
  43++0000                                      ;[A = Open mode. b0 set => no write, b1 set => no read, b2 set => inheritable, b3..b7   -  must be clear]
  44++0000                                      ;[B = b0..b6 = Required attributes, b7 = Create new flag]
  45++0000                                      ;out: B = new file handle, A=error
  46++0000              CMD_CLOSEHANDLE=0x45 ;B = file handle, out: A=error
  47++0000              CMD_READHANDLE=0x48 ;B = file handle, DE = Buffer address, HL = Number of bytes to read, out: HL = Number of bytes actually read, A=error(=0)
  48++0000              CMD_WRITEHANDLE=0x49 ;B = file handle, DE = Buffer address, HL = Number of bytes to write, out: HL = Number of bytes actually written, A=error(=0)
  49++0000              CMD_RENAME=0x4e ;DE = Drive/path/file ASCIIZ string, HL = New filename ASCIIZ string (NOT MSXDOS compatible! with Drive/path!) ;RENAME OR MOVE FILE
  50++0000              CMD_CHDIR=0x5a ;DE = Pointer to ASCIIZ string. Out A=error
  51++0000              CMD_PARSEFNAME=0x5c ;NOT RECOMMENDED ;de(dotname) -> hl(cpmname) ;out: de=pointer to termination character, hl=buffer filled in
  52++0000              CMD_GETPATH=0x5e ;DE = Pointer to MAXPATH_sz byte buffer ;out: DE = Filled in with whole path string (WITH DRIVE! Finished by slash only if root dir), HL = Pointer to start of last item
  53++0000              CMD_DELETE=0x4d ;DE = Drive/path/file ASCIIZ string, out: A = Error
  54++0000
  55++0000              ;invented:
  56++0000              CMD_SETTIME=0xc9 ;ix=date, hl=time
  57++0000              CMD_GETMEMPORTS=0xca ;out: ix=memport0000, bc=memport4000, de=memport8000, hl=memportc000
  58++0000              CMD_GETPAGEOWNER=0x0cb ;e=page ;out: e=owner id (0=free, 0xff=system)
  59++0000              CMD_GETCONFIG=0xcc ;out: H=system drive, L= 1-Evo 2-ATM2 3-ATM3 6-p2.666, E=pgsys(system page), D= TR-DOS page, IXBC=SVN revision
  60++0000              CMD_GETCHILDRESULT=0xcd ;hl=childresult
  61++0000              CMD_RESERV_1=0xce
  62++0000              CMD_OPENDIR=0xcf ;de=path
  63++0000              CMD_READDIR=0xd0 ;de=buf for FILINFO (if no LNAME, use FNAME), 0x00 in FILINFO_FNAME = end dir
  64++0000              CMD_HIDEFROMPARENT=0xd1 ;for tasks with their own screen handling ;hl=result
  65++0000              CMD_SETSTDINOUT=0xd2 ;b=id, e=stdin, d=stdout, h=stderr
  66++0000              CMD_GETSTDINOUT=0xd3 ;e=stdin, d=stdout, h=stderr, l=hgt of stdout
  67++0000              CMD_PLAYCOVOX=0xd4 ;hl=data (0xc000+, 0x00=end), de=pagetable (0x0000+), hx=delay (18=11kHz, 7=22kHz, 1=44kHz)
  68++0000              CMD_SETMUSIC=0xd5 ;hl=muzaddr (0x4000..0x7fff, 0=killmuz), a=muzpg (pages in 0x8000, 0xc000 are taken from current user memory)
  69++0000              CMD_READSECTORS=0xd6 ;b=drive, de=buffer, ixhl=sector number, a=count ;out: a=error
  70++0000              CMD_WRITESECTORS=0xd7 ;b=drive, de=buffer, ixhl=sector number, a=count ;out: a=error
  71++0000              CMD_SETBORDER=0xd8 ;e=0..15
  72++0000              CMD_SETWAITING=0xd9 ;don't use directly! ;set WAITING state for current task
  73++0000              CMD_GETFILESIZE=0xda ;b=handle, out: dehl=file size
  74++0000              CMD_WIZNETOPEN=0xdb ;A=SOCKET, L=subfunction (see sys_h.asm)
  75++0000              CMD_WIZNETCLOSE=0xdc ;A=SOCKET, E=(0 - закрыть сразу, 1 - закрыть только если буфер приёма пуст)
  76++0000              CMD_WIZNETREAD=0xdd 	;if TCP: A=SOCKET, de=buffer_ptr, HL=sizeof(buffer)
  77++0000              						;else:	 A=SOCKET, IX=buffer_ptr, HL=sizeof(buffer), de=sockaddr_in ptr
  78++0000              						;out: HL=count if HL < 0 then A=error
  79++0000              CMD_WIZNETWRITE=0xde 	;if TCP: A=SOCKET, de=buffer_ptr, HL=sizeof(buffer)
  80++0000              						;else:	 A=SOCKET, IX=buffer_ptr, HL=sizeof(buffer), de=sockaddr_in ptr
  81++0000              						;out: HL=count if HL < 0 then A=error
  82++0000              CMD_DROPAPP=0xdf ;e=id
  83++0000              CMD_GETAPPMAINPAGES=0xe0 ;e=id ;out: d,e,h,l=pages in 0000,4000,8000,c000, c=flags, a=error
  84++0000              CMD_GETXY=0xe1 ;OBSOLETE ;out: de=yx ;GET CURSOR POSITION
  85++0000              CMD_GETTIME=0xe2 ;out: ix=date, hl=time
  86++0000              CMD_GETFILETIME=0xe3 ;de=Drive/path/file ASCIIZ string, out: ix=date, hl=time
  87++0000              CMD_SETFILETIME=0xe4 ;de=Drive/path/file ASCIIZ string, ix=date, hl=time
  88++0000              CMD_TELLHANDLE=0xe5 ;b=file handle, out: dehl=offset ;GET POSITION IN FILE
  89++0000              CMD_SCROLLUP=0xe6 ;OBSOLETE ;de=topyx, hl=hgt,wid ;x, wid even ;TEXTMODE ONLY
  90++0000              CMD_SCROLLDOWN=0xe7 ;OBSOLETE ;de=topyx, hl=hgt,wid ;x, wid even ;TEXTMODE ONLY
  91++0000              CMD_GETFILINFO=0xe8 ;de=filename, hl=buf[FILINFO_sz] to get FILINFO
  92++0000              CMD_SETMAINPAGE=0xe9 ;e=page for 0x0000
  93++0000              CMD_SETSYSDRV=0xea ;out: a!=0 => not mounted, l=number of drives
  94++0000              CMD_MKDIR=0xeb ;DE = Pointer to ASCIIZ string, out: a
  95++0000              CMD_CHECKPID=0xec ;e=id ;check if this child(!) app exists, out: a!=0 => OK, or else a=0
  96++0000              CMD_FREEZEAPP=0xed ;e=id ;disable app and make non-graphic
  97++0000              CMD_GETATTR=0xee ;DEPRECATED!!! ;out: a ;READ ATTR AT CURSOR POSITION
  98++0000              CMD_MOUNT=0xef ;e=drive, out: a
  99++0000              CMD_GETKEYMATRIX=0xf0 ;out: bcdehlix = halfrows cs...space
 100++0000              CMD_GETTIMER=0xf1 ;out: dehl=timer
 101++0000              CMD_YIELD=0xf2 ;schedule to another app (use YIELD macro instead of HALT!!!)
 102++0000              CMD_RUNAPP=0xf3 ;e=id ;ACTIVATE DISABLED APP
 103++0000              CMD_NEWAPP=0xf4 ;out: b=id, a=error, dehl=newapp pages in 0000,4000,8000,c000 ;MAKE NEW DISABLED APP
 104++0000              CMD_PRATTR=0xf5 ;OBSOLETE ;e=color byte ;DRAW ATTR AT CURSOR POSITION
 105++0000              CMD_CLS=0xf6 ;e=color byte
 106++0000              CMD_SETCOLOR=0xf7 ;e=color byte
 107++0000              CMD_SETXY=0xf8 ;de=yx ;SET CURSOR POSITION
 108++0000              CMD_SETGFX=0xf9 ;e=0:EGA, e=2:MC, e=3:6912, e=6:text ;+8 for noturbo ;+0x80 for auto screen pages keeping ;+SET FOCUS ;e=-1: disable gfx (out: e=old gfxmode)
 109++0000              CMD_SETPAL=0xfa ;de=palette (32 bytes)
 110++0000              CMD_GETMAINPAGES=0xfb ;out: d,e,h,l=pages in 0000,4000,8000,c000, c=flags, b=id
 111++0000              CMD_NEWPAGE=0xfc ;out: a=0 (OK)/!=0 (fail), e=page
 112++0000              CMD_DELPAGE=0xfd ;e=page ;GIVE SOME PAGE BACK TO THE OS
 113++0000              CMD_SETSCREEN=0xfe ;e=screen=0..1
 114++0000              CMD_YIELDKEEP=0xff
 115++0000
 116++0000              ;	STRUCT FILINFO
 117++0000              FILINFO_FSIZE=0;	        DWORD		;/* FILE SIZE */
 118++0000              FILINFO_FDATE=4;	        WORD		;/* LAST MODIFIED DATE */
 119++0000              FILINFO_FTIME=6;	        WORD		;/* LAST MODIFIED TIME */
 120++0000              FILINFO_FATTRIB=8;	        BYTE		;/* ATTRIBUTE */
 121++0000              FILINFO_FNAME=9;	        BLOCK 13,0	;/* SHORT FILE NAME (8.3 FORMAT with dot and terminator) */
 122++0000              FILINFO_LNAME=22;	        BLOCK DIRMAXFILENAME64,0	;/* LONG FILE NAME (ASCIIZ) */
 123++0000              FILINFO_sz=FILINFO_LNAME+DIRMAXFILENAME64
 124++0000
 125++0000              ;        STRUCT FCB
 126++0000              FCB_drv=0 ;drv             BYTE; /* drive number */
 127++0000              FCB_FNAME=1 ;FNAME           BLOCK 11;
 128++0000              FCB_EXTENTNUMBERLO=12 ;EXTENTNUMBERLO  BYTE; ;NU
 129++0000              FCB_FATTRIB=13 ;FATTRIB         BYTE;
 130++0000              FCB_EXTENTNUMBERHI=14 ;EXTENTNUMBERHI  BYTE; ;NU
 131++0000              FCB_RECORDCOUNT=15 ;RECORDCOUNT     BYTE; ;NU
 132++0000              FCB_FSIZE=16 ;FSIZE           DWORD;
 133++0000              FCB_FTIME=20 ;FTIME           WORD;
 134++0000              FCB_FFSFCB=22 ;FFSFCB          WORD; /* TRDOSFCB или FIL */
 135++0000              FCB_DIRPOS=24 ;DIRPOS          WORD; /* привязка к точке поиска */
 136++0000              ;RESERVED        BLOCK 2 ;reserved (14 in MS-DOS???)
 137++0000              FCB_RECORDSIZE=28 ;RECORDSIZE      WORD; /* must be 128 */
 138++0000              FCB_FDATE=30 ;FDATE           WORD
 139++0000              FCB_FRECORD=32 ;FRECORD         BYTE; /*номер записи внутри экстента*/
 140++0000              ;	ENDS
 141++0000              FCB_sz=33
 142++0000
 143++0000              FATTRIB_DIR=0x10 ;mask for FCB_FATTRIB
 144++0000
 145++0000              ;Application flags:
 146++0000
 147++0000              factive=0 ;0=zombie, 1=scheduled ;TODO есть сообщения: SET при добавлении сообщения, RES при взятии последнего сообщения
 148++0000              fchildfinished=1 ;устанавливается при завершении дочернего процесса (чтобы в этом случае проскочить SETWAITING), сбрасывается по GETCHILDRESULT
 149++0000              ;fcritical=4 (чтобы не портить hl)
 150++0000              fgfx=5 ;app can take focus
 151++0000              ;ffocus=6 ;app has focus (only one can)
 152++0000              fwaiting=7 ;app is waiting for another app, can't take focus by hand
 153++0000
 154++0000              ;Internal keyboard values:
 155++0000
 156++0000              extbase=0xb0 ;with H=1 ;can't mix with 32..127 ;temporary internal code
 157++0000              csbase=0xf3 ;temporary internal code
 158++0000              extenter=csbase+12 ;temporary internal code
 159++0000              graphlock=extenter ;temporary internal code
 160++0000              csnoshifts=0;NOKEY ;cs release result for AltGr ;temporary internal code
 161++0000              csspace=27 ;temporary internal code
 162++0000              csss=9 ;Tab ;temporary internal code
 163++0000              key_extspace=0;NOKEY ;extbase+14 ;unusable because happens simultaneously with extZ because of keyboard matrix
 164++0000              cssspress=csss ;temporary internal code (impossible to type without AltGr before language recoding)
 165++0000              ssnoshifts=0xd1 ;temporary internal code (impossible to type without AltGr before language recoding)
 166++0000              ext0=extbase+0
 167++0000              ext1=extbase+1
 168++0000              ext2=extbase+2
 169++0000              ext3=extbase+3
 170++0000              ext4=extbase+4
 171++0000              ext5=extbase+5
 172++0000              ext6=extbase+6
 173++0000              ext7=extbase+7
 174++0000              ext8=extbase+8
 175++0000              ext9=extbase+9
 176++0000              cs0=8 ;as extH (CP/M) ;csbase+0 reserved
 177++0000              cs1=csbase+1 ;readable only in keynolang (switches language)
 178++0000              cs2=csbase+2 ;readable only in keynolang (switches Caps Lock)
 179++0000              cs3=csbase+3
 180++0000              cs4=csbase+4
 181++0000              cs5=csbase+5
 182++0000              cs6=csbase+6
 183++0000              cs7=csbase+7
 184++0000              cs8=csbase+8
 185++0000              cs9=csbase+9
 186++0000
 187++0000              ;Usable key codes:
 188++0000
 189++0000              extA=1
 190++0000              extB=2
 191++0000              extC=3
 192++0000              extD=4
 193++0000              extE=5
 194++0000              extF=6
 195++0000              extG=7
 196++0000              extH=8 ;as cs0 (BackSpace)
 197++0000              extI=9 ;as csss (Tab)
 198++0000              extJ=10
 199++0000              extK=11
 200++0000              extL=12
 201++0000              extM=13 ;as Enter
 202++0000              extN=14
 203++0000              extO=15
 204++0000              extP=16
 205++0000              extQ=17
 206++0000              extR=18
 207++0000              extS=19
 208++0000              extT=20
 209++0000              extU=21
 210++0000              extV=22
 211++0000              extW=23
 212++0000              extX=24
 213++0000              extY=25
 214++0000              extZ=26
 215++0000
 216++0000              ss0='_'
 217++0000              ss1='!'
 218++0000              ss2='@'
 219++0000              ss3='#'
 220++0000              ss4='$'
 221++0000              ss5='%'
 222++0000              ss6='&'
 223++0000              ss7=0x27;'\''
 224++0000              ss8='('
 225++0000              ss9=')'
 226++0000              ssA='~'
 227++0000              ssB='*'
 228++0000              ssC='?'
 229++0000              ssD=0x5c;'\\'
 230++0000              ssE=30;extbase+30
 231++0000              ssF='{'
 232++0000              ssG='}'
 233++0000              ssH='^'
 234++0000              ssI=127;extbase+12
 235++0000              ssJ='-'
 236++0000              ssK='+'
 237++0000              ssL='='
 238++0000              ssM='.'
 239++0000              ssN=','
 240++0000              ssO=';'
 241++0000              ssP=0x22;'"'
 242++0000              ssQ=28;extbase+28
 243++0000              ssR='<'
 244++0000              ssS='|'
 245++0000              ssT='>'
 246++0000              ssU=']'
 247++0000              ssV='/'
 248++0000              ssW=29;extbase+29
 249++0000              ssX='`'
 250++0000              ssY='['
 251++0000              ssZ=':'
 252++0000
 253++0000              key_home=ssQ
 254++0000              key_end=ssE
 255++0000              key_ins=ssW
 256++0000              key_enter=13
 257++0000              key_left=cs5
 258++0000              key_right=cs8
 259++0000              key_up=cs7
 260++0000              key_down=cs6
 261++0000              key_pgup=cs3
 262++0000              key_pgdown=cs4
 263++0000              key_backspace=cs0
 264++0000              key_del=cs9
 265++0000              key_ssleft=ext5
 266++0000              key_ssright=ext8
 267++0000              key_ssup=ext7
 268++0000              key_ssdown=ext6
 269++0000              key_sspgup=ext3
 270++0000              key_sspgdown=ext4
 271++0000              key_ssbackspace=ext0
 272++0000              key_ssdel=ext9
 273++0000              key_tab=csss
 274++0000              key_esc=csspace
 275++0000              key_csenter=csbase+10
 276++0000              key_ssspace=csbase+11
 277++0000              key_F1=ext1
 278++0000              key_F2=ext2
 279++0000              key_F3=ext3
 280++0000              key_F4=ext4
 281++0000              key_F5=ext5
 282++0000              key_F6=ext6
 283++0000              key_F7=ext7
 284++0000              key_F8=ext8
 285++0000              key_F9=ext9
 286++0000              key_F10=ext0
 287++0000
 288++0000              NOKEY=0
 289++0000              key_redraw=31 ;if equal to ssEnter, then scheduling through idle will catch ssEnter twice
 290++0000              ;single ext (Tab) is returned at key release (TODO keypress in keynolang)
 291++0000              ;single ss, cs keypresses are not returned, or else CP/M-like apps can't filter them out (TODO in keynolang, and all other key releases too)
 292++0000
# file closed: ../_sdk/sysdefs.asm
   6+ 0000                      ENDMODULE
   7+ 0000                      org nos.PROGSTART
   8+ 0100                      ELSE
   9+ 0100 ~            	DEFINE CRLF "\r"
  10+ 0100 ~                    org 24576
  11+ 0100                  ENDIF
  12+ 0100              asmOrg:
  13+ 0100                  align 256
  14+ 0100 C3 9B 4C         jp start
  15+ 0103                  include "vdp/index.asm"
# file opened: vdp/index.asm
   1++0103                  IFDEF TIMEX
   2++0103 ~                include "timex.asm"
   3++0103                  ENDIF
   4++0103
   5++0103                  IFDEF TIMEX80
   6++0103 ~                include "timex80.asm"
   7++0103                  ENDIF
   8++0103
   9++0103                  IFDEF ZXSCR
  10++0103 ~                include "zx.asm"
  11++0103                  ENDIF
  12++0103
  13++0103              	IFDEF NEDOOS
  14++0103                  include "nedotext.asm"
# file opened: vdp/nedotext.asm
   1++0103
   2++0103                  MODULE TextMode
   3++0103 00           pg4	defb 0
   4++0104 00           pg0	defb 0
   5++0105 00           pgC	defb 0
   6++0106 00           pg8	defb 0
   7++0107              init
   8++0107 0E D1        	ld c,nos.CMD_HIDEFROMPARENT
   9++0109 CD 05 00     	call nos.BDOS
  10++010C 1E 86        	ld e,0x86
  11++010E 0E F9        	ld c,nos.CMD_SETGFX
  12++0110 CD 05 00     	call nos.BDOS
  13++0113 0E F2        	ld c,nos.CMD_YIELD
  14++0115 CD 05 00     	call nos.BDOS
  15++0118 0E FB        	ld c,nos.CMD_GETMAINPAGES
  16++011A CD 05 00     	call nos.BDOS
  17++011D ED 53 03 01  	ld (pg4),de
  18++0121 22 05 01     	ld (pgC),hl
  19++0124 C3 30 01     	jp cls
  20++0127
  21++0127              printZ
  22++0127 7E           	ld a,(hl)
  23++0128 B7           	or a
  24++0129 C8           	ret z
  25++012A 23           	inc hl
  26++012B E5           	push hl
  27++012C D7           	rst 0x10
  28++012D E1           	pop hl
  29++012E 18 F7        	jr printZ
  30++0130
  31++0130              cls
  32++0130 1E 07        	ld e,7
  33++0132 0E F6        	ld c,nos.CMD_CLS
  34++0134 C3 05 00     	jp nos.BDOS
  35++0137
  36++0137              putC
  37++0137 C3 10 00     	jp 0x0010
  38++013A
  39++013A              gotoXY
  40++013A E5           	push hl
  41++013B 0E F8        	ld c,nos.CMD_SETXY
  42++013D CD 05 00     	call nos.BDOS
  43++0140 E1           	pop hl
  44++0141 C9           	ret
  45++0142
  46++0142              fillLine:
  47++0142 54 1E 00         ld d, h, e, 0
  47++0145 CD 3A 01       call gotoXY
  48++0148 06 50            ld b, 80
  49++014A              .loop
  50++014A F5 C5            push af, bc
  51++014C D7               rst 0x10
  52++014D C1 F1            pop bc, af
  53++014F 10 F9            djnz .loop
  54++0151 C9               ret
  55++0152
  56++0152              usualLine
  57++0152 57           	ld d,a
  58++0153 1E 00        	ld e,0
  59++0155              .mloop
  60++0155 D5           	push de
  61++0156 0E F8        	ld c,nos.CMD_SETXY
  62++0158 CD 05 00     	call nos.BDOS
  63++015B 1E 07        	ld e,7
  64++015D 0E F5        	ld c,nos.CMD_PRATTR
  65++015F CD 05 00     	call nos.BDOS
  66++0162 D1           	pop de
  67++0163 1C           	inc e
  68++0164 7B           	ld a,e
  69++0165 FE 50        	cp 80
  70++0167 20 EC        	jr nz,.mloop
  71++0169 C9           	ret
  72++016A
  73++016A              highlightLine
  74++016A 57           	ld d,a
  75++016B 1E 00        	ld e,0
  76++016D              .mloop
  77++016D D5           	push de
  78++016E 0E F8        	ld c,nos.CMD_SETXY
  79++0170 CD 05 00     	call nos.BDOS
  80++0173 1E 4F        	ld e,79
  81++0175 0E F5        	ld c,nos.CMD_PRATTR
  82++0177 CD 05 00     	call nos.BDOS
  83++017A D1           	pop de
  84++017B 1C           	inc e
  85++017C 7B           	ld a,e
  86++017D FE 50        	cp 80
  87++017F 20 EC        	jr nz,.mloop
  88++0181 C9           	ret
  89++0182                  ENDMODULE
  90++0182
# file closed: vdp/nedotext.asm
  15++0182                  ENDIF
# file closed: vdp/index.asm
  16+ 0182                  include "utils/index.asm"
# file opened: utils/index.asm
   1++0182                  include "atoi.asm"
# file opened: utils/atoi.asm
   1++0182              ; DE - buffer
   2++0182              ; HL - output
   3++0182              atohl:
   4++0182 21 00 00         ld hl, 0
   5++0185              .loop
   6++0185 1A               ld a, (de)
   7++0186 13               inc de
   8++0187                  ; Sepparators
   9++0187 C5 E5            push bc, hl
  10++0189 01 05 00             ld bc, sepparators_len
  11++018C 21 A4 01             ld hl, sepparators
  12++018F ED B1                cpir
  13++0191 E1 C1            pop hl, bc
  14++0193 C8               ret z
  15++0194
  16++0194 D6 30            sub '0'
  17++0196
  18++0196 C5               push bc
  19++0197 4D                   ld c, l
  20++0198 44                   ld b, h
  21++0199
  22++0199 29                   add hl, hl
  23++019A 29                   add hl, hl
  24++019B 09                   add hl, bc
  25++019C 29                   add hl, hl
  26++019D 4F                   ld c, a
  27++019E 06 00                ld b, 0
  28++01A0 09                   add hl, bc
  29++01A1 C1               pop bc
  30++01A2 18 E1            jr .loop
  31++01A4
# file closed: utils/atoi.asm
   2++01A4                  include "constants.asm"
# file opened: utils/constants.asm
   1++01A4              TAB = 9
   2++01A4              CR = 13
   3++01A4              LF = 10
   4++01A4              NULL = 0
   5++01A4              SPACE = ' '
   6++01A4              ESC = 27
   7++01A4              BACKSPACE = 8
   8++01A4
   9++01A4                  IFDEF TIMEX80
  10++01A4 ~            MIME_DOWNLOAD 	= #19
  11++01A4 ~            MIME_LINK 		= #1A
  12++01A4 ~            MIME_TEXT 		= #10
  13++01A4 ~            MIME_IMAGE 		= #01
  14++01A4 ~            MIME_MUSIC 		= #0e
  15++01A4 ~            MIME_INPUT 		= #b3
  16++01A4 ~            MIME_MOD 		= #0d
  17++01A4 ~
  18++01A4 ~            BORDER_TOP = #b2
  19++01A4 ~            BORDER_BOTTOM = #b1
  20++01A4                  ELSE
  21++01A4              	IFDEF MSX
  22++01A4 ~            MIME_DOWNLOAD 	= 1
  23++01A4 ~            MIME_LINK		= 2
  24++01A4 ~            MIME_TEXT 		= 3
  25++01A4 ~            MIME_IMAGE 		= 4
  26++01A4 ~            MIME_MUSIC 		= 5
  27++01A4 ~            MIME_INPUT 		= 6
  28++01A4 ~            MIME_MOD      	= 7
  29++01A4 ~            BORDER_TOP    = 7
  30++01A4 ~            BORDER_BOTTOM = 8
  31++01A4              	ELSE
  32++01A4              MIME_DOWNLOAD = 1
  33++01A4              MIME_LINK     = 2
  34++01A4              MIME_TEXT     = 3
  35++01A4              MIME_IMAGE    = 6
  36++01A4              MIME_MUSIC    = 5
  37++01A4              MIME_INPUT    = 4
  38++01A4              MIME_MOD      = 7
  39++01A4
  40++01A4              BORDER_TOP    = 9
  41++01A4              BORDER_BOTTOM = 8
  42++01A4              	ENDIF
  43++01A4
  44++01A4
  45++01A4
  46++01A4
  47++01A4              	ENDIF
  48++01A4
  49++01A4 0D 0A 09 00  sepparators db CR, LF, TAB, NULL, SPACE
  49++01A8 20
  50++01A9              sepparators_len = $ - sepparators
# file closed: utils/constants.asm
   3++01A9                  include "strutils.asm"
# file opened: utils/strutils.asm
   1++01A9              ; de - pointer
   2++01A9              ; hl - count
   3++01A9              strlen:
   4++01A9 21 00 00         ld hl, 0
   5++01AC              .loop
   6++01AC 1A               ld a, (de)
   7++01AD A7               and a
   7++01AE 28 04          jr z, .exit
   8++01B0 23               inc hl
   9++01B1 13               inc de
  10++01B2 18 F8            jr .loop
  11++01B4              .exit
  12++01B4 C9               ret
  13++01B5
  14++01B5                  module CompareBuff
  15++01B5
  16++01B5              ; Pushes A to buffer
  17++01B5              push
  18++01B5 F5               push af
  19++01B6 06 20            ld b, 32
  19++01B8 21 01 02       ld hl, buffer + 1
  19++01BB 11 00 02       ld de, buffer
  20++01BE              .loop
  21++01BE 7E               ld a, (hl)
  21++01BF 12             ld (de), a
  21++01C0 23             inc hl
  21++01C1 13             inc de
  21++01C2 10 FA          djnz .loop
  22++01C4 F1               pop af
  23++01C5 21 1F 02         ld hl, buffer + 31
  23++01C8 77             ld (hl), a
  24++01C9 C9               ret
  25++01CA
  26++01CA              ; HL - Compare string(null terminated)
  27++01CA              ; A - 0 NOT Found
  28++01CA              ;     1 Found
  29++01CA              search:
  30++01CA 06 00            ld b, 0
  30++01CC E5             push hl
  31++01CD              .loop:
  32++01CD 7E               ld a, (hl)
  32++01CE 23             inc hl
  32++01CF 04             inc b
  32++01D0 A7             and a
  32++01D1 C2 CD 01       jp nz, .loop
  33++01D4 05               dec b
  33++01D5 E1             pop hl
  33++01D6 C5             push bc
  33++01D7 E5             push hl
  34++01D8 E1               pop hl
  35++01D9 11 20 02         ld de, buffer + 32
  36++01DC              .sourceLoop
  37++01DC 1B               dec de
  37++01DD 10 FD          djnz .sourceLoop
  38++01DF C1               pop bc
  39++01E0              .compare
  40++01E0 C5               push bc
  40++01E1 F5             push af
  41++01E2 1A               ld a, (de)
  41++01E3 47             ld b, a
  42++01E4 F1               pop af
  42++01E5 7E             ld a, (hl)
  42++01E6 B8             cp b
  42++01E7 C1             pop bc
  42++01E8 3E 00          ld a, 0
  42++01EA C0             ret nz
  43++01EB 13               inc de
  43++01EC 23             inc hl
  44++01ED 10 F1            djnz .compare
  45++01EF 3E 01            ld a, 1
  46++01F1 C9               ret
  47++01F2
  48++01F2              clear:
  49++01F2 AF               xor a
  49++01F3 21 00 02       ld hl, buffer
  49++01F6 11 01 02       ld de, buffer + 1
  49++01F9 01 20 00       ld bc, 32
  49++01FC 77             ld (hl), a
  49++01FD ED B0          ldir
  50++01FF C9               ret
  51++0200
  52++0200 00 00 00...  buffer ds 32
  53++0220
  54++0220                  endmodule
# file closed: utils/strutils.asm
   4++0220                  IFDEF MSX
   5++0220 ~            	    include "bios.asm"
   6++0220                  ENDIF
   7++0220                  include "screen.asm"
# file opened: utils/screen.asm
   1++0220              LINE_LIMIT = 63
   2++0220
   3++0220                  IFDEF NEDOOS
   4++0220              LINE_LIMIT = 79
   5++0220                  ENDIF
   6++0220
   7++0220                  IFDEF TIMEX80
   8++0220 ~            LINE_LIMIT = 84
   9++0220                  ENDIF
  10++0220
  11++0220                  IFDEF MSX
  12++0220 ~            LINE_LIMIT = 79
  13++0220                  ENDIF
  14++0220              ; HL - string pointer
  15++0220              print70Text:
  16++0220 06 4F            ld b, LINE_LIMIT
  17++0222              .loop
  18++0222 7E               ld a, (hl)
  19++0223 A7               and a
  19++0224 C8             ret z
  20++0225 FE 0D            cp 13
  20++0227 C8             ret z
  21++0228 FE 0A            cp 10
  21++022A C8             ret z
  22++022B C5               push bc
  23++022C E5               push hl
  24++022D CD 37 01         call TextMode.putC
  25++0230 E1               pop hl
  26++0231 23               inc hl
  27++0232 C1               pop bc
  28++0233 05               dec b
  29++0234 78               ld a, b
  29++0235 A7             and a
  29++0236 C8             ret z
  30++0237 C3 22 02         jp .loop
  31++023A
  32++023A              ; HL - string pointer
  33++023A              print70Goph:
  34++023A 06 4F            ld b, LINE_LIMIT
  35++023C              .loop
  36++023C 7E               ld a, (hl)
  36++023D FE 09          cp 09
  36++023F C8             ret z
  37++0240 A7               and a
  37++0241 C8             ret z
  38++0242 C5               push bc
  39++0243 E5               push hl
  40++0244 CD 37 01         call TextMode.putC
  41++0247 E1               pop hl
  42++0248 23               inc hl
  43++0249 C1               pop bc
  44++024A 05               dec b
  45++024B 78               ld a, b
  45++024C A7             and a
  45++024D C8             ret z
  46++024E C3 3C 02         jp .loop
# file closed: utils/screen.asm
# file closed: utils/index.asm
  17+ 0251                  include "gopher/render/index.asm"
# file opened: gopher/render/index.asm
   1++0251                  MODULE Render
   2++0251              PER_PAGE = 22
   3++0251              CURSOR_OFFSET = 2
   4++0251                  include "row.asm"
# file opened: gopher/render/row.asm
   1++0251              ; A - row number
   2++0251              ; HL - pointer to row
   3++0251              renderRow:
   4++0251 C6 02            add CURSOR_OFFSET
   5++0253 57               ld d,a
   6++0254 1E 00            ld e,0
   7++0256 CD 3A 01         call TextMode.gotoXY
   8++0259 7E               ld a,(hl)
   9++025A E5               push hl
  10++025B CD 66 02         call getIcon
  11++025E CD 37 01         call TextMode.putC
  12++0261 E1               pop hl
  13++0262 23               inc hl
  14++0263 C3 3A 02         jp print70Goph
  15++0266
  16++0266              ; A - gopher id char
  17++0266              getIcon:
  18++0266 FE 69            cp 'i'
  18++0268 CA 82 02       jp z, .info
  19++026B FE 39            cp '9'
  19++026D CA 85 02       jp z, .down
  20++0270 FE 31            cp '1'
  20++0272 CA FD 02       jp z, .page
  21++0275 FE 30            cp '0'
  21++0277 CA 00 03       jp z, .text
  22++027A FE 37            cp '7'
  22++027C CA 03 03       jp z, .input
  23++027F 3E 20            ld a, ' '
  24++0281 C9               ret
  25++0282              .info
  26++0282 3E 20            ld a, SPACE
  26++0284 C9             ret
  27++0285              .down
  28++0285 54 5D            ld de, hl
  29++0287 01 FF 00 3E      ld bc, #ff, a, TAB
  29++028B 09
  29++028C ED B1          cpir
  30++028E 78               ld a, b
  30++028F B1             or c
  30++0290 28 68          jr z, .downExit
  31++0292 D5               push de
  32++0293              .nameLoop
  33++0293 7E               ld a, (hl)
  33++0294 A7             and a
  33++0295 28 10          jr z, .check
  34++0297 FE 09            cp TAB
  34++0299 28 0C          jr z, .check
  35++029B FE 0D            cp CR
  35++029D 28 08          jr z, .check
  36++029F E5               push hl
  37++02A0 CD B5 01         call CompareBuff.push
  38++02A3 E1               pop hl
  39++02A4 23               inc hl
  40++02A5 18 EC            jr .nameLoop
  41++02A7              .check
  42++02A7 21 12 03         ld hl, scrExt1
  42++02AA CD CA 01       call CompareBuff.search
  42++02AD A7             and a
  42++02AE 20 56          jr nz, .image
  43++02B0 21 17 03         ld hl, scrExt2
  43++02B3 CD CA 01       call CompareBuff.search
  43++02B6 A7             and a
  43++02B7 20 4D          jr nz, .image
  44++02B9 3E 03            ld a, 3
  44++02BB 32 0A 40       ld (VTPL.SETUP), a ; 0 bit - looping, 1 bit - pt2 file
  45++02BE 21 26 03         ld hl, pt2Ext1
  45++02C1 CD CA 01       call CompareBuff.search
  45++02C4 A7             and a
  45++02C5 20 43          jr nz, .music
  46++02C7 21 2B 03         ld hl, pt2Ext2
  46++02CA CD CA 01       call CompareBuff.search
  46++02CD A7             and a
  46++02CE 20 3A          jr nz, .music
  47++02D0 3E 01            ld a, 1
  47++02D2 32 0A 40       ld (VTPL.SETUP), a
  48++02D5 21 1C 03         ld hl, pt3Ext1
  48++02D8 CD CA 01       call CompareBuff.search
  48++02DB A7             and a
  48++02DC 20 2C          jr nz, .music
  49++02DE 21 21 03         ld hl, pt3Ext2
  49++02E1 CD CA 01       call CompareBuff.search
  49++02E4 A7             and a
  49++02E5 20 23          jr nz, .music
  50++02E7
  51++02E7                  ; General Sound support
  52++02E7                  ifdef GS
  53++02E7 21 30 03         ld hl, modExt1
  53++02EA CD CA 01       call CompareBuff.search
  53++02ED A7             and a
  53++02EE 20 1E          jr nz, .mod
  54++02F0 21 35 03         ld hl, modExt2
  54++02F3 CD CA 01       call CompareBuff.search
  54++02F6 A7             and a
  54++02F7 20 15          jr nz, .mod
  55++02F9                  endif
  56++02F9
  57++02F9              .checkExit
  58++02F9 E1               pop hl
  59++02FA              .downExit
  60++02FA 3E 01            ld a, MIME_DOWNLOAD
  60++02FC C9             ret
  61++02FD              .page
  62++02FD 3E 02            ld a, MIME_LINK
  62++02FF C9             ret
  63++0300              .text
  64++0300 3E 03            ld a, MIME_TEXT
  64++0302 C9             ret
  65++0303              .input
  66++0303 3E 04            ld a, MIME_INPUT
  66++0305 C9             ret
  67++0306              .image
  68++0306 E1               pop hl
  68++0307 3E 06          ld a, MIME_IMAGE
  68++0309 C9             ret
  69++030A              .music
  70++030A E1               pop hl
  70++030B 3E 05          ld a, MIME_MUSIC
  70++030D C9             ret
  71++030E              .mod
  72++030E E1               pop hl
  72++030F 3E 07          ld a, MIME_MOD
  72++0311 C9             ret
  73++0312
  74++0312 2E 73 63 72  scrExt1 db ".scr", 0
  74++0316 00
  75++0317 2E 53 43 52  scrExt2 db ".SCR", 0
  75++031B 00
  76++031C
  77++031C 2E 70 74 33  pt3Ext1 db ".pt3", 0
  77++0320 00
  78++0321 2E 50 54 33  pt3Ext2 db ".PT3", 0
  78++0325 00
  79++0326 2E 70 74 32  pt2Ext1 db ".pt2", 0
  79++032A 00
  80++032B 2E 50 54 32  pt2Ext2 db ".PT2", 0
  80++032F 00
  81++0330 2E 6D 6F 64  modExt1 db ".mod", 0
  81++0334 00
  82++0335 2E 4D 4F 44  modExt2 db ".MOD", 0
  82++0339 00
# file closed: gopher/render/row.asm
   5++033A                  include "buffer.asm"
# file opened: gopher/render/buffer.asm
   1++033A              ; BC - line count
   2++033A              findLine
   3++033A 21 9B 4C         ld hl, outputBuffer
   4++033D              findLine2
   5++033D 78               ld a,b
   6++033E B1               or c
   7++033F CA 6C 03         jp z, .checkEmpty
   8++0342              .loop
   9++0342 7E               ld a, (hl)
  10++0343 A7               and a
  11++0344 CA 6F 03         jp z, .nope
  12++0347 23               inc hl
  13++0348 FE 0D            cp 13
  14++034A CA 62 03         jp z, .checkLF  ;13
  15++034D FE 0A            cp 10
  15++034F CA 55 03       jp z, .nextCheck     ;10
  16++0352 C3 42 03         jp .loop
  17++0355              .nextCheck
  18++0355 A7               and a
  19++0356 CA 6F 03         jp z, .nope
  20++0359 0B               dec bc
  21++035A 57               ld d,a
  22++035B 78               ld a,b
  23++035C B1               or c
  24++035D 7A               ld a,d
  25++035E C2 42 03         jp nz, .loop
  26++0361 C9               ret
  27++0362              .checkLF
  28++0362 7E               ld a, (hl)
  29++0363 FE 0A            cp 10
  30++0365 C2 55 03         jp nz, .nextCheck    ;10
  31++0368 23               inc hl
  32++0369 C3 55 03         jp  .nextCheck
  33++036C              .checkEmpty
  34++036C 7E               ld a, (hl)
  34++036D A7             and a
  34++036E C0             ret nz
  35++036F              .nope
  36++036F 21 00 00         ld hl, 0
  36++0372 C9             ret
  37++0373
# file closed: gopher/render/buffer.asm
   6++0373                  include "ui.asm"
# file opened: gopher/render/ui.asm
   1++0373                  IFDEF ZXSCR
   2++0373 ~                DEFINE LEFT_TAB "[D]omain:                                  "
   3++0373                  ENDIF
   4++0373
   5++0373                  IFDEF TIMEX     ;UNKNOWM fallback to 64
   6++0373 ~                DEFINE LEFT_TAB "[D]omain:                                  "
   7++0373                  ENDIF
   8++0373
   9++0373                  IFDEF TIMEX80
  10++0373 ~                DEFINE LEFT_TAB "[D]omain:                                                      "
  11++0373                  ENDIF
  12++0373
  13++0373                  IFDEF NEDOOS
  14++0373                  DEFINE LEFT_TAB "[D]omain:                                                  "
  15++0373                  ENDIF
  16++0373
  17++0373                  IFDEF MSX
  18++0373 ~                DEFINE LEFT_TAB "[D]omain:                                              "
  19++0373                  ENDIF
  20++0373              prepareScreen:
  21++0373 CD 30 01         call TextMode.cls
  22++0376 21 46 04         ld hl, header
  22++0379 CD 27 01       call TextMode.printZ
  23++037C 11 0A 00         ld de, #000A
  23++037F CD 3A 01       call TextMode.gotoXY
  24++0382 21 2A 19         ld hl, hostName
  24++0385 CD 27 01       call TextMode.printZ
  25++0388 AF               xor a
  25++0389 CD 6A 01       call TextMode.highlightLine
  26++038C C9               ret
  27++038D
  28++038D              inputHost:
  29++038D CD 2A 08         	call Console.waitForKeyUp
  30++0390              .loop
  31++0390 11 0A 00         ld de, #000A
  31++0393 CD 3A 01       call TextMode.gotoXY
  31++0396 21 2A 19       ld hl, hostName
  31++0399 CD 27 01       call TextMode.printZ
  32++039C 3E 04            ld a, MIME_INPUT
  32++039E CD 37 01       call TextMode.putC
  33++03A1 3E 20            ld a, ' '
  33++03A3 CD 37 01       call TextMode.putC
  34++03A6              .wait
  35++03A6 CD 11 08         call Console.getC
  36++03A9 5F               ld e, a
  37++03AA FE 08            cp Console.BACKSPACE
  37++03AC 28 17          jr z, .removeChar
  38++03AE FE 0D            cp CR
  38++03B0 CA D3 03       jp z, inputNavigate
  39++03B3 FE 20            cp 32
  39++03B5 38 EF          jr c, .wait
  40++03B7              .putC
  41++03B7 AF               xor a
  41++03B8 21 2A 19 01    ld hl, hostName, bc, 48
  41++03BC 30 00
  41++03BE ED B1          cpir
  42++03C0 77               ld (hl), a
  42++03C1 2B             dec hl
  42++03C2 73             ld (hl), e
  43++03C3 18 CB            jr .loop
  44++03C5              .removeChar
  45++03C5 AF               xor a
  46++03C6 21 2A 19 01      ld hl, hostName, bc, 48
  46++03CA 30 00
  46++03CC ED B1          cpir
  47++03CE 2B               dec hl
  47++03CF 2B             dec hl
  47++03D0 77             ld (hl), a
  48++03D1 18 BD            jr .loop
  49++03D3
  50++03D3              inputNavigate:
  51++03D3 21 2A 19 11      ld hl, hostName, de, domain
  51++03D7 06 04
  52++03D9 7E               ld a,(hl)
  53++03DA A7               and a
  54++03DB CA 93 08         jp z, History.load
  55++03DE              .loop
  56++03DE 7E               ld a, (hl)
  56++03DF A7             and a
  56++03E0 28 05          jr z, .complete
  57++03E2 12               ld (de), a
  57++03E3 23 13          inc hl, de
  58++03E5 18 F7            jr .loop
  59++03E7              .complete
  60++03E7 3E 09            ld a, TAB
  60++03E9 12             ld (de), a
  60++03EA 13             inc de
  61++03EB 3E 37            ld a, '7'
  61++03ED 12             ld (de), a
  61++03EE 13             inc de
  62++03EF 3E 30            ld a, '0'
  62++03F1 12             ld (de), a
  62++03F2 13             inc de
  63++03F3 3E 0D            ld a, CR
  63++03F5 12             ld (de), a
  63++03F6 13             inc de
  64++03F7 3E 0A            ld a, LF
  64++03F9 12             ld (de), a
  64++03FA 13             inc de
  65++03FB 21 01 04         ld hl, navRow
  65++03FE C3 EC 08       jp History.navigate
  66++0401
  67++0401 31 20 09 2F  navRow db "1 ", TAB, "/", TAB
  67++0405 09
  68++0406 6E 69 68 69  domain db "nihirash.net"
  68++040A 72 61 73 68
  68++040E 2E 6E 65 74
  69++0412 00 00 00...      ds 64 - ($ - domain)
  70++0446
  71++0446 5B 44 5D 6F  header db "[D]omain:                                                  ", "MRF "
  71++044A 6D 61 69 6E
  71++044E 3A 20 20 20
  71++0452 20 20 20 20
  71++0456 20 20 20 20
  71++045A 20 20 20 20
  71++045E 20 20 20 20
  71++0462 20 20 20 20
  71++0466 20 20 20 20
  71++046A 20 20 20 20
  71++046E 20 20 20 20
  71++0472 20 20 20 20
  71++0476 20 20 20 20
  71++047A 20 20 20 20
  71++047E 20 20 20 4D
  71++0482 52 46 20
  72++0485 31 2E 37            db "1.7"
  73++0488 2E                  db "."
  74++0489 31 33               db "13"
  75++048B              	IFDEF MSX
  76++048B ~                   db " [MSX UNAPI]",13, 0
  77++048B              	ENDIF
  78++048B
  79++048B                  IFDEF MB03
  80++048B ~                   db " [MB03+]",13, 0
  81++048B                     ENDIF
  82++048B
  83++048B                  IFDEF UNO
  84++048B ~                   db " [UNO UART]",13, 0
  85++048B                  ENDIF
  86++048B
  87++048B                  IFDEF AY
  88++048B ~                   db " [AYWIFI]",13, 0
  89++048B              	ENDIF
  90++048B
  91++048B                  IFDEF ZW
  92++048B ~                   db " [ZXWiFi]",13, 0
  93++048B                  ENDIF
  94++048B
  95++048B                   IFDEF NEDOOSATM
  96++048B ~                   db " [ATM UART]",13, 0
  97++048B                  ENDIF
  98++048B
  99++048B                  IFDEF NEDOOSEVO
 100++048B ~                   db " [EVO UART]",13, 0
 101++048B                  ENDIF
 102++048B
 103++048B                  IFDEF UNOUART
 104++048B ~                   db " [UNO UART]",13, 0
 105++048B                  ENDIF
 106++048B
 107++048B                  IFDEF NEDOOS
 108++048B              	IFNDEF NEDOOSATM
 109++048B              	IFNDEF NEDOOSEVO
 110++048B 20 20 5B 6E         db "  [nedoNET]",13, 0
 110++048F 65 64 6F 4E
 110++0493 45 54 5D 0D
 110++0497 00
 111++0498
 112++0498                  ENDIF
 113++0498              	ENDIF
 114++0498              	ENDIF
 115++0498
# file closed: gopher/render/ui.asm
   7++0498                  include "gopher-page.asm"
# file opened: gopher/render/gopher-page.asm
   1++0498              renderGopherScreen:
   2++0498 3E FF            ld a, 255
   3++049A 32 1D 21         ld (oldminutes), a
   4++049D CD 73 03         call Render.prepareScreen
   5++04A0
   6++04A0 2A 18 0C         ld hl, (page_offset)        ; HL - offset to 0 Row on screen
   7++04A3 44 4D            ld bc,hl                    ; BC - offset to C Row on screen
   8++04A5 CD 3A 03         call Render.findLine        ;BC - Search this line  HL - Return pointer to page with offset
   9++04A8 7C               ld a, h
  10++04A9 B5               or l
  11++04AA 28 21            jr z, .exit2
  12++04AC 7B               ld a, e
  13++04AD AF               xor a
  14++04AE E5               push hl
  15++04AF CD 51 02         call renderRow
  16++04B2 E1               pop hl
  17++04B3
  18++04B3 06 15            ld b, PER_PAGE-1
  19++04B5
  20++04B5              .loop
  21++04B5 C5               push bc
  22++04B6 3E 16            ld a, PER_PAGE
  23++04B8 90               sub b
  24++04B9 5F               ld e,a
  25++04BA
  26++04BA 01 01 00         ld bc, 1
  27++04BD
  28++04BD CD 3D 03         call Render.findLine2   ;BC - Search this line  HL - Return pointer to page with offset
  29++04C0
  30++04C0 7C               ld a, h
  31++04C1 B5               or l
  32++04C2 28 06            jr z, .exit
  33++04C4 7B               ld a, e
  34++04C5 E5               push hl
  35++04C6 CD 51 02         call renderRow
  36++04C9 E1               pop hl
  37++04CA              .exit
  38++04CA C1               pop bc
  39++04CB 10 E8            djnz .loop
  40++04CD              .exit2
  41++04CD CD D7 05         call showCursor
  42++04D0 C9               ret
  43++04D1
  44++04D1              checkBorder:
  45++04D1 3A 16 0C         ld a, (cursor_position)
  45++04D4 FE FF          cp #ff
  45++04D6 CA FB 05       jp z, pageUp
  46++04D9 3A 16 0C         ld a, (cursor_position)
  46++04DC FE 16          cp PER_PAGE
  46++04DE CA 2E 06       jp z, pageDn
  47++04E1 CD D7 05         call showCursor
  48++04E4 C3 E7 04         jp workLoop
  49++04E7
  50++04E7              workLoop:
  51++04E7 3A 21 07         ld a, (play_next)
  51++04EA A7             and a
  51++04EB C2 8C 05       jp nz, navigate
  52++04EE
  53++04EE                  dup 4
  54++04EE 76          >    halt
  54++04EF 76          >    halt
  54++04F0 76          >    halt
  54++04F1 76          >    halt
  55++04F2                  edup
  56++04F2              .nothing
  57++04F2
  58++04F2 76               halt
  59++04F3 CD 79 20         call printRTC
  60++04F6
  61++04F6 CD 1D 08         call Console.peekC
  62++04F9 A7               and a
  62++04FA CA F2 04       jp z, .nothing
  63++04FD
  64++04FD FE 31            cp '1'
  64++04FF CA 7C 08       jp z, History.back
  65++0502 FE 32            cp '2'
  65++0504 CA 8C 05       jp z, navigate
  66++0507 FE 33            cp '3'
  66++0509 CA E7 05       jp z, cursorDown
  67++050C FE 34            cp '4'
  67++050E CA F1 05       jp z, cursorUp
  68++0511 FE 35            cp '5'
  68++0513 CA FB 05       jp z, pageUp
  69++0516 FE 38            cp '8'
  69++0518 CA 2E 06       jp z, pageDn
  70++051B FE 36            cp '6'
  70++051D CA E7 05       jp z, cursorDown
  71++0520 FE 37            cp '7'
  71++0522 CA F1 05       jp z, cursorUp
  72++0525
  73++0525 FE F9            cp Console.KEY_DN
  73++0527 CA E7 05       jp z, cursorDown
  74++052A FE 61            cp 'a'
  74++052C CA E7 05       jp z, cursorDown
  75++052F FE FA            cp Console.KEY_UP
  75++0531 CA F1 05       jp z, cursorUp
  76++0534 FE 71            cp 'q'
  76++0536 CA F1 05       jp z, cursorUp
  77++0539 FE F8            cp Console.KEY_LT
  77++053B CA FB 05       jp z, pageUp
  78++053E FE 6F            cp 'o'
  78++0540 CA FB 05       jp z, pageUp
  79++0543 FE FB            cp Console.KEY_RT
  79++0545 CA 2E 06       jp z, pageDn
  80++0548 FE 70            cp 'p'
  80++054A CA 2E 06       jp z, pageDn
  81++054D
  82++054D FE 68            cp 'h'
  82++054F CA E9 08       jp z, History.home
  83++0552 FE 48            cp 'H'
  83++0554 CA E9 08       jp z, History.home
  84++0557
  85++0557 FE 62            cp 'b'
  85++0559 CA 7C 08       jp z, History.back
  86++055C FE 42            cp 'B'
  86++055E CA 7C 08       jp z, History.back
  87++0561 FE 08            cp Console.BACKSPACE
  87++0563 CA 7C 08       jp z, History.back
  88++0566
  89++0566 FE 64            cp 'd'
  89++0568 CA 8D 03       jp z, inputHost
  90++056B FE 44            cp 'D'
  90++056D CA 8D 03       jp z, inputHost
  91++0570
  92++0570 FE 0D            cp CR
  92++0572 CA 8C 05       jp z, navigate
  93++0575
  94++0575                  IFDEF MSX
  95++0575 ~                	cp ESC
  95++0575 ~              jp z, exit
  96++0575                  ENDIF
  97++0575
  98++0575                  IFDEF GS
  99++0575 FE 4D            cp 'M'
  99++0577 CC 63 20       call z, GeneralSound.toggleModule
 100++057A FE 6D            cp 'm'
 100++057C CC 63 20       call z, GeneralSound.toggleModule
 101++057F FE 67            cp 'g'
 101++0581 CC 6E 20       call z, GeneralSound.toggleDownload
 102++0584 FE 47            cp 'G'
 102++0586 CC 6E 20       call z, GeneralSound.toggleDownload
 103++0589                  ENDIF
 104++0589
 105++0589                  IFDEF TIMEX80
 106++0589 ~                cp 'T'
 106++0589 ~              call z, TextMode.toggleColor
 107++0589 ~                cp 't'
 107++0589 ~              call z, TextMode.toggleColor
 108++0589                  ENDIF
 109++0589
 110++0589 C3 E7 04         jp workLoop
 111++058C
 112++058C              navigate:
 113++058C CD 2A 08         call Console.waitForKeyUp
 114++058F AF               xor a
 114++0590 32 21 07       ld (play_next), a
 115++0593 CD DF 05         call hideCursor
 116++0596 ED 4B 18 0C      ld bc, (page_offset)
 117++059A 2A 16 0C         ld hl, (cursor_position)
 118++059D 09               add hl,bc
 119++059E 44               ld b, h ;HHHHH
 120++059F 4D               ld c, l ;LLLLL
 121++05A0 D5               push de
 122++05A1 CD 3A 03         call Render.findLine
 123++05A4 D1               pop de
 124++05A5 7E               ld a, (hl)
 125++05A6 FE 31            cp '1'
 125++05A8 CA C0 05       jp z, .load
 126++05AB FE 30            cp '0'
 126++05AD CA C0 05       jp z, .load
 127++05B0 FE 39            cp '9'
 127++05B2 CA C0 05       jp z, .load
 128++05B5 FE 37            cp '7'
 128++05B7 CA C8 05       jp z, .input
 129++05BA CD D7 05         call showCursor
 130++05BD C3 E7 04         jp workLoop
 131++05C0              .load
 132++05C0 E5               push hl
 133++05C1 CD 66 02         call getIcon
 134++05C4 E1               pop hl
 135++05C5 C3 EC 08         jp History.navigate
 136++05C8              .input
 137++05C8 E5               push hl
 138++05C9 CD 22 07         call DialogBox.inputBox
 139++05CC E1               pop hl
 140++05CD 3A 8A 07         ld a, (DialogBox.inputBuffer)
 140++05D0 A7             and a
 140++05D1 CA 93 08       jp z, History.load
 141++05D4 C3 C0 05         jp .load
 142++05D7
 143++05D7              showCursor:
 144++05D7 3A 16 0C         ld a, (cursor_position)
 144++05DA C6 02          add CURSOR_OFFSET
 145++05DC C3 6A 01         jp TextMode.highlightLine
 146++05DF
 147++05DF              hideCursor:
 148++05DF 3A 16 0C         ld a, (cursor_position)
 148++05E2 C6 02          add CURSOR_OFFSET
 149++05E4 C3 52 01         jp TextMode.usualLine
 150++05E7
 151++05E7              cursorDown:
 152++05E7 CD DF 05         call hideCursor
 153++05EA 21 16 0C         ld hl, cursor_position
 154++05ED 34               inc (hl)
 155++05EE C3 D1 04         jp checkBorder
 156++05F1
 157++05F1              cursorUp:
 158++05F1 CD DF 05         call hideCursor
 159++05F4 21 16 0C         ld hl, cursor_position
 160++05F7 35               dec (hl)
 161++05F8 C3 D1 04         jp checkBorder
 162++05FB
 163++05FB              pageUp:
 164++05FB 3A 18 0C         ld a, (page_offset)
 164++05FE FE 00          cp 0
 164++0600 C2 0E 06       jp nz, .pageUp2
 165++0603 3A 19 0C         ld a, (page_offset + 1)
 165++0606 FE 00          cp 0
 165++0608 C2 0E 06       jp nz, .pageUp2
 166++060B C3 24 06         jp .skip
 167++060E              .pageUp2:
 168++060E 3E 15            ld a, PER_PAGE - 1
 168++0610 32 16 0C       ld (cursor_position), a
 169++0613 2A 18 0C         ld hl, (page_offset)
 170++0616 11 16 00         ld de,PER_PAGE
 171++0619 ED 52            sbc hl,de
 172++061B 22 18 0C         ld (page_offset), hl
 173++061E              .exit
 174++061E CD 98 04         call renderGopherScreen
 175++0621 C3 E7 04         jp workLoop
 176++0624              .skip
 177++0624 AF               xor a
 177++0625 32 16 0C       ld (cursor_position), a
 177++0628 CD 98 04       call renderGopherScreen
 177++062B C3 E7 04       jp workLoop
 178++062E
 179++062E              pageDn:
 180++062E AF                xor a
 180++062F 32 16 0C       ld (cursor_position), a
 181++0632 2A 18 0C         ld hl,(page_offset)
 182++0635 11 16 00         ld de,PER_PAGE
 183++0638 19               add hl,de
 184++0639 22 18 0C         ld (page_offset), hl
 185++063C C3 1E 06         jp pageUp.exit
 186++063F
# file closed: gopher/render/gopher-page.asm
   8++063F                  include "plaintext.asm"
# file opened: gopher/render/plaintext.asm
   1++063F              renderPlainTextScreen:
   2++063F 3E FF            ld a, 255
   3++0641 32 1D 21         ld (oldminutes), a
   4++0644 CD 73 03         call prepareScreen
   5++0647
   6++0647 2A 18 0C         ld hl, (page_offset)        ; HL - offset to 0 Row on screen
   7++064A 44 4D            ld bc,hl                    ; BC - offset to C Row on screen
   8++064C CD 3A 03         call Render.findLine        ;BC - Search this line  HL - Return pointer to page with offset
   9++064F 7C               ld a, h
  10++0650 B5               or l
  11++0651 28 30            jr z, .exit2
  12++0653 AF               xor a
  13++0654 C6 02            add CURSOR_OFFSET
  13++0656 57 1E 01       ld d, a, e, 1
  13++0659 CD 3A 01       call TextMode.gotoXY
  14++065C CD 20 02         call print70Text
  15++065F 06 15            ld b, PER_PAGE -1
  16++0661              .loop
  17++0661 C5               push bc
  18++0662 3E 16            ld a, PER_PAGE
  19++0664 90               sub b
  20++0665 5F               ld e,a
  21++0666 01 01 00         ld bc, 1
  22++0669 CD 3D 03         call Render.findLine2   ;BC - Search this line  HL - Return pointer to page with offset
  23++066C 7C               ld a, h
  24++066D B5               or l
  25++066E 28 10            jr z, .exit
  26++0670 7B               ld a, e
  27++0671 C6 02            add CURSOR_OFFSET
  27++0673 57 1E 01       ld d, a, e, 1
  27++0676 CD 3A 01       call TextMode.gotoXY
  28++0679 CD 20 02         call print70Text
  29++067C C1               pop bc
  30++067D 10 E2            djnz .loop
  31++067F C9               ret
  32++0680              .exit
  33++0680 C1               pop bc
  34++0681 10 DE            djnz .loop
  35++0683              .exit2
  36++0683 CD D7 05         call showCursor
  37++0686 C9               ret
  38++0687              plainTextLoop:
  39++0687 CD 79 20         call printRTC
  40++068A CD 11 08         call Console.getC
  41++068D
  42++068D FE 31            cp '1'
  42++068F CA 7C 08       jp z, History.back
  43++0692 FE 32            cp '2'
  43++0694 CA 8C 05       jp z, navigate
  44++0697 FE 35            cp '5'
  44++0699 CA FF 06       jp z, textUp
  45++069C FE 38            cp '8'
  45++069E CA EF 06       jp z, textDown
  46++06A1 FE F8            cp Console.KEY_LT
  46++06A3 CA FF 06       jp z, textUp
  47++06A6 FE FB            cp Console.KEY_RT
  47++06A8 CA EF 06       jp z, textDown
  48++06AB
  49++06AB FE F9            cp Console.KEY_DN
  49++06AD CA EF 06       jp z, textDown
  50++06B0 FE 61            cp 'a'
  50++06B2 CA EF 06       jp z, textDown
  51++06B5
  52++06B5 FE FA            cp Console.KEY_UP
  52++06B7 CA FF 06       jp z, textUp
  53++06BA FE 71            cp 'q'
  53++06BC CA FF 06       jp z, textUp
  54++06BF
  55++06BF FE 68            cp 'h'
  55++06C1 CA E9 08       jp z, History.home
  56++06C4 FE 48            cp 'H'
  56++06C6 CA E9 08       jp z, History.home
  57++06C9
  58++06C9 FE 62            cp 'b'
  58++06CB CA 7C 08       jp z, History.back
  59++06CE FE 42            cp 'B'
  59++06D0 CA 7C 08       jp z, History.back
  60++06D3
  61++06D3 FE 64            cp 'd'
  61++06D5 CA 8D 03       jp z, inputHost
  62++06D8 FE 44            cp 'D'
  62++06DA CA 8D 03       jp z, inputHost
  63++06DD
  64++06DD FE 08            cp Console.BACKSPACE
  64++06DF CA 7C 08       jp z, History.back
  65++06E2
  66++06E2                  IFDEF MSX
  67++06E2 ~                	cp ESC
  67++06E2 ~              jp z, exit
  68++06E2                  ENDIF
  69++06E2
  70++06E2                  IFDEF GS
  71++06E2 FE 4D            cp 'M'
  71++06E4 CC 63 20       call z, GeneralSound.toggleModule
  72++06E7 FE 6D            cp 'm'
  72++06E9 CC 63 20       call z, GeneralSound.toggleModule
  73++06EC                  ENDIF
  74++06EC
  75++06EC                  IFDEF TIMEX80
  76++06EC ~                cp 'T'
  76++06EC ~              call z, TextMode.toggleColor
  77++06EC ~                cp 't'
  77++06EC ~              call z, TextMode.toggleColor
  78++06EC                  ENDIF
  79++06EC
  80++06EC C3 87 06         jp plainTextLoop
  81++06EF
  82++06EF
  83++06EF              textDown:
  84++06EF 2A 18 0C         ld hl,(page_offset)
  85++06F2 11 16 00         ld de,PER_PAGE
  86++06F5 19               add hl,de
  87++06F6 22 18 0C         ld (page_offset), hl
  88++06F9 CD 3F 06         call renderPlainTextScreen
  89++06FC C3 87 06         jp plainTextLoop
  90++06FF
  91++06FF              textUp:
  92++06FF 3A 18 0C         ld a, (page_offset)
  92++0702 FE 00          cp 0
  92++0704 20 0A          jr nz, .textUp2
  93++0706 3A 19 0C         ld a, (page_offset + 1)
  93++0709 FE 00          cp 0
  93++070B 20 03          jr nz, .textUp2
  94++070D C3 87 06         jp plainTextLoop
  95++0710
  96++0710              .textUp2:
  97++0710 2A 18 0C         ld hl,(page_offset)
  98++0713 11 16 00         ld de,PER_PAGE
  99++0716 ED 52            sbc hl,de
 100++0718 22 18 0C         ld (page_offset), hl
 101++071B CD 3F 06         call renderPlainTextScreen
 102++071E C3 87 06         jp plainTextLoop
 103++0721
# file closed: gopher/render/plaintext.asm
   9++0721
  10++0721 00           play_next       db  0
  11++0722              position        EQU historyBlock.position
  12++0722              cursor_position EQU position + 2
  13++0722              page_offset     EQU position + 4
  14++0722
  15++0722                  ENDMODULE
  16++0722
  17++0722                  include "dialogbox.asm"
# file opened: gopher/render/dialogbox.asm
   1++0722                  module DialogBox
   2++0722
   3++0722              inputBox:
   4++0722 AF               xor a
   4++0723 32 8A 07       ld (inputBuffer), a
   5++0726              .noclear
   6++0726 CD EB 07         call drawBox
   7++0729              .loop
   8++0729 11 05 0B         ld de, #0B05
   8++072C CD 3A 01       call TextMode.gotoXY
   9++072F 21 8A 07         ld hl, inputBuffer
   9++0732 CD 27 01       call TextMode.printZ
  10++0735 3E 04            ld a, MIME_INPUT
  10++0737 CD 37 01       call TextMode.putC
  10++073A 3E 20          ld a, ' '
  10++073C CD 37 01       call TextMode.putC
  11++073F              .checkkey
  12++073F CD 11 08         call Console.getC
  13++0742 FE 08            cp Console.BACKSPACE
  13++0744 28 16          jr z, .removeChar
  14++0746 FE 0D        	cp CR
  14++0748 C8             ret z
  15++0749 FE 20            cp SPACE
  15++074B 38 F2          jr c, .checkkey
  16++074D              .putC
  17++074D 5F               ld e, a
  18++074E AF               xor a
  18++074F 21 8A 07 01    ld hl, inputBuffer, bc, #ff
  18++0753 FF 00
  18++0755 ED B1          cpir
  19++0757 77               ld (hl), a
  19++0758 2B             dec hl
  19++0759 73             ld (hl), e
  20++075A 18 CD            jr .loop
  21++075C              .removeChar
  22++075C AF               xor a
  23++075D 21 8A 07 01      ld hl, inputBuffer, bc, #ff
  23++0761 FF 00
  23++0763 ED B1          cpir
  24++0765 E5               push hl
  25++0766 11 8B 07             ld de, inputBuffer + 1
  26++0769 B7                   or a
  26++076A ED 52          sbc hl, de
  27++076C 7C                   ld a, h
  27++076D B5             or l
  28++076E E1               pop hl
  29++076F 28 B8            jr z, .loop
  30++0771 AF               xor a
  31++0772 2B               dec hl
  31++0773 2B             dec hl
  31++0774 77             ld (hl), a
  32++0775 18 B2            jr .loop
  33++0777
  34++0777              	IFNDEF MSX
  35++0777              delayinput:
  36++0777 06 32           ld b, 50
  37++0779              .loop2
  38++0779 76               halt
  39++077A 10 FD            djnz .loop2
  40++077C C9               ret
  41++077D              namedownload
  42++077D                  IFDEF NEDOOS
  43++077D 2E 2E 5C 64  		db "..",92,"downloads",92
  43++0781 6F 77 6E 6C
  43++0785 6F 61 64 73
  43++0789 5C
  44++078A                  ENDIF
  45++078A                  ENDIF
  46++078A 00 00 00...  inputBuffer ds 80
  47++07DA
  48++07DA              msgBox:
  49++07DA CD E3 07         call msgNoWait
  50++07DD 06 96            ld b, 150
  51++07DF              .loop
  52++07DF 76               halt
  53++07E0 10 FD            djnz .loop
  54++07E2 C9               ret
  55++07E3
  56++07E3              msgNoWait:
  57++07E3 E5               push hl
  58++07E4 CD EB 07         call drawBox
  59++07E7 E1               pop hl
  60++07E8 C3 27 01         jp TextMode.printZ
  61++07EB
  62++07EB              drawBox:
  63++07EB 26 0A 3E 09      ld h, #0a, a, BORDER_TOP
  64++07EF CD 42 01         call TextMode.fillLine
  65++07F2 26 0B 3E 20      ld h, #0b, a, ' '
  66++07F6 CD 42 01         call TextMode.fillLine
  67++07F9 26 0C 3E 08      ld h, #0c, a, BORDER_BOTTOM
  68++07FD CD 42 01         call TextMode.fillLine
  69++0800 3E 0A            ld a, #0a
  70++0802 CD 6A 01         call TextMode.highlightLine
  71++0805 3E 0C            ld a, #0c
  72++0807 CD 6A 01         call TextMode.highlightLine
  73++080A 11 03 0B         ld de,#0B03
  74++080D CD 3A 01         call TextMode.gotoXY
  75++0810 C9               ret
  76++0811                  endmodule
  77++0811
# file closed: gopher/render/dialogbox.asm
# file closed: gopher/render/index.asm
  18+ 0811                  include "dos/index.asm"
# file opened: dos/index.asm
   1++0811              	IFDEF NEDOOS
   2++0811              	    include "nedoconsole.asm"
# file opened: dos/nedoconsole.asm
   1++0811
   2++0811              	    module Console
   3++0811              KEY_UP = nos.key_up
   4++0811              KEY_DN = nos.key_down
   5++0811              KEY_LT = nos.key_left
   6++0811              KEY_RT = nos.key_right
   7++0811              BACKSPACE = nos.key_backspace
   8++0811              getC:
   9++0811 CD 1D 08         call inkey
  10++0814              .loop
  11++0814 F5               push af
  12++0815 CD 1D 08         call inkey
  13++0818 C1               pop bc
  14++0819 B8               cp b
  15++081A 28 F8            jr z, .loop
  16++081C              .exit
  17++081C C9               ret
  18++081D
  19++081D              peekC:
  20++081D              inkey
  21++081D 0E F2        	ld c,nos.CMD_YIELD
  22++081F CD 05 00     	call nos.BDOS
  23++0822 CF           	rst 0x08
  24++0823 79           	ld a,c
  25++0824 FE 1B        	cp nos.key_esc
  26++0826 CA 00 00     	jp z,0x0000
  27++0829 C9           	ret
  28++082A              waitForKeyUp
  29++082A CD 1D 08     	call inkey
  30++082D B7           	or a
  31++082E C8           	ret z
  32++082F 18 F9        	jr waitForKeyUp
  33++0831                  ENDMODULE
  34++0831
# file closed: dos/nedoconsole.asm
   3++0831              		include "nedoos.asm"
# file opened: dos/nedoos.asm
   1++0831              	MODULE Dos
   2++0831
   3++0831              FMODE_READ = #01
   4++0831              FMODE_CREATE = #0E
   5++0831
   6++0831              ; HL - filename in ASCIIZ
   7++0831              loadBuffer:
   8++0831 06 01            ld b, Dos.FMODE_READ
   8++0833 CD 4E 08       call Dos.fopen
   9++0836 F5               push af
  10++0837 21 9B 4C 01          ld hl, outputBuffer, bc, #ffff - outputBuffer
  10++083B 64 B3
  10++083D CD 70 08       call Dos.fread
  11++0840 21 9B 4C             ld hl, outputBuffer
  11++0843 09             add hl, bc
  11++0844 AF             xor a
  11++0845 77             ld (hl), a
  11++0846 23             inc hl
  11++0847 77             ld (hl), a
  12++0848 F1               pop af
  13++0849 CD 69 08         call Dos.fclose
  14++084C C9               ret
  15++084D C9           	ret
  16++084E
  17++084E              ; Opens file on default drive
  18++084E              ; B - File mode
  19++084E              ; HL - File name
  20++084E              ; Returns:
  21++084E              ;  A - file stream id
  22++084E              fopen
  23++084E EB           	ex de,hl
  24++084F 0E 43        	ld c,nos.CMD_OPENHANDLE
  25++0851 78           	ld a,b
  26++0852 FE 0E        	cp FMODE_CREATE
  27++0854 20 02        	jr nz,.noncreate
  28++0856 0E 44        	ld c,nos.CMD_CREATEHANDLE
  29++0858              .noncreate
  30++0858 CD 05 00     	call nos.BDOS
  31++085B 78           	ld a,b
  32++085C C9           	ret
  33++085D
  34++085D              ; A - file stream id
  35++085D              ; BC - length
  36++085D              ; HL - buffer
  37++085D              ; Returns:
  38++085D              ;   BC - actually written bytes
  39++085D              fwrite
  40++085D EB           	ex de,hl
  41++085E 60           	ld h,b
  42++085F 69           	ld l,c
  43++0860 47           	ld b,a
  44++0861 0E 49        	ld c,nos.CMD_WRITEHANDLE
  45++0863 CD 05 00     	call nos.BDOS
  46++0866 44           	ld b,h
  47++0867 4D           	ld c,l
  48++0868 C9           	ret
  49++0869
  50++0869              ; A - file stream id
  51++0869              fclose
  52++0869 47           	ld b,a
  53++086A 0E 45        	ld c,nos.CMD_CLOSEHANDLE
  54++086C CD 05 00     	call nos.BDOS
  55++086F C9           	ret
  56++0870
  57++0870              ; A - file stream id
  58++0870              ; BC - length
  59++0870              ; HL - buffer
  60++0870              ; Returns
  61++0870              ;  BC - length(how much was actually read)
  62++0870              fread:
  63++0870 EB           	ex de,hl
  64++0871 60           	ld h,b
  65++0872 69           	ld l,c
  66++0873 47           	ld b,a
  67++0874 0E 48        	ld c,nos.CMD_READHANDLE
  68++0876 CD 05 00     	call nos.BDOS
  69++0879 44           	ld b,h
  70++087A 4D           	ld c,l
  71++087B C9           	ret
  72++087C                  ENDMODULE
  73++087C
# file closed: dos/nedoos.asm
   4++087C              	ENDIF
   5++087C
   6++087C              	IFDEF TRDOS
   7++087C ~                	include "console.asm"
   8++087C ~            		include "trdos.asm"
   9++087C              	ENDIF
  10++087C
  11++087C              	IFDEF ESXDOS
  12++087C ~               		include "console.asm"
  13++087C ~               		include "esxdos.asm"
  14++087C              	ENDIF
  15++087C
  16++087C              	IFDEF P3DOS
  17++087C ~               		include "console.asm"
  18++087C ~               		include "p3dos.asm"
  19++087C              	ENDIF
  20++087C
# file closed: dos/index.asm
  19+ 087C                  include "gopher/engine/history/index.asm"
# file opened: gopher/engine/history/index.asm
   1++087C                  include "controler.asm"
# file opened: gopher/engine/history/controler.asm
   1++087C                  module History
   2++087C              back:
   3++087C 3A CD 09         ld a, (depth)
   3++087F FE 01          cp 1
   3++0881 CA 93 08       jp z, load
   4++0884 21 1C 0C 11      ld hl, historyBlock + HistoryRecord, de, historyBlock, bc, (total - 1) * HistoryRecord
   4++0888 CE 09 01 38
   4++088C 09
   4++088D ED B0          ldir ; Move history up
   5++088F 21 CD 09         ld hl, depth
   5++0892 35             dec (hl)
   6++0893              ; Loads current resource
   7++0893              load:
   8++0893 21 B0 08         ld hl, .msg
   8++0896 CD E3 07       call DialogBox.msgNoWait
   9++0899 AF               xor a
   9++089A 21 9B 4C 11    ld hl, outputBuffer, de, outputBuffer + 1
   9++089E 9C 4C
  10++08A0              	IFDEF MSX
  11++08A0 ~                	ld bc, (ramtop)
  12++08A0 ~                	dec bc
  13++08A0              	ELSE
  14++08A0 01 63 B3         	ld bc, #ffff - outputBuffer - 1
  15++08A3              	ENDIF
  16++08A3
  17++08A3 77               ld (hl), a
  18++08A4 ED B0            ldir
  19++08A6
  20++08A6 3A CE 09         ld a, (historyBlock.isFile)
  20++08A9 A7             and a
  20++08AA C2 B7 19       jp nz, Fetcher.fetchFromFS
  21++08AD C3 6A 19         jp Fetcher.fetchFromNet
  22++08B0
  23++08B0 20 20 20 20  .msg db "    Loading resource! Please wait! It will be here soon!", 0
  23++08B4 4C 6F 61 64
  23++08B8 69 6E 67 20
  23++08BC 72 65 73 6F
  23++08C0 75 72 63 65
  23++08C4 21 20 50 6C
  23++08C8 65 61 73 65
  23++08CC 20 77 61 69
  23++08D0 74 21 20 49
  23++08D4 74 20 77 69
  23++08D8 6C 6C 20 62
  23++08DC 65 20 68 65
  23++08E0 72 65 20 73
  23++08E4 6F 6F 6E 21
  23++08E8 00
  24++08E9
  25++08E9              home:
  26++08E9 21 AB 09         ld hl, homePage
  27++08EC              ; HL - gopher row
  28++08EC              navigate:
  29++08EC 54 5D            ld de, hl
  30++08EE CD E3 17         call UrlEncoder.isValidGopherRow
  31++08F1 30 A0            jr nc, load ; Not valid - reload last
  32++08F3 62 6B            ld hl, de
  33++08F5 E5               push hl
  34++08F6
  35++08F6 E5               push hl
  36++08F7 21 53 15 11      ld hl, HistoryEnd - HistoryRecord, de, HistoryEnd, bc,  HistoryRecord * total
  36++08FB A1 17 01 86
  36++08FF 0B
  36++0900 ED B8          lddr
  37++0902
  38++0902 ED 5B 14 0C      ld de, (Render.position), (historyBlock.position + HistoryRecord), de
  38++0906 ED 53 62 0E
  39++090A                  ; Clean up struct
  40++090A AF               xor a
  40++090B 21 CE 09 11    ld hl, historyBlock, de, historyBlock + 1, bc, historyBlockSize - 1, (hl), a
  40++090F CF 09 01 4D
  40++0913 02 77
  40++0915 ED B0          ldir
  41++0917 E1               pop hl
  42++0918
  43++0918                  ; Fill record
  44++0918 54 5D            ld de, hl
  45++091A CD A2 17         call UrlEncoder.isFile
  46++091D EB               ex hl, de
  47++091E 11 CE 09         ld de, historyBlock
  48++0921 12               ld (de), a
  48++0922 13             inc de
  49++0923 7E               ld a, (hl)
  49++0924 E5 D5          push hl, de
  49++0926 CD 66 02       call Render.getIcon
  49++0929 D1 E1          pop de, hl
  50++092B 12               ld (de), a
  50++092C 13             inc de
  51++092D 3E 09            ld a, 9
  52++092F
  53++092F                  IFDEF MSX
  54++092F ~                	ld bc, #ff
  55++092F                  ELSE
  56++092F 01 FF 0F         	ld bc, #fff
  57++0932                  ENDIF
  58++0932
  59++0932 ED B1            cpir
  60++0934              .locatorCopy
  61++0934 7E               ld a, (hl)
  61++0935 FE 09          cp 9
  61++0937 28 05          jr z, 1f
  62++0939 12               ld (de), a
  62++093A 23 13          inc hl, de
  63++093C 18 F6            jr .locatorCopy
  64++093E              1
  65++093E 23               inc hl
  65++093F AF             xor a
  65++0940 12             ld (de), a
  66++0941 11 CF 0A         ld de, historyBlock.host
  67++0944              .hostCopy
  68++0944 7E               ld a, (hl)
  68++0945 FE 09          cp 9
  68++0947 28 05          jr z, 1f
  69++0949 12               ld (de), a
  69++094A 23 13          inc hl, de
  70++094C 18 F6            jr .hostCopy
  71++094E              1
  72++094E 23               inc hl
  72++094F AF             xor a
  72++0950 12             ld (de), a
  73++0951 11 0F 0B         ld de, historyBlock.port
  74++0954              .portCopy
  75++0954 7E               ld a, (hl)
  76++0955 FE 09            cp 9
  76++0957 28 11          jr z, 1f
  77++0959 FE 0D            cp 13
  77++095B 28 0D          jr z, 1f
  78++095D FE 0A            cp 10
  78++095F 28 09          jr z, 1f
  79++0961 FE 00            cp 0
  79++0963 28 05          jr z, 1f
  80++0965 12               ld (de), a
  80++0966 23 13          inc hl, de
  81++0968 18 EA            jr .portCopy
  82++096A AF           1   xor a
  82++096B 12             ld (de), a
  83++096C 21 8A 07 11      ld hl, DialogBox.inputBuffer, de, historyBlock.search, bc, #ff
  83++0970 15 0B 01 FF
  83++0974 00
  83++0975 ED B0          ldir
  84++0977 11 00 00 ED      ld de, 0, (historyBlock.position), de
  84++097B 53 14 0C
  85++097E E1               pop hl
  86++097F 3A CD 09         ld a, (depth)
  86++0982 FE 05          cp total
  86++0984 30 04          jr nc, 1f
  87++0986 3C               inc a
  87++0987 32 CD 09       ld (depth), a
  88++098A              1
  89++098A 3A CF 09         ld a,(historyBlock.mediaType)
  89++098D FE 01          cp MIME_DOWNLOAD
  89++098F CA BD 1A       jp z, Gopher.download
  90++0992
  91++0992                  ifdef GS
  92++0992 3A CF 09         ld a,(historyBlock.mediaType)
  93++0995 FE 07            cp MIME_MOD
  94++0997 C2 93 08         jp nz,load
  95++099A 3A 77 20         ld a,(GeneralSound.GSdownType)
  96++099D EE 01            xor 1
  97++099F CA A5 09         jp z, downMod2file
  98++09A2
  99++09A2              downMod2GS
 100++09A2 C3 5C 1A         jp Gopher.loadMod
 101++09A5              downMod2file
 102++09A5 C3 BD 1A         jp Gopher.download
 103++09A8                  else
 104++09A8 ~                ld a,(historyBlock.mediaType)
 104++09A8 ~              cp MIME_MOD
 104++09A8 ~              jp z, Gopher.download
 105++09A8                  endif
 106++09A8
 107++09A8 C3 93 08         jp load
 108++09AB
 109++09AB              homePage:
 110++09AB              	IFDEF MSX
 111++09AB ~                	db "1Home", TAB, "index.gph"
 112++09AB ~                	db TAB, "file", TAB, "70", CR, LF, 0
 113++09AB                  ELSE
 114++09AB 31 48 6F 6D      	db "1Home", TAB, "browser/index.gph"
 114++09AF 65 09 62 72
 114++09B3 6F 77 73 65
 114++09B7 72 2F 69 6E
 114++09BB 64 65 78 2E
 114++09BF 67 70 68
 115++09C2 09 66 69 6C      	db TAB, "file", TAB, "70", CR, LF, 0
 115++09C6 65 09 37 30
 115++09CA 0D 0A 00
 116++09CD                  ENDIF
 117++09CD                  endmodule
# file closed: gopher/engine/history/controler.asm
   2++09CD                  include "model.asm"
# file opened: gopher/engine/history/model.asm
   1++09CD              total   equ 5
   2++09CD 00           depth   db 0
   3++09CE
   4++09CE              historyBlock:
   5++09CE 00           .isFile    db  0
   6++09CF 00           .mediaType db  0
   7++09D0 00 00 00...  .locator   ds  #ff
   8++0ACF 00 00 00...  .host      ds  64
   9++0B0F 00 00 00...  .port      ds  6
  10++0B15 00 00 00...  .search    ds  #ff
  11++0C14 00 00        .position  dw  #0000    ;position
  12++0C16
  13++0C16 00 00 00 00      db 0,0,0,0,0,0  ;cursor_position page_offset
  13++0C1A 00 00
  14++0C1C
  15++0C1C              historyBlockSize = $ - historyBlock
  16++0C1C
  17++0C1C              HistoryRecord EQU $ - historyBlock
  18++0C1C                  dup total
  19++0C1C 00 00 00... >    ds HistoryRecord
  19++0E6A 00 00 00... >    ds HistoryRecord
  19++10B8 00 00 00... >    ds HistoryRecord
  19++1306 00 00 00... >    ds HistoryRecord
  19++1554 00 00 00... >    ds HistoryRecord
  20++17A2                  edup
  21++17A2              HistoryEnd equ $ - 1
  22++17A2
# file closed: gopher/engine/history/model.asm
# file closed: gopher/engine/history/index.asm
  20+ 17A2                  include "gopher/engine/urlencoder.asm"
# file opened: gopher/engine/urlencoder.asm
   1++17A2                  MODULE UrlEncoder
   2++17A2              ; HL - pointer to line in gopher page
   3++17A2              ; C - flag set when it's file
   4++17A2              isFile:
   5++17A2              .findServerLoop
   6++17A2 7E               ld a, (hl)
   6++17A3 A7             and a
   6++17A4 28 3B          jr z, .notFile
   6++17A6 23             inc hl
   7++17A7 FE 0D            cp 13
   7++17A9 28 36          jr z, .notFile
   8++17AB FE 09            cp 9
   8++17AD 28 02          jr z, .skipPath
   9++17AF 18 F1            jr .findServerLoop
  10++17B1              .skipPath
  11++17B1 7E               ld a, (hl)
  11++17B2 A7             and a
  11++17B3 28 2C          jr z, .notFile
  11++17B5 23             inc hl
  12++17B6 FE 0D            cp 13
  12++17B8 28 27          jr z, .notFile
  13++17BA FE 09            cp 9
  13++17BC 28 02          jr z, .compareServer
  14++17BE 18 F1            jr .skipPath
  15++17C0              .compareServer
  16++17C0 7E               ld a, (hl)
  16++17C1 FE 66          cp "f"
  16++17C3 20 1C          jr nz, .notFile
  16++17C5 23             inc hl
  17++17C6 7E               ld a, (hl)
  17++17C7 FE 69          cp "i"
  17++17C9 20 16          jr nz, .notFile
  17++17CB 23             inc hl
  18++17CC 7E               ld a, (hl)
  18++17CD FE 6C          cp "l"
  18++17CF 20 10          jr nz, .notFile
  18++17D1 23             inc hl
  19++17D2 7E               ld a, (hl)
  19++17D3 FE 65          cp "e"
  19++17D5 20 0A          jr nz, .notFile
  19++17D7 23             inc hl
  20++17D8 7E               ld a, (hl)
  20++17D9 FE 09          cp 9
  20++17DB 20 04          jr nz, .notFile
  20++17DD 23             inc hl
  21++17DE 3E 01            ld a, 1
  22++17E0 C9               ret
  23++17E1              .notFile
  24++17E1 AF               xor a
  25++17E2 C9               ret
  26++17E3
  27++17E3              ; Is enough fields to encode
  28++17E3              ; HL - pointer to line in gopher page
  29++17E3              ; C - flag set when there is enough fields
  30++17E3              isValidGopherRow:
  31++17E3 7E               ld a, (hl)
  31++17E4 A7             and a
  31++17E5 28 FA          jr z, isFile.notFile
  31++17E7 23             inc hl
  32++17E8 FE 0D            cp 13
  32++17EA 28 F5          jr z, isFile.notFile
  33++17EC FE 09            cp 9
  33++17EE 28 02          jr z, .skipPath
  34++17F0 18 F1            jr isValidGopherRow
  35++17F2              .skipPath
  36++17F2 7E               ld a, (hl)
  36++17F3 A7             and a
  36++17F4 28 EB          jr z, isFile.notFile
  36++17F6 23             inc hl
  37++17F7 FE 0D            cp 13
  37++17F9 28 E6          jr z, isFile.notFile
  38++17FB FE 09            cp 9
  38++17FD 28 02          jr z, .skipHost
  39++17FF 18 F1            jr .skipPath
  40++1801              .skipHost
  41++1801 7E               ld a, (hl)
  41++1802 A7             and a
  41++1803 28 DC          jr z, isFile.notFile
  41++1805 23             inc hl
  42++1806 FE 0D            cp 13
  42++1808 28 D7          jr z, isFile.notFile
  43++180A FE 09            cp 9
  43++180C 28 02           jr z, .isValid
  44++180E 18 F1            jr .skipHost
  45++1810              .isValid:
  46++1810 37               scf
  47++1811 C9               ret
  48++1812
  49++1812              extractPath:
  50++1812 21 D0 09 11      ld hl, historyBlock.locator, de, nameBuffer, bc, #ff
  50++1816 2A 18 01 FF
  50++181A 00
  50++181B ED B0          ldir
  51++181D C9               ret
  52++181E
  53++181E              extractHostName:
  54++181E 21 CF 0A 11      ld hl, historyBlock.host, de, hostName, bc, 64
  54++1822 2A 19 01 40
  54++1826 00
  54++1827 ED B0          ldir
  55++1829 C9               ret
  56++182A
  57++182A                  ENDMODULE
  58++182A
  59++182A 00 00 00...  nameBuffer ds #ff, 0
  60++1929
  61++1929 00                    db 0
  62++192A 00 00 00...  hostName ds 64
# file closed: gopher/engine/urlencoder.asm
  21+ 196A                  include "gopher/engine/fetcher.asm"
# file opened: gopher/engine/fetcher.asm
   1++196A                  MODULE Fetcher
   2++196A
   3++196A              fetchFromNet:
   4++196A
   5++196A              	IFDEF MSX
   6++196A ~                	call Gopher.makeRequest
   6++196A ~              jr nz, .error
   7++196A                  ELSE
   8++196A CD 31 1A         	call Gopher.makeRequest
   8++196D 38 06          jr c, .error
   9++196F                  ENDIF
  10++196F
  11++196F CD 49 1A         call Gopher.loadBuffer
  12++1972 C3 C3 19         jp MediaProcessor.processResource
  13++1975              .error
  14++1975 21 7E 19         ld hl, .err
  14++1978 CD DA 07       call DialogBox.msgBox
  15++197B C3 7C 08         jp History.back
  16++197E
  17++197E 44 6F 63 75  .err db "Document fetch error! Check your connection or hostname!", 0
  17++1982 6D 65 6E 74
  17++1986 20 66 65 74
  17++198A 63 68 20 65
  17++198E 72 72 6F 72
  17++1992 21 20 43 68
  17++1996 65 63 6B 20
  17++199A 79 6F 75 72
  17++199E 20 63 6F 6E
  17++19A2 6E 65 63 74
  17++19A6 69 6F 6E 20
  17++19AA 6F 72 20 68
  17++19AE 6F 73 74 6E
  17++19B2 61 6D 65 21
  17++19B6 00
  18++19B7
  19++19B7
  20++19B7              fetchFromFS:
  21++19B7 CD 12 18         call UrlEncoder.extractPath
  22++19BA              loadFile
  23++19BA              	IFDEF MSX
  24++19BA ~                ld de, nameBuffer, a, FMODE_NO_WRITE
  25++19BA ~                call Dos.fopen
  26++19BA ~                ld a, b, (.fp), a
  27++19BA ~                ld de, outputBuffer, hl, (ramtop)
  28++19BA ~                call Dos.fread
  29++19BA ~                ld a, (.fp), b, a
  30++19BA ~                call Dos.fclose
  31++19BA ~                jp MediaProcessor.processResource
  32++19BA ~            .fp db 0
  33++19BA              	ELSE
  34++19BA 21 2A 18         ld hl, nameBuffer
  35++19BD CD 31 08         call Dos.loadBuffer
  36++19C0 C3 C3 19         jp MediaProcessor.processResource
  37++19C3              	ENDIF
  38++19C3                  ENDMODULE
# file closed: gopher/engine/fetcher.asm
  22+ 19C3                  include "gopher/engine/media-processor.asm"
# file opened: gopher/engine/media-processor.asm
   1++19C3                  MODULE MediaProcessor
   2++19C3              processResource:
   3++19C3 CD 1E 18         call UrlEncoder.extractHostName
   4++19C6 3A CF 09         ld a, (historyBlock.mediaType)
   5++19C9 FE 05            cp MIME_MUSIC
   5++19CB 28 17          jr z, processPT
   6++19CD FE 02            cp MIME_LINK
   6++19CF 28 1F          jr z, processPage
   7++19D1 FE 04            cp MIME_INPUT
   7++19D3 28 1B          jr z, processPage
   8++19D5 FE 06            cp MIME_IMAGE
   8++19D7 CA 1E 21       jp z, ScreenViewer.display
   9++19DA              	ifdef GS
  10++19DA FE 07            cp MIME_MOD
  10++19DC 28 0C          jr z, processMOD
  11++19DE              	endif
  12++19DE              ; Fallback to plain text
  13++19DE              processText:
  14++19DE CD 3F 06         call Render.renderPlainTextScreen
  15++19E1 C3 87 06         jp   Render.plainTextLoop
  16++19E4
  17++19E4              processPT:
  18++19E4 CD 4E 21         call VortexProcessor.play
  19++19E7 C3 7C 08         jp History.back
  20++19EA
  21++19EA                  ifdef GS
  22++19EA              processMOD:
  23++19EA CD F7 4B         call ModProcessor.play
  24++19ED C3 7C 08         jp History.back
  25++19F0              	endif
  26++19F0
  27++19F0              processPage:
  28++19F0 3A 21 07         ld a, (Render.play_next)
  28++19F3 A7             and a
  28++19F4 20 06          jr nz, .playNext
  29++19F6 CD 98 04         call Render.renderGopherScreen
  30++19F9 C3 E7 04         jp   Render.workLoop
  31++19FC              .playNext
  32++19FC 21 16 0C         ld hl, Render.cursor_position
  33++19FF 34               inc (hl)
  34++1A00 CD 98 04         call Render.renderGopherScreen
  35++1A03 C3 D1 04         jp Render.checkBorder
  36++1A06                  ENDMODULE
# file closed: gopher/engine/media-processor.asm
  23+ 1A06                  include "gopher/gopher.asm"
# file opened: gopher/gopher.asm
   1++1A06                  module Gopher
   2++1A06              ; HL - gopher row
   3++1A06              extractRequest:
   4++1A06 21 D0 09         ld hl, historyBlock.locator
   5++1A09 11 B0 1B         ld de, requestbuffer
   6++1A0C              .loop
   7++1A0C 7E               ld a, (hl)
   8++1A0D 12               ld (de), a
   9++1A0E 23               inc hl
  10++1A0F 13               inc de
  11++1A10 FE 00            cp 0
  12++1A12 28 02            jr z, .search
  13++1A14 18 F6            jr .loop
  14++1A16              .search
  15++1A16 1B               dec de
  16++1A17 3A CF 09         ld a, (historyBlock.mediaType)
  17++1A1A FE 04            cp MIME_INPUT
  18++1A1C 20 10            jr nz, .exit
  19++1A1E 21 15 0B         ld hl, historyBlock.search
  20++1A21 3E 09            ld a, TAB
  21++1A23 12               ld (de), a
  22++1A24 13               inc de
  23++1A25              .searchCopy
  24++1A25 7E               ld a, (hl)
  25++1A26 A7               and a
  25++1A27 28 05          jr z, .exit
  26++1A29 12               ld (de), a
  27++1A2A 23               inc hl
  27++1A2B 13             inc de
  28++1A2C 18 F7            jr .searchCopy
  29++1A2E              .exit
  30++1A2E AF               xor a
  31++1A2F 12               ld (de), a
  32++1A30 C9               ret
  33++1A31
  34++1A31
  35++1A31              makeRequest:
  36++1A31 CD 06 1A         call extractRequest
  37++1A34
  38++1A34 21 CF 0A         ld hl, historyBlock.host
  39++1A37 11 0F 0B         ld de, historyBlock.port
  40++1A3A CD 6A 1E         call Wifi.openTCP
  41++1A3D D8               ret c
  42++1A3E
  43++1A3E 21 B0 1B         ld hl, requestbuffer
  44++1A41 CD C1 1D         call Wifi.tcpSendZ
  45++1A44 AF               xor a
  45++1A45 32 AC 1E       ld (Wifi.closed), a
  46++1A48 C9               ret
  47++1A49
  48++1A49
  49++1A49              loadBuffer:
  50++1A49 21 9B 4C         ld hl, outputBuffer
  51++1A4C 22 AF 1E         ld (Wifi.buffer_pointer), hl
  52++1A4F              .loop
  53++1A4F CD E3 1D         call Wifi.getPacket
  54++1A52 3A AC 1E         ld a, (Wifi.closed)
  54++1A55 A7             and a
  54++1A56 C0             ret nz
  55++1A57 CD 69 1E         call Wifi.continue
  56++1A5A 18 F3            jr .loop
  57++1A5C
  58++1A5C                  ifdef GS
  59++1A5C              loadMod:
  60++1A5C AF               xor a
  60++1A5D CD 0C 20       call GeneralSound.init
  61++1A60 21 9D 1A         ld hl, .progress
  61++1A63 CD E3 07       call DialogBox.msgNoWait
  62++1A66 CD 31 1A         call makeRequest
  62++1A69 DA 75 19       jp c, Fetcher.fetchFromNet.error
  63++1A6C CD 19 20         call GeneralSound.loadModule
  64++1A6F              .loop
  65++1A6F 21 9B 4C 22      ld hl, outputBuffer, (Wifi.buffer_pointer), hl
  65++1A73 AF 1E
  66++1A75 CD E3 1D         call Wifi.getPacket
  67++1A78 3A AC 1E         ld a, (Wifi.closed)
  67++1A7B A7             and a
  67++1A7C 20 19          jr nz, .exit
  68++1A7E 21 9B 4C ED      ld hl, outputBuffer, bc, (Wifi.bytes_avail)
  68++1A82 4B AD 1E
  69++1A85              .loadLoop
  70++1A85 78               ld a, b
  70++1A86 B1             or c
  70++1A87 A7             and a
  70++1A88 28 08          jr z, .nextFrame
  71++1A8A 7E               ld a, (hl)
  71++1A8B CD 2C 20       call GeneralSound.sendByte
  72++1A8E 0B               dec bc
  73++1A8F 23               inc hl
  74++1A90 18 F3            jr .loadLoop
  75++1A92              .nextFrame
  76++1A92 CD 90 1B         call pulsing
  77++1A95                  ;call Wifi.continue
  78++1A95 18 D8            jr .loop
  79++1A97              .exit
  80++1A97 CD 34 20         call GeneralSound.finishLoadingModule
  81++1A9A                  ;jp History.back
  82++1A9A C3 C3 19     	jp MediaProcessor.processResource
  83++1A9D 4D 4F 44 20  .progress db "MOD downloading directly to GS!", 0
  83++1AA1 64 6F 77 6E
  83++1AA5 6C 6F 61 64
  83++1AA9 69 6E 67 20
  83++1AAD 64 69 72 65
  83++1AB1 63 74 6C 79
  83++1AB5 20 74 6F 20
  83++1AB9 47 53 21 00
  84++1ABD                  endif
  85++1ABD
  86++1ABD              download:
  87++1ABD 11 D0 09         ld de, historyBlock.locator
  88++1AC0 62 6B            ld hl, de
  89++1AC2              .findFileName
  90++1AC2 1A               ld a, (de)
  90++1AC3 13             inc de
  91++1AC4 FE 2F            cp '/'
  91++1AC6 20 02          jr nz, .skip
  92++1AC8 62 6B            ld hl, de
  93++1ACA              .skip
  94++1ACA A7               and a
  94++1ACB 20 F5          jr nz, .findFileName
  95++1ACD              .copy
  96++1ACD                  ;; HL - filename pointer
  97++1ACD 11 8A 07         ld de, DialogBox.inputBuffer
  98++1AD0              .copyFileName
  99++1AD0 7E               ld a, (hl)
  99++1AD1 A7             and a
  99++1AD2 28 05          jr z, .finishCopy
 100++1AD4
 101++1AD4 12               ld (de), a
 101++1AD5 23 13          inc hl, de
 102++1AD7 18 F7            jr .copyFileName
 103++1AD9              .finishCopy
 104++1AD9 12               ld (de), a
 105++1ADA CD 26 07         call DialogBox.inputBox.noclear
 106++1ADD 3A 7D 07         ld a, (DialogBox.namedownload)
 106++1AE0 A7             and a
 106++1AE1 CA 7C 08       jp z, History.back
 107++1AE4
 108++1AE4 CD 31 1A         call makeRequest
 108++1AE7 DA 75 19       jp c, Fetcher.fetchFromNet.error
 109++1AEA
 110++1AEA 06 0E 21 7D      ld b, Dos.FMODE_CREATE, hl, DialogBox.namedownload
 110++1AEE 07
 111++1AEF CD 4E 08         call Dos.fopen
 112++1AF2 32 8D 1B         ld (.fp), a
 113++1AF5
 114++1AF5 21 68 1B         ld hl, .progress
 114++1AF8 CD E3 07       call DialogBox.msgNoWait
 115++1AFB              .loop
 116++1AFB 21 9B 4C 22      ld hl, outputBuffer, (Wifi.buffer_pointer), hl
 116++1AFF AF 1E
 117++1B01 CD E3 1D         call Wifi.getPacket
 118++1B04 3A AC 1E         ld a, (Wifi.closed)
 118++1B07 A7             and a
 118++1B08 20 0F          jr nz, .exit
 119++1B0A
 120++1B0A 3A 8D 1B 21      ld a, (.fp), hl, outputBuffer, bc, (Wifi.bytes_avail)
 120++1B0E 9B 4C ED 4B
 120++1B12 AD 1E
 121++1B14                  ;call Dos.fwrite
 122++1B14 CD 90 1B         call pulsing
 123++1B17                  ;call Wifi.continue
 124++1B17 18 E2            jr .loop
 125++1B19              .exit
 126++1B19 3A 8D 1B         ld a, (.fp)
 127++1B1C CD 69 08         call Dos.fclose
 128++1B1F C3 7C 08         jp History.back
 129++1B22              .error
 130++1B22 3A 8D 1B         ld a, (.fp)
 131++1B25 CD 69 08         call Dos.fclose
 132++1B28 21 31 1B         ld hl, .err
 133++1B2B CD DA 07         call DialogBox.msgBox
 134++1B2E C3 7C 08         jp History.back
 135++1B31
 136++1B31 4F 70 65 72  .err db "Operation failed! Sorry! Check filename or disk space!",0
 136++1B35 61 74 69 6F
 136++1B39 6E 20 66 61
 136++1B3D 69 6C 65 64
 136++1B41 21 20 53 6F
 136++1B45 72 72 79 21
 136++1B49 20 43 68 65
 136++1B4D 63 6B 20 66
 136++1B51 69 6C 65 6E
 136++1B55 61 6D 65 20
 136++1B59 6F 72 20 64
 136++1B5D 69 73 6B 20
 136++1B61 73 70 61 63
 136++1B65 65 21 00
 137++1B68 44 6F 77 6E  .progress db "Downloading in progress! Wait a bit!", 0
 137++1B6C 6C 6F 61 64
 137++1B70 69 6E 67 20
 137++1B74 69 6E 20 70
 137++1B78 72 6F 67 72
 137++1B7C 65 73 73 21
 137++1B80 20 57 61 69
 137++1B84 74 20 61 20
 137++1B88 62 69 74 21
 137++1B8C 00
 138++1B8D 00           .fp db 0
 139++1B8E 00           socket db 0
 140++1B8F 20           pulsator db " "
 141++1B90              pulsing
 142++1B90 11 01 0B         ld de, #0B01
 142++1B93 CD 3A 01       call TextMode.gotoXY
 143++1B96 3A 8F 1B         ld a, (pulsator)
 144++1B99 FE 2A            cp '*'
 145++1B9B CA A7 1B         jp z, printasterix
 146++1B9E CD 37 01         call TextMode.putC
 147++1BA1 3E 2A            ld a, '*'
 148++1BA3 32 8F 1B         ld (pulsator),a
 149++1BA6 C9               ret
 150++1BA7              printasterix
 151++1BA7 CD 37 01         call TextMode.putC
 152++1BAA 3E 20            ld a, ' '
 153++1BAC 32 8F 1B         ld (pulsator),a
 154++1BAF C9               ret
 155++1BB0
 156++1BB0 00 00 00...  requestbuffer ds #1ff
 157++1DAF                  endmodule
 158++1DAF
# file closed: gopher/gopher.asm
  24+ 1DAF                  include "drivers/index.asm"
# file opened: drivers/index.asm
   1++1DAF                  IFDEF UNO
   2++1DAF ~                	include "uno-uart.asm"
   3++1DAF                  ENDIF
   4++1DAF
   5++1DAF                  IFDEF UNOUART
   6++1DAF ~                	include "uno-uart.asm"
   7++1DAF                  ENDIF
   8++1DAF
   9++1DAF                  IFDEF MB03
  10++1DAF ~                	include "mb03-uart.asm"
  11++1DAF                  ENDIF
  12++1DAF
  13++1DAF                  IFDEF AY
  14++1DAF ~                	include "ay-uart.asm"
  15++1DAF                  ENDIF
  16++1DAF
  17++1DAF                  IFDEF ZW
  18++1DAF ~                	include "zx-wifi.asm"
  19++1DAF                  ENDIF
  20++1DAF
  21++1DAF              	include "utils.asm"
# file opened: drivers/utils.asm
   1++1DAF              ;;; Macroses!!!!
   2++1DAF                  MACRO EspSend Text
   3++1DAF ~                ld hl, .txtB
   4++1DAF ~                ld e, (.txtE - .txtB)
   5++1DAF ~                call espSend
   6++1DAF ~                jr .txtE
   7++1DAF ~            .txtB
   8++1DAF ~                db Text
   9++1DAF ~            .txtE
  10++1DAF                  ENDM
  11++1DAF
  12++1DAF                  MACRO EspCmd Text
  13++1DAF ~                ld hl, .txtB
  14++1DAF ~                ld e, (.txtE - .txtB)
  15++1DAF ~                call espSend
  16++1DAF ~                jr .txtE
  17++1DAF ~            .txtB
  18++1DAF ~                db Text
  19++1DAF ~                db 13, 10
  20++1DAF ~            .txtE
  21++1DAF                  ENDM
  22++1DAF
  23++1DAF                  MACRO EspCmdOkErr text
  24++1DAF ~                EspCmd text
  25++1DAF ~                call checkOkErr
  26++1DAF                  ENDM
  27++1DAF
  28++1DAF              ; IN DE - string pointer
  29++1DAF              ; OUT HL - string len
  30++1DAF              strLen:
  31++1DAF 21 00 00         ld hl, 0
  32++1DB2              .loop
  33++1DB2 1A               ld a, (de)
  33++1DB3 A7             and a
  33++1DB4 C8             ret z
  34++1DB5 13 23            inc de, hl
  35++1DB7 18 F9            jr .loop
# file closed: drivers/utils.asm
  22++1DB9
  23++1DB9              	IFDEF NEDOOSATM
  24++1DB9 ~            		include "atm-uart.asm"
  25++1DB9              	ENDIF
  26++1DB9
  27++1DB9              	IFDEF NEDOOSEVO
  28++1DB9 ~            		include "evo-uart.asm"
  29++1DB9                  ENDIF
  30++1DB9
  31++1DB9              	IFDEF NEDONET
  32++1DB9              		include "nedowifi.asm"
# file opened: drivers/nedowifi.asm
   1++1DB9                  MODULE Wifi
   2++1DB9              	macro OS_NETSOCKET ;D=address family (2=inet, 23=inet6), E=socket type (0x01 tcp/ip, 0x02 icmp, 0x03 udp/ip) ;out: L=SOCKET (if L < 0 then A=error)
   3++1DB9 ~            		ld l,0x01
   4++1DB9 ~            		ld c,nos.CMD_WIZNETOPEN
   5++1DB9 ~            		call nos.BDOS
   6++1DB9              	endm
   7++1DB9              	macro OS_NETCONNECT;A=SOCKET, DE=sockaddr ptr {unsigned char sin_family /*net type*/; unsigned short sin_port; struct in_addr sin_addr /*4 bytes IP*/; char sin_zero[8];}; out: if HL < 0 then A=error
   8++1DB9 ~            		ld l,0x03
   9++1DB9 ~            		ld c,nos.CMD_WIZNETOPEN
  10++1DB9 ~            		ex af,af'
  11++1DB9 ~            		call nos.BDOS
  12++1DB9              	endm
  13++1DB9              	macro OS_WIZNETWRITE;A=SOCKET, de=buffer_ptr, HL=sizeof(buffer) ; out: HL=count if HL < 0 then A=error
  14++1DB9 ~            		ld c,nos.CMD_WIZNETWRITE
  15++1DB9 ~            		ex af,af'
  16++1DB9 ~            		call nos.BDOS
  17++1DB9              	endm
  18++1DB9              	macro OS_WIZNETREAD;A=SOCKET, de=buffer_ptr, HL=sizeof(buffer) ; out: HL=count if HL < 0 then A=error
  19++1DB9 ~            		ld c,nos.CMD_WIZNETREAD
  20++1DB9 ~            		ex af,af'
  21++1DB9 ~            		call nos.BDOS
  22++1DB9              	endm
  23++1DB9              	macro OS_NETSHUTDOWN;A=SOCKET ; out: if HL < 0 then A=error
  24++1DB9 ~            		ld l,0x02
  25++1DB9 ~            		ld c,nos.CMD_WIZNETOPEN
  26++1DB9 ~            		ex af,af'
  27++1DB9 ~            		call nos.BDOS
  28++1DB9              	endm
  29++1DB9
  30++1DB9              	macro OS_GETDNS;DE= ptr to DNS buffer(4 bytes)
  31++1DB9 ~            		ld l, 0x08
  32++1DB9 ~            		ld c, nos.CMD_WIZNETOPEN
  33++1DB9 ~            		ex af,af' ;'
  34++1DB9 ~            		call nos.BDOS ;c=CMD
  35++1DB9              	endm
  36++1DB9
  37++1DB9              	macro OS_YIELD
  38++1DB9 ~            		push bc
  39++1DB9 ~                	ld c,nos.CMD_YIELD
  40++1DB9 ~                    call nos.BDOS
  41++1DB9 ~                    pop bc
  42++1DB9              	endm
  43++1DB9
  44++1DB9              init:
  45++1DB9              ; Nothing to init there
  46++1DB9 C9           	ret
  47++1DBA
  48++1DBA              host_ia:
  49++1DBA              .curport=$+1
  50++1DBA 00 00 50 08  	defb 0,0,80,8,8,8,8
  50++1DBE 08 08 08
  51++1DC1
  52++1DC1              tcpSendZ
  53++1DC1 E5           	push hl
  54++1DC2 D1           	pop de
  55++1DC3 D5           	push de
  56++1DC4 CD AF 1D     	call strLen
  57++1DC7 D1           	pop de
  58++1DC8 3A CE 1F     	ld a,(sock_fd)
  59++1DCB              	OS_WIZNETWRITE
  59++1DCB 0E DE       >		ld c,nos.CMD_WIZNETWRITE
  59++1DCD 08          >		ex af,af'
  59++1DCE CD 05 00    >		call nos.BDOS
  60++1DD1 21 02 00     	ld hl,2
  61++1DD4 11 E1 1D     	ld de,.rn
  62++1DD7 3A CE 1F     	ld a,(sock_fd)
  63++1DDA              	OS_WIZNETWRITE
  63++1DDA 0E DE       >		ld c,nos.CMD_WIZNETWRITE
  63++1DDC 08          >		ex af,af'
  63++1DDD CD 05 00    >		call nos.BDOS
  64++1DE0 C9           	ret
  65++1DE1 0D 0A        .rn defb "\r\n"
  66++1DE3
  67++1DE3              getPacket
  68++1DE3              ;if A = op8 then the C flag is reset, and Z is set.
  69++1DE3              ;If A < op8, C is set and Z is reset.
  70++1DE3              ;If A > op8 then both C and Z are reset
  71++1DE3 ED 5B AF 1E      ld de,(buffer_pointer)
  72++1DE7 3E FB        	ld a,0xfb
  73++1DE9 BA           	cp d
  74++1DEA D2 20 1E     	jp nc, letsgo
  75++1DED 21 FD 1D     	ld hl, .errMem
  75++1DF0 CD DA 07       call DialogBox.msgBox
  76++1DF3 3E 01        	ld a,1
  77++1DF5 32 AC 1E     	ld (closed),a
  78++1DF8 AF           	xor a
  79++1DF9 32 AD 1E     	ld (bytes_avail),a
  80++1DFC C9           	ret
  81++1DFD              .errMem:
  82++1DFD 4F 75 74 20  	db "Out of memory. Page loading error.",0
  82++1E01 6F 66 20 6D
  82++1E05 65 6D 6F 72
  82++1E09 79 2E 20 50
  82++1E0D 61 67 65 20
  82++1E11 6C 6F 61 64
  82++1E15 69 6E 67 20
  82++1E19 65 72 72 6F
  82++1E1D 72 2E 00
  83++1E20              letsgo:
  84++1E20 ED 5B AF 1E      ld de,(buffer_pointer)
  85++1E24 21 00 04         ld hl,1024
  86++1E27 3A CE 1F         ld a,(sock_fd)
  87++1E2A              	OS_WIZNETREAD
  87++1E2A 0E DD       >		ld c,nos.CMD_WIZNETREAD
  87++1E2C 08          >		ex af,af'
  87++1E2D CD 05 00    >		call nos.BDOS
  88++1E30 CB 7C            BIT 7,H
  89++1E32 28 24            JR Z,RECEIVED	;╨╛╤И╨╕╨▒╨╛╨║ ╨╜╨╡╤В
  90++1E34 FE 23        	CP 35   ;ERR_EAGAIN
  91++1E36 CA 20 1E         jp z, letsgo
  92++1E39                  ;╨╛╨▒╤А╨░╨▒╨╛╤В╨║╨░ ╨╛╤И╨╕╨▒╨║╨╕
  93++1E39 3E 01            ld a,1
  94++1E3B 32 AC 1E         ld (closed), a
  95++1E3E 3A CE 1F         LD	a,(sock_fd)
  96++1E41 1E 00            LD	E,0
  97++1E43              	OS_NETSHUTDOWN
  97++1E43 2E 02       >		ld l,0x02
  97++1E45 0E DB       >		ld c,nos.CMD_WIZNETOPEN
  97++1E47 08          >		ex af,af'
  97++1E48 CD 05 00    >		call nos.BDOS
  98++1E4B 2A AF 1E     	ld hl,(buffer_pointer)
  99++1E4E 11 9B 4C     	ld de,outputBuffer
 100++1E51 B7           	or a
 101++1E52 ED 52        	sbc hl,de
 102++1E54 22 AD 1E         ld (bytes_avail),HL
 103++1E57 C9               ret
 104++1E58              RECEIVED
 105++1E58 EB           	ex hl,de
 106++1E59 2A AF 1E         ld hl,(buffer_pointer)
 107++1E5C 19           	add hl,de
 108++1E5D 22 AF 1E     	ld (buffer_pointer),hl
 109++1E60 11 9B 4C     	ld de,outputBuffer
 110++1E63 B7           	or a
 111++1E64 ED 52        	sbc hl,de
 112++1E66 22 AD 1E         ld (bytes_avail),HL
 113++1E69              continue
 114++1E69 C9               ret
 115++1E6A
 116++1E6A
 117++1E6A              openTCP ;DE - port_str, HL - domain name
 118++1E6A E5           	push hl
 119++1E6B CD 82 01     	call atohl
 120++1E6E 7C 65 6F     	ld a,h,h,l,l,a
 121++1E71 22 BB 1D     	ld (host_ia.curport),hl
 122++1E74 D1           	pop de
 123++1E75 CD C8 1E     	call dns_resolver
 124++1E78 7C           	ld a,h
 124++1E79 B5             or l
 124++1E7A CA B1 1E       jp z,reqErr
 125++1E7D 11 BD 1D     	ld de,host_ia+3
 126++1E80 01 04 00     	ld bc,4
 127++1E83 ED B0        	ldir
 128++1E85 11 01 02     	ld de,1+(2<<8)
 129++1E88              	OS_NETSOCKET
 129++1E88 2E 01       >		ld l,0x01
 129++1E8A 0E DB       >		ld c,nos.CMD_WIZNETOPEN
 129++1E8C CD 05 00    >		call nos.BDOS
 130++1E8F 7D           	ld a,l
 130++1E90 B7             or a
 130++1E91 FA B1 1E       jp m,reqErr
 131++1E94 32 CE 1F     	ld (sock_fd),a
 132++1E97 11 BA 1D     	ld de,host_ia
 133++1E9A              	OS_NETCONNECT
 133++1E9A 2E 03       >		ld l,0x03
 133++1E9C 0E DB       >		ld c,nos.CMD_WIZNETOPEN
 133++1E9E 08          >		ex af,af'
 133++1E9F CD 05 00    >		call nos.BDOS
 134++1EA2 7D               ld a,l
 134++1EA3 B7             or a
 134++1EA4 FA B1 1E       jp m,reqErr
 135++1EA7 AF               xor a
 135++1EA8 32 AC 1E       ld (closed), a
 136++1EAB C9           	ret
 137++1EAC
 138++1EAC              closed
 139++1EAC 01               defb 1
 140++1EAD              bytes_avail
 141++1EAD 00 00            defw 0
 142++1EAF              buffer_pointer
 143++1EAF 00 00            defw 0
 144++1EB1
 145++1EB1              reqErr
 146++1EB1 21 B9 1E         ld hl, .errMsg
 146++1EB4 CD DA 07       call DialogBox.msgBox
 147++1EB7 37               scf
 148++1EB8 C9               ret
 149++1EB9 53 6F 63 6B  .errMsg db "Socket failed!",0
 149++1EBD 65 74 20 66
 149++1EC1 61 69 6C 65
 149++1EC5 64 21 00
 150++1EC8
 151++1EC8              dns_resolver:		;DE-domain name
 152++1EC8 ED 53 EB 1E      ld (.httphostname),de
 153++1ECC 3E FE            ld a,254
 154++1ECE 32 4D 1F         ld (.dns_err_count),a
 155++1ED1              .dns_err_loop
 156++1ED1              	;push de
 157++1ED1 21 C1 1F     	ld hl,.dns_head
 158++1ED4 11 9B 4C     	ld de,outputBuffer
 159++1ED7 01 06 00     	ld bc,6
 160++1EDA ED B0        	ldir
 161++1EDC EB           	ex de,hl
 162++1EDD 11 A2 4C     	ld de,outputBuffer+7
 163++1EE0 70           	ld (hl),b;0
 164++1EE1 0E F9        	ld  c,256-7
 165++1EE3 ED B0        	ldir
 166++1EE5 11 A7 4C     	ld de,outputBuffer+12
 167++1EE8 62           	ld h,d
 168++1EE9 6B           	ld l,e
 169++1EEA 01 EB 1E     	ld bc,.httphostname ;pop bc
 170++1EED              .httphostname=$-2
 171++1EED              .name_loop:
 172++1EED 23           	inc hl
 173++1EEE 0A           	ld a,(bc)
 174++1EEF 77           	ld (hl),a
 175++1EF0 03           	inc bc
 176++1EF1 FE 2E        	cp '.'
 177++1EF3 28 03        	jr z,.is_dot
 178++1EF5 B7           	or a
 179++1EF6 20 F5        	jr nz,.name_loop
 180++1EF8              .is_dot:
 181++1EF8 ED 52        	sbc hl,de
 182++1EFA EB           	ex de,hl
 183++1EFB 1D           	dec e
 184++1EFC 73           	ld (hl),e
 185++1EFD 1C           	inc e
 186++1EFE 19           	add hl,de
 187++1EFF 54           	ld d,h
 188++1F00 5D           	ld e,l
 189++1F01 B7           	or a
 190++1F02 20 E9        	jr nz,.name_loop
 191++1F04 3C           	inc a
 192++1F05 23           	inc hl
 193++1F06 23           	inc hl
 194++1F07 77           	ld (hl),a
 195++1F08 23           	inc hl
 196++1F09 23           	inc hl
 197++1F0A 77           	ld (hl),a
 198++1F0B 23           	inc hl
 199++1F0C E5           	push hl
 200++1F0D              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 201++1F0D 3A CA 1F     	ld a, (.dns_ia2)
 202++1F10 FE 00        	cp 0
 203++1F12 C2 20 1F     	jp nz, .skipgetdns
 204++1F15 11 CA 1F     	ld de, .dns_ia2;DE= ptr to DNS buffer(4 bytes)
 205++1F18              	OS_GETDNS
 205++1F18 2E 08       >		ld l, 0x08
 205++1F1A 0E DB       >		ld c, nos.CMD_WIZNETOPEN
 205++1F1C 08          >		ex af,af' ;'
 205++1F1D CD 05 00    >		call nos.BDOS ;c=CMD
 206++1F20              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 207++1F20              .skipgetdns:
 208++1F20 11 03 02     	ld de,0x0203
 209++1F23                  OS_NETSOCKET
 209++1F23 2E 01       >		ld l,0x01
 209++1F25 0E DB       >		ld c,nos.CMD_WIZNETOPEN
 209++1F27 CD 05 00    >		call nos.BDOS
 210++1F2A 7D           	ld a,l
 211++1F2B 32 CE 1F     	ld (sock_fd),a
 212++1F2E B7           	or a
 213++1F2F FA 9E 1F     	jp m,.dns_exiterr
 214++1F32 E1           	pop hl
 215++1F33 E5           	push hl
 216++1F34 11 65 B3     	ld de,0xffff&(-outputBuffer)
 217++1F37 19           	add hl,de
 218++1F38 3A CE 1F     	LD	a,(sock_fd)
 219++1F3B DD 21 9B 4C  	LD	IX,outputBuffer
 220++1F3F 11 C7 1F     	LD	DE,.dns_ia
 221++1F42              	OS_WIZNETWRITE
 221++1F42 0E DE       >		ld c,nos.CMD_WIZNETWRITE
 221++1F44 08          >		ex af,af'
 221++1F45 CD 05 00    >		call nos.BDOS
 222++1F48 CB 7C        	bit 7,h
 223++1F4A 20 2F        	jr nz,.dns_exitcode
 224++1F4C              .dns_err_count=$+1
 225++1F4C 06 20        	ld b,32
 226++1F4E 18 07        	jr .recv_wait1
 227++1F50              .recv_wait:
 228++1F50 C5                   push bc
 229++1F51 0E F2                ld c,nos.CMD_YIELD
 230++1F53 CD 05 00             call nos.BDOS
 231++1F56 C1                   pop bc
 232++1F57              .recv_wait1:
 233++1F57 C5           	push bc
 234++1F58 21 00 01     	ld hl,256
 235++1F5B 3A CE 1F     	LD	a,(sock_fd)
 236++1F5E 11 9B 4C     	LD	DE,outputBuffer
 237++1F61 DD 21 9B 4C  	LD	IX,outputBuffer
 238++1F65              	OS_WIZNETREAD
 238++1F65 0E DD       >		ld c,nos.CMD_WIZNETREAD
 238++1F67 08          >		ex af,af'
 238++1F68 CD 05 00    >		call nos.BDOS
 239++1F6B C1           	pop bc
 240++1F6C CB 7C        	bit 7,h
 241++1F6E 28 04        	jr z,.recv_wait_end
 242++1F70 10 DE        	djnz .recv_wait
 243++1F72 18 2A        	jr .dns_exiterr
 244++1F74              .recv_wait_end:
 245++1F74 3A 9E 4C     	ld a,(outputBuffer+3)
 246++1F77 E6 0F        	and 0x0f
 247++1F79 20 23        	jr nz,.dns_exiterr
 248++1F7B              .dns_exitcode:
 249++1F7B 3A CE 1F     	LD	a,(sock_fd)
 250++1F7E 1E 00        	LD	E,0
 251++1F80              	OS_NETSHUTDOWN
 251++1F80 2E 02       >		ld l,0x02
 251++1F82 0E DB       >		ld c,nos.CMD_WIZNETOPEN
 251++1F84 08          >		ex af,af'
 251++1F85 CD 05 00    >		call nos.BDOS
 252++1F88 E1           	pop hl
 253++1F89              .reqpars_l
 254++1F89 23           	inc hl
 255++1F8A 23           	inc hl
 256++1F8B 23           	inc hl
 257++1F8C 7E           	ld a,(hl)
 258++1F8D 11 07 00     	ld de,7
 259++1F90 19           	add hl,de
 260++1F91 46           	ld b,(hl)
 261++1F92 23           	inc hl
 262++1F93 4E           	ld c,(hl)
 263++1F94 23           	inc hl
 264++1F95 3D           	dec a
 265++1F96 C8           	ret z
 266++1F97 FE 04        	cp 4
 267++1F99 20 22        	jr nz,.exiterr1
 268++1F9B 09           	add hl,bc
 269++1F9C 18 EB        	jr .reqpars_l
 270++1F9E              .dns_exiterr:
 271++1F9E F1           	pop af
 272++1F9F 3A CE 1F     	LD	a,(sock_fd)
 273++1FA2 1E 00        	LD	E,0
 274++1FA4              	OS_NETSHUTDOWN
 274++1FA4 2E 02       >		ld l,0x02
 274++1FA6 0E DB       >		ld c,nos.CMD_WIZNETOPEN
 274++1FA8 08          >		ex af,af'
 274++1FA9 CD 05 00    >		call nos.BDOS
 275++1FAC 3A 4D 1F         ld a,(.dns_err_count)
 276++1FAF 87               add a,a
 277++1FB0 32 4D 1F         ld (.dns_err_count),a
 278++1FB3              	OS_YIELD
 278++1FB3 C5          >		push bc
 278++1FB4 0E F2       >    	ld c,nos.CMD_YIELD
 278++1FB6 CD 05 00    >        call nos.BDOS
 278++1FB9 C1          >        pop bc
 279++1FBA D2 D1 1E         jp nc,.dns_err_loop
 280++1FBD              .exiterr1:
 281++1FBD 21 00 00         ld hl,0
 282++1FC0 C9           	ret
 283++1FC1              .dns_head
 284++1FC1 11 22 01 00  	defb 0x11,0x22,0x01,0x00,0x00,0x01
 284++1FC5 00 01
 285++1FC7
 286++1FC7              ;struct sockaddr_in {unsigned char sin_family;unsigned short sin_port;
 287++1FC7              ;	struct in_addr sin_addr;char sin_zero[8];};
 288++1FC7              .dns_ia:
 289++1FC7 00           	defb 0
 290++1FC8 00 35                db 0,53 ;port (big endian)
 291++1FCA              .dns_ia2:
 292++1FCA 00 00 00 00          db 0,0,0,0 ;ip (big endian)
 293++1FCE
 294++1FCE 00           sock_fd     defb 0
 295++1FCF                  ENDMODULE
# file closed: drivers/nedowifi.asm
  33++1FCF              	ELSE
  34++1FCF ~            		include "wifi.asm"
  35++1FCF              	ENDIF
  36++1FCF
  37++1FCF                  IFDEF NEDOOS
  38++1FCF                  	include "rtc-nos.asm"
# file opened: drivers/rtc-nos.asm
   1++1FCF              ;clock driver nedoOS
   2++1FCF              	module Clock
   3++1FCF              readTime
   4++1FCF 0E E2        	ld c,nos.CMD_GETTIME
   5++1FD1 CD 05 00         call nos.BDOS		;out: ix=date, hl=time
   6++1FD4 F3           	di
   7++1FD5 DD E5        	push ix
   8++1FD7 C1           	pop bc
   9++1FD8 FB           	ei
  10++1FD9
  11++1FD9 E5           	push hl
  12++1FDA D1           	pop de
  13++1FDB 7B           	ld a,e
  14++1FDC 87               add a,a
  15++1FDD E6 3F            and 63	;seconds
  16++1FDF 32 15 21     	ld (seconds),a
  17++1FE2
  18++1FE2 7A           	ld a,d
  19++1FE3 1F               rra
  20++1FE4 1F               rra
  21++1FE5 1F               rra
  22++1FE6 E6 1F            and 31 		;hours
  23++1FE8 32 13 21     	ld (hours),a
  24++1FEB
  25++1FEB EB               ex de,hl
  26++1FEC 29               add hl,hl
  27++1FED 29               add hl,hl
  28++1FEE 29               add hl,hl
  29++1FEF EB               ex de,hl
  30++1FF0 7A               ld a,d
  31++1FF1 E6 3F            and 63       ;minutes
  32++1FF3 32 14 21      	ld (minutes),a
  33++1FF6
  34++1FF6              ;   ld a,h
  35++1FF6              ;   srl a
  36++1FF6              ;   ;sub 20
  37++1FF6              ;   ld (year),a
  38++1FF6              ;   ld a,l
  39++1FF6              ;   and 31
  40++1FF6              ;   ld (day),a
  41++1FF6              ;   add hl,hl
  42++1FF6              ;   add hl,hl
  43++1FF6              ;   add hl,hl
  44++1FF6              ;   ld a,h
  45++1FF6              ;   and 15
  46++1FF6              ;   ld (month),a
  47++1FF6
  48++1FF6
  49++1FF6 C9             	ret ;return bc=date, hl=time
  50++1FF7                  endmodule
  51++1FF7
# file closed: drivers/rtc-nos.asm
  39++1FF7                  ENDIF
  40++1FF7
  41++1FF7                  IFDEF SMUCRTC
  42++1FF7 ~                	include "rtc-smuc.asm"
  43++1FF7                  ENDIF
  44++1FF7
  45++1FF7              	include "proxy.asm"
# file opened: drivers/proxy.asm
   1++1FF7                  IFDEF PROXY
   2++1FF7 ~                MODULE Wifi
   3++1FF7 ~            ; Same singature as wifi.openTCP
   4++1FF7 ~            ; HL - host pointer in gopher row
   5++1FF7 ~            ; DE - port pointer in gopher row
   6++1FF7 ~            openTCP:
   7++1FF7 ~                push de
   8++1FF7 ~                push hl
   9++1FF7 ~
  10++1FF7 ~                xor a
  10++1FF7 ~              ld hl, hostBuff, de, hostBuff + 1, bc, 102, (hl), a
  10++1FF7 ~              ldir
  11++1FF7 ~
  12++1FF7 ~                EspCmdOkErr "AT+CIPCLOSE"
  13++1FF7 ~                EspCmdOkErr 'AT+CIPSTART="TCP","138.68.76.243",6912' // Replace here for yourown proxy. If you wish
  14++1FF7 ~                jr c, .error
  15++1FF7 ~                pop hl
  15++1FF7 ~              ld de, hostBuff
  16++1FF7 ~            .copyHost
  17++1FF7 ~                ld a, (hl)
  17++1FF7 ~              and a
  17++1FF7 ~              jr z, 1F
  17++1FF7 ~              and a
  17++1FF7 ~              jr z, 1F
  18++1FF7 ~                ld (de), a
  18++1FF7 ~              inc hl, de
  19++1FF7 ~                jr .copyHost
  20++1FF7 ~            1   xor a
  20++1FF7 ~              ld (de), a
  21++1FF7 ~                pop hl
  21++1FF7 ~              ld de, portBuff
  22++1FF7 ~            .copyPort
  23++1FF7 ~                ld a, (hl)
  23++1FF7 ~              and a
  23++1FF7 ~              jr z, 1F
  23++1FF7 ~              and a
  23++1FF7 ~              jr z, 1F
  24++1FF7 ~                ld (de), a
  24++1FF7 ~              inc hl, de
  25++1FF7 ~                jr .copyPort
  26++1FF7 ~            1   ld hl, hostBuff
  26++1FF7 ~              call tcpSendZ
  27++1FF7 ~                ld hl, portBuff
  27++1FF7 ~              call tcpSendZ
  28++1FF7 ~                xor a
  28++1FF7 ~              ld (closed), a
  29++1FF7 ~                ret
  30++1FF7 ~            .error
  31++1FF7 ~                pop hl
  31++1FF7 ~              pop de
  32++1FF7 ~                ret
  33++1FF7 ~
  34++1FF7 ~            continue:
  35++1FF7 ~                EspCmdOkErr "AT+CIPSEND=1"
  36++1FF7 ~                ret c
  37++1FF7 ~            .wait
  38++1FF7 ~                call Uart.read
  38++1FF7 ~              cp '>'
  38++1FF7 ~              jr nz, .wait
  39++1FF7 ~                ld a, 'c'
  39++1FF7 ~              call Uart.write
  40++1FF7 ~                jp checkOkErr
  41++1FF7 ~
  42++1FF7 ~            hostBuff ds 96
  43++1FF7 ~            portBuff ds 7
  44++1FF7 ~                ENDMODULE
  45++1FF7                  ENDIF
# file closed: drivers/proxy.asm
  46++1FF7              	include "memory.asm"
# file opened: drivers/memory.asm
   1++1FF7                  module Memory
   2++1FF7              BANKM = #5b5c
   3++1FF7              MEM_PORT = #7ffd
   4++1FF7
   5++1FF7              init:
   6++1FF7 F3               di
   7++1FF8 FD CB 01 A6      res 4, (iy + 1)
   8++1FFC
   9++1FFC AF               xor a
   9++1FFD CD 01 20       call setPage
  10++2000 C9               ret
  11++2001
  12++2001              ; a - page
  13++2001              setPage:
  14++2001 F6 18            or #18
  14++2003 32 5C 5B       ld (BANKM), a
  15++2006 01 FD 7F         ld bc, MEM_PORT
  15++2009 ED 79          out (c), a
  16++200B C9               ret
  17++200C
  18++200C                  endmodule
# file closed: drivers/memory.asm
  47++200C              	include "general-sound.asm"
# file opened: drivers/general-sound.asm
   1++200C                  ifdef GS
   2++200C                  macro _WaitCommand
   3++200C ~            .wait
   4++200C ~                in a, (GeneralSound.CMD)
   5++200C ~                rrca
   6++200C ~                jr c, .wait
   7++200C                  endm
   8++200C
   9++200C                  macro _WaitData
  10++200C ~            .wait
  11++200C ~                in a, (GeneralSound.CMD)
  12++200C ~                rlca
  13++200C ~                jr c, .wait
  14++200C                  endm
  15++200C
  16++200C                  macro _SendCommand nn
  17++200C ~                ld a, nn
  17++200C ~              out (GeneralSound.CMD), a
  18++200C                  endm
  19++200C
  20++200C                  module GeneralSound
  21++200C              ;; Control ports
  22++200C              CMD  = 187
  23++200C              DATA = 179
  24++200C
  25++200C              ;; Commands
  26++200C              CMD_WARM_RESET      = #F3
  27++200C              CMD_COLD_RESET      = #F4
  28++200C              CMD_LOAD_MODULE     = #30
  29++200C              CMD_PLAY_MODULE     = #31
  30++200C              CMD_STOP_MODULE     = #32
  31++200C              CMD_CONTINUE_MODULE = #33
  32++200C              CMD_OPEN_STREAM     = #D1
  33++200C              CMD_CLOSE_STREAM    = #D2
  34++200C
  35++200C              ; A - 0 warm reset, other - cold
  36++200C              init:
  37++200C A7               and a
  37++200D 20 05          jr nz, .cold
  38++200F                  _SendCommand CMD_WARM_RESET
  38++200F 3E F3       >    ld a, CMD_WARM_RESET
  38++2011 D3 BB       >  out (GeneralSound.CMD), a
  39++2013 C9               ret
  40++2014              .cold
  41++2014                  _SendCommand CMD_COLD_RESET
  41++2014 3E F4       >    ld a, CMD_COLD_RESET
  41++2016 D3 BB       >  out (GeneralSound.CMD), a
  42++2018 C9               ret
  43++2019
  44++2019              ;; Initializes loading module
  45++2019              loadModule:
  46++2019                  _SendCommand CMD_LOAD_MODULE
  46++2019 3E 30       >    ld a, CMD_LOAD_MODULE
  46++201B D3 BB       >  out (GeneralSound.CMD), a
  47++201D                  _WaitCommand
  47++201D             >.wait
  47++201D DB BB       >    in a, (GeneralSound.CMD)
  47++201F 0F          >    rrca
  47++2020 38 FB       >    jr c, .wait
  48++2022                  _SendCommand CMD_OPEN_STREAM
  48++2022 3E D1       >    ld a, CMD_OPEN_STREAM
  48++2024 D3 BB       >  out (GeneralSound.CMD), a
  49++2026                  _WaitCommand
  49++2026             >.wait
  49++2026 DB BB       >    in a, (GeneralSound.CMD)
  49++2028 0F          >    rrca
  49++2029 38 FB       >    jr c, .wait
  50++202B C9               ret
  51++202C
  52++202C              ;; Use it for streaming mod file
  53++202C              sendByte:
  54++202C D3 B3            out (DATA), a
  55++202E                  _WaitData
  55++202E             >.wait
  55++202E DB BB       >    in a, (GeneralSound.CMD)
  55++2030 07          >    rlca
  55++2031 38 FB       >    jr c, .wait
  56++2033 C9               ret
  57++2034
  58++2034              ;; Call it when module was loaded
  59++2034              finishLoadingModule:
  60++2034                  _SendCommand CMD_CLOSE_STREAM
  60++2034 3E D2       >    ld a, CMD_CLOSE_STREAM
  60++2036 D3 BB       >  out (GeneralSound.CMD), a
  61++2038                  _WaitCommand
  61++2038             >.wait
  61++2038 DB BB       >    in a, (GeneralSound.CMD)
  61++203A 0F          >    rrca
  61++203B 38 FB       >    jr c, .wait
  62++203D              rewind:
  63++203D 3E 01            ld a, 1
  63++203F D3 B3          out (DATA), a
  64++2041                  _SendCommand CMD_PLAY_MODULE
  64++2041 3E 31       >    ld a, CMD_PLAY_MODULE
  64++2043 D3 BB       >  out (GeneralSound.CMD), a
  65++2045                  _WaitCommand
  65++2045             >.wait
  65++2045 DB BB       >    in a, (GeneralSound.CMD)
  65++2047 0F          >    rrca
  65++2048 38 FB       >    jr c, .wait
  66++204A 3E 01 32 78      ld a, 1, (state),a
  66++204E 20
  67++204F C9               ret
  68++2050
  69++2050              ;; Works like pause too
  70++2050              stopModule:
  71++2050 AF               xor a
  71++2051 32 78 20       ld (state), a
  72++2054                  _SendCommand CMD_STOP_MODULE
  72++2054 3E 32       >    ld a, CMD_STOP_MODULE
  72++2056 D3 BB       >  out (GeneralSound.CMD), a
  73++2058 C9               ret
  74++2059
  75++2059              continueModule:
  76++2059 3E 01            ld a, 1
  76++205B 32 78 20       ld (state), a
  77++205E                  _SendCommand CMD_CONTINUE_MODULE
  77++205E 3E 33       >    ld a, CMD_CONTINUE_MODULE
  77++2060 D3 BB       >  out (GeneralSound.CMD), a
  78++2062 C9               ret
  79++2063
  80++2063              ; Pauses resumes
  81++2063              toggleModule:
  82++2063 CD 2A 08         call Console.waitForKeyUp
  83++2066 3A 78 20         ld a, (state)
  83++2069 A7             and a
  84++206A 28 ED            jr z, continueModule
  85++206C 18 E2            jr stopModule
  86++206E
  87++206E              toggleDownload:
  88++206E 3A 77 20         ld a,(GSdownType)
  89++2071 EE 01            xor 1
  90++2073 32 77 20         ld (GSdownType),a
  91++2076 C9               ret
  92++2077
  93++2077 00           GSdownType  db 0
  94++2078 00           state db 0
  95++2079                  endmodule
  96++2079
  97++2079                  endif
# file closed: drivers/general-sound.asm
  48++2079
# file closed: drivers/index.asm
  25+ 2079                  include "screen/rtc.asm"
# file opened: screen/rtc.asm
   1++2079              printRTC
   2++2079              	IFDEF RTC
   3++2079 CD CF 1F     	call Clock.readTime
   4++207C
   5++207C 3A 1D 21     	ld a, (oldminutes)
   6++207F 57           	ld d,a
   7++2080 3A 14 21     	ld a, (minutes)
   8++2083 BA           	cp d					; Update only if minutes changed
   9++2084 C8           	ret z
  10++2085 32 1D 21     	ld (oldminutes), a
  11++2088
  12++2088 16 01        	ld d,1 ;╨║╨╛╨╛╤А╨┤╨╕╨╜╨░╤В╤Л Y,X
  13++208A 1E 49        	ld e,73
  14++208C CD 3A 01     	call TextMode.gotoXY
  15++208F 3E 5B        	ld a,'['
  16++2091 CD 37 01     	call TextMode.putC
  17++2094 26 00        	ld h,0
  18++2096 3A 13 21     	ld a,(hours) ;╤З╨░╤Б╤Л
  19++2099 6F           	ld l,a
  20++209A CD BD 20     	call toDecimal
  21++209D 21 19 21     	ld hl,decimalS+3
  22++20A0 CD 27 01     	call TextMode.printZ
  23++20A3 3E 3A        	ld a,':'
  24++20A5 CD 37 01     	call TextMode.putC
  25++20A8 26 00        	ld h,0
  26++20AA 3A 14 21     	ld a,(minutes) ;╨╝╨╕╨╜╤Г╤В╤Л
  27++20AD 6F           	ld l,a
  28++20AE CD BD 20     	call toDecimal
  29++20B1 21 19 21     	ld hl,decimalS+3
  30++20B4 CD 27 01     	call TextMode.printZ
  31++20B7              	;ld a,':'
  32++20B7              	;call TextMode.putC
  33++20B7              	;ld h,0
  34++20B7              	;ld a,(seconds) ;╤Б╨╡╨║╤Г╨╜╨┤╤Л
  35++20B7              	;ld l,a
  36++20B7              	;call toDecimal
  37++20B7              	;ld hl,decimalS+3
  38++20B7              	;call TextMode.printZ
  39++20B7 3E 5D        	ld a,']'
  40++20B9 CD 37 01     	call TextMode.putC
  41++20BC C9           	ret
  42++20BD
  43++20BD              toDecimal		;╨║╨╛╨╜╨▓╨╡╤А╤В╨╕╤А╤Г╨╡╤В 2 ╨▒╨░╨╣╤В╨░ ╨▓ 5 ╨┤╨╡╤Б╤П╤В╨╕╤З╨╜╤Л╤Е ╤Ж╨╕╤Д╤А
  44++20BD              				;╨╜╨░ ╨▓╤Е╨╛╨┤╨╡ ╨▓ HL ╤З╨╕╤Б╨╗╨╛
  45++20BD 11 10 27     	ld de,10000 ;╨┤╨╡╤Б╤П╤В╨║╨╕ ╤В╤Л╤Б╤П╤З
  46++20C0 3E FF        	ld a,255
  47++20C2              toDecimal10k
  48++20C2 A7           	and a
  49++20C3 ED 52        	sbc hl,de
  50++20C5 3C           	inc a
  51++20C6 30 FA        	jr nc,toDecimal10k
  52++20C8 19           	add hl,de
  53++20C9 C6 30        	add a,48
  54++20CB 32 16 21     	ld (decimalS),a
  55++20CE 11 E8 03     	ld de,1000 ;╤В╤Л╤Б╤П╤З╨╕
  56++20D1 3E FF        	ld a,255
  57++20D3              toDecimal1k
  58++20D3 A7           	and a
  59++20D4 ED 52        	sbc hl,de
  60++20D6 3C           	inc a
  61++20D7 30 FA        	jr nc,toDecimal1k
  62++20D9 19           	add hl,de
  63++20DA C6 30        	add a,48
  64++20DC 32 17 21     	ld (decimalS+1),a
  65++20DF 11 64 00     	ld de,100 ;╤Б╨╛╤В╨╜╨╕
  66++20E2 3E FF        	ld a,255
  67++20E4              toDecimal01k
  68++20E4 A7           	and a
  69++20E5 ED 52        	sbc hl,de
  70++20E7 3C           	inc a
  71++20E8 30 FA        	jr nc,toDecimal01k
  72++20EA 19           	add hl,de
  73++20EB C6 30        	add a,48
  74++20ED 32 18 21     	ld (decimalS+2),a
  75++20F0 11 0A 00     	ld de,10 ;╨┤╨╡╤Б╤П╤В╨║╨╕
  76++20F3 3E FF        	ld a,255
  77++20F5              toDecimal001k
  78++20F5 A7           	and a
  79++20F6 ED 52        	sbc hl,de
  80++20F8 3C           	inc a
  81++20F9 30 FA        	jr nc,toDecimal001k
  82++20FB 19           	add hl,de
  83++20FC C6 30        	add a,48
  84++20FE 32 19 21     	ld (decimalS+3),a
  85++2101 11 01 00     	ld de,1 ;╨╡╨┤╨╕╨╜╨╕╤Ж╤Л
  86++2104 3E FF        	ld a,255
  87++2106              toDecimal0001k
  88++2106 A7           	and a
  89++2107 ED 52        	sbc hl,de
  90++2109 3C           	inc a
  91++210A 30 FA        	jr nc,toDecimal0001k
  92++210C 19           	add hl,de
  93++210D C6 30        	add a,48
  94++210F 32 1A 21     	ld (decimalS+4),a
  95++2112 C9           	ret
  96++2113              hours
  97++2113 00           	db 0
  98++2114              minutes
  99++2114 00           	db 0
 100++2115              seconds
 101++2115 00           	db 0
 102++2116 00 00 00...  decimalS	ds 6 ;╨┤╨╡╤Б╤П╤В╨╕╤З╨╜╤Л╨╡ ╤Ж╨╕╤Д╤А╤Л
 103++211C              	ENDIF
 104++211C C9           	ret
 105++211D              oldminutes		; ╨╜╨╡ ╤Г╨▒╨╕╤А╨░╤В╤М ╨┐╨╛╨┤ ╤Г╤Б╨╗╨╛╨░╨╕╨╡
 106++211D FF           	db 255
 107++211E
 108++211E
 109++211E
 110++211E
# file closed: screen/rtc.asm
  26+ 211E
  27+ 211E                  IFDEF NEDOOS
  28+ 211E                      include "screen/nedoscreen.asm"
# file opened: screen/nedoscreen.asm
   1++211E
   2++211E              	module ScreenViewer
   3++211E              display:
   4++211E CD 2A 08         call Console.waitForKeyUp
   5++2121 1E 83        	ld e,0x83
   6++2123 0E F9        	ld c,nos.CMD_SETGFX
   7++2125 CD 05 00     	call nos.BDOS
   8++2128 3A 35 00     	ld a,(nos.user_scr0_high)
   9++212B EF           	rst 0x28
  10++212C 21 9B 4C 11      ld hl, outputBuffer, de, #c000, bc, 6912
  10++2130 00 C0 01 00
  10++2134 1B
  10++2135 ED B0          ldir
  11++2137 AF               xor a
  11++2138 D3 FE          out (#fe), a
  12++213A              .wait
  13++213A CD 11 08         call Console.getC
  14++213D 1E 86        	ld e,0x86
  15++213F 0E F9        	ld c,nos.CMD_SETGFX
  16++2141 CD 05 00     	call nos.BDOS
  17++2144 3A 05 01     	ld a,(TextMode.pgC)
  18++2147 EF           	rst 0x28
  19++2148 CD 30 01         call TextMode.cls
  20++214B C3 7C 08         jp History.back
  21++214E                  endmodule
# file closed: screen/nedoscreen.asm
  29+ 214E                      include "player/vortexnedoos.asm"
# file opened: player/vortexnedoos.asm
   1++214E                  MODULE VortexProcessor
   2++214E              play:
   3++214E 3E FF            ld a, 255
   4++2150 32 1D 21         ld (oldminutes), a
   5++2153
   6++2153 CD 2A 08         call Console.waitForKeyUp
   7++2156
   8++2156 21 8C 21         ld hl, message
   8++2159 CD E3 07       call DialogBox.msgNoWait
   9++215C
  10++215C 21 9B 4C         ld hl, outputBuffer
  10++215F CD 41 40       call VTPL.INIT
  11++2162
  12++2162
  13++2162 3E 00 32 21      ld a, 0, (Render.play_next), a
  13++2166 07
  14++2167                  ifdef GS
  15++2167 CD 50 20         call GeneralSound.stopModule
  16++216A                  endif
  17++216A 3A 03 01     	ld a,(TextMode.pg4)
  18++216D 21 64 48     	ld hl,VTPL.PLAY
  19++2170 0E D5        	ld c,nos.CMD_SETMUSIC
  20++2172 08           	ex af,af'
  21++2173 CD 05 00     	call nos.BDOS
  22++2176 CD 11 08         call Console.getC
  23++2179 3A 03 01     	ld a,(TextMode.pg4)
  24++217C 21 F6 4B     	ld hl,fakemod.fakeret
  25++217F 0E D5        	ld c,nos.CMD_SETMUSIC
  26++2181 08           	ex af,af'
  27++2182 CD 05 00     	call nos.BDOS
  28++2185 CD 2F 40         call VTPL.MUTE
  29++2188 CD 2A 08         call Console.waitForKeyUp
  30++218B C9               ret
  31++218C
  32++218C 20 20 20 20  message db "    Press key to stop...", 0
  32++2190 50 72 65 73
  32++2194 73 20 6B 65
  32++2198 79 20 74 6F
  32++219C 20 73 74 6F
  32++21A0 70 2E 2E 2E
  32++21A4 00
  33++21A5                  ENDMODULE
  34++21A5              	org 0x4000
  35++4000
  36++4000                  include "player.asm"
# file opened: player/player.asm
   1++4000              ;Universal PT2'n'PT3 Turbo Sound player for ZX Spectrum
   2++4000              ;(c)2004-2007 S.V.Bulba <vorobey@mail.khstu.ru>
   3++4000              ;Specially for AlCo
   4++4000              ;http://bulba.untergrund.net/ (http://bulba.at.kz/)
   5++4000              	MODULE VTPL
   6++4000              ;Release number
   7++4000              Release EQU "0"
   8++4000              ;Conditional assembly
   9++4000              ;1) Current position counters at (Vars1+0) and (Vars2+0)
  10++4000              CurPosCounter=0
  11++4000              ;2) Allow channels allocation bits at (START+10)
  12++4000              ACBBAC=0
  13++4000              ;3) Allow loop checking and disabling
  14++4000              LoopChecker=1
  15++4000              ;4) Insert official identificator
  16++4000              Id=0
  17++4000              ;5) Set IY for correct return to ZX Basic
  18++4000              Basic=1
  19++4000
  20++4000              ;Features
  21++4000              ;--------
  22++4000              ;-Can be compiled at any address (i.e. no need rounding ORG
  23++4000              ; address).
  24++4000              ;-Variables (VARS) can be located at any address (not only after
  25++4000              ; code block).
  26++4000              ;-INIT subprogram checks PT3-module version and rightly
  27++4000              ; generates both note and volume tables outside of code block
  28++4000              ; (in VARS).
  29++4000              ;-Two portamento (spc. command 3xxx) algorithms (depending of
  30++4000              ; PT3 module version).
  31++4000              ;-New 1.XX and 2.XX special command behaviour (only for PT v3.7
  32++4000              ; and higher).
  33++4000              ;-Any Tempo value are accepted (including Tempo=1 and Tempo=2).
  34++4000              ;-TS modes: 2xPT3, 2xPT2 and PT v3.7 TS standard.
  35++4000              ;-Fully compatible with Ay_Emul PT3 and PT2 players codes.
  36++4000              ;-See also notes at the end of this source code.
  37++4000
  38++4000              ;Limitations
  39++4000              ;-----------
  40++4000              ;-Can run in RAM only (self-modified code is used).
  41++4000              ;-PT2 position list must be end by #FF marker only.
  42++4000
  43++4000              ;Warning!!! PLAY subprogram can crash if no module are loaded
  44++4000              ;into RAM or INIT subprogram was not called before.
  45++4000
  46++4000              ;Call MUTE or INIT one more time to mute sound after stopping
  47++4000              ;playing
  48++4000
  49++4000              ;Test codes (commented)
  50++4000              ;	LD A,32 ;SinglePT3(TS if TSPT3.7),ABC,Looped
  51++4000              ;	LD (START+10),A
  52++4000              ;	LD HL,#8000 ;Mod1
  53++4000              ;	LD DE,#A000 ;Mod2 (optional)
  54++4000              ;	CALL START+3
  55++4000              ;	EI
  56++4000              ;_LP	HALT
  57++4000              ;	CALL START+5
  58++4000              ;	XOR A
  59++4000              ;	IN A,(#FE)
  60++4000              ;	CPL
  61++4000              ;	AND 15
  62++4000              ;	JR Z,_LP
  63++4000              ;	JR START+8
  64++4000
  65++4000              TonA	EQU 0
  66++4000              TonB	EQU 2
  67++4000              TonC	EQU 4
  68++4000              Noise	EQU 6
  69++4000              Mixer	EQU 7
  70++4000              AmplA	EQU 8
  71++4000              AmplB	EQU 9
  72++4000              AmplC	EQU 10
  73++4000              Env	EQU 11
  74++4000              EnvTp	EQU 13
  75++4000
  76++4000              ;Entry and other points
  77++4000              ;START initialize playing of modules at MDLADDR (single module)
  78++4000              ;START+3 initialization with module address in HL and DE (TS)
  79++4000              ;START+5 play one quark
  80++4000              ;START+8 mute
  81++4000              ;START+10 setup and status flags
  82++4000
  83++4000              START:
  84++4000 21 9B 4C     	LD HL,outputBuffer ;DE - address of 2nd module for TS
  85++4003 18 3C        	JR INIT
  86++4005 C3 64 48     	JP PLAY
  87++4008 18 25        	JR MUTE
  88++400A 00           SETUP	DB 0 ;set bit0, if you want to play without looping
  89++400B              	     ;(optional);
  90++400B              	     ;set bit1 for PT2 and reset for PT3 before
  91++400B              	     ;calling INIT;
  92++400B              	     ;bits2-3: %00-ABC, %01-ACB, %10-BAC (optional);
  93++400B              	     ;bits4-5: %00-no TS, %01-2 modules TS, %10-
  94++400B              	     ;autodetect PT3 TS-format by AlCo (PT 3.7+);
  95++400B              	     ;Remark: old PT3 TS-format by AlCo (PT 3.6) is not
  96++400B              	     ;documented and must be converted to new standard.
  97++400B              	     ;bit6 is set each time, when loop point of 2nd TS
  98++400B              	     ;module is passed (optional).
  99++400B              	     ;bit7 is set each time, when loop point of 1st TS
 100++400B              	     ;or of single module is passed (optional).
 101++400B
 102++400B              ;Identifier
 103++400B              	IF Id
 104++400B ~            	DB "=UniPT2/PT3/TS-Player r.",Release,"="
 105++400B              	ENDIF
 106++400B
 107++400B              	IF LoopChecker
 108++400B 21 0A 40     CHECKLP	LD HL,SETUP
 109++400E FD CB 9E 46  	BIT 0,(IY-100+VRS.ModNum)
 110++4012 28 04        	JR Z,CHL1
 111++4014 CB F6        	SET 6,(HL)
 112++4016 18 02        	JR CHL2
 113++4018 CB FE        CHL1	SET 7,(HL)
 114++401A CB 46        CHL2	BIT 0,(HL)
 115++401C C8           	RET Z
 116++401D E1           	POP HL
 117++401E FD 34 09     	INC (IY-100+VRS.DelyCnt)
 118++4021 FD 34 BA     	INC (IY-100+VRS.ChanA+CHP.NtSkCn)
 119++4024 AF           	XOR A
 120++4025 FD 77 1D     	LD (IY-100+VRS.AYREGS+AmplA),A
 121++4028 FD 77 1E     	LD (IY-100+VRS.AYREGS+AmplB),A
 122++402B FD 77 1F     	LD (IY-100+VRS.AYREGS+AmplC),A
 123++402E C9           	RET
 124++402F              	ENDIF
 125++402F
 126++402F AF           MUTE: XOR A
 127++4030 67           	LD H,A
 128++4031 6F           	LD L,A
 129++4032 32 B9 49     	LD (VARS1+VRS.AYREGS+AmplA),A
 130++4035 22 BA 49     	LD (VARS1+VRS.AYREGS+AmplB),HL
 131++4038 32 40 4A     	LD (VARS2+VRS.AYREGS+AmplA),A
 132++403B 22 41 4A     	LD (VARS2+VRS.AYREGS+AmplB),HL
 133++403E C3 7C 48     	JP ROUT
 134++4041
 135++4041              INIT:
 136++4041              ;HL - AddressOfModule
 137++4041              ;DE - AddresOf2ndModule
 138++4041 D5           	PUSH DE
 139++4042 E5           	PUSH HL
 140++4043 21 37 49     	LD HL,VARS
 141++4046 36 00        	LD (HL),0
 142++4048 11 38 49     	LD DE,VARS+1
 143++404B 01 0E 01     	LD BC,VAR0END-VARS-1
 144++404E ED B0        	LDIR
 145++4050 23           	INC HL
 146++4051 22 9A 49     	LD (VARS1+VRS.AdInPtA),HL ;ptr to zero
 147++4054 22 21 4A     	LD (VARS2+VRS.AdInPtA),HL
 148++4057
 149++4057 E1           	POP HL
 150++4058 FD 21 9C 49  	LD IY,VARS1+100
 151++405C 3A 0A 40     	LD A,(START+10)
 152++405F E6 02        	AND 2
 153++4061 C2 EA 40     	JP NZ,I_PT2
 154++4064
 155++4064 CD 37 42     	CALL INITPT3
 156++4067 21 18 1F     	LD HL,(e_-SamCnv-2)*256+#18
 157++406A 22 0A 46     	LD (SamCnv),HL
 158++406D 3E BA        	LD A,#BA
 159++406F 32 D5 45     	LD (OrnCP),A
 160++4072 32 01 46     	LD (SamCP),A
 161++4075 3E 7B        	LD A,#7B
 162++4077 32 D8 45     	LD (OrnLD),A
 163++407A 32 04 46     	LD (SamLD),A
 164++407D 3E 87        	LD A,#87
 165++407F 32 FB 45     	LD (SamClc2),A
 166++4082 E1           	POP HL
 167++4083              	;Use version and ton table of 1st module
 168++4083 DD 7E A9     	LD A,(IX+13-100) ;EXTRACT VERSION NUMBER
 169++4086 D6 30        	SUB #30
 170++4088 38 04        	JR C,L20
 171++408A FE 0A        	CP 10
 172++408C 38 02        	JR C,L21
 173++408E 3E 06        L20	LD A,6
 174++4090 32 A8 44     L21	LD (Version),A
 175++4093 F5           	PUSH AF ;VolTable version
 176++4094 FE 04        	CP 4
 177++4096 DD 7E FF     	LD A,(IX+99-100) ;TONE TABLE NUMBER
 178++4099 17           	RLA
 179++409A E6 07        	AND 7
 180++409C F5           	PUSH AF ;NoteTable number
 181++409D
 182++409D FD 21 23 4A  	LD IY,VARS2+100
 183++40A1 3A 0A 40     	LD A,(START+10)
 184++40A4 E6 30        	AND 48
 185++40A6 28 37        	JR Z,NOTS
 186++40A8 FE 10        	CP 16
 187++40AA 28 27        	JR Z,TwoPT3s
 188++40AC 3A A8 44     	LD A,(Version)
 189++40AF FE 07        	CP 7
 190++40B1 38 2C        	JR C,NOTS
 191++40B3 DD 7E FE     	LD A,(IX+98-100) ;ALCO TS MARKER
 192++40B6 FE 20        	CP #20
 193++40B8 28 25        	JR Z,NOTS
 194++40BA 21 38 49     	LD HL,VARS1
 195++40BD 11 BF 49     	LD DE,VARS2
 196++40C0 01 87 00     	LD BC,VRS
 197++40C3 ED B0        	LDIR
 198++40C5 FD CB 9E CE  	SET 1,(IY-100+VRS.ModNum)
 199++40C9 4F           	LD C,A
 200++40CA 87           	ADD A,A
 201++40CB 81           	ADD A,C
 202++40CC D6 02        	SUB 2
 203++40CE 32 6F 47     	LD (TSSub),A
 204++40D1 18 03        	JR AlCoTS_
 205++40D3 CD 37 42     TwoPT3s	CALL INITPT3
 206++40D6 3E 01        AlCoTS_	LD A,1
 207++40D8 32 37 49     	LD (is_ts),A
 208++40DB FD CB 9E C6  	SET 0,(IY-100+VRS.ModNum)
 209++40DF
 210++40DF 01 F4 43     NOTS	LD BC,PT3PD
 211++40E2 21 00 00     	LD HL,0
 212++40E5 11 FF 48     	LD DE,PT3EMPTYORN
 213++40E8 18 48        	JR INITCOMMON
 214++40EA
 215++40EA CD 6F 42     I_PT2	CALL INITPT2
 216++40ED 21 CB 51     	LD HL,#51CB
 217++40F0 22 0A 46     	LD (SamCnv),HL
 218++40F3 3E BB        	LD A,#BB
 219++40F5 32 D5 45     	LD (OrnCP),A
 220++40F8 32 01 46     	LD (SamCP),A
 221++40FB 3E 7A        	LD A,#7A
 222++40FD 32 D8 45     	LD (OrnLD),A
 223++4100 32 04 46     	LD (SamLD),A
 224++4103 3E 80        	LD A,#80
 225++4105 32 FB 45     	LD (SamClc2),A
 226++4108 E1           	POP HL
 227++4109 3E 05        	LD A,5
 228++410B 32 A8 44     	LD (Version),A
 229++410E F5           	PUSH AF
 230++410F 3E 02        	LD A,2
 231++4111 F5           	PUSH AF
 232++4112
 233++4112 3A 0A 40     	LD A,(START+10)
 234++4115 E6 30        	AND 48
 235++4117 28 10        	JR Z,NOTS2
 236++4119
 237++4119 FD 21 23 4A  	LD IY,VARS2+100
 238++411D 3E 01        	LD A,1
 239++411F 32 37 49     	LD (is_ts),A
 240++4122 FD CB 9E C6  	SET 0,(IY-100+VRS.ModNum)
 241++4126 CD 6F 42     	CALL INITPT2
 242++4129
 243++4129 01 2E 43     NOTS2	LD BC,PT2PD
 244++412C 21 87 86     	LD HL,#8687
 245++412F 11 55 4A     	LD DE,PT2EMPTYORN
 246++4132
 247++4132              INITCOMMON
 248++4132
 249++4132              	IF Basic
 250++4132 FD 21 3A 5C  	LD IY,#5C3A
 251++4136              	ENDIF
 252++4136
 253++4136 ED 43 DF 42  	LD (PTDEC),BC
 254++413A 22 71 47     	LD (PsCalc),HL
 255++413D D5           	PUSH DE
 256++413E
 257++413E              ;note table data depacker
 258++413E              ;(c) Ivan Roshin
 259++413E 11 02 49     	LD DE,T_PACK
 260++4141 01 A7 4A     	LD BC,T1_+(2*49)-1
 261++4144 1A           TP_0	LD A,(DE)
 262++4145 13           	INC DE
 263++4146 FE 1E        	CP 15*2
 264++4148 30 06        	JR NC,TP_1
 265++414A 67           	LD H,A
 266++414B 1A           	LD A,(DE)
 267++414C 6F           	LD L,A
 268++414D 13           	INC DE
 269++414E 18 07        	JR TP_2
 270++4150 D5           TP_1	PUSH DE
 271++4151 16 00        	LD D,0
 272++4153 5F           	LD E,A
 273++4154 19           	ADD HL,DE
 274++4155 19           	ADD HL,DE
 275++4156 D1           	POP DE
 276++4157 7C           TP_2	LD A,H
 277++4158 02           	LD (BC),A
 278++4159 0B           	DEC BC
 279++415A 7D           	LD A,L
 280++415B 02           	LD (BC),A
 281++415C 0B           	DEC BC
player.asm(282): warning: value 0x1F0 is truncated to 8bit value: 0xF0
 282++415D D6 F0        	SUB #F8*2
 283++415F 20 E3        	JR NZ,TP_0
 284++4161
 285++4161 3C           	INC A
 286++4162 32 A5 49     	LD (VARS1+VRS.DelyCnt),A
 287++4165 32 2C 4A     	LD (VARS2+VRS.DelyCnt),A
 288++4168 21 01 F0     	LD HL,#F001 ;H - CHP.Volume, L - CHP.NtSkCn
 289++416B 22 56 49     	LD (VARS1+VRS.ChanA+CHP.NtSkCn),HL
 290++416E 22 73 49     	LD (VARS1+VRS.ChanB+CHP.NtSkCn),HL
 291++4171 22 90 49     	LD (VARS1+VRS.ChanC+CHP.NtSkCn),HL
 292++4174 22 DD 49     	LD (VARS2+VRS.ChanA+CHP.NtSkCn),HL
 293++4177 22 FA 49     	LD (VARS2+VRS.ChanB+CHP.NtSkCn),HL
 294++417A 22 17 4A     	LD (VARS2+VRS.ChanC+CHP.NtSkCn),HL
 295++417D E1           	POP HL
 296++417E 22 48 49     	LD (VARS1+VRS.ChanA+CHP.OrnPtr),HL
 297++4181 22 65 49     	LD (VARS1+VRS.ChanB+CHP.OrnPtr),HL
 298++4184 22 82 49     	LD (VARS1+VRS.ChanC+CHP.OrnPtr),HL
 299++4187 22 CF 49     	LD (VARS2+VRS.ChanA+CHP.OrnPtr),HL
 300++418A 22 EC 49     	LD (VARS2+VRS.ChanB+CHP.OrnPtr),HL
 301++418D 22 09 4A     	LD (VARS2+VRS.ChanC+CHP.OrnPtr),HL
 302++4190
 303++4190 F1           	POP AF
 304++4191
 305++4191              ;NoteTableCreator (c) Ivan Roshin
 306++4191              ;A - NoteTableNumber*2+VersionForNoteTable
 307++4191              ;(xx1b - 3.xx..3.4r, xx0b - 3.4x..3.6x..VTII1.0)
 308++4191
 309++4191 21 AF 48     	LD HL,NT_DATA
 310++4194 16 00        	LD D,0
 311++4196 87           	ADD A,A
 312++4197 5F           	LD E,A
 313++4198 19           	ADD HL,DE
 314++4199 5E           	LD E,(HL)
 315++419A 23           	INC HL
 316++419B CB 3B        	SRL E
 317++419D 9F           	SBC A,A
 318++419E E6 A7        	AND #A7 ;#00 (NOP) or #A7 (AND A)
 319++41A0 32 C8 41     	LD (L3),A
 320++41A3 EB           	EX DE,HL
 321++41A4 01 46 4A     	LD BC,T1_
 322++41A7 09           	ADD HL,BC
 323++41A8
 324++41A8 1A           	LD A,(DE)
player.asm(325): warning: value 0x48BF is truncated to 8bit value: 0xBF
 325++41A9 C6 BF        	ADD A,T_
 326++41AB 4F           	LD C,A
 327++41AC CE 48        	ADC A,T_/256
 328++41AE 91           	SUB C
 329++41AF 47           	LD B,A
 330++41B0 C5           	PUSH BC
 331++41B1 11 36 4B     	LD DE,NT_
 332++41B4 D5           	PUSH DE
 333++41B5
 334++41B5 06 0C        	LD B,12
 335++41B7 C5           L1	PUSH BC
 336++41B8 4E           	LD C,(HL)
 337++41B9 23           	INC HL
 338++41BA E5           	PUSH HL
 339++41BB 46           	LD B,(HL)
 340++41BC
 341++41BC D5           	PUSH DE
 342++41BD EB           	EX DE,HL
 343++41BE 11 17 00     	LD DE,23
 344++41C1 DD 26 08     	LD IXH,8
 345++41C4
 346++41C4 CB 38        L2	SRL B
 347++41C6 CB 19        	RR C
 348++41C8 19           L3	DB #19	;AND A or NOP
 349++41C9 79           	LD A,C
 350++41CA 8A           	ADC A,D	;=ADC 0
 351++41CB 77           	LD (HL),A
 352++41CC 23           	INC HL
 353++41CD 78           	LD A,B
 354++41CE 8A           	ADC A,D
 355++41CF 77           	LD (HL),A
 356++41D0 19           	ADD HL,DE
 357++41D1 DD 25        	DEC IXH
 358++41D3 20 EF        	JR NZ,L2
 359++41D5
 360++41D5 D1           	POP DE
 361++41D6 13           	INC DE
 362++41D7 13           	INC DE
 363++41D8 E1           	POP HL
 364++41D9 23           	INC HL
 365++41DA C1           	POP BC
 366++41DB 10 DA        	DJNZ L1
 367++41DD
 368++41DD E1           	POP HL
 369++41DE D1           	POP DE
 370++41DF
 371++41DF 7B           	LD A,E
player.asm(372): warning: value 0x48CB is truncated to 8bit value: 0xCB
 372++41E0 FE CB        	CP TCOLD_1
 373++41E2 20 05        	JR NZ,CORR_1
 374++41E4 3E FD        	LD A,#FD
 375++41E6 32 64 4B     	LD (NT_+#2E),A
 376++41E9
 377++41E9 1A           CORR_1	LD A,(DE)
 378++41EA A7           	AND A
 379++41EB 28 11        	JR Z,TC_EXIT
 380++41ED 1F           	RRA
 381++41EE F5           	PUSH AF
 382++41EF 87           	ADD A,A
 383++41F0 4F           	LD C,A
 384++41F1 09           	ADD HL,BC
 385++41F2 F1           	POP AF
 386++41F3 30 02        	JR NC,CORR_2
 387++41F5 35           	DEC (HL)
 388++41F6 35           	DEC (HL)
 389++41F7 34           CORR_2	INC (HL)
 390++41F8 A7           	AND A
 391++41F9 ED 42        	SBC HL,BC
 392++41FB 13           	INC DE
 393++41FC 18 EB        	JR CORR_1
 394++41FE
 395++41FE              TC_EXIT
 396++41FE
 397++41FE F1           	POP AF
 398++41FF
 399++41FF              ;VolTableCreator (c) Ivan Roshin
 400++41FF              ;A - VersionForVolumeTable (0..4 - 3.xx..3.4x;
 401++41FF              			   ;5.. - 2.x,3.5x..3.6x..VTII1.0)
 402++41FF
 403++41FF FE 05        	CP 5
 404++4201 21 11 00     	LD HL,#11
 405++4204 54           	LD D,H
 406++4205 5C           	LD E,H
 407++4206 3E 17        	LD A,#17
 408++4208 30 03        	JR NC,M1
 409++420A 2D           	DEC L
 410++420B 5D           	LD E,L
 411++420C AF           	XOR A
 412++420D 32 1E 42     M1      LD (M2),A
 413++4210
 414++4210 DD 21 46 4A  	LD IX,VT_+16
 415++4214
 416++4214 0E 0F        	LD C,#F
 417++4216 E5           INITV2  PUSH HL
 418++4217
 419++4217 19           	ADD HL,DE
 420++4218 EB           	EX DE,HL
 421++4219 ED 62        	SBC HL,HL
 422++421B
 423++421B 06 10        	LD B,#10
 424++421D 7D           INITV1  LD A,L
 425++421E 7D           M2      DB #7D
 426++421F 7C           	LD A,H
 427++4220 CE 00        	ADC A,0
 428++4222 DD 77 00     	LD (IX),A
 429++4225 DD 23        	INC IX
 430++4227 19           	ADD HL,DE
 431++4228 10 F3        	DJNZ INITV1
 432++422A
 433++422A E1           	POP HL
 434++422B 7B           	LD A,E
 435++422C FE 77        	CP #77
 436++422E 20 01        	JR NZ,M3
 437++4230 1C           	INC E
 438++4231 0D           M3      DEC C
 439++4232 20 E2        	JR NZ,INITV2
 440++4234
 441++4234 C3 7C 48     	JP ROUT
 442++4237
 443++4237 CD AA 42     INITPT3	CALL SETMDAD
 444++423A E5           	PUSH HL
 445++423B 11 64 00     	LD DE,100
 446++423E 19           	ADD HL,DE
 447++423F 7E           	LD A,(HL)
 448++4240 FD 77 08     	LD (IY-100+VRS.Delay),A
 449++4243 E5           	PUSH HL
 450++4244 DD E1        	POP IX
 451++4246 19           	ADD HL,DE
 452++4247 CD B8 42     	CALL SETCPPT
 453++424A DD 5E 02     	LD E,(IX+102-100)
 454++424D 23           	INC HL
 455++424E
 456++424E              	IF CurPosCounter
 457++424E ~            	LD (IY-100+VRS.PosSub),L
 458++424E              	ENDIF
 459++424E
 460++424E 19           	ADD HL,DE
 461++424F CD BF 42     	CALL SETLPPT
 462++4252 D1           	POP DE
 463++4253 DD 6E 03     	LD L,(IX+103-100)
 464++4256 DD 66 04     	LD H,(IX+104-100)
 465++4259 19           	ADD HL,DE
 466++425A CD A3 42     	CALL SETPTPT
 467++425D 21 A9 00     	LD HL,169
 468++4260 19           	ADD HL,DE
 469++4261 CD B1 42     	CALL SETORPT
 470++4264 21 69 00     	LD HL,105
 471++4267 19           	ADD HL,DE
 472++4268
 473++4268 FD 75 FA     SETSMPT LD (IY-100+VRS.SamPtrs),L
 474++426B FD 74 FB     	LD (IY-100+VRS.SamPtrs+1),H
 475++426E C9           	RET
 476++426F
 477++426F 7E           INITPT2	LD A,(HL)
 478++4270 FD 77 08     	LD (IY-100+VRS.Delay),A
 479++4273 E5           	PUSH HL
 480++4274 E5           	PUSH HL
 481++4275 E5           	PUSH HL
 482++4276 23           	INC HL
 483++4277 23           	INC HL
 484++4278 7E           	LD A,(HL)
 485++4279 23           	INC HL
 486++427A CD 68 42     	CALL SETSMPT
 487++427D 5E           	LD E,(HL)
 488++427E 23           	INC HL
 489++427F 56           	LD D,(HL)
 490++4280 E1           	POP HL
 491++4281 A7           	AND A
 492++4282 ED 52        	SBC HL,DE
 493++4284 CD AA 42     	CALL SETMDAD
 494++4287 E1           	POP HL
 495++4288 11 43 00     	LD DE,67
 496++428B 19           	ADD HL,DE
 497++428C CD B1 42     	CALL SETORPT
 498++428F 1E 20        	LD E,32
 499++4291 19           	ADD HL,DE
 500++4292 4E           	LD C,(HL)
 501++4293 23           	INC HL
 502++4294 46           	LD B,(HL)
 503++4295 1E 1E        	LD E,30
 504++4297 19           	ADD HL,DE
 505++4298 CD B8 42     	CALL SETCPPT
 506++429B 5F           	LD E,A
 507++429C 23           	INC HL
 508++429D
 509++429D              	IF CurPosCounter
 510++429D ~            	LD (IY-100+VRS.PosSub),L
 511++429D              	ENDIF
 512++429D
 513++429D 19           	ADD HL,DE
 514++429E CD BF 42     	CALL SETLPPT
 515++42A1 E1           	POP HL
 516++42A2 09           	ADD HL,BC
 517++42A3
 518++42A3 FD 75 FC     SETPTPT	LD (IY-100+VRS.PatsPtr),L
 519++42A6 FD 74 FD     	LD (IY-100+VRS.PatsPtr+1),H
 520++42A9 C9           	RET
 521++42AA
 522++42AA FD 75 F6     SETMDAD	LD (IY-100+VRS.MODADDR),L
 523++42AD FD 74 F7     	LD (IY-100+VRS.MODADDR+1),H
 524++42B0 C9           	RET
 525++42B1
 526++42B1 FD 75 F8     SETORPT	LD (IY-100+VRS.OrnPtrs),L
 527++42B4 FD 74 F9     	LD (IY-100+VRS.OrnPtrs+1),H
 528++42B7 C9           	RET
 529++42B8
 530++42B8 FD 75 04     SETCPPT	LD (IY-100+VRS.CrPsPtr),L
 531++42BB FD 74 05     	LD (IY-100+VRS.CrPsPtr+1),H
 532++42BE C9           	RET
 533++42BF
 534++42BF FD 75 06     SETLPPT	LD (IY-100+VRS.LPosPtr),L
 535++42C2 FD 74 07     	LD (IY-100+VRS.LPosPtr+1),H
 536++42C5 C9           	RET
 537++42C6
 538++42C6 FD 75 13     SETENBS	LD (IY-100+VRS.EnvBase),L
 539++42C9 FD 74 14     	LD (IY-100+VRS.EnvBase+1),H
 540++42CC C9           	RET
 541++42CD
 542++42CD FD 75 0C     SETESLD	LD (IY-100+VRS.CurESld),L
 543++42D0 FD 74 0D     	LD (IY-100+VRS.CurESld+1),H
 544++42D3 C9           	RET
 545++42D4
 546++42D4 FD E5        GETIX	PUSH IY
 547++42D6 DD E1        	POP IX
 548++42D8 DD 19        	ADD IX,DE
 549++42DA C9           	RET
 550++42DB
 551++42DB CD D4 42     PTDECOD CALL GETIX
 552++42DE              PTDEC	EQU $+1
 553++42DE C3 C3 C3     	JP #C3C3
 554++42E1
 555++42E1              ;PT2 pattern decoder
 556++42E1 CD 77 45     PD2_SAM	CALL SETSAM
 557++42E4 18 4A        	JR PD2_LOOP
 558++42E6
 559++42E6 DD 77 08     PD2_EOff LD (IX-12+CHP.Env_En),A
 560++42E9 18 45        	JR PD2_LOOP
 561++42EB
 562++42EB DD 36 08 10  PD2_ENV	LD (IX-12+CHP.Env_En),16
 563++42EF FD 77 22     	LD (IY-100+VRS.AYREGS+EnvTp),A
 564++42F2 0A           	LD A,(BC)
 565++42F3 03           	INC BC
 566++42F4 6F           	LD L,A
 567++42F5 0A           	LD A,(BC)
 568++42F6 03           	INC BC
 569++42F7 67           	LD H,A
 570++42F8 CD C6 42     	CALL SETENBS
 571++42FB 18 33        	JR PD2_LOOP
 572++42FD
 573++42FD CD 58 45     PD2_ORN	CALL SETORN
 574++4300 18 2E        	JR PD2_LOOP
 575++4302
 576++4302 3C           PD2_SKIP INC A
 577++4303 DD 77 05     	LD (IX-12+CHP.NNtSkp),A
 578++4306 18 28        	JR PD2_LOOP
 579++4308
 580++4308 0F           PD2_VOL	RRCA
 581++4309 0F           	RRCA
 582++430A 0F           	RRCA
 583++430B 0F           	RRCA
 584++430C DD 77 10     	LD (IX-12+CHP.Volume),A
 585++430F 18 1F        	JR PD2_LOOP
 586++4311
 587++4311 CD 28 45     PD2_DEL	CALL C_DELAY
 588++4314 18 1A        	JR PD2_LOOP
 589++4316
 590++4316 DD CB 09 D6  PD2_GLIS SET 2,(IX-12+CHP.Flags)
 591++431A 3C           	INC A
 592++431B DD 77 0A     	LD (IX-12+CHP.TnSlDl),A
 593++431E DD 77 F9     	LD (IX-12+CHP.TSlCnt),A
 594++4321 0A           	LD A,(BC)
 595++4322 03           	INC BC
 596++4323 DD 77 0B             LD (IX-12+CHP.TSlStp),A
 597++4326 87           	ADD A,A
 598++4327 9F           	SBC A,A
 599++4328 DD 77 0C             LD (IX-12+CHP.TSlStp+1),A
 600++432B 37           	SCF
 601++432C 18 01        	JR PD2_LP2
 602++432E
 603++432E A7           PT2PD	AND A
 604++432F
 605++432F 08           PD2_LP2	EX AF,AF'
 606++4330
 607++4330 0A           PD2_LOOP LD A,(BC)
 608++4331 03           	INC BC
 609++4332 C6 20        	ADD A,#20
 610++4334 28 3F        	JR Z,PD2_REL
 611++4336 38 A9        	JR C,PD2_SAM
 612++4338 C6 60        	ADD A,96
 613++433A 38 3E        	JR C,PD2_NOTE
 614++433C 3C           	INC A
 615++433D 28 A7        	JR Z,PD2_EOff
 616++433F C6 0F        	ADD A,15
 617++4341 CA 57 44     	JP Z,PD_FIN
 618++4344 38 A5        	JR C,PD2_ENV
 619++4346 C6 10        	ADD A,#10
 620++4348 38 B3        	JR C,PD2_ORN
 621++434A C6 40        	ADD A,#40
 622++434C 38 B4        	JR C,PD2_SKIP
 623++434E C6 10        	ADD A,#10
 624++4350 38 B6        	JR C,PD2_VOL
 625++4352 3C           	INC A
 626++4353 28 BC        	JR Z,PD2_DEL
 627++4355 3C           	INC A
 628++4356 28 BE        	JR Z,PD2_GLIS
 629++4358 3C           	INC A
 630++4359 28 0A        	JR Z,PD2_PORT
 631++435B 3C           	INC A
 632++435C 28 12        	JR Z,PD2_STOP
 633++435E 0A           	LD A,(BC)
 634++435F 03           	INC BC
 635++4360 DD 77 F7     	LD (IX-12+CHP.CrNsSl),A
 636++4363 18 CB        	JR PD2_LOOP
 637++4365
 638++4365 DD CB 09 96  PD2_PORT RES 2,(IX-12+CHP.Flags)
 639++4369 0A           	LD A,(BC)
 640++436A 03           	INC BC
 641++436B 03           	INC BC ;ignoring precalc delta to right sound
 642++436C 03           	INC BC
 643++436D 37           	SCF
 644++436E 18 BF        	JR PD2_LP2
 645++4370
 646++4370 DD 77 F9     PD2_STOP LD (IX-12+CHP.TSlCnt),A
 647++4373 18 BB        	JR PD2_LOOP
 648++4375
 649++4375 DD 77 09     PD2_REL	LD (IX-12+CHP.Flags),A
 650++4378 18 2C        	JR PD2_EXIT
 651++437A
 652++437A 6F           PD2_NOTE LD L,A
 653++437B DD 7E 06     	LD A,(IX-12+CHP.Note)
 654++437E 32 91 44     	LD (PrNote+1),A
 655++4381 DD 75 06     	LD (IX-12+CHP.Note),L
 656++4384 AF           	XOR A
 657++4385 DD 77 F9     	LD (IX-12+CHP.TSlCnt),A
 658++4388 DD CB 09 C6  	SET 0,(IX-12+CHP.Flags)
 659++438C 08           	EX AF,AF'
 660++438D 30 16        	JR NC,NOGLIS2
 661++438F DD CB 09 56  	BIT 2,(IX-12+CHP.Flags)
 662++4393 20 0C        	JR NZ,NOPORT2
 663++4395 32 B7 44     	LD (LoStep),A
 664++4398 87           	ADD A,A
 665++4399 9F           	SBC A,A
 666++439A 08           	EX AF,AF'
 667++439B 67           	LD H,A
 668++439C 6F           	LD L,A
 669++439D 3C           	INC A
 670++439E CD 72 44     	CALL SETPORT
 671++43A1 DD 36 F9 01  NOPORT2	LD (IX-12+CHP.TSlCnt),1
 672++43A5 AF           NOGLIS2	XOR A
 673++43A6
 674++43A6
 675++43A6 DD 77 F5     PD2_EXIT LD (IX-12+CHP.PsInSm),A
 676++43A9 DD 77 F4     	LD (IX-12+CHP.PsInOr),A
 677++43AC DD 77 FA     	LD (IX-12+CHP.CrTnSl),A
 678++43AF DD 77 FB     	LD (IX-12+CHP.CrTnSl+1),A
 679++43B2 C3 57 44     	JP PD_FIN
 680++43B5
 681++43B5              ;PT3 pattern decoder
 682++43B5 DD 36 08 00  PD_OrSm	LD (IX-12+CHP.Env_En),0
 683++43B9 CD 58 45     	CALL SETORN
 684++43BC 0A           PD_SAM_	LD A,(BC)
 685++43BD 03           	INC BC
 686++43BE 0F           	RRCA
 687++43BF
 688++43BF CD 77 45     PD_SAM	CALL SETSAM
 689++43C2 18 3F        	JR PD_LOOP
 690++43C4
 691++43C4 0F           PD_VOL	RRCA
 692++43C5 0F           	RRCA
 693++43C6 0F           	RRCA
 694++43C7 0F           	RRCA
 695++43C8 DD 77 10     	LD (IX-12+CHP.Volume),A
 696++43CB 18 39        	JR PD_LP2
 697++43CD
 698++43CD DD 77 08     PD_EOff	LD (IX-12+CHP.Env_En),A
 699++43D0 DD 77 F4     	LD (IX-12+CHP.PsInOr),A
 700++43D3 18 31        	JR PD_LP2
 701++43D5
 702++43D5 3D           PD_SorE	DEC A
 703++43D6 20 07        	JR NZ,PD_ENV
 704++43D8 0A           	LD A,(BC)
 705++43D9 03           	INC BC
 706++43DA DD 77 05     	LD (IX-12+CHP.NNtSkp),A
 707++43DD 18 27        	JR PD_LP2
 708++43DF
 709++43DF CD 3D 45     PD_ENV	CALL SETENV
 710++43E2 18 22        	JR PD_LP2
 711++43E4
 712++43E4 CD 58 45     PD_ORN	CALL SETORN
 713++43E7 18 1A        	JR PD_LOOP
 714++43E9
 715++43E9 DD 77 08     PD_ESAM	LD (IX-12+CHP.Env_En),A
 716++43EC DD 77 F4     	LD (IX-12+CHP.PsInOr),A
 717++43EF C4 3D 45     	CALL NZ,SETENV
 718++43F2 18 C8        	JR PD_SAM_
 719++43F4
 720++43F4 DD 7E 06     PT3PD	LD A,(IX-12+CHP.Note)
 721++43F7 32 91 44     	LD (PrNote+1),A
 722++43FA DD 6E FA     	LD L,(IX-12+CHP.CrTnSl)
 723++43FD DD 66 FB     	LD H,(IX-12+CHP.CrTnSl+1)
 724++4400 22 AE 44     	LD (PrSlide+1),HL
 725++4403
 726++4403 11 10 20     PD_LOOP	LD DE,#2010
 727++4406 0A           PD_LP2	LD A,(BC)
 728++4407 03           	INC BC
 729++4408 83           	ADD A,E
 730++4409 38 AA        	JR C,PD_OrSm
 731++440B 82           	ADD A,D
 732++440C 28 49        	JR Z,PD_FIN
 733++440E 38 AF        	JR C,PD_SAM
 734++4410 83           	ADD A,E
 735++4411 28 25        	JR Z,PD_REL
 736++4413 38 AF        	JR C,PD_VOL
 737++4415 83           	ADD A,E
 738++4416 28 B5        	JR Z,PD_EOff
 739++4418 38 BB        	JR C,PD_SorE
 740++441A C6 60        	ADD A,96
 741++441C 38 20        	JR C,PD_NOTE
 742++441E 83           	ADD A,E
 743++441F 38 C3        	JR C,PD_ORN
 744++4421 82           	ADD A,D
 745++4422 38 0F        	JR C,PD_NOIS
 746++4424 83           	ADD A,E
 747++4425 38 C2        	JR C,PD_ESAM
 748++4427 87           	ADD A,A
 749++4428 5F           	LD E,A
player.asm(750): warning: value 0x124B3 is truncated to 16bit value: 0x24B3
 750++4429 21 B3 24     	LD HL,SPCCOMS+#FF20-#2000
 751++442C 19           	ADD HL,DE
 752++442D 5E           	LD E,(HL)
 753++442E 23           	INC HL
 754++442F 56           	LD D,(HL)
 755++4430 D5           	PUSH DE
 756++4431 18 D0        	JR PD_LOOP
 757++4433
 758++4433 FD 77 10     PD_NOIS	LD (IY-100+VRS.Ns_Base),A
 759++4436 18 CE        	JR PD_LP2
 760++4438
 761++4438 DD CB 09 86  PD_REL	RES 0,(IX-12+CHP.Flags)
 762++443C 18 08        	JR PD_RES
 763++443E
 764++443E DD 77 06     PD_NOTE	LD (IX-12+CHP.Note),A
 765++4441 DD CB 09 C6  	SET 0,(IX-12+CHP.Flags)
 766++4445 AF           	XOR A
 767++4446
 768++4446 ED 73 55 44  PD_RES	LD (PDSP_+1),SP
 769++444A DD F9        	LD SP,IX
 770++444C 67           	LD H,A
 771++444D 6F           	LD L,A
 772++444E E5           	PUSH HL
 773++444F E5           	PUSH HL
 774++4450 E5           	PUSH HL
 775++4451 E5           	PUSH HL
 776++4452 E5           	PUSH HL
 777++4453 E5           	PUSH HL
 778++4454 31 31 31     PDSP_	LD SP,#3131
 779++4457
 780++4457 DD 7E 05     PD_FIN	LD A,(IX-12+CHP.NNtSkp)
 781++445A DD 77 0F     	LD (IX-12+CHP.NtSkCn),A
 782++445D C9           	RET
 783++445E
 784++445E 0A           C_PORTM LD A,(BC)
 785++445F 03           	INC BC
 786++4460              ;SKIP PRECALCULATED TONE DELTA (BECAUSE
 787++4460              ;CANNOT BE RIGHT AFTER PT3 COMPILATION)
 788++4460 03           	INC BC
 789++4461 03           	INC BC
 790++4462 08           	EX AF,AF'
 791++4463 0A           	LD A,(BC) ;SIGNED TONE STEP
 792++4464 03           	INC BC
 793++4465 32 B7 44     	LD (LoStep),A
 794++4468 0A           	LD A,(BC)
 795++4469 03           	INC BC
 796++446A A7           	AND A
 797++446B 08           	EX AF,AF'
 798++446C DD 6E FA     	LD L,(IX-12+CHP.CrTnSl)
 799++446F DD 66 FB     	LD H,(IX-12+CHP.CrTnSl+1)
 800++4472
 801++4472              ;Set portamento variables
 802++4472              ;A - Delay; A' - Hi(Step); ZF' - (A'=0); HL - CrTnSl
 803++4472
 804++4472 DD CB 09 96  SETPORT	RES 2,(IX-12+CHP.Flags)
 805++4476 DD 77 0A     	LD (IX-12+CHP.TnSlDl),A
 806++4479 DD 77 F9     	LD (IX-12+CHP.TSlCnt),A
 807++447C E5           	PUSH HL
 808++447D 11 36 4B     	LD DE,NT_
 809++4480 DD 7E 06     	LD A,(IX-12+CHP.Note)
 810++4483 DD 77 07     	LD (IX-12+CHP.SlToNt),A
 811++4486 87           	ADD A,A
 812++4487 6F           	LD L,A
 813++4488 26 00        	LD H,0
 814++448A 19           	ADD HL,DE
 815++448B 7E           	LD A,(HL)
 816++448C 23           	INC HL
 817++448D 66           	LD H,(HL)
 818++448E 6F           	LD L,A
 819++448F E5           	PUSH HL
 820++4490 3E 3E        PrNote	LD A,#3E
 821++4492 DD 77 06     	LD (IX-12+CHP.Note),A
 822++4495 87           	ADD A,A
 823++4496 6F           	LD L,A
 824++4497 26 00        	LD H,0
 825++4499 19           	ADD HL,DE
 826++449A 5E           	LD E,(HL)
 827++449B 23           	INC HL
 828++449C 56           	LD D,(HL)
 829++449D E1           	POP HL
 830++449E ED 52        	SBC HL,DE
 831++44A0 DD 75 0D     	LD (IX-12+CHP.TnDelt),L
 832++44A3 DD 74 0E     	LD (IX-12+CHP.TnDelt+1),H
 833++44A6 D1           	POP DE
 834++44A7              Version EQU $+1
 835++44A7 3E 3E        	LD A,#3E
 836++44A9 FE 06        	CP 6
 837++44AB 38 09        	JR C,OLDPRTM ;Old 3xxx for PT v3.5-
 838++44AD 11 11 11     PrSlide	LD DE,#1111
 839++44B0 DD 73 FA     	LD (IX-12+CHP.CrTnSl),E
 840++44B3 DD 72 FB     	LD (IX-12+CHP.CrTnSl+1),D
 841++44B6              LoStep	EQU $+1
 842++44B6 3E 3E        OLDPRTM	LD A,#3E
 843++44B8 08           	EX AF,AF'
 844++44B9 28 01        	JR Z,NOSIG
 845++44BB EB           	EX DE,HL
 846++44BC ED 52        NOSIG	SBC HL,DE
 847++44BE F2 C6 44     	JP P,SET_STP
 848++44C1 2F           	CPL
 849++44C2 08           	EX AF,AF'
 850++44C3 ED 44        	NEG
 851++44C5 08           	EX AF,AF'
 852++44C6 DD 77 0C     SET_STP	LD (IX-12+CHP.TSlStp+1),A
 853++44C9 08           	EX AF,AF'
 854++44CA DD 77 0B     	LD (IX-12+CHP.TSlStp),A
 855++44CD DD 36 FE 00  	LD (IX-12+CHP.COnOff),0
 856++44D1 C9           	RET
 857++44D2
 858++44D2 DD CB 09 D6  C_GLISS	SET 2,(IX-12+CHP.Flags)
 859++44D6 0A           	LD A,(BC)
 860++44D7 03           	INC BC
 861++44D8 DD 77 0A     	LD (IX-12+CHP.TnSlDl),A
 862++44DB A7           	AND A
 863++44DC 20 07        	JR NZ,GL36
 864++44DE 3A A8 44     	LD A,(Version) ;AlCo PT3.7+
 865++44E1 FE 07        	CP 7
 866++44E3 9F           	SBC A,A
 867++44E4 3C           	INC A
 868++44E5 DD 77 F9     GL36	LD (IX-12+CHP.TSlCnt),A
 869++44E8 0A           	LD A,(BC)
 870++44E9 03           	INC BC
 871++44EA 08           	EX AF,AF'
 872++44EB 0A           	LD A,(BC)
 873++44EC 03           	INC BC
 874++44ED 18 D7        	JR SET_STP
 875++44EF
 876++44EF 0A           C_SMPOS	LD A,(BC)
 877++44F0 03           	INC BC
 878++44F1 DD 77 F5     	LD (IX-12+CHP.PsInSm),A
 879++44F4 C9           	RET
 880++44F5
 881++44F5 0A           C_ORPOS	LD A,(BC)
 882++44F6 03           	INC BC
 883++44F7 DD 77 F4     	LD (IX-12+CHP.PsInOr),A
 884++44FA C9           	RET
 885++44FB
 886++44FB 0A           C_VIBRT	LD A,(BC)
 887++44FC 03           	INC BC
 888++44FD DD 77 FF     	LD (IX-12+CHP.OnOffD),A
 889++4500 DD 77 FE     	LD (IX-12+CHP.COnOff),A
 890++4503 0A           	LD A,(BC)
 891++4504 03           	INC BC
 892++4505 DD 77 00     	LD (IX-12+CHP.OffOnD),A
 893++4508 AF           	XOR A
 894++4509 DD 77 F9     	LD (IX-12+CHP.TSlCnt),A
 895++450C DD 77 FA     	LD (IX-12+CHP.CrTnSl),A
 896++450F DD 77 FB     	LD (IX-12+CHP.CrTnSl+1),A
 897++4512 C9           	RET
 898++4513
 899++4513 0A           C_ENGLS	LD A,(BC)
 900++4514 03           	INC BC
 901++4515 FD 77 0E     	LD (IY-100+VRS.Env_Del),A
 902++4518 FD 77 0F     	LD (IY-100+VRS.CurEDel),A
 903++451B 0A           	LD A,(BC)
 904++451C 03           	INC BC
 905++451D 6F           	LD L,A
 906++451E 0A           	LD A,(BC)
 907++451F 03           	INC BC
 908++4520 67           	LD H,A
 909++4521 FD 75 0A     	LD (IY-100+VRS.ESldAdd),L
 910++4524 FD 74 0B     	LD (IY-100+VRS.ESldAdd+1),H
 911++4527 C9           	RET
 912++4528
 913++4528 0A           C_DELAY	LD A,(BC)
 914++4529 03           	INC BC
 915++452A FD 77 08     	LD (IY-100+VRS.Delay),A
 916++452D 21 C1 49     	LD HL,VARS2+VRS.ModNum ;if AlCo_TS
 917++4530 CB 4E        	BIT 1,(HL)
 918++4532 C8           	RET Z
 919++4533 32 A4 49     	LD (VARS1+VRS.Delay),A
 920++4536 32 A5 49     	LD (VARS1+VRS.DelyCnt),A
 921++4539 32 2B 4A     	LD (VARS2+VRS.Delay),A
 922++453C C9           	RET
 923++453D
 924++453D DD 73 08     SETENV	LD (IX-12+CHP.Env_En),E
 925++4540 FD 77 22     	LD (IY-100+VRS.AYREGS+EnvTp),A
 926++4543 0A           	LD A,(BC)
 927++4544 03           	INC BC
 928++4545 67           	LD H,A
 929++4546 0A           	LD A,(BC)
 930++4547 03           	INC BC
 931++4548 6F           	LD L,A
 932++4549 CD C6 42     	CALL SETENBS
 933++454C AF           	XOR A
 934++454D DD 77 F4     	LD (IX-12+CHP.PsInOr),A
 935++4550 FD 77 0F     	LD (IY-100+VRS.CurEDel),A
 936++4553 67           	LD H,A
 937++4554 6F           	LD L,A
 938++4555 C3 CD 42     	JP SETESLD
 939++4558
 940++4558 87           SETORN	ADD A,A
 941++4559 5F           	LD E,A
 942++455A 16 00        	LD D,0
 943++455C DD 72 F4     	LD (IX-12+CHP.PsInOr),D
 944++455F FD 6E F8     	LD L,(IY-100+VRS.OrnPtrs)
 945++4562 FD 66 F9     	LD H,(IY-100+VRS.OrnPtrs+1)
 946++4565 19           	ADD HL,DE
 947++4566 5E           	LD E,(HL)
 948++4567 23           	INC HL
 949++4568 56           	LD D,(HL)
 950++4569 FD 6E F6     	LD L,(IY-100+VRS.MODADDR)
 951++456C FD 66 F7     	LD H,(IY-100+VRS.MODADDR+1)
 952++456F 19           	ADD HL,DE
 953++4570 DD 75 01     	LD (IX-12+CHP.OrnPtr),L
 954++4573 DD 74 02     	LD (IX-12+CHP.OrnPtr+1),H
 955++4576 C9           C_NOP	RET
 956++4577
 957++4577 87           SETSAM	ADD A,A
 958++4578 5F           	LD E,A
 959++4579 16 00        	LD D,0
 960++457B FD 6E FA     	LD L,(IY-100+VRS.SamPtrs);
 961++457E FD 66 FB     	LD H,(IY-100+VRS.SamPtrs+1);
 962++4581 19           	ADD HL,DE
 963++4582 5E           	LD E,(HL)
 964++4583 23           	INC HL
 965++4584 56           	LD D,(HL)
 966++4585 FD 6E F6     	LD L,(IY-100+VRS.MODADDR)
 967++4588 FD 66 F7     	LD H,(IY-100+VRS.MODADDR+1)
 968++458B 19           	ADD HL,DE
 969++458C DD 75 03     	LD (IX-12+CHP.SamPtr),L
 970++458F DD 74 04     	LD (IX-12+CHP.SamPtr+1),H
 971++4592 C9           	RET
 972++4593
 973++4593              ;ALL 16 ADDRESSES TO PROTECT FROM BROKEN PT3 MODULES
 974++4593 76 45        SPCCOMS DW C_NOP
 975++4595 D2 44        	DW C_GLISS
 976++4597 5E 44        	DW C_PORTM
 977++4599 EF 44        	DW C_SMPOS
 978++459B F5 44        	DW C_ORPOS
 979++459D FB 44        	DW C_VIBRT
 980++459F 76 45        	DW C_NOP
 981++45A1 76 45        	DW C_NOP
 982++45A3 13 45        	DW C_ENGLS
 983++45A5 28 45        	DW C_DELAY
 984++45A7 76 45        	DW C_NOP
 985++45A9 76 45        	DW C_NOP
 986++45AB 76 45        	DW C_NOP
 987++45AD 76 45        	DW C_NOP
 988++45AF 76 45        	DW C_NOP
 989++45B1 76 45        	DW C_NOP
 990++45B3
 991++45B3 CD D4 42     CHREGS	CALL GETIX
 992++45B6 AF           	XOR A
 993++45B7 32 F3 47     	LD (Ampl),A
 994++45BA DD CB 15 46  	BIT 0,(IX+CHP.Flags)
 995++45BE E5           	PUSH HL
 996++45BF CA 06 47     	JP Z,CH_EXIT
 997++45C2 ED 73 50 46  	LD (CSP_+1),SP
 998++45C6 DD 6E 0D     	LD L,(IX+CHP.OrnPtr)
 999++45C9 DD 66 0E     	LD H,(IX+CHP.OrnPtr+1)
1000++45CC F9           	LD SP,HL
1001++45CD D1           	POP DE
1002++45CE 67           	LD H,A
1003++45CF DD 7E 00     	LD A,(IX+CHP.PsInOr)
1004++45D2 6F           	LD L,A
1005++45D3 39           	ADD HL,SP
1006++45D4 3C           	INC A
1007++45D5              		;PT2	PT3
1008++45D5 3C           OrnCP	INC A	;CP E	CP D
1009++45D6 38 01        	JR C,CH_ORPS
1010++45D8 01           OrnLD	DB 1	;LD A,D	LD A,E
1011++45D9 DD 77 00     CH_ORPS	LD (IX+CHP.PsInOr),A
1012++45DC DD 7E 12     	LD A,(IX+CHP.Note)
1013++45DF 86           	ADD A,(HL)
1014++45E0 F2 E4 45     	JP P,CH_NTP
1015++45E3 AF           	XOR A
1016++45E4 FE 60        CH_NTP	CP 96
1017++45E6 38 02        	JR C,CH_NOK
1018++45E8 3E 5F        	LD A,95
1019++45EA 87           CH_NOK	ADD A,A
1020++45EB 08           	EX AF,AF'
1021++45EC DD 6E 0F     	LD L,(IX+CHP.SamPtr)
1022++45EF DD 66 10     	LD H,(IX+CHP.SamPtr+1)
1023++45F2 F9           	LD SP,HL
1024++45F3 D1           	POP DE
1025++45F4 26 00        	LD H,0
1026++45F6 DD 7E 01     	LD A,(IX+CHP.PsInSm)
1027++45F9 47           	LD B,A
1028++45FA 87           	ADD A,A
1029++45FB 87           SamClc2	ADD A,A ;or ADD A,B for PT2
1030++45FC 6F           	LD L,A
1031++45FD 39           	ADD HL,SP
1032++45FE F9           	LD SP,HL
1033++45FF 78           	LD A,B
1034++4600 3C           	INC A
1035++4601              		;PT2	PT3
1036++4601 3C           SamCP	INC A	;CP E	CP D
1037++4602 38 01        	JR C,CH_SMPS
1038++4604 01           SamLD	DB 1	;LD A,D	LD A,E
1039++4605 DD 77 01     CH_SMPS	LD (IX+CHP.PsInSm),A
1040++4608 C1           	POP BC
1041++4609 E1           	POP HL
1042++460A
1043++460A              ;Convert PT2 sample to PT3
1044++460A              		;PT2		PT3
1045++460A E1           SamCnv	POP HL  ;BIT 2,C	JR e_
1046++460B E1           	POP HL
1047++460C 60           	LD H,B
1048++460D 20 06        	JR NZ,$+8
1049++460F EB           	EX DE,HL
1050++4610 A7           	AND A
1051++4611 ED 62        	SBC HL,HL
1052++4613 ED 52        	SBC HL,DE
1053++4615 51           	LD D,C
1054++4616 CB 19        	RR C
1055++4618 9F           	SBC A,A
1056++4619 2F           	CPL
1057++461A E6 3E        	AND #3E
1058++461C CB 19        	RR C
1059++461E CB 18        	RR B
1060++4620 A1           	AND C
1061++4621 4F           	LD C,A
1062++4622 78           	LD A,B
1063++4623 1F           	RRA
1064++4624 1F           	RRA
1065++4625 CB 1A        	RR D
1066++4627 1F           	RRA
1067++4628 E6 9F        	AND #9F
1068++462A 47           	LD B,A
1069++462B
1070++462B DD 5E 08     e_	LD E,(IX+CHP.TnAcc)
1071++462E DD 56 09     	LD D,(IX+CHP.TnAcc+1)
1072++4631 19           	ADD HL,DE
1073++4632 CB 70        	BIT 6,B
1074++4634 28 06        	JR Z,CH_NOAC
1075++4636 DD 75 08     	LD (IX+CHP.TnAcc),L
1076++4639 DD 74 09     	LD (IX+CHP.TnAcc+1),H
1077++463C EB           CH_NOAC EX DE,HL
1078++463D 08           	EX AF,AF'
player.asm(1079): warning: value 0x4B36 is truncated to 8bit value: 0x36
1079++463E C6 36        	ADD A,NT_
1080++4640 6F           	LD L,A
1081++4641 CE 4B        	ADC A,NT_/256
1082++4643 95           	SUB L
1083++4644 67           	LD H,A
1084++4645 F9           	LD SP,HL
1085++4646 E1           	POP HL
1086++4647 19           	ADD HL,DE
1087++4648 DD 5E 06     	LD E,(IX+CHP.CrTnSl)
1088++464B DD 56 07     	LD D,(IX+CHP.CrTnSl+1)
1089++464E 19           	ADD HL,DE
1090++464F 31 31 31     CSP_	LD SP,#3131
1091++4652 E3           	EX (SP),HL
1092++4653 AF           	XOR A
1093++4654 DD B6 05     	OR (IX+CHP.TSlCnt)
1094++4657 28 3E        	JR Z,CH_AMP
1095++4659 DD 35 05     	DEC (IX+CHP.TSlCnt)
1096++465C 20 39        	JR NZ,CH_AMP
1097++465E DD 7E 16     	LD A,(IX+CHP.TnSlDl)
1098++4661 DD 77 05     	LD (IX+CHP.TSlCnt),A
1099++4664 DD 6E 17     	LD L,(IX+CHP.TSlStp)
1100++4667 DD 66 18     	LD H,(IX+CHP.TSlStp+1)
1101++466A 7C           	LD A,H
1102++466B 19           	ADD HL,DE
1103++466C DD 75 06     	LD (IX+CHP.CrTnSl),L
1104++466F DD 74 07     	LD (IX+CHP.CrTnSl+1),H
1105++4672 DD CB 15 56  	BIT 2,(IX+CHP.Flags)
1106++4676 20 1F        	JR NZ,CH_AMP
1107++4678 DD 5E 19     	LD E,(IX+CHP.TnDelt)
1108++467B DD 56 1A     	LD D,(IX+CHP.TnDelt+1)
1109++467E A7           	AND A
1110++467F 28 01        	JR Z,CH_STPP
1111++4681 EB           	EX DE,HL
1112++4682 ED 52        CH_STPP SBC HL,DE
1113++4684 FA 97 46     	JP M,CH_AMP
1114++4687 DD 7E 13     	LD A,(IX+CHP.SlToNt)
1115++468A DD 77 12     	LD (IX+CHP.Note),A
1116++468D AF           	XOR A
1117++468E DD 77 05     	LD (IX+CHP.TSlCnt),A
1118++4691 DD 77 06     	LD (IX+CHP.CrTnSl),A
1119++4694 DD 77 07     	LD (IX+CHP.CrTnSl+1),A
1120++4697 DD 7E 02     CH_AMP	LD A,(IX+CHP.CrAmSl)
1121++469A CB 79        	BIT 7,C
1122++469C 28 13        	JR Z,CH_NOAM
1123++469E CB 71        	BIT 6,C
1124++46A0 28 07        	JR Z,CH_AMIN
1125++46A2 FE 0F        	CP 15
1126++46A4 28 0B        	JR Z,CH_NOAM
1127++46A6 3C           	INC A
1128++46A7 18 05        	JR CH_SVAM
1129++46A9 FE F1        CH_AMIN	CP -15
1130++46AB 28 04        	JR Z,CH_NOAM
1131++46AD 3D           	DEC A
1132++46AE DD 77 02     CH_SVAM	LD (IX+CHP.CrAmSl),A
1133++46B1 6F           CH_NOAM	LD L,A
1134++46B2 78           	LD A,B
1135++46B3 E6 0F        	AND 15
1136++46B5 85           	ADD A,L
1137++46B6 F2 BA 46     	JP P,CH_APOS
1138++46B9 AF           	XOR A
1139++46BA FE 10        CH_APOS	CP 16
1140++46BC 38 02        	JR C,CH_VOL
1141++46BE 3E 0F        	LD A,15
1142++46C0 DD B6 1C     CH_VOL	OR (IX+CHP.Volume)
player.asm(1143): warning: value 0x4A36 is truncated to 8bit value: 0x36
1143++46C3 C6 36        	ADD A,VT_
1144++46C5 6F           	LD L,A
1145++46C6 CE 4A        	ADC A,VT_/256
1146++46C8 95           	SUB L
1147++46C9 67           	LD H,A
1148++46CA 7E           	LD A,(HL)
1149++46CB CB 41        CH_ENV	BIT 0,C
1150++46CD 20 03        	JR NZ,CH_NOEN
1151++46CF DD B6 14     	OR (IX+CHP.Env_En)
1152++46D2 32 F3 47     CH_NOEN	LD (Ampl),A
1153++46D5 CB 78        	BIT 7,B
1154++46D7 79           	LD A,C
1155++46D8 28 1A        	JR Z,NO_ENSL
1156++46DA 17           	RLA
1157++46DB 17           	RLA
1158++46DC CB 2F        	SRA A
1159++46DE CB 2F        	SRA A
1160++46E0 CB 2F        	SRA A
1161++46E2 DD 86 04     	ADD A,(IX+CHP.CrEnSl) ;SEE COMMENT BELOW
1162++46E5 CB 68        	BIT 5,B
1163++46E7 28 03        	JR Z,NO_ENAC
1164++46E9 DD 77 04     	LD (IX+CHP.CrEnSl),A
1165++46EC FD 86 12     NO_ENAC	ADD A,(IY-100+VRS.AddToEn) ;BUG IN PT3 - NEED WORD HERE
1166++46EF FD 77 12     	LD (IY-100+VRS.AddToEn),A
1167++46F2 18 0E        	JR CH_MIX
1168++46F4 1F           NO_ENSL RRA
1169++46F5 DD 86 03     	ADD A,(IX+CHP.CrNsSl)
1170++46F8 FD 77 11     	LD (IY-100+VRS.AddToNs),A
1171++46FB CB 68        	BIT 5,B
1172++46FD 28 03        	JR Z,CH_MIX
1173++46FF DD 77 03     	LD (IX+CHP.CrNsSl),A
1174++4702 78           CH_MIX	LD A,B
1175++4703 1F           	RRA
1176++4704 E6 48        	AND #48
1177++4706 FD B6 1C     CH_EXIT	OR (IY-100+VRS.AYREGS+Mixer)
1178++4709 0F           	RRCA
1179++470A FD 77 1C     	LD (IY-100+VRS.AYREGS+Mixer),A
1180++470D E1           	POP HL
1181++470E AF           	XOR A
1182++470F DD B6 0A     	OR (IX+CHP.COnOff)
1183++4712 C8           	RET Z
1184++4713 DD 35 0A     	DEC (IX+CHP.COnOff)
1185++4716 C0           	RET NZ
1186++4717 DD AE 15     	XOR (IX+CHP.Flags)
1187++471A DD 77 15     	LD (IX+CHP.Flags),A
1188++471D 1F           	RRA
1189++471E DD 7E 0B     	LD A,(IX+CHP.OnOffD)
1190++4721 38 03        	JR C,CH_ONDL
1191++4723 DD 7E 0C     	LD A,(IX+CHP.OffOnD)
1192++4726 DD 77 0A     CH_ONDL	LD (IX+CHP.COnOff),A
1193++4729 C9           	RET
1194++472A
1195++472A AF           PLAY_	XOR A
1196++472B FD 77 12     	LD (IY-100+VRS.AddToEn),A
1197++472E FD 77 1C     	LD (IY-100+VRS.AYREGS+Mixer),A
1198++4731 3D           	DEC A
1199++4732 FD 77 22     	LD (IY-100+VRS.AYREGS+EnvTp),A
1200++4735 FD 35 09     	DEC (IY-100+VRS.DelyCnt)
1201++4738 C2 E0 47     	JP NZ,PL2
1202++473B FD 35 BA     	DEC (IY-100+VRS.ChanA+CHP.NtSkCn)
1203++473E 20 6C        	JR NZ,PL1B
1204++4740 FD 4E FE     	LD C,(IY-100+VRS.AdInPtA)
1205++4743 FD 46 FF     	LD B,(IY-100+VRS.AdInPtA+1)
1206++4746 0A           	LD A,(BC)
1207++4747 A7           	AND A
1208++4748 20 56        	JR NZ,PL1A
1209++474A 57           	LD D,A
1210++474B FD 77 10     	LD (IY-100+VRS.Ns_Base),A
1211++474E FD 6E 04     	LD L,(IY-100+VRS.CrPsPtr)
1212++4751 FD 66 05     	LD H,(IY-100+VRS.CrPsPtr+1)
1213++4754 23           	INC HL
1214++4755 7E           	LD A,(HL)
1215++4756 3C           	INC A
1216++4757 20 0B        	JR NZ,PLNLP
1217++4759
1218++4759              	IF LoopChecker
1219++4759 CD 0B 40     	CALL CHECKLP
1220++475C              	ENDIF
1221++475C
1222++475C FD 6E 06     	LD L,(IY-100+VRS.LPosPtr)
1223++475F FD 66 07     	LD H,(IY-100+VRS.LPosPtr+1)
1224++4762 7E           	LD A,(HL)
1225++4763 3C           	INC A
1226++4764 CD B8 42     PLNLP	CALL SETCPPT
1227++4767 3D           	DEC A
1228++4768 FD CB 9E 4E  	BIT 1,(IY-100+VRS.ModNum)
1229++476C 28 03        	JR Z,NoAlCo
1230++476E              TSSub	EQU $+1
1231++476E D6 D6        	SUB #D6
1232++4770 2F           	CPL
1233++4771              NoAlCo
1234++4771              		;PT2		PT3
1235++4771 3D           PsCalc	DEC A	;ADD A,A	NOP
1236++4772 3D           	DEC A	;ADD A,(HL)	NOP
1237++4773 87           	ADD A,A
1238++4774 5F           	LD E,A
1239++4775 CB 12        	RL D
1240++4777
1241++4777              	IF CurPosCounter
1242++4777 ~            	LD A,L
1243++4777 ~            	SUB (IY-100+VRS.PosSub)
1244++4777 ~            	LD (IY-100+VRS.CurPos),A
1245++4777              	ENDIF
1246++4777
1247++4777 FD 6E FC     	LD L,(IY-100+VRS.PatsPtr)
1248++477A FD 66 FD     	LD H,(IY-100+VRS.PatsPtr+1)
1249++477D 19           	ADD HL,DE
1250++477E FD 5E F6     	LD E,(IY-100+VRS.MODADDR)
1251++4781 FD 56 F7     	LD D,(IY-100+VRS.MODADDR+1)
1252++4784 ED 73 9E 47  	LD (PSP_+1),SP
1253++4788 F9           	LD SP,HL
1254++4789 E1           	POP HL
1255++478A 19           	ADD HL,DE
1256++478B 44           	LD B,H
1257++478C 4D           	LD C,L
1258++478D E1           	POP HL
1259++478E 19           	ADD HL,DE
1260++478F FD 75 00     	LD (IY-100+VRS.AdInPtB),L
1261++4792 FD 74 01     	LD (IY-100+VRS.AdInPtB+1),H
1262++4795 E1           	POP HL
1263++4796 19           	ADD HL,DE
1264++4797 FD 75 02     	LD (IY-100+VRS.AdInPtC),L
1265++479A FD 74 03     	LD (IY-100+VRS.AdInPtC+1),H
1266++479D 31 31 31     PSP_	LD SP,#3131
1267++47A0 11 AB FF     PL1A	LD DE,VRS.ChanA+12-100
1268++47A3 CD DB 42     	CALL PTDECOD
1269++47A6 FD 71 FE     	LD (IY-100+VRS.AdInPtA),C
1270++47A9 FD 70 FF     	LD (IY-100+VRS.AdInPtA+1),B
1271++47AC
1272++47AC FD 35 D7     PL1B	DEC (IY-100+VRS.ChanB+CHP.NtSkCn)
1273++47AF 20 12        	JR NZ,PL1C
1274++47B1 11 C8 FF     	LD DE,VRS.ChanB+12-100
1275++47B4 FD 4E 00     	LD C,(IY-100+VRS.AdInPtB)
1276++47B7 FD 46 01     	LD B,(IY-100+VRS.AdInPtB+1)
1277++47BA CD DB 42     	CALL PTDECOD
1278++47BD FD 71 00     	LD (IY-100+VRS.AdInPtB),C
1279++47C0 FD 70 01     	LD (IY-100+VRS.AdInPtB+1),B
1280++47C3
1281++47C3 FD 35 F4     PL1C	DEC (IY-100+VRS.ChanC+CHP.NtSkCn)
1282++47C6 20 12        	JR NZ,PL1D
1283++47C8 11 E5 FF     	LD DE,VRS.ChanC+12-100
1284++47CB FD 4E 02     	LD C,(IY-100+VRS.AdInPtC)
1285++47CE FD 46 03     	LD B,(IY-100+VRS.AdInPtC+1)
1286++47D1 CD DB 42     	CALL PTDECOD
1287++47D4 FD 71 02     	LD (IY-100+VRS.AdInPtC),C
1288++47D7 FD 70 03     	LD (IY-100+VRS.AdInPtC+1),B
1289++47DA
1290++47DA FD 7E 08     PL1D	LD A,(IY-100+VRS.Delay)
1291++47DD FD 77 09     	LD (IY-100+VRS.DelyCnt),A
1292++47E0
1293++47E0 11 9F FF     PL2	LD DE,VRS.ChanA-100
1294++47E3 FD 6E 15     	LD L,(IY-100+VRS.AYREGS+TonA)
1295++47E6 FD 66 16     	LD H,(IY-100+VRS.AYREGS+TonA+1)
1296++47E9 CD B3 45     	CALL CHREGS
1297++47EC FD 75 15     	LD (IY-100+VRS.AYREGS+TonA),L
1298++47EF FD 74 16     	LD (IY-100+VRS.AYREGS+TonA+1),H
1299++47F2              Ampl	EQU $+1
1300++47F2 3E 3E        	LD A,#3E
1301++47F4 FD 77 1D     	LD (IY-100+VRS.AYREGS+AmplA),A
1302++47F7 11 BC FF     	LD DE,VRS.ChanB-100
1303++47FA FD 6E 17     	LD L,(IY-100+VRS.AYREGS+TonB)
1304++47FD FD 66 18     	LD H,(IY-100+VRS.AYREGS+TonB+1)
1305++4800 CD B3 45     	CALL CHREGS
1306++4803 FD 75 17     	LD (IY-100+VRS.AYREGS+TonB),L
1307++4806 FD 74 18     	LD (IY-100+VRS.AYREGS+TonB+1),H
1308++4809 3A F3 47     	LD A,(Ampl)
1309++480C FD 77 1E     	LD (IY-100+VRS.AYREGS+AmplB),A
1310++480F 11 D9 FF     	LD DE,VRS.ChanC-100
1311++4812 FD 6E 19     	LD L,(IY-100+VRS.AYREGS+TonC)
1312++4815 FD 66 1A     	LD H,(IY-100+VRS.AYREGS+TonC+1)
1313++4818 CD B3 45     	CALL CHREGS
1314++481B FD 75 19     	LD (IY-100+VRS.AYREGS+TonC),L
1315++481E FD 74 1A     	LD (IY-100+VRS.AYREGS+TonC+1),H
1316++4821 3A F3 47     	LD A,(Ampl)
1317++4824 FD 77 1F     	LD (IY-100+VRS.AYREGS+AmplC),A
1318++4827
1319++4827 FD 7E 10     	LD A,(IY-100+VRS.Ns_Base)
1320++482A FD 86 11     	ADD (IY-100+VRS.AddToNs)
1321++482D FD 77 1B     	LD (IY-100+VRS.AYREGS+Noise),A
1322++4830
1323++4830 FD 7E 12     	LD A,(IY-100+VRS.AddToEn)
1324++4833 5F           	LD E,A
1325++4834 87           	ADD A,A
1326++4835 9F           	SBC A,A
1327++4836 57           	LD D,A
1328++4837 FD 6E 13     	LD L,(IY-100+VRS.EnvBase)
1329++483A FD 66 14     	LD H,(IY-100+VRS.EnvBase+1)
1330++483D 19           	ADD HL,DE
1331++483E FD 5E 0C     	LD E,(IY-100+VRS.CurESld)
1332++4841 FD 56 0D     	LD D,(IY-100+VRS.CurESld+1)
1333++4844 19           	ADD HL,DE
1334++4845 FD 75 20     	LD (IY-100+VRS.AYREGS+Env),L
1335++4848 FD 74 21     	LD (IY-100+VRS.AYREGS+Env+1),H
1336++484B
1337++484B AF           	XOR A
1338++484C FD B6 0F     	OR (IY-100+VRS.CurEDel)
1339++484F C8           	RET Z
1340++4850 FD 35 0F     	DEC (IY-100+VRS.CurEDel)
1341++4853 C0           	RET NZ
1342++4854 FD 7E 0E     	LD A,(IY-100+VRS.Env_Del)
1343++4857 FD 77 0F     	LD (IY-100+VRS.CurEDel),A
1344++485A FD 6E 0A     	LD L,(IY-100+VRS.ESldAdd)
1345++485D FD 66 0B     	LD H,(IY-100+VRS.ESldAdd+1)
1346++4860 19           	ADD HL,DE
1347++4861 C3 CD 42     	JP SETESLD
1348++4864
1349++4864 FD 21 9C 49  PLAY    LD IY,VARS1+100
1350++4868 CD 2A 47     	CALL PLAY_
1351++486B 3A 37 49     	LD A,(is_ts)
1352++486E A7           	AND A
1353++486F 28 07        	JR Z,PL_nts
1354++4871 FD 21 23 4A  	LD IY,VARS2+100
1355++4875 CD 2A 47     	CALL PLAY_
1356++4878              PL_nts
1357++4878              	IF Basic
1358++4878 FD 21 3A 5C  	LD IY,#5C3A
1359++487C              	ENDIF
1360++487C
1361++487C 01 FD FF     ROUT	LD BC,#FFFD
1362++487F 3A 37 49     	LD A,(is_ts)
1363++4882 A7           	AND A
1364++4883 28 02        	JR Z,r_nts ;keep old standard
1365++4885 ED 41        	OUT (C),B
1366++4887 08           r_nts	EX AF,AF'
1367++4888
1368++4888              	IF ACBBAC
1369++4888 ~            	LD IX,VARS1+VRS.AYREGS
1370++4888              	ELSE
1371++4888 21 B1 49     	LD HL,VARS1+VRS.AYREGS
1372++488B              	ENDIF
1373++488B
1374++488B CD 97 48     	CALL ROUT_
1375++488E 08           	EX AF,AF'
1376++488F C8           	RET Z
1377++4890 42           	LD B,D
1378++4891 2F           	CPL
1379++4892 ED 79        	OUT (C),A
1380++4894
1381++4894              	IF ACBBAC
1382++4894 ~            	LD IX,VARS2+VRS.AYREGS
1383++4894              	ELSE
1384++4894 21 38 4A     	LD HL,VARS2+VRS.AYREGS
1385++4897              	ENDIF
1386++4897
1387++4897              ROUT_
1388++4897              	IF ACBBAC
1389++4897 ~            	LD A,(SETUP)
1390++4897 ~            	AND 12
1391++4897 ~            	JR Z,ABC
1392++4897 ~            	ADD A,CHTABLE
1393++4897 ~            	LD E,A
1394++4897 ~            	ADC A,CHTABLE/256
1395++4897 ~            	SUB E
1396++4897 ~            	LD D,A
1397++4897 ~            	LD B,0
1398++4897 ~            	PUSH IX
1399++4897 ~            	POP HL
1400++4897 ~            	LD A,(DE)
1401++4897 ~            	INC DE
1402++4897 ~            	LD C,A
1403++4897 ~            	ADD HL,BC
1404++4897 ~            	LD A,(IX+TonB)
1405++4897 ~            	LD C,(HL)
1406++4897 ~            	LD (IX+TonB),C
1407++4897 ~            	LD (HL),A
1408++4897 ~            	INC HL
1409++4897 ~            	LD A,(IX+TonB+1)
1410++4897 ~            	LD C,(HL)
1411++4897 ~            	LD (IX+TonB+1),C
1412++4897 ~            	LD (HL),A
1413++4897 ~            	LD A,(DE)
1414++4897 ~            	INC DE
1415++4897 ~            	LD C,A
1416++4897 ~            	ADD HL,BC
1417++4897 ~            	LD A,(IX+AmplB)
1418++4897 ~            	LD C,(HL)
1419++4897 ~            	LD (IX+AmplB),C
1420++4897 ~            	LD (HL),A
1421++4897 ~            	LD A,(DE)
1422++4897 ~            	INC DE
1423++4897 ~            	LD (RxCA1),A
1424++4897 ~            	XOR 8
1425++4897 ~            	LD (RxCA2),A
1426++4897 ~            	LD A,(DE)
1427++4897 ~            	AND (IX+Mixer)
1428++4897 ~            	LD E,A
1429++4897 ~            	LD A,(IX+Mixer)
1430++4897 ~            RxCA1	DB #E6
1431++4897 ~            	AND %010010
1432++4897 ~            	OR E
1433++4897 ~            	LD E,A
1434++4897 ~            	LD A,(IX+Mixer)
1435++4897 ~            	AND %010010
1436++4897 ~            RxCA2	OR E
1437++4897 ~            	OR E
1438++4897 ~            	LD (IX+Mixer),A
1439++4897 ~            ABC
1440++4897              	ENDIF
1441++4897
1442++4897 AF           	XOR A
1443++4898 11 BF FF     	LD DE,#FFBF
1444++489B
1445++489B              	IF ACBBAC
1446++489B ~            	LD BC,#FFFD
1447++489B ~            	PUSH IX
1448++489B ~            	POP HL
1449++489B              	ENDIF
1450++489B
1451++489B ED 79        LOUT	OUT (C),A
1452++489D 43           	LD B,E
1453++489E ED A3        	OUTI
1454++48A0 42           	LD B,D
1455++48A1 3C           	INC A
1456++48A2 FE 0D        	CP 13
1457++48A4 20 F5        	JR NZ,LOUT
1458++48A6 ED 79        	OUT (C),A
1459++48A8 7E           	LD A,(HL)
1460++48A9 A7           	AND A
1461++48AA F8           	RET M
1462++48AB 43           	LD B,E
1463++48AC ED 79        	OUT (C),A
1464++48AE C9           	RET
1465++48AF
1466++48AF              	IF ACBBAC
1467++48AF ~            CHTABLE	EQU $-4
1468++48AF ~            	DB 4,5,15,%001001,0,7,7,%100100
1469++48AF              	ENDIF
1470++48AF
1471++48AF 64           NT_DATA	DB (T_NEW_0-T1_)*2
1472++48B0 2A           	DB TCNEW_0-T_
1473++48B1 65           	DB (T_OLD_0-T1_)*2+1
1474++48B2 00           	DB TCOLD_0-T_
1475++48B3 01           	DB (T_NEW_1-T1_)*2+1
1476++48B4 0C           	DB TCNEW_1-T_
1477++48B5 01           	DB (T_OLD_1-T1_)*2+1
1478++48B6 0C           	DB TCOLD_1-T_
1479++48B7 94           	DB (T_NEW_2-T1_)*2
1480++48B8 35           	DB TCNEW_2-T_
1481++48B9 30           	DB (T_OLD_2-T1_)*2
1482++48BA 0E           	DB TCOLD_2-T_
1483++48BB 60           	DB (T_NEW_3-T1_)*2
1484++48BC 20           	DB TCNEW_3-T_
1485++48BD 60           	DB (T_OLD_3-T1_)*2
1486++48BE 21           	DB TCOLD_3-T_
1487++48BF
1488++48BF              T_
1489++48BF
1490++48BF 01 05 09 0B  TCOLD_0	DB #00+1,#04+1,#08+1,#0A+1,#0C+1,#0E+1,#12+1,#14+1
1490++48C3 0D 0F 13 15
1491++48C7 19 25 3D 00  	DB #18+1,#24+1,#3C+1,0
1492++48CB 5D 00        TCOLD_1	DB #5C+1,0
1493++48CD 31 37 4D 53  TCOLD_2	DB #30+1,#36+1,#4C+1,#52+1,#5E+1,#70+1,#82,#8C,#9C
1493++48D1 5F 71 82 8C
1493++48D5 9C
1494++48D6 9E A0 A6 A8  	DB #9E,#A0,#A6,#A8,#AA,#AC,#AE,#AE,0
1494++48DA AA AC AE AE
1494++48DE 00
1495++48DF 57           TCNEW_3	DB #56+1
1496++48E0 1F 23 25 29  TCOLD_3	DB #1E+1,#22+1,#24+1,#28+1,#2C+1,#2E+1,#32+1,#BE+1,0
1496++48E4 2D 2F 33 BF
1496++48E8 00
1497++48E9 1D 21 23 27  TCNEW_0	DB #1C+1,#20+1,#22+1,#26+1,#2A+1,#2C+1,#30+1,#54+1
1497++48ED 2B 2D 31 55
1498++48F1 BD BF 00     	DB #BC+1,#BE+1,0
1499++48F4              TCNEW_1 EQU TCOLD_1
1500++48F4 1B 21 25 29  TCNEW_2	DB #1A+1,#20+1,#24+1,#28+1,#2A+1,#3A+1,#4C+1,#5E+1
1500++48F8 2B 3B 4D 5F
1501++48FC BB BD BF 00  	DB #BA+1,#BC+1,#BE+1,0
1502++4900
1503++4900              PT3EMPTYORN EQU $-1
1504++4900 01 00        	DB 1,0
1505++4902
1506++4902              ;first 12 values of tone tables (packed)
1507++4902
player.asm(1508): warning: value 0xDD8 is truncated to 8bit value: 0xD8
1508++4902 0D D8        T_PACK	DB #06EC*2/256,#06EC*2
1509++4904 69           	DB #0755-#06EC
1510++4905 70           	DB #07C5-#0755
1511++4906 76           	DB #083B-#07C5
1512++4907 7D           	DB #08B8-#083B
1513++4908 85           	DB #093D-#08B8
1514++4909 8D           	DB #09CA-#093D
1515++490A 95           	DB #0A5F-#09CA
1516++490B 9D           	DB #0AFC-#0A5F
1517++490C A8           	DB #0BA4-#0AFC
1518++490D B1           	DB #0C55-#0BA4
1519++490E BB           	DB #0D10-#0C55
player.asm(1520): warning: value 0xCDA is truncated to 8bit value: 0xDA
1520++490F 0C DA        	DB #066D*2/256,#066D*2
1521++4911 62           	DB #06CF-#066D
1522++4912 68           	DB #0737-#06CF
1523++4913 6D           	DB #07A4-#0737
1524++4914 75           	DB #0819-#07A4
1525++4915 7B           	DB #0894-#0819
1526++4916 83           	DB #0917-#0894
1527++4917 8A           	DB #09A1-#0917
1528++4918 92           	DB #0A33-#09A1
1529++4919 9C           	DB #0ACF-#0A33
1530++491A A4           	DB #0B73-#0ACF
1531++491B AF           	DB #0C22-#0B73
1532++491C B8           	DB #0CDA-#0C22
player.asm(1533): warning: value 0xE08 is truncated to 8bit value: 0x08
1533++491D 0E 08        	DB #0704*2/256,#0704*2
1534++491F 6A           	DB #076E-#0704
1535++4920 72           	DB #07E0-#076E
1536++4921 78           	DB #0858-#07E0
1537++4922 7E           	DB #08D6-#0858
1538++4923 86           	DB #095C-#08D6
1539++4924 90           	DB #09EC-#095C
1540++4925 96           	DB #0A82-#09EC
1541++4926 A0           	DB #0B22-#0A82
1542++4927 AA           	DB #0BCC-#0B22
1543++4928 B4           	DB #0C80-#0BCC
1544++4929 BE           	DB #0D3E-#0C80
player.asm(1545): warning: value 0xFC0 is truncated to 8bit value: 0xC0
1545++492A 0F C0        	DB #07E0*2/256,#07E0*2
1546++492C 78           	DB #0858-#07E0
1547++492D 88           	DB #08E0-#0858
1548++492E 80           	DB #0960-#08E0
1549++492F 90           	DB #09F0-#0960
1550++4930 98           	DB #0A88-#09F0
1551++4931 A0           	DB #0B28-#0A88
1552++4932 B0           	DB #0BD8-#0B28
1553++4933 A8           	DB #0C80-#0BD8
1554++4934 E0           	DB #0D60-#0C80
1555++4935 B0           	DB #0E10-#0D60
1556++4936 E8           	DB #0EF8-#0E10
1557++4937
1558++4937              ;vars from here can be stripped
1559++4937              ;you can move VARS to any other address
1560++4937
1561++4937              VARS
1562++4937
1563++4937 00           is_ts	DB 0
1564++4938
1565++4938              ;ChannelsVars
1566++4938              	STRUCT	CHP
1567++4938 ~            ;reset group
1568++4938 ~            PsInOr	DB 0
1569++4938 ~            PsInSm	DB 0
1570++4938 ~            CrAmSl	DB 0
1571++4938 ~            CrNsSl	DB 0
1572++4938 ~            CrEnSl	DB 0
1573++4938 ~            TSlCnt	DB 0
1574++4938 ~            CrTnSl	DW 0
1575++4938 ~            TnAcc	DW 0
1576++4938 ~            COnOff	DB 0
1577++4938 ~            ;reset group
1578++4938 ~
1579++4938 ~            OnOffD	DB 0
1580++4938 ~
1581++4938 ~            ;IX for PTDECOD here (+12)
1582++4938 ~            OffOnD	DB 0
1583++4938 ~            OrnPtr	DW 0
1584++4938 ~            SamPtr	DW 0
1585++4938 ~            NNtSkp	DB 0
1586++4938 ~            Note	DB 0
1587++4938 ~            SlToNt	DB 0
1588++4938 ~            Env_En	DB 0
1589++4938 ~            Flags	DB 0
1590++4938 ~             ;Enabled - 0, SimpleGliss - 2
1591++4938 ~            TnSlDl	DB 0
1592++4938 ~            TSlStp	DW 0
1593++4938 ~            TnDelt	DW 0
1594++4938 ~            NtSkCn	DB 0
1595++4938 ~            Volume	DB 0
1596++4938              	ENDS
1597++4938
1598++4938              	STRUCT	VRS
1599++4938 ~
1600++4938 ~            ;IF not works in STRUCT in SjASM :(
1601++4938 ~            ;	IF CurPosCounter
1602++4938 ~            CurPos	DB 0
1603++4938 ~            PosSub	DB 0
1604++4938 ~            ;	ENDIF
1605++4938 ~
1606++4938 ~            ModNum	DB 0 ;bit0: ChipNum
1607++4938 ~            	     ;bit1: 1-reversed patterns order (AlCo TS)
1608++4938 ~
1609++4938 ~            ChanA	DS CHP
1610++4938 ~            ChanB	DS CHP
1611++4938 ~            ChanC	DS CHP
1612++4938 ~
1613++4938 ~            ;GlobalVars
1614++4938 ~            MODADDR	DW 0
1615++4938 ~            OrnPtrs	DW 0
1616++4938 ~            SamPtrs	DW 0
1617++4938 ~            PatsPtr	DW 0
1618++4938 ~            AdInPtA	DW 0
1619++4938 ~            AdInPtB	DW 0
1620++4938 ~            AdInPtC	DW 0
1621++4938 ~            CrPsPtr	DW 0
1622++4938 ~            LPosPtr	DW 0
1623++4938 ~            Delay	DB 0
1624++4938 ~            DelyCnt	DB 0
1625++4938 ~            ESldAdd	DW 0
1626++4938 ~            CurESld	DW 0
1627++4938 ~            Env_Del	DB 0
1628++4938 ~            CurEDel	DB 0
1629++4938 ~            Ns_Base	DB 0
1630++4938 ~            AddToNs	DB 0
1631++4938 ~            AddToEn	DB 0
1632++4938 ~            EnvBase	DW 0
1633++4938 ~            AYREGS	DS 14
1634++4938              	ENDS
1635++4938
1636++4938 00 00 00...  VARS1	DS VRS
1637++49BF 00 00 00...  VARS2	DS VRS
1638++4A46
1639++4A46              VT_	EQU $-16
1640++4A46 00 00 00...  	DS 256-16 ;CreatedVolumeTableAddress
1641++4B36
1642++4B36              T1_	EQU VT_+16 ;Tone tables data depacked here
1643++4B36
1644++4B36              T_OLD_1	EQU T1_
1645++4B36              T_OLD_2	EQU T_OLD_1+24
1646++4B36              T_OLD_3	EQU T_OLD_2+24
1647++4B36              T_OLD_0	EQU T_OLD_3+2
1648++4B36              T_NEW_0	EQU T_OLD_0
1649++4B36              T_NEW_1	EQU T_OLD_1
1650++4B36              T_NEW_2	EQU T_NEW_0+24
1651++4B36              T_NEW_3	EQU T_OLD_3
1652++4B36
1653++4B36              PT2EMPTYORN EQU VT_+31 ;1,0,0 sequence
1654++4B36
1655++4B36 00 00 00...  NT_	DS 192 ;CreatedNoteTableAddress
1656++4BF6
1657++4BF6              VAR0END	EQU VT_+16 ;INIT zeroes from VARS to VAR0END-1
1658++4BF6
1659++4BF6              VARSEND EQU $
1660++4BF6
1661++4BF6              MDLADDR EQU outputBuffer
1662++4BF6
1663++4BF6              ;Release 0 steps:
1664++4BF6              ;04/21/2007
1665++4BF6              ;Works start (PTxPlay adaptation); first beta.
1666++4BF6              ;04/22/2007
1667++4BF6              ;Job finished; beta-testing.
1668++4BF6              ;04/23/2007
1669++4BF6              ;PT v3.7 TS mode corrected (after AlCo remarks).
1670++4BF6              ;04/29/2007
1671++4BF6              ;Added 1.XX and 2.XX special commands interpretation for PT3
1672++4BF6              ;modules of v3.7+.
1673++4BF6
1674++4BF6              ;Size (minimal build for ZX Spectrum):
1675++4BF6              ;Code block #908 bytes
1676++4BF6              ;Variables #2BF bytes (can be stripped)
1677++4BF6              ;Total size #908+#2BF=#BC7 (3015) bytes
1678++4BF6              	ENDMODULE
# file closed: player/player.asm
  37++4BF6              	MODULE fakemod
  38++4BF6              fakeret
  39++4BF6 C9           	ret
  40++4BF7                  ENDMODULE
  41++4BF7
# file closed: player/vortexnedoos.asm
  30+ 4BF7                      include "player/mod-processor.asm"
# file opened: player/mod-processor.asm
   1++4BF7                  MODULE ModProcessor
   2++4BF7                  ifdef GS
   3++4BF7
   4++4BF7                  macro _WaitCommand2
   5++4BF7 ~            .wait
   6++4BF7 ~                in a, (CMD)
   7++4BF7 ~                rrca
   8++4BF7 ~                jr c, .wait
   9++4BF7                  endm
  10++4BF7
  11++4BF7                  macro _SendCommand2 nn
  12++4BF7 ~                ld a, nn
  12++4BF7 ~              out (CMD), a
  13++4BF7                  endm
  14++4BF7
  15++4BF7              play:
  16++4BF7 3E FF            ld a, 255
  17++4BF9 32 1D 21         ld (oldminutes), a
  18++4BFC
  19++4BFC CD 2A 08         call Console.waitForKeyUp
  20++4BFF
  21++4BFF 21 B0 1B         ld hl, Gopher.requestbuffer
  21++4C02 CD E3 07       call DialogBox.msgNoWait
  22++4C05
  23++4C05                  ;ld a, 1, (Render.play_next), a
  24++4C05 AF           	xor a
  25++4C06 32 9A 4C     	ld (last_song_position),a
  26++4C09
  27++4C09 26 00 3E 20      ld h, #00, a, 32
  28++4C0D CD 42 01         call TextMode.fillLine
  29++4C10 11 01 00         ld de, #0001
  29++4C13 CD 3A 01       call TextMode.gotoXY
  30++4C16 21 5A 4C         ld hl, message
  30++4C19 CD 27 01       call TextMode.printZ
  31++4C1C 3E 00            ld a, #00
  32++4C1E CD 6A 01         call TextMode.highlightLine
  33++4C21
  34++4C21              .loop
  35++4C21 76               halt
  36++4C22 AF               xor a
  37++4C23 CD 1D 08         call Console.peekC
  38++4C26 FE 08            cp Console.BACKSPACE
  39++4C28 CA 54 4C         jp z, .stopKey
  40++4C2B FE 20        	cp SPACE
  41++4C2D CA 48 4C         jp z, .playNext
  42++4C30
  43++4C30 CD 79 20         call printRTC
  44++4C33
  45++4C33                 ;╨┐╤А╨╛╨▓╨╡╤А╨║╨░ ╤З╤В╨╛ MOD ╨╜╨░╤З╨░╨╗ ╨╕╨│╤А╨░╤В╤М ╤Б╨╜╨░╤З╨░╨╗╨░
  46++4C33                  _SendCommand2 CMD_GET_SONG_POSITION
  46++4C33 3E 60       >    ld a, CMD_GET_SONG_POSITION
  46++4C35 D3 BB       >  out (CMD), a
  47++4C37                  _WaitCommand2
  47++4C37             >.wait
  47++4C37 DB BB       >    in a, (CMD)
  47++4C39 0F          >    rrca
  47++4C3A 38 FB       >    jr c, .wait
  48++4C3C 3A 9A 4C     	ld a,(last_song_position) ;╨┐╤А╨╡╨┤╤Л╨┤╤Г╤Й╨░╤П ╨┐╨╛╨╖╨╕╤Ж╨╕╤П
  49++4C3F 4F           	ld c,a
  50++4C40 DB B3        	in a,(DATA) ;╤В╨╡╨║╤Г╤Й╨░╤П ╨┐╨╛╨╖╨╕╤Ж╨╕╤П
  51++4C42 32 9A 4C     	ld (last_song_position),a
  52++4C45 B9           	cp c
  53++4C46 30 D9        	jr nc, .loop ;╨╡╤Б╨╗╨╕ ╨╜╨╡ ╨╝╨╡╨╜╤М╤И╨╡, ╨┐╤А╨╛╨┤╨╛╨╗╨╢╨░╨╡╨╝ ╨╕╨│╤А╨░╤В╤М
  54++4C48              .playNext
  55++4C48 3E 01 32 21      ld a, 1, (Render.play_next), a ;╤Д╨╗╨░╨│ ╤З╤В╨╛ ╨╜╨░╨┤╨╛ ╨▒╤Г╨┤╨╡╤В ╨╕╨│╤А╨░╤В╤М ╤Б╨╗╨╡╨┤╤Г╤О╤Й╨╕╨╣ ╤Д╨░╨╣╨╗
  55++4C4C 07
  56++4C4D              .stop
  57++4C4D CD 50 20         call GeneralSound.stopModule
  58++4C50
  59++4C50 CD 2A 08         call Console.waitForKeyUp
  60++4C53 C9               ret
  61++4C54              .stopKey
  62++4C54 AF               xor a
  62++4C55 32 21 07       ld (Render.play_next), a ;╤Д╨╗╨░╨│ ╤З╤В╨╛ ╨╜╨╡ ╨╜╨░╨┤╨╛ ╨╕╨│╤А╨░╤В╤М ╤Б╨╗╨╡╨┤╤Г╤О╤Й╨╕╨╣ ╤Д╨░╨╣╨╗
  63++4C58 18 F3            jr .stop
  64++4C5A
  65++4C5A
  66++4C5A 50 6C 61 79  message db "Playing MODs [SPACE] for next song [BACKSPACE] for stop playing", 0
  66++4C5E 69 6E 67 20
  66++4C62 4D 4F 44 73
  66++4C66 20 5B 53 50
  66++4C6A 41 43 45 5D
  66++4C6E 20 66 6F 72
  66++4C72 20 6E 65 78
  66++4C76 74 20 73 6F
  66++4C7A 6E 67 20 5B
  66++4C7E 42 41 43 4B
  66++4C82 53 50 41 43
  66++4C86 45 5D 20 66
  66++4C8A 6F 72 20 73
  66++4C8E 74 6F 70 20
  66++4C92 70 6C 61 79
  66++4C96 69 6E 67 00
  67++4C9A
  68++4C9A
  69++4C9A              CMD_GET_SONG_POSITION     = #60
  70++4C9A 00           last_song_position db 0
  71++4C9B
  72++4C9B              ;; Control ports
  73++4C9B              CMD  = 187
  74++4C9B              DATA = 179
  75++4C9B                  endif
  76++4C9B                  ENDMODULE
  77++4C9B
# file closed: player/mod-processor.asm
  31+ 4C9B              start:
  32+ 4C9B              outputBuffer:
  33+ 4C9B 31 00 40             ld sp, 0x4000
  34+ 4C9E 0E EA                ld c,nos.CMD_SETSYSDRV
  35+ 4CA0 08                	ex af,af'
  36+ 4CA1 CD 05 00     	    call nos.BDOS
  37+ 4CA4              	ELSE
  38+ 4CA4 ~                    include "player/vortex-processor.asm"
  39+ 4CA4 ~                    include "player/mod-processor.asm"
  40+ 4CA4 ~                    include "screen/screen.asm"
  41+ 4CA4 ~            start:
  42+ 4CA4 ~            outputBuffer:
  43+ 4CA4 ~                    di
  44+ 4CA4 ~                    xor a
  44+ 4CA4 ~              ld (#5c6a), a  ; Thank you, Mario Prato, for feedback
  45+ 4CA4 ~                    ld (#5c00),a
  46+ 4CA4 ~                    ld sp, asmOrg
  47+ 4CA4 ~                    call Memory.init
  48+ 4CA4 ~                    xor a
  48+ 4CA4 ~              out (#fe),a
  49+ 4CA4 ~                    ei
  50+ 4CA4 ~
  51+ 4CA4 ~                    ld a, 7
  51+ 4CA4 ~              call Memory.setPage
  52+ 4CA4 ~                    ;; Logo
  53+ 4CA4 ~                    ld hl, logo, b, Dos.FMODE_READ
  53+ 4CA4 ~              call Dos.fopen
  54+ 4CA4 ~                    push af
  55+ 4CA4 ~                    ld hl, #c000, bc, 6912
  55+ 4CA4 ~              call Dos.fread
  56+ 4CA4 ~                    pop af
  57+ 4CA4 ~                    call Dos.fclose
  58+ 4CA4 ~
  59+ 4CA4 ~                    ld b, 50
  60+ 4CA4 ~            1       halt
  61+ 4CA4 ~                    djnz 1b
  62+ 4CA4                  ENDIF
  63+ 4CA4
  64+ 4CA4 CD 07 01         call TextMode.init
  65+ 4CA7 21 B3 4C     	ld hl, initing
  65+ 4CAA CD 27 01       call TextMode.printZ
  66+ 4CAD CD B9 1D       	call Wifi.init
  67+ 4CB0 C3 E9 08         jp History.home
  68+ 4CB3
  69+ 4CB3 49 6E 69 74  initing db "Initing Wifi...", "\r\n", 0
  69+ 4CB7 69 6E 67 20
  69+ 4CBB 57 69 66 69
  69+ 4CBF 2E 2E 2E 0D
  69+ 4CC3 0A 00
  70+ 4CC5 62 72 6F 77  logo    db "browser/logo.scr", 0
  70+ 4CC9 73 65 72 2F
  70+ 4CCD 6C 6F 67 6F
  70+ 4CD1 2E 73 63 72
  70+ 4CD5 00
  71+ 4CD6 62 72 6F 77  creds   db "browser/auth.pwd", 0
  71+ 4CDA 73 65 72 2F
  71+ 4CDE 61 75 74 68
  71+ 4CE2 2E 70 77 64
  71+ 4CE6 00
  72+ 4CE7              outputBuffer2:
  73+ 4CE7 41 54 45 30      db  "ATE0", 0
  73+ 4CEB 00
  74+ 4CEC
  75+ 4CEC                  display "ENDS: ", $
  76+ 4CEC                  display "Buff size", #ffff - $
  77+ 4CEC                  IFDEF NEDOOS
  78+ 4CEC                      savebin "moon.com", asmOrg, $ - asmOrg
  79+ 4CEC                  ELSE
  80+ 4CEC ~            		IFDEF TRDOS
  81+ 4CEC ~            			SAVETRD "MOONR.TRD",|"moon.C",asmOrg, $ - asmOrg
  82+ 4CEC ~            		ELSE
  83+ 4CEC ~            			savebin "moon.bin", asmOrg, $ - asmOrg
  84+ 4CEC ~            	    	ENDIF
  85+ 4CEC                  ENDIF
  86+ 4CEC
# file closed: main-all.asm
  17  4CEC                  ENDIF
# file closed: main.asm
