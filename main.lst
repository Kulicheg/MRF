# file opened: main.asm
   1  0000                  DEFINE TCP_BUF_SIZE 1024
   2  0000              ; Generate version string
   3  0000                  LUA ALLPASS
   4  0000 ~                v = tostring(sj.get_define("V"))
   5  0000 ~                maj = string.sub(v, 1,1)
   6  0000 ~                min = string.sub(v, 2,2)
   7  0000 ~                sj.insert_define("VERSION_STRING", "\"" .. maj .. "." .. min .. "\"")
   8  0000 ~
   9  0000 ~                b = tostring(sj.get_define("BLD"))
  10  0000 ~                sj.insert_define("BUILD_STRING", "\"" .. b .. "\"")
  11  0000                  ENDLUA
  12  0000
  13  0000                  IFDEF MSX
  14  0000 ~                    include "main-msx.asm"
  15  0000                  ELSE
  16  0000                      include "main-all.asm"
# file opened: main-all.asm
   1+ 0000                  device	zxspectrum128
   2+ 0000                  IFDEF NEDOOS
   3+ 0000 ~            	DEFINE CRLF "\r\n"
   4+ 0000 ~                    MODULE nos
   5+ 0000 ~                        include "../_sdk/sysdefs.asm"
   6+ 0000 ~                    ENDMODULE
   7+ 0000 ~                    org nos.PROGSTART
   8+ 0000                      ELSE
   9+ 0000              	DEFINE CRLF "\r"
  10+ 0000                      org 24576
  11+ 6000                  ENDIF
  12+ 6000              asmOrg:
  13+ 6000                  align 256
  14+ 6000 C3 FC 94         jp start
  15+ 6003                  include "vdp/index.asm"
# file opened: vdp/index.asm
   1++6003                  IFDEF TIMEX
   2++6003 ~                include "timex.asm"
   3++6003                  ENDIF
   4++6003
   5++6003                  IFDEF TIMEX80
   6++6003                  include "timex80.asm"
# file opened: vdp/timex80.asm
   1++6003              COLOR=0
   2++6003                  module TextMode
   3++6003              PORT_SELECT = #7c3b
   4++6003              init:
   5++6003 21 C8 61 06      ld hl, font_file, b, Dos.FMODE_READ
   5++6007 01
   6++6008 CD EF 69         call Dos.fopen
   7++600B F5               push af
   8++600C 01 00 08 21      ld bc, 2048, hl, font
   8++6010 00 40
   9++6012 CD DC 6A         call Dos.fread
  10++6015 F1               pop af
  11++6016 CD C8 6A         call Dos.fclose
  12++6019
  13++6019                  IFDEF UNO
  14++6019 ~                ;; Force turbo mode
  15++6019 ~                ld bc, 64571
  15++6019 ~              ld a, #0b
  15++6019 ~              out (c), a
  16++6019 ~                ld bc, 64827
  16++6019 ~              in a, (c)
  16++6019 ~              or #c0
  16++6019 ~              out (c),a
  17++6019                  ENDIF
  18++6019              cls:
  19++6019 3E 07            ld a, 7
  19++601B CD 7C 88       call Memory.setPage
  20++601E
  21++601E                  IFDEF UNO
  22++601E ~                ld a, #3E
  22++601E ~              out (#ff), a
  23++601E                  ELSE
  24++601E 01 F7 EF         ld	bc, #EFF7   ;   Scorpio
  25++6021 3E 02            ld a,2
  26++6023 ED 79            out (C), a
  27++6025                  ENDIF
  28++6025
  29++6025 F3               di
  30++6026 21 00 00 54      ld	hl,0, d,h, e,h, b,h, c,b
  30++602A 5C 44 48
  31++602D 39               add	hl,sp
  32++602E 31 00 D8         ld	sp,#c000 + 6144
  33++6031              .loop
  34++6031                  dup 12
  35++6031 D5          >	push	de
  35++6032 D5          >	push	de
  35++6033 D5          >	push	de
  35++6034 D5          >	push	de
  35++6035 D5          >	push	de
  35++6036 D5          >	push	de
  35++6037 D5          >	push	de
  35++6038 D5          >	push	de
  35++6039 D5          >	push	de
  35++603A D5          >	push	de
  35++603B D5          >	push	de
  35++603C D5          >	push	de
  36++603D                  edup
  37++603D
  38++603D 10 F2            djnz	.loop
  39++603F
  40++603F 41               ld	b,c
  41++6040 31 00 F8         ld	sp,#e000 + 6144
  42++6043              .loop2:
  43++6043                  dup 12
  44++6043 D5          >	push	de
  44++6044 D5          >	push	de
  44++6045 D5          >	push	de
  44++6046 D5          >	push	de
  44++6047 D5          >	push	de
  44++6048 D5          >	push	de
  44++6049 D5          >	push	de
  44++604A D5          >	push	de
  44++604B D5          >	push	de
  44++604C D5          >	push	de
  44++604D D5          >	push	de
  44++604E D5          >	push	de
  45++604F                  edup
  46++604F
  47++604F 10 F2            djnz .loop2
  48++6051 F9               ld	sp,hl
  49++6052 21 00 00         ld hl ,0
  49++6055 22 C6 61       ld (coords), hl
  50++6058 AF               xor a
  50++6059 CD 7C 88       call Memory.setPage
  51++605C
  52++605C FB               ei
  53++605D C9               ret
  54++605E
  55++605E              ; A - line
  56++605E              usualLine:
  57++605E 57              ld d, a
  58++605F 18 01           jr fill
  59++6061              ; A - line
  60++6061              highlightLine:
  61++6061 57               ld d, a
  62++6062              fill:
  63++6062 1E 00 06 40      ld e, 0, b, 64
  64++6066              .lloop
  65++6066 C5           	push bc
  66++6067 D5           	push de
  67++6068 CD 8D 61     	call findAddr
  68++606B 3E 07            ld a, 7
  68++606D CD 7C 88       call Memory.setPage
  69++6070
  70++6070 06 08        	ld b, 8
  71++6072              .cloop
  72++6072 1A           	ld a, (de)
  72++6073 EE FF          xor #ff
  72++6075 12             ld (de), a
  73++6076 14           	inc d
  74++6077 10 F9        	djnz .cloop
  75++6079 D1           	pop de
  76++607A 1C           	inc e
  77++607B C1           	pop bc
  78++607C 10 E8        	djnz .lloop
  79++607E
  80++607E AF               xor a
  80++607F CD 7C 88       call Memory.setPage
  81++6082 C9               ret
  82++6083
  83++6083              printZ:
  84++6083 7E               ld a, (hl)
  84++6084 A7             and a
  84++6085 C8             ret z
  85++6086 E5               push hl
  86++6087 CD 8E 60         call putC
  87++608A E1               pop hl
  88++608B 23               inc hl
  89++608C 18 F5            jr printZ
  90++608E
  91++608E
  92++608E              ; A - char
  93++608E              putC:
  94++608E 32 39 61         ld (drawC.char_tmp), a
  95++6091
  96++6091 FE 0D        	cp 13
  97++6093 CA B0 60     	jp z, .cr
  98++6096
  99++6096 ED 5B C6 61      ld de, (coords)
 100++609A 7B               ld a, e
 101++609B FE 55            cp 85
 102++609D D0               ret nc
 103++609E
 104++609E
 105++609E 3E 07            ld a, 7
 106++60A0 CD 7C 88         call Memory.setPage
 107++60A3 FD E5            push iy
 108++60A5 CD C7 60         call drawC
 109++60A8 FD E1            pop iy
 110++60AA
 111++60AA 21 C6 61         ld hl, coords
 112++60AD 34               inc (hl)
 113++60AE
 114++60AE 18 12            jr .exit
 115++60B0              .cr
 116++60B0 2A C6 61     	ld hl, (coords)
 117++60B3 24           	inc h
 118++60B4 2E 00 22 C6  	ld l, 0, (coords), hl
 118++60B8 61
 119++60B9 FE 18        	cp 24
 120++60BB D8           	ret c
 121++60BC 21 00 00 22  	ld hl, 0, (coords), hl
 121++60C0 C6 61
 122++60C2              .exit
 123++60C2 AF               xor a
 123++60C3 CD 7C 88       call Memory.setPage
 124++60C6 C9           	ret
 125++60C7
 126++60C7              drawC:
 127++60C7 2A C6 61         ld hl, (coords)
 128++60CA 45               ld b, l
 129++60CB CD F6 60         call .calc
 130++60CE 54               ld d, h
 131++60CF 5D               ld e, l
 132++60D0 32 3A 61         ld (.rot_tmp), a
 133++60D3 CD 8D 61         call findAddr
 134++60D6 D5               push de
 135++60D7 CD 2A 61         call .get_char
 136++60DA
 137++60DA E1               pop hl
 138++60DB              .print0
 139++60DB E5 DD E1         ld ix, hl
 140++60DE 7C               ld a, h
 141++60DF CB 6F            bit 5, a
 142++60E1 28 01            jr z, .ok
 143++60E3 2C               inc l
 144++60E4              .ok
 145++60E4 EE 20            xor #20
 145++60E6 67             ld h, a
 146++60E7 E5 FD E1         ld iy, hl
 147++60EA 3A 3A 61         ld a, (.rot_tmp)
 148++60ED CD 19 61         call .rotate_mask
 149++60F0 3A 3A 61         ld a, (.rot_tmp)
 150++60F3 C3 3B 61         jp basic_draw
 151++60F6              .calc
 152++60F6 2E 00              ld l,0
 153++60F8 78                 ld a, b
 153++60F9 A7             and a
 153++60FA C8             ret z
 154++60FB DD 21 00 00        ld ix, 0
 155++60FF 11 06 00           ld de,6
 156++6102 DD 19        1     add ix, de
 157++6104 10 FC              djnz 1b
 158++6106 11 F8 FF           ld de, -8
 159++6109 DD 7C        2     ld a, ixh
 160++610B A7                 and a
 161++610C 20 05              jr nz, 3f
 162++610E DD 7D              ld a, ixl
 163++6110 FE 08              cp 8
 164++6112 D8                 ret c
 165++6113              3
 166++6113 DD 19              add ix, de
 167++6115 2C                 inc l
 168++6116 18 F1              jr 2b
 169++6118 C9                 ret
 170++6119
 171++6119              .rotate_mask
 172++6119 21 FF 03         ld hl, #03ff
 173++611C A7               and a
 173++611D C8             ret z
 174++611E              .rot_loop
 175++611E 08               ex af, af
 176++611F 7D               ld a,l
 177++6120 0F               rrca
 178++6121 CB 1C            rr h
 179++6123 CB 1D            rr l
 180++6125 08               ex af, af
 181++6126 3D               dec a
 182++6127 20 F5            jr nz, .rot_loop
 183++6129 C9               ret
 184++612A              .get_char:
 185++612A 3A 39 61         ld a, (.char_tmp)
 186++612D 6F               ld l, a
 187++612E 26 00            ld h, 0
 188++6130 29               add hl, hl
 189++6131 29               add hl, hl
 190++6132 29               add hl, hl
 191++6133 01 00 40         ld bc, font
 192++6136 09               add hl, bc
 193++6137 EB               ex hl, de
 194++6138 C9               ret
 195++6139 00           .char_tmp db 0
 196++613A 00           .rot_tmp  db 0
 197++613B              ; A - rotation counter
 198++613B              ; DE - font PTR
 199++613B              ; HL - mask
 200++613B              ; IX - left half on screen
 201++613B              ; IY - right half on screen
 202++613B              basic_draw:
 203++613B 32 4D 61         ld (.rot_cnt),a
 204++613E
 205++613E 7D               ld a, l
 206++613F 32 60 61         ld (.mask1), a
 207++6142 7C               ld a, h
 208++6143 32 69 61         ld (.mask2), a
 209++6146 06 08            ld b, 8
 210++6148              .printIt
 211++6148 1A               ld a, (de)
 212++6149 67               ld h, a
 213++614A 2E 00            ld l, 0
 214++614C 3E 00            ld a, 0
 215++614E              .rot_cnt = $ - 1
 216++614E A7               and a
 216++614F 28 0B          jr z, .skiprot
 217++6151              .rot
 218++6151 08               ex af, af
 219++6152 7D               ld a,l
 220++6153 0F               rrca
 221++6154 CB 1C            rr h
 222++6156 CB 1D            rr l
 223++6158 08               ex af, af
 224++6159 3D               dec a
 225++615A 20 F5            jr nz, .rot
 226++615C              .skiprot
 227++615C FD 7E 00         ld a, (iy)
 228++615F E6 0F            and #0f
 229++6161              .mask1 = $ - 1
 230++6161 B5               or l
 231++6162 FD 77 00         ld (iy), a
 232++6165 DD 7E 00         ld a, (ix)
 233++6168 E6 FC            and #fc
 234++616A              .mask2 = $ -1
 235++616A B4               or h
 236++616B DD 77 00         ld (ix), a
 237++616E DD 24            inc ixh
 238++6170 FD 24            inc iyh
 239++6172 13               inc de
 240++6173 10 D3            djnz .printIt
 241++6175 C9               ret
 242++6176
 243++6176
 244++6176              ; H - line
 245++6176              ; A - char
 246++6176              fillLine:
 247++6176 54 1E 00         ld d, h, e, 0
 247++6179 CD 88 61       call gotoXY
 248++617C 06 55            ld b, 85
 249++617E              .loop
 250++617E F5 C5            push af, bc
 251++6180 CD 8E 60         call putC
 252++6183 C1 F1            pop bc, af
 253++6185 10 F7            djnz .loop
 254++6187 C9               ret
 255++6188
 256++6188
 257++6188              gotoXY:
 258++6188 ED 53 C6 61      ld (coords), de
 259++618C C9               ret
 260++618D
 261++618D              ; D - Y
 262++618D              ; E - X
 263++618D              ; OUT: de - coords
 264++618D              findAddr:
 265++618D 7B               ld a, e
 266++618E CB 3F            srl a
 267++6190 5F               ld e,a
 268++6191 06 E0            ld b, #E0
 269++6193 38 02            jr c, .proc
 270++6195 06 C0            ld b, #C0
 271++6197              .proc
 272++6197 7A               LD A,D
 273++6198 E6 07            AND 7
 274++619A 0F               RRCA
 275++619B 0F               RRCA
 276++619C 0F               RRCA
 277++619D B3               OR E
 278++619E 5F               LD E,A
 279++619F 7A               LD A,D
 280++61A0 E6 18            AND 24
 281++61A2 B0               OR b
 282++61A3 57               LD D,A
 283++61A4 C9               ret
 284++61A5
 285++61A5              toggleColor:
 286++61A5 3A BD 61         ld a,(curState)
 287++61A8 FE 07            cp 7
 288++61AA CA B5 61         jp z, sevenEleven
 289++61AD              ;zerroTolerance
 290++61AD 3E 07            ld a,7
 291++61AF 32 BD 61         ld (curState),a
 292++61B2 D3 FE            out (#fe),a
 293++61B4 C9               ret
 294++61B5              sevenEleven:
 295++61B5 3E 00            ld a,0
 296++61B7 32 BD 61         ld (curState),a
 297++61BA D3 FE            out (#fe),a
 298++61BC C9               ret
 299++61BD              curState:
 300++61BD 00               db 0
 301++61BE              disable:
 302++61BE                  IFDEF UNO
 303++61BE ~                xor a
 303++61BE ~              out (#fe), a
 303++61BE ~              out (#ff), a
 304++61BE                  ELSE
 305++61BE 01 F7 EF         ld	bc, #EFF7   ;   Scorpio
 306++61C1 3E 00            ld a,0
 307++61C3 ED 79            out (C), a
 308++61C5                  ENDIF
 309++61C5 C9               ret
 310++61C6
 311++61C6 00 00        coords dw 0
 312++61C8              font equ #4000 ; Using ZX-Spectrum screen as font buffer
 313++61C8 66 6F 6E 74  font_file db "font80.bin", 0
 313++61CC 38 30 2E 62
 313++61D0 69 6E 00
 314++61D3                  endmodule
 315++61D3
 316++61D3              exit:
 317++61D3 01 3B 7C 3E      ld bc, TextMode.PORT_SELECT, a, 1
 317++61D7 01
 318++61D8 ED 79            out (c), a
 319++61DA 04               inc b
 319++61DB AF             xor a
 320++61DC ED 79            out (c), a
 321++61DE C7               rst 0
# file closed: vdp/timex80.asm
   7++61DF                  ENDIF
   8++61DF
   9++61DF                  IFDEF ZXSCR
  10++61DF ~                include "zx.asm"
  11++61DF                  ENDIF
  12++61DF
  13++61DF              	IFDEF NEDOOS
  14++61DF ~                include "nedotext.asm"
  15++61DF                  ENDIF
# file closed: vdp/index.asm
  16+ 61DF                  include "utils/index.asm"
# file opened: utils/index.asm
   1++61DF                  include "atoi.asm"
# file opened: utils/atoi.asm
   1++61DF              ; DE - buffer
   2++61DF              ; HL - output
   3++61DF              atohl:
   4++61DF 21 00 00         ld hl, 0
   5++61E2              .loop
   6++61E2 1A               ld a, (de)
   7++61E3 13               inc de
   8++61E4                  ; Sepparators
   9++61E4 C5 E5            push bc, hl
  10++61E6 01 05 00             ld bc, sepparators_len
  11++61E9 21 01 62             ld hl, sepparators
  12++61EC ED B1                cpir
  13++61EE E1 C1            pop hl, bc
  14++61F0 C8               ret z
  15++61F1
  16++61F1 D6 30            sub '0'
  17++61F3
  18++61F3 C5               push bc
  19++61F4 4D                   ld c, l
  20++61F5 44                   ld b, h
  21++61F6
  22++61F6 29                   add hl, hl
  23++61F7 29                   add hl, hl
  24++61F8 09                   add hl, bc
  25++61F9 29                   add hl, hl
  26++61FA 4F                   ld c, a
  27++61FB 06 00                ld b, 0
  28++61FD 09                   add hl, bc
  29++61FE C1               pop bc
  30++61FF 18 E1            jr .loop
  31++6201
# file closed: utils/atoi.asm
   2++6201                  include "constants.asm"
# file opened: utils/constants.asm
   1++6201              TAB = 9
   2++6201              CR = 13
   3++6201              LF = 10
   4++6201              NULL = 0
   5++6201              SPACE = ' '
   6++6201              ESC = 27
   7++6201              BACKSPACE = 8
   8++6201
   9++6201                  IFDEF TIMEX80
  10++6201              MIME_DOWNLOAD 	= #19
  11++6201              MIME_LINK 		= #1A
  12++6201              MIME_TEXT 		= #10
  13++6201              MIME_IMAGE 		= #01
  14++6201              MIME_MUSIC 		= #0e
  15++6201              MIME_INPUT 		= #b3
  16++6201              MIME_MOD 		= #0d
  17++6201
  18++6201              BORDER_TOP = #b2
  19++6201              BORDER_BOTTOM = #b1
  20++6201                  ELSE
  21++6201 ~            	IFDEF MSX
  22++6201 ~            MIME_DOWNLOAD 	= 1
  23++6201 ~            MIME_LINK		= 2
  24++6201 ~            MIME_TEXT 		= 3
  25++6201 ~            MIME_IMAGE 		= 4
  26++6201 ~            MIME_MUSIC 		= 5
  27++6201 ~            MIME_INPUT 		= 6
  28++6201 ~            MIME_MOD      	= 7
  29++6201 ~            BORDER_TOP    = 7
  30++6201 ~            BORDER_BOTTOM = 8
  31++6201 ~            	ELSE
  32++6201 ~            MIME_DOWNLOAD = 1
  33++6201 ~            MIME_LINK     = 2
  34++6201 ~            MIME_TEXT     = 3
  35++6201 ~            MIME_IMAGE    = 6
  36++6201 ~            MIME_MUSIC    = 5
  37++6201 ~            MIME_INPUT    = 4
  38++6201 ~            MIME_MOD      = 7
  39++6201 ~
  40++6201 ~            BORDER_TOP    = 9
  41++6201 ~            BORDER_BOTTOM = 8
  42++6201 ~            	ENDIF
  43++6201 ~
  44++6201 ~
  45++6201 ~
  46++6201 ~
  47++6201              	ENDIF
  48++6201
  49++6201 0D 0A 09 00  sepparators db CR, LF, TAB, NULL, SPACE
  49++6205 20
  50++6206              sepparators_len = $ - sepparators
# file closed: utils/constants.asm
   3++6206                  include "strutils.asm"
# file opened: utils/strutils.asm
   1++6206              ; de - pointer
   2++6206              ; hl - count
   3++6206              strlen:
   4++6206 21 00 00         ld hl, 0
   5++6209              .loop
   6++6209 1A               ld a, (de)
   7++620A A7               and a
   7++620B 28 04          jr z, .exit
   8++620D 23               inc hl
   9++620E 13               inc de
  10++620F 18 F8            jr .loop
  11++6211              .exit
  12++6211 C9               ret
  13++6212
  14++6212                  module CompareBuff
  15++6212
  16++6212              ; Pushes A to buffer
  17++6212              push
  18++6212 F5               push af
  19++6213 06 20            ld b, 32
  19++6215 21 5E 62       ld hl, buffer + 1
  19++6218 11 5D 62       ld de, buffer
  20++621B              .loop
  21++621B 7E               ld a, (hl)
  21++621C 12             ld (de), a
  21++621D 23             inc hl
  21++621E 13             inc de
  21++621F 10 FA          djnz .loop
  22++6221 F1               pop af
  23++6222 21 7C 62         ld hl, buffer + 31
  23++6225 77             ld (hl), a
  24++6226 C9               ret
  25++6227
  26++6227              ; HL - Compare string(null terminated)
  27++6227              ; A - 0 NOT Found
  28++6227              ;     1 Found
  29++6227              search:
  30++6227 06 00            ld b, 0
  30++6229 E5             push hl
  31++622A              .loop:
  32++622A 7E               ld a, (hl)
  32++622B 23             inc hl
  32++622C 04             inc b
  32++622D A7             and a
  32++622E C2 2A 62       jp nz, .loop
  33++6231 05               dec b
  33++6232 E1             pop hl
  33++6233 C5             push bc
  33++6234 E5             push hl
  34++6235 E1               pop hl
  35++6236 11 7D 62         ld de, buffer + 32
  36++6239              .sourceLoop
  37++6239 1B               dec de
  37++623A 10 FD          djnz .sourceLoop
  38++623C C1               pop bc
  39++623D              .compare
  40++623D C5               push bc
  40++623E F5             push af
  41++623F 1A               ld a, (de)
  41++6240 47             ld b, a
  42++6241 F1               pop af
  42++6242 7E             ld a, (hl)
  42++6243 B8             cp b
  42++6244 C1             pop bc
  42++6245 3E 00          ld a, 0
  42++6247 C0             ret nz
  43++6248 13               inc de
  43++6249 23             inc hl
  44++624A 10 F1            djnz .compare
  45++624C 3E 01            ld a, 1
  46++624E C9               ret
  47++624F
  48++624F              clear:
  49++624F AF               xor a
  49++6250 21 5D 62       ld hl, buffer
  49++6253 11 5E 62       ld de, buffer + 1
  49++6256 01 20 00       ld bc, 32
  49++6259 77             ld (hl), a
  49++625A ED B0          ldir
  50++625C C9               ret
  51++625D
  52++625D 00 00 00...  buffer ds 32
  53++627D
  54++627D                  endmodule
# file closed: utils/strutils.asm
   4++627D                  IFDEF MSX
   5++627D ~            	    include "bios.asm"
   6++627D                  ENDIF
   7++627D                  include "screen.asm"
# file opened: utils/screen.asm
   1++627D              LINE_LIMIT = 63
   2++627D
   3++627D                  IFDEF NEDOOS
   4++627D ~            LINE_LIMIT = 79
   5++627D                  ENDIF
   6++627D
   7++627D                  IFDEF TIMEX80
   8++627D              LINE_LIMIT = 84
   9++627D                  ENDIF
  10++627D
  11++627D                  IFDEF MSX
  12++627D ~            LINE_LIMIT = 79
  13++627D                  ENDIF
  14++627D              ; HL - string pointer
  15++627D              print70Text:
  16++627D 06 54            ld b, LINE_LIMIT
  17++627F              .loop
  18++627F 7E               ld a, (hl)
  19++6280 A7               and a
  19++6281 C8             ret z
  20++6282 FE 0D            cp 13
  20++6284 C8             ret z
  21++6285 FE 0A            cp 10
  21++6287 C8             ret z
  22++6288 C5               push bc
  23++6289 E5               push hl
  24++628A CD 8E 60         call TextMode.putC
  25++628D E1               pop hl
  26++628E 23               inc hl
  27++628F C1               pop bc
  28++6290 05               dec b
  29++6291 78               ld a, b
  29++6292 A7             and a
  29++6293 C8             ret z
  30++6294 C3 7F 62         jp .loop
  31++6297
  32++6297              ; HL - string pointer
  33++6297              print70Goph:
  34++6297 06 54            ld b, LINE_LIMIT
  35++6299              .loop
  36++6299 7E               ld a, (hl)
  36++629A FE 09          cp 09
  36++629C C8             ret z
  37++629D A7               and a
  37++629E C8             ret z
  38++629F C5               push bc
  39++62A0 E5               push hl
  40++62A1 CD 8E 60         call TextMode.putC
  41++62A4 E1               pop hl
  42++62A5 23               inc hl
  43++62A6 C1               pop bc
  44++62A7 05               dec b
  45++62A8 78               ld a, b
  45++62A9 A7             and a
  45++62AA C8             ret z
  46++62AB C3 99 62         jp .loop
# file closed: utils/screen.asm
# file closed: utils/index.asm
  17+ 62AE                  include "gopher/render/index.asm"
# file opened: gopher/render/index.asm
   1++62AE                  MODULE Render
   2++62AE              PER_PAGE = 22
   3++62AE              CURSOR_OFFSET = 2
   4++62AE                  include "row.asm"
# file opened: gopher/render/row.asm
   1++62AE              ; A - row number
   2++62AE              ; HL - pointer to row
   3++62AE              renderRow:
   4++62AE C6 02            add CURSOR_OFFSET
   5++62B0 57               ld d,a
   6++62B1 1E 00            ld e,0
   7++62B3 CD 88 61         call TextMode.gotoXY
   8++62B6 7E               ld a,(hl)
   9++62B7 E5               push hl
  10++62B8 CD C3 62         call getIcon
  11++62BB CD 8E 60         call TextMode.putC
  12++62BE E1               pop hl
  13++62BF 23               inc hl
  14++62C0 C3 97 62         jp print70Goph
  15++62C3
  16++62C3              ; A - gopher id char
  17++62C3              getIcon:
  18++62C3 FE 69            cp 'i'
  18++62C5 CA DF 62       jp z, .info
  19++62C8 FE 39            cp '9'
  19++62CA CA E2 62       jp z, .down
  20++62CD FE 31            cp '1'
  20++62CF CA 48 63       jp z, .page
  21++62D2 FE 30            cp '0'
  21++62D4 CA 4B 63       jp z, .text
  22++62D7 FE 37            cp '7'
  22++62D9 CA 4E 63       jp z, .input
  23++62DC 3E 20            ld a, ' '
  24++62DE C9               ret
  25++62DF              .info
  26++62DF 3E 20            ld a, SPACE
  26++62E1 C9             ret
  27++62E2              .down
  28++62E2 54 5D            ld de, hl
  29++62E4 01 FF 00 3E      ld bc, #ff, a, TAB
  29++62E8 09
  29++62E9 ED B1          cpir
  30++62EB 78               ld a, b
  30++62EC B1             or c
  30++62ED 28 56          jr z, .downExit
  31++62EF D5               push de
  32++62F0              .nameLoop
  33++62F0 7E               ld a, (hl)
  33++62F1 A7             and a
  33++62F2 28 10          jr z, .check
  34++62F4 FE 09            cp TAB
  34++62F6 28 0C          jr z, .check
  35++62F8 FE 0D            cp CR
  35++62FA 28 08          jr z, .check
  36++62FC E5               push hl
  37++62FD CD 12 62         call CompareBuff.push
  38++6300 E1               pop hl
  39++6301 23               inc hl
  40++6302 18 EC            jr .nameLoop
  41++6304              .check
  42++6304 21 5D 63         ld hl, scrExt1
  42++6307 CD 27 62       call CompareBuff.search
  42++630A A7             and a
  42++630B 20 44          jr nz, .image
  43++630D 21 62 63         ld hl, scrExt2
  43++6310 CD 27 62       call CompareBuff.search
  43++6313 A7             and a
  43++6314 20 3B          jr nz, .image
  44++6316 3E 03            ld a, 3
  44++6318 32 EB 88       ld (VTPL.SETUP), a ; 0 bit - looping, 1 bit - pt2 file
  45++631B 21 71 63         ld hl, pt2Ext1
  45++631E CD 27 62       call CompareBuff.search
  45++6321 A7             and a
  45++6322 20 31          jr nz, .music
  46++6324 21 76 63         ld hl, pt2Ext2
  46++6327 CD 27 62       call CompareBuff.search
  46++632A A7             and a
  46++632B 20 28          jr nz, .music
  47++632D 3E 01            ld a, 1
  47++632F 32 EB 88       ld (VTPL.SETUP), a
  48++6332 21 67 63         ld hl, pt3Ext1
  48++6335 CD 27 62       call CompareBuff.search
  48++6338 A7             and a
  48++6339 20 1A          jr nz, .music
  49++633B 21 6C 63         ld hl, pt3Ext2
  49++633E CD 27 62       call CompareBuff.search
  49++6341 A7             and a
  49++6342 20 11          jr nz, .music
  50++6344
  51++6344                  ; General Sound support
  52++6344                  ifdef GS
  53++6344 ~                ld hl, modExt1
  53++6344 ~              call CompareBuff.search
  53++6344 ~              and a
  53++6344 ~              jr nz, .mod
  54++6344 ~                ld hl, modExt2
  54++6344 ~              call CompareBuff.search
  54++6344 ~              and a
  54++6344 ~              jr nz, .mod
  55++6344                  endif
  56++6344
  57++6344              .checkExit
  58++6344 E1               pop hl
  59++6345              .downExit
  60++6345 3E 19            ld a, MIME_DOWNLOAD
  60++6347 C9             ret
  61++6348              .page
  62++6348 3E 1A            ld a, MIME_LINK
  62++634A C9             ret
  63++634B              .text
  64++634B 3E 10            ld a, MIME_TEXT
  64++634D C9             ret
  65++634E              .input
  66++634E 3E B3            ld a, MIME_INPUT
  66++6350 C9             ret
  67++6351              .image
  68++6351 E1               pop hl
  68++6352 3E 01          ld a, MIME_IMAGE
  68++6354 C9             ret
  69++6355              .music
  70++6355 E1               pop hl
  70++6356 3E 0E          ld a, MIME_MUSIC
  70++6358 C9             ret
  71++6359              .mod
  72++6359 E1               pop hl
  72++635A 3E 0D          ld a, MIME_MOD
  72++635C C9             ret
  73++635D
  74++635D 2E 73 63 72  scrExt1 db ".scr", 0
  74++6361 00
  75++6362 2E 53 43 52  scrExt2 db ".SCR", 0
  75++6366 00
  76++6367
  77++6367 2E 70 74 33  pt3Ext1 db ".pt3", 0
  77++636B 00
  78++636C 2E 50 54 33  pt3Ext2 db ".PT3", 0
  78++6370 00
  79++6371 2E 70 74 32  pt2Ext1 db ".pt2", 0
  79++6375 00
  80++6376 2E 50 54 32  pt2Ext2 db ".PT2", 0
  80++637A 00
  81++637B 2E 6D 6F 64  modExt1 db ".mod", 0
  81++637F 00
  82++6380 2E 4D 4F 44  modExt2 db ".MOD", 0
  82++6384 00
# file closed: gopher/render/row.asm
   5++6385                  include "buffer.asm"
# file opened: gopher/render/buffer.asm
   1++6385              ; BC - line count
   2++6385              findLine
   3++6385 21 FC 94         ld hl, outputBuffer
   4++6388              findLine2
   5++6388 78               ld a,b
   6++6389 B1               or c
   7++638A CA B7 63         jp z, .checkEmpty
   8++638D              .loop
   9++638D 7E               ld a, (hl)
  10++638E A7               and a
  11++638F CA BA 63         jp z, .nope
  12++6392 23               inc hl
  13++6393 FE 0D            cp 13
  14++6395 CA AD 63         jp z, .checkLF  ;13
  15++6398 FE 0A            cp 10
  15++639A CA A0 63       jp z, .nextCheck     ;10
  16++639D C3 8D 63         jp .loop
  17++63A0              .nextCheck
  18++63A0 A7               and a
  19++63A1 CA BA 63         jp z, .nope
  20++63A4 0B               dec bc
  21++63A5 57               ld d,a
  22++63A6 78               ld a,b
  23++63A7 B1               or c
  24++63A8 7A               ld a,d
  25++63A9 C2 8D 63         jp nz, .loop
  26++63AC C9               ret
  27++63AD              .checkLF
  28++63AD 7E               ld a, (hl)
  29++63AE FE 0A            cp 10
  30++63B0 C2 A0 63         jp nz, .nextCheck    ;10
  31++63B3 23               inc hl
  32++63B4 C3 A0 63         jp  .nextCheck
  33++63B7              .checkEmpty
  34++63B7 7E               ld a, (hl)
  34++63B8 A7             and a
  34++63B9 C0             ret nz
  35++63BA              .nope
  36++63BA 21 00 00         ld hl, 0
  36++63BD C9             ret
  37++63BE
# file closed: gopher/render/buffer.asm
   6++63BE                  include "ui.asm"
# file opened: gopher/render/ui.asm
   1++63BE                  IFDEF ZXSCR
   2++63BE ~                DEFINE LEFT_TAB "[D]omain:                                  "
   3++63BE                  ENDIF
   4++63BE
   5++63BE                  IFDEF TIMEX     ;UNKNOWM fallback to 64
   6++63BE ~                DEFINE LEFT_TAB "[D]omain:                                  "
   7++63BE                  ENDIF
   8++63BE
   9++63BE                  IFDEF TIMEX80
  10++63BE                  DEFINE LEFT_TAB "[D]omain:                                                      "
  11++63BE                  ENDIF
  12++63BE
  13++63BE                  IFDEF NEDOOS
  14++63BE ~                DEFINE LEFT_TAB "[D]omain:                                                  "
  15++63BE                  ENDIF
  16++63BE
  17++63BE                  IFDEF MSX
  18++63BE ~                DEFINE LEFT_TAB "[D]omain:                                              "
  19++63BE                  ENDIF
  20++63BE              prepareScreen:
  21++63BE CD 19 60         call TextMode.cls
  22++63C1 21 91 64         ld hl, header
  22++63C4 CD 83 60       call TextMode.printZ
  23++63C7 11 0A 00         ld de, #000A
  23++63CA CD 88 61       call TextMode.gotoXY
  24++63CD 21 A0 80         ld hl, hostName
  24++63D0 CD 83 60       call TextMode.printZ
  25++63D3 AF               xor a
  25++63D4 CD 61 60       call TextMode.highlightLine
  26++63D7 C9               ret
  27++63D8
  28++63D8              inputHost:
  29++63D8 CD 48 68         	call Console.waitForKeyUp
  30++63DB              .loop
  31++63DB 11 0A 00         ld de, #000A
  31++63DE CD 88 61       call TextMode.gotoXY
  31++63E1 21 A0 80       ld hl, hostName
  31++63E4 CD 83 60       call TextMode.printZ
  32++63E7 3E B3            ld a, MIME_INPUT
  32++63E9 CD 8E 60       call TextMode.putC
  33++63EC 3E 20            ld a, ' '
  33++63EE CD 8E 60       call TextMode.putC
  34++63F1              .wait
  35++63F1 CD 55 68         call Console.getC
  36++63F4 5F               ld e, a
  37++63F5 FE 0C            cp Console.BACKSPACE
  37++63F7 28 17          jr z, .removeChar
  38++63F9 FE 0D            cp CR
  38++63FB CA 1E 64       jp z, inputNavigate
  39++63FE FE 20            cp 32
  39++6400 38 EF          jr c, .wait
  40++6402              .putC
  41++6402 AF               xor a
  41++6403 21 A0 80 01    ld hl, hostName, bc, 48
  41++6407 30 00
  41++6409 ED B1          cpir
  42++640B 77               ld (hl), a
  42++640C 2B             dec hl
  42++640D 73             ld (hl), e
  43++640E 18 CB            jr .loop
  44++6410              .removeChar
  45++6410 AF               xor a
  46++6411 21 A0 80 01      ld hl, hostName, bc, 48
  46++6415 30 00
  46++6417 ED B1          cpir
  47++6419 2B               dec hl
  47++641A 2B             dec hl
  47++641B 77             ld (hl), a
  48++641C 18 BD            jr .loop
  49++641E
  50++641E              inputNavigate:
  51++641E 21 A0 80 11      ld hl, hostName, de, domain
  51++6422 51 64
  52++6424 7E               ld a,(hl)
  53++6425 A7               and a
  54++6426 CA 17 70         jp z, History.load
  55++6429              .loop
  56++6429 7E               ld a, (hl)
  56++642A A7             and a
  56++642B 28 05          jr z, .complete
  57++642D 12               ld (de), a
  57++642E 23 13          inc hl, de
  58++6430 18 F7            jr .loop
  59++6432              .complete
  60++6432 3E 09            ld a, TAB
  60++6434 12             ld (de), a
  60++6435 13             inc de
  61++6436 3E 37            ld a, '7'
  61++6438 12             ld (de), a
  61++6439 13             inc de
  62++643A 3E 30            ld a, '0'
  62++643C 12             ld (de), a
  62++643D 13             inc de
  63++643E 3E 0D            ld a, CR
  63++6440 12             ld (de), a
  63++6441 13             inc de
  64++6442 3E 0A            ld a, LF
  64++6444 12             ld (de), a
  64++6445 13             inc de
  65++6446 21 4C 64         ld hl, navRow
  65++6449 C3 70 70       jp History.navigate
  66++644C
  67++644C 31 20 09 2F  navRow db "1 ", TAB, "/", TAB
  67++6450 09
  68++6451 6E 69 68 69  domain db "nihirash.net"
  68++6455 72 61 73 68
  68++6459 2E 6E 65 74
  69++645D 00 00 00...      ds 64 - ($ - domain)
  70++6491
  71++6491 5B 44 5D 6F  header db "[D]omain:                                                      ", "MRF "
  71++6495 6D 61 69 6E
  71++6499 3A 20 20 20
  71++649D 20 20 20 20
  71++64A1 20 20 20 20
  71++64A5 20 20 20 20
  71++64A9 20 20 20 20
  71++64AD 20 20 20 20
  71++64B1 20 20 20 20
  71++64B5 20 20 20 20
  71++64B9 20 20 20 20
  71++64BD 20 20 20 20
  71++64C1 20 20 20 20
  71++64C5 20 20 20 20
  71++64C9 20 20 20 20
  71++64CD 20 20 20 4D
  71++64D1 52 46 20
  72++64D4 31 2E 37            db "1.7"
  73++64D7 2E                  db "."
  74++64D8 31 35               db "15"
  75++64DA              	IFDEF MSX
  76++64DA ~                   db "    [MSX UNAPI]",13, 0
  77++64DA              	ENDIF
  78++64DA
  79++64DA                  IFDEF MB03
  80++64DA ~                   db " [MB03+]",13, 0
  81++64DA                     ENDIF
  82++64DA
  83++64DA                  IFDEF UNO
  84++64DA ~                   db " [UNO UART]",13, 0
  85++64DA                  ENDIF
  86++64DA
  87++64DA                  IFDEF AY
  88++64DA ~                   db " [AYWIFI]",13, 0
  89++64DA              	ENDIF
  90++64DA
  91++64DA                  IFDEF ZW
  92++64DA 20 5B 5A 58         db " [ZXWiFi]",13, 0
  92++64DE 57 69 46 69
  92++64E2 5D 0D 00
  93++64E5                  ENDIF
  94++64E5
  95++64E5                   IFDEF NEDOOSATM
  96++64E5 ~                   db " [ATM UART]",13, 0
  97++64E5                  ENDIF
  98++64E5
  99++64E5                  IFDEF NEDOOSEVO
 100++64E5 ~                   db " [EVO UART]",13, 0
 101++64E5                  ENDIF
 102++64E5
 103++64E5                  IFDEF UNOUART
 104++64E5 ~                   db " [UNO UART]",13, 0
 105++64E5                  ENDIF
 106++64E5
 107++64E5                  IFDEF NEDOOS
 108++64E5 ~            	IFNDEF NEDOOSATM
 109++64E5 ~            	IFNDEF NEDOOSEVO
 110++64E5 ~                   db "  [nedoNET]",13, 0
 111++64E5 ~
 112++64E5 ~                ENDIF
 113++64E5 ~            	ENDIF
 114++64E5              	ENDIF
 115++64E5
# file closed: gopher/render/ui.asm
   7++64E5                  include "gopher-page.asm"
# file opened: gopher/render/gopher-page.asm
   1++64E5              renderGopherScreen:
   2++64E5 3E FF            ld a, 255
   3++64E7 32 88 88         ld (oldminutes), a
   4++64EA CD BE 63         call Render.prepareScreen
   5++64ED
   6++64ED 2A 8E 73         ld hl, (page_offset)        ; HL - offset to 0 Row on screen
   7++64F0 44 4D            ld bc,hl                    ; BC - offset to C Row on screen
   8++64F2 CD 85 63         call Render.findLine        ;BC - Search this line  HL - Return pointer to page with offset
   9++64F5 7C               ld a, h
  10++64F6 B5               or l
  11++64F7 28 21            jr z, .exit2
  12++64F9 7B               ld a, e
  13++64FA AF               xor a
  14++64FB E5               push hl
  15++64FC CD AE 62         call renderRow
  16++64FF E1               pop hl
  17++6500
  18++6500 06 15            ld b, PER_PAGE-1
  19++6502
  20++6502              .loop
  21++6502 C5               push bc
  22++6503 3E 16            ld a, PER_PAGE
  23++6505 90               sub b
  24++6506 5F               ld e,a
  25++6507
  26++6507 01 01 00         ld bc, 1
  27++650A
  28++650A CD 88 63         call Render.findLine2   ;BC - Search this line  HL - Return pointer to page with offset
  29++650D
  30++650D 7C               ld a, h
  31++650E B5               or l
  32++650F 28 06            jr z, .exit
  33++6511 7B               ld a, e
  34++6512 E5               push hl
  35++6513 CD AE 62         call renderRow
  36++6516 E1               pop hl
  37++6517              .exit
  38++6517 C1               pop bc
  39++6518 10 E8            djnz .loop
  40++651A              .exit2
  41++651A CD 1A 66         call showCursor
  42++651D C9               ret
  43++651E
  44++651E              checkBorder:
  45++651E 3A 8C 73         ld a, (cursor_position)
  45++6521 FE FF          cp #ff
  45++6523 CA 3E 66       jp z, pageUp
  46++6526 3A 8C 73         ld a, (cursor_position)
  46++6529 FE 16          cp PER_PAGE
  46++652B CA 71 66       jp z, pageDn
  47++652E CD 1A 66         call showCursor
  48++6531 C3 34 65         jp workLoop
  49++6534
  50++6534              workLoop:
  51++6534 3A 64 67         ld a, (play_next)
  51++6537 A7             and a
  51++6538 C2 CF 65       jp nz, navigate
  52++653B
  53++653B                  dup 4
  54++653B 76          >    halt
  54++653C 76          >    halt
  54++653D 76          >    halt
  54++653E 76          >    halt
  55++653F                  edup
  56++653F              .nothing
  57++653F
  58++653F 76               halt
  59++6540 CD 87 88         call printRTC
  60++6543
  61++6543 CD 66 68         call Console.peekC
  62++6546 A7               and a
  62++6547 CA 3F 65       jp z, .nothing
  63++654A
  64++654A FE 31            cp '1'
  64++654C CA 00 70       jp z, History.back
  65++654F FE 32            cp '2'
  65++6551 CA CF 65       jp z, navigate
  66++6554 FE 33            cp '3'
  66++6556 CA 2A 66       jp z, cursorDown
  67++6559 FE 34            cp '4'
  67++655B CA 34 66       jp z, cursorUp
  68++655E FE 35            cp '5'
  68++6560 CA 3E 66       jp z, pageUp
  69++6563 FE 38            cp '8'
  69++6565 CA 71 66       jp z, pageDn
  70++6568 FE 36            cp '6'
  70++656A CA 2A 66       jp z, cursorDown
  71++656D FE 37            cp '7'
  71++656F CA 34 66       jp z, cursorUp
  72++6572
  73++6572 FE 0A            cp Console.KEY_DN
  73++6574 CA 2A 66       jp z, cursorDown
  74++6577 FE 61            cp 'a'
  74++6579 CA 2A 66       jp z, cursorDown
  75++657C FE 0B            cp Console.KEY_UP
  75++657E CA 34 66       jp z, cursorUp
  76++6581 FE 71            cp 'q'
  76++6583 CA 34 66       jp z, cursorUp
  77++6586 FE 08            cp Console.KEY_LT
  77++6588 CA 3E 66       jp z, pageUp
  78++658B FE 6F            cp 'o'
  78++658D CA 3E 66       jp z, pageUp
  79++6590 FE 09            cp Console.KEY_RT
  79++6592 CA 71 66       jp z, pageDn
  80++6595 FE 70            cp 'p'
  80++6597 CA 71 66       jp z, pageDn
  81++659A
  82++659A FE 68            cp 'h'
  82++659C CA 6D 70       jp z, History.home
  83++659F FE 48            cp 'H'
  83++65A1 CA 6D 70       jp z, History.home
  84++65A4
  85++65A4 FE 62            cp 'b'
  85++65A6 CA 00 70       jp z, History.back
  86++65A9 FE 42            cp 'B'
  86++65AB CA 00 70       jp z, History.back
  87++65AE FE 0C            cp Console.BACKSPACE
  87++65B0 CA 00 70       jp z, History.back
  88++65B3
  89++65B3 FE 64            cp 'd'
  89++65B5 CA D8 63       jp z, inputHost
  90++65B8 FE 44            cp 'D'
  90++65BA CA D8 63       jp z, inputHost
  91++65BD
  92++65BD FE 0D            cp CR
  92++65BF CA CF 65       jp z, navigate
  93++65C2
  94++65C2                  IFDEF MSX
  95++65C2 ~                	cp ESC
  95++65C2 ~              jp z, exit
  96++65C2                  ENDIF
  97++65C2
  98++65C2                  IFDEF GS
  99++65C2 ~                cp 'M'
  99++65C2 ~              call z, GeneralSound.toggleModule
 100++65C2 ~                cp 'm'
 100++65C2 ~              call z, GeneralSound.toggleModule
 101++65C2 ~                cp 'g'
 101++65C2 ~              call z, GeneralSound.toggleDownload
 102++65C2 ~                cp 'G'
 102++65C2 ~              call z, GeneralSound.toggleDownload
 103++65C2                  ENDIF
 104++65C2
 105++65C2                  IFDEF TIMEX80
 106++65C2 FE 54            cp 'T'
 106++65C4 CC A5 61       call z, TextMode.toggleColor
 107++65C7 FE 74            cp 't'
 107++65C9 CC A5 61       call z, TextMode.toggleColor
 108++65CC                  ENDIF
 109++65CC
 110++65CC C3 34 65         jp workLoop
 111++65CF
 112++65CF              navigate:
 113++65CF CD 48 68         call Console.waitForKeyUp
 114++65D2 AF               xor a
 114++65D3 32 64 67       ld (play_next), a
 115++65D6 CD 22 66         call hideCursor
 116++65D9 ED 4B 8E 73      ld bc, (page_offset)
 117++65DD 2A 8C 73         ld hl, (cursor_position)
 118++65E0 09               add hl,bc
 119++65E1 44               ld b, h ;HHHHH
 120++65E2 4D               ld c, l ;LLLLL
 121++65E3 D5               push de
 122++65E4 CD 85 63         call Render.findLine
 123++65E7 D1               pop de
 124++65E8 7E               ld a, (hl)
 125++65E9 FE 31            cp '1'
 125++65EB CA 03 66       jp z, .load
 126++65EE FE 30            cp '0'
 126++65F0 CA 03 66       jp z, .load
 127++65F3 FE 39            cp '9'
 127++65F5 CA 03 66       jp z, .load
 128++65F8 FE 37            cp '7'
 128++65FA CA 0B 66       jp z, .input
 129++65FD CD 1A 66         call showCursor
 130++6600 C3 34 65         jp workLoop
 131++6603              .load
 132++6603 E5               push hl
 133++6604 CD C3 62         call getIcon
 134++6607 E1               pop hl
 135++6608 C3 70 70         jp History.navigate
 136++660B              .input
 137++660B E5               push hl
 138++660C CD 65 67         call DialogBox.inputBox
 139++660F E1               pop hl
 140++6610 3A C0 67         ld a, (DialogBox.inputBuffer)
 140++6613 A7             and a
 140++6614 CA 17 70       jp z, History.load
 141++6617 C3 03 66         jp .load
 142++661A
 143++661A              showCursor:
 144++661A 3A 8C 73         ld a, (cursor_position)
 144++661D C6 02          add CURSOR_OFFSET
 145++661F C3 61 60         jp TextMode.highlightLine
 146++6622
 147++6622              hideCursor:
 148++6622 3A 8C 73         ld a, (cursor_position)
 148++6625 C6 02          add CURSOR_OFFSET
 149++6627 C3 5E 60         jp TextMode.usualLine
 150++662A
 151++662A              cursorDown:
 152++662A CD 22 66         call hideCursor
 153++662D 21 8C 73         ld hl, cursor_position
 154++6630 34               inc (hl)
 155++6631 C3 1E 65         jp checkBorder
 156++6634
 157++6634              cursorUp:
 158++6634 CD 22 66         call hideCursor
 159++6637 21 8C 73         ld hl, cursor_position
 160++663A 35               dec (hl)
 161++663B C3 1E 65         jp checkBorder
 162++663E
 163++663E              pageUp:
 164++663E 3A 8E 73         ld a, (page_offset)
 164++6641 FE 00          cp 0
 164++6643 C2 51 66       jp nz, .pageUp2
 165++6646 3A 8F 73         ld a, (page_offset + 1)
 165++6649 FE 00          cp 0
 165++664B C2 51 66       jp nz, .pageUp2
 166++664E C3 67 66         jp .skip
 167++6651              .pageUp2:
 168++6651 3E 15            ld a, PER_PAGE - 1
 168++6653 32 8C 73       ld (cursor_position), a
 169++6656 2A 8E 73         ld hl, (page_offset)
 170++6659 11 16 00         ld de,PER_PAGE
 171++665C ED 52            sbc hl,de
 172++665E 22 8E 73         ld (page_offset), hl
 173++6661              .exit
 174++6661 CD E5 64         call renderGopherScreen
 175++6664 C3 34 65         jp workLoop
 176++6667              .skip
 177++6667 AF               xor a
 177++6668 32 8C 73       ld (cursor_position), a
 177++666B CD E5 64       call renderGopherScreen
 177++666E C3 34 65       jp workLoop
 178++6671
 179++6671              pageDn:
 180++6671 AF                xor a
 180++6672 32 8C 73       ld (cursor_position), a
 181++6675 2A 8E 73         ld hl,(page_offset)
 182++6678 11 16 00         ld de,PER_PAGE
 183++667B 19               add hl,de
 184++667C 22 8E 73         ld (page_offset), hl
 185++667F C3 61 66         jp pageUp.exit
 186++6682
# file closed: gopher/render/gopher-page.asm
   8++6682                  include "plaintext.asm"
# file opened: gopher/render/plaintext.asm
   1++6682              renderPlainTextScreen:
   2++6682 3E FF            ld a, 255
   3++6684 32 88 88         ld (oldminutes), a
   4++6687 CD BE 63         call prepareScreen
   5++668A
   6++668A 2A 8E 73         ld hl, (page_offset)        ; HL - offset to 0 Row on screen
   7++668D 44 4D            ld bc,hl                    ; BC - offset to C Row on screen
   8++668F CD 85 63         call Render.findLine        ;BC - Search this line  HL - Return pointer to page with offset
   9++6692 7C               ld a, h
  10++6693 B5               or l
  11++6694 28 30            jr z, .exit2
  12++6696 AF               xor a
  13++6697 C6 02            add CURSOR_OFFSET
  13++6699 57 1E 01       ld d, a, e, 1
  13++669C CD 88 61       call TextMode.gotoXY
  14++669F CD 7D 62         call print70Text
  15++66A2 06 15            ld b, PER_PAGE -1
  16++66A4              .loop
  17++66A4 C5               push bc
  18++66A5 3E 16            ld a, PER_PAGE
  19++66A7 90               sub b
  20++66A8 5F               ld e,a
  21++66A9 01 01 00         ld bc, 1
  22++66AC CD 88 63         call Render.findLine2   ;BC - Search this line  HL - Return pointer to page with offset
  23++66AF 7C               ld a, h
  24++66B0 B5               or l
  25++66B1 28 10            jr z, .exit
  26++66B3 7B               ld a, e
  27++66B4 C6 02            add CURSOR_OFFSET
  27++66B6 57 1E 01       ld d, a, e, 1
  27++66B9 CD 88 61       call TextMode.gotoXY
  28++66BC CD 7D 62         call print70Text
  29++66BF C1               pop bc
  30++66C0 10 E2            djnz .loop
  31++66C2 C9               ret
  32++66C3              .exit
  33++66C3 C1               pop bc
  34++66C4 10 DE            djnz .loop
  35++66C6              .exit2
  36++66C6 CD 1A 66         call showCursor
  37++66C9 C9               ret
  38++66CA              plainTextLoop:
  39++66CA CD 87 88         call printRTC
  40++66CD CD 55 68         call Console.getC
  41++66D0
  42++66D0 FE 31            cp '1'
  42++66D2 CA 00 70       jp z, History.back
  43++66D5 FE 32            cp '2'
  43++66D7 CA CF 65       jp z, navigate
  44++66DA FE 35            cp '5'
  44++66DC CA 42 67       jp z, textUp
  45++66DF FE 38            cp '8'
  45++66E1 CA 32 67       jp z, textDown
  46++66E4 FE 08            cp Console.KEY_LT
  46++66E6 CA 42 67       jp z, textUp
  47++66E9 FE 09            cp Console.KEY_RT
  47++66EB CA 32 67       jp z, textDown
  48++66EE
  49++66EE FE 0A            cp Console.KEY_DN
  49++66F0 CA 32 67       jp z, textDown
  50++66F3 FE 61            cp 'a'
  50++66F5 CA 32 67       jp z, textDown
  51++66F8
  52++66F8 FE 0B            cp Console.KEY_UP
  52++66FA CA 42 67       jp z, textUp
  53++66FD FE 71            cp 'q'
  53++66FF CA 42 67       jp z, textUp
  54++6702
  55++6702 FE 68            cp 'h'
  55++6704 CA 6D 70       jp z, History.home
  56++6707 FE 48            cp 'H'
  56++6709 CA 6D 70       jp z, History.home
  57++670C
  58++670C FE 62            cp 'b'
  58++670E CA 00 70       jp z, History.back
  59++6711 FE 42            cp 'B'
  59++6713 CA 00 70       jp z, History.back
  60++6716
  61++6716 FE 64            cp 'd'
  61++6718 CA D8 63       jp z, inputHost
  62++671B FE 44            cp 'D'
  62++671D CA D8 63       jp z, inputHost
  63++6720
  64++6720 FE 0C            cp Console.BACKSPACE
  64++6722 CA 00 70       jp z, History.back
  65++6725
  66++6725                  IFDEF MSX
  67++6725 ~                	cp ESC
  67++6725 ~              jp z, exit
  68++6725                  ENDIF
  69++6725
  70++6725                  IFDEF GS
  71++6725 ~                cp 'M'
  71++6725 ~              call z, GeneralSound.toggleModule
  72++6725 ~                cp 'm'
  72++6725 ~              call z, GeneralSound.toggleModule
  73++6725                  ENDIF
  74++6725
  75++6725                  IFDEF TIMEX80
  76++6725 FE 54            cp 'T'
  76++6727 CC A5 61       call z, TextMode.toggleColor
  77++672A FE 74            cp 't'
  77++672C CC A5 61       call z, TextMode.toggleColor
  78++672F                  ENDIF
  79++672F
  80++672F C3 CA 66         jp plainTextLoop
  81++6732
  82++6732
  83++6732              textDown:
  84++6732 2A 8E 73         ld hl,(page_offset)
  85++6735 11 16 00         ld de,PER_PAGE
  86++6738 19               add hl,de
  87++6739 22 8E 73         ld (page_offset), hl
  88++673C CD 82 66         call renderPlainTextScreen
  89++673F C3 CA 66         jp plainTextLoop
  90++6742
  91++6742              textUp:
  92++6742 3A 8E 73         ld a, (page_offset)
  92++6745 FE 00          cp 0
  92++6747 20 0A          jr nz, .textUp2
  93++6749 3A 8F 73         ld a, (page_offset + 1)
  93++674C FE 00          cp 0
  93++674E 20 03          jr nz, .textUp2
  94++6750 C3 CA 66         jp plainTextLoop
  95++6753
  96++6753              .textUp2:
  97++6753 2A 8E 73         ld hl,(page_offset)
  98++6756 11 16 00         ld de,PER_PAGE
  99++6759 ED 52            sbc hl,de
 100++675B 22 8E 73         ld (page_offset), hl
 101++675E CD 82 66         call renderPlainTextScreen
 102++6761 C3 CA 66         jp plainTextLoop
 103++6764
# file closed: gopher/render/plaintext.asm
   9++6764
  10++6764 00           play_next       db  0
  11++6765              position        EQU historyBlock.position
  12++6765              cursor_position EQU position + 2
  13++6765              page_offset     EQU position + 4
  14++6765
  15++6765                  ENDMODULE
  16++6765
  17++6765                  include "dialogbox.asm"
# file opened: gopher/render/dialogbox.asm
   1++6765                  module DialogBox
   2++6765
   3++6765              inputBox:
   4++6765 AF               xor a
   4++6766 32 C0 67       ld (inputBuffer), a
   5++6769              .noclear
   6++6769 CD 21 68         call drawBox
   7++676C              .loop
   8++676C 11 05 0B         ld de, #0B05
   8++676F CD 88 61       call TextMode.gotoXY
   9++6772 21 C0 67         ld hl, inputBuffer
   9++6775 CD 83 60       call TextMode.printZ
  10++6778 3E B3            ld a, MIME_INPUT
  10++677A CD 8E 60       call TextMode.putC
  10++677D 3E 20          ld a, ' '
  10++677F CD 8E 60       call TextMode.putC
  11++6782              .checkkey
  12++6782 CD 55 68         call Console.getC
  13++6785 FE 0C            cp Console.BACKSPACE
  13++6787 28 16          jr z, .removeChar
  14++6789 FE 0D        	cp CR
  14++678B C8             ret z
  15++678C FE 20            cp SPACE
  15++678E 38 F2          jr c, .checkkey
  16++6790              .putC
  17++6790 5F               ld e, a
  18++6791 AF               xor a
  18++6792 21 C0 67 01    ld hl, inputBuffer, bc, #ff
  18++6796 FF 00
  18++6798 ED B1          cpir
  19++679A 77               ld (hl), a
  19++679B 2B             dec hl
  19++679C 73             ld (hl), e
  20++679D 18 CD            jr .loop
  21++679F              .removeChar
  22++679F AF               xor a
  23++67A0 21 C0 67 01      ld hl, inputBuffer, bc, #ff
  23++67A4 FF 00
  23++67A6 ED B1          cpir
  24++67A8 E5               push hl
  25++67A9 11 C1 67             ld de, inputBuffer + 1
  26++67AC B7                   or a
  26++67AD ED 52          sbc hl, de
  27++67AF 7C                   ld a, h
  27++67B0 B5             or l
  28++67B1 E1               pop hl
  29++67B2 28 B8            jr z, .loop
  30++67B4 AF               xor a
  31++67B5 2B               dec hl
  31++67B6 2B             dec hl
  31++67B7 77             ld (hl), a
  32++67B8 18 B2            jr .loop
  33++67BA
  34++67BA              	IFNDEF MSX
  35++67BA              delayinput:
  36++67BA 06 32           ld b, 50
  37++67BC              .loop2
  38++67BC 76               halt
  39++67BD 10 FD            djnz .loop2
  40++67BF C9               ret
  41++67C0              namedownload
  42++67C0                  IFDEF NEDOOS
  43++67C0 ~            		db "..",92,"downloads",92
  44++67C0                  ENDIF
  45++67C0                  ENDIF
  46++67C0 00 00 00...  inputBuffer ds 80
  47++6810
  48++6810              msgBox:
  49++6810 CD 19 68         call msgNoWait
  50++6813 06 96            ld b, 150
  51++6815              .loop
  52++6815 76               halt
  53++6816 10 FD            djnz .loop
  54++6818 C9               ret
  55++6819
  56++6819              msgNoWait:
  57++6819 E5               push hl
  58++681A CD 21 68         call drawBox
  59++681D E1               pop hl
  60++681E C3 83 60         jp TextMode.printZ
  61++6821
  62++6821              drawBox:
  63++6821 26 0A 3E B2      ld h, #0a, a, BORDER_TOP
  64++6825 CD 76 61         call TextMode.fillLine
  65++6828 26 0B 3E 20      ld h, #0b, a, ' '
  66++682C CD 76 61         call TextMode.fillLine
  67++682F 26 0C 3E B1      ld h, #0c, a, BORDER_BOTTOM
  68++6833 CD 76 61         call TextMode.fillLine
  69++6836 3E 0A            ld a, #0a
  70++6838 CD 61 60         call TextMode.highlightLine
  71++683B 3E 0C            ld a, #0c
  72++683D CD 61 60         call TextMode.highlightLine
  73++6840 11 03 0B         ld de,#0B03
  74++6843 CD 88 61         call TextMode.gotoXY
  75++6846 C9               ret
  76++6847                  endmodule
  77++6847
# file closed: gopher/render/dialogbox.asm
# file closed: gopher/render/index.asm
  18+ 6847                  include "dos/index.asm"
# file opened: dos/index.asm
   1++6847              	IFDEF NEDOOS
   2++6847 ~            	    include "nedoconsole.asm"
   3++6847 ~            		include "nedoos.asm"
   4++6847              	ENDIF
   5++6847
   6++6847              	IFDEF TRDOS
   7++6847                  	include "console.asm"
# file opened: dos/console.asm
   1++6847                  module Console
   2++6847              KEY_UP = 11
   3++6847              KEY_DN = 10
   4++6847              KEY_LT = 8
   5++6847              KEY_RT = 9
   6++6847              BACKSPACE = 12
   7++6847 00           keyCode db 0
   8++6848
   9++6848              BASIC_KEY = #5C08
  10++6848
  11++6848              waitForKeyUp:
  12++6848 76           	halt
  13++6849 AF              xor a
  13++684A DB FE          in a, (#fe)
  13++684C 2F             cpl
  13++684D E6 1F          and 31
  13++684F 20 F7          jr nz, waitForKeyUp
  14++6851 32 08 5C        ld (BASIC_KEY), a
  15++6854 C9              ret
  16++6855
  17++6855              getC:
  18++6855 AF              xor a
  19++6856 32 08 5C        ld (BASIC_KEY),a
  20++6859              getC2:
  21++6859 3A 08 5C        ld a,(BASIC_KEY)
  22++685C A7              and a
  22++685D 28 FA          jr z, getC2
  23++685F 47              ld b,a
  24++6860 AF              xor a
  24++6861 32 08 5C       ld (BASIC_KEY), a
  25++6864 78              ld a, b
  26++6865 C9              ret
  27++6866
  28++6866              peekC:
  29++6866 AF               xor a
  29++6867 32 08 5C       ld (BASIC_KEY),a
  30++686A CD 6E 68         call inkey
  31++686D C9               ret
  32++686E
  33++686E              inkey:
  34++686E 11 00 00        ld de,0
  35++6871 01 FE FE        ld bc,$fefe
  36++6874 ED 78           in a,(c)
  37++6876 F6 E1           or $e1
  38++6878 FE FF           cp $ff
  39++687A 20 57           jr nz, .keyhitA
  40++687C
  41++687C 1E 05           ld e,5
  42++687E 06 FD           ld b,$fd
  43++6880 ED 78           in a,(c)
  44++6882 F6 E0           or $e0
  45++6884 FE FF           cp $ff
  46++6886 20 4B           jr nz, .keyhitA
  47++6888
  48++6888 1E 0A           ld e,10
  49++688A 06 FB           ld b,$fb
  50++688C ED 78           in a,(c)
  51++688E F6 E0           or $e0
  52++6890 FE FF           cp $ff
  53++6892 20 3F           jr nz, .keyhitA
  54++6894
  55++6894 1E 0F           ld e,15
  56++6896 06 F7           ld b,$f7
  57++6898 ED 78           in a,(c)
  58++689A F6 E0           or $e0
  59++689C FE FF           cp $ff
  60++689E 20 33           jr nz, .keyhitA
  61++68A0
  62++68A0 1E 14           ld e,20
  63++68A2 06 EF           ld b,$ef
  64++68A4 ED 78           in a,(c)
  65++68A6 F6 E0           or $e0
  66++68A8 FE FF           cp $ff
  67++68AA 20 27           jr nz, .keyhitA
  68++68AC
  69++68AC 1E 19           ld e,25
  70++68AE 06 DF           ld b,$df
  71++68B0 ED 78           in a,(c)
  72++68B2 F6 E0           or $e0
  73++68B4 FE FF           cp $ff
  74++68B6 20 1B           jr nz, .keyhitA
  75++68B8
  76++68B8 1E 1E           ld e,30
  77++68BA 06 BF           ld b,$bf
  78++68BC ED 78           in a,(c)
  79++68BE F6 E0           or $e0
  80++68C0 FE FF           cp $ff
  81++68C2 20 0F           jr nz, .keyhitA
  82++68C4
  83++68C4 1E 23           ld e,35
  84++68C6 06 7F           ld b,$7f
  85++68C8 ED 78           in a,(c)
  86++68CA F6 E2           or $e2
  87++68CC FE FF           cp $ff
  88++68CE 4F              ld c,a
  89++68CF 20 19           jr nz, .keyhitB
  90++68D1
  91++68D1              .nokey
  92++68D1 AF              xor a
  93++68D2 C9              ret
  94++68D3
  95++68D3              .keyhitA
  96++68D3
  97++68D3 4F              ld c,a
  98++68D4
  99++68D4 78              ld a,b
 100++68D5 2F              cpl
 101++68D6 F6 81           or $81
 102++68D8 DB FE           in a,($fe)
 103++68DA F6 E0           or $e0
 104++68DC FE FF           cp $ff
 105++68DE 20 F1           jr nz, .nokey
 106++68E0
 107++68E0 3E 7F           ld a,$7f
 108++68E2 DB FE           in a,($fe)
 109++68E4 F6 E2           or $e2
 110++68E6 FE FF           cp $ff
 111++68E8 20 E7           jr nz, .nokey
 112++68EA
 113++68EA              .keyhitB
 114++68EA
 115++68EA 06 00           ld b,0
 116++68EC 21 33 68        ld hl,.rowtbl-$e0
 117++68EF 09              add hl,bc
 118++68F0 7E              ld a,(hl)
 119++68F1 FE 05           cp 5
 120++68F3 30 DC           jr nc, .nokey
 121++68F5 83              add a,e
 122++68F6 5F              ld e,a
 123++68F7
 124++68F7 21 33 69        ld hl,.table
 125++68FA 19              add hl,de
 126++68FB
 127++68FB 3E FE           ld a,$fe
 128++68FD DB FE           in a,($fe)
 129++68FF E6 01           and $01
 130++6901 20 03           jr nz, .nocaps
 131++6903 1E 28           ld e,40
 132++6905 19              add hl,de
 133++6906
 134++6906              .nocaps
 135++6906
 136++6906 3E 7F           ld a,$7f
 137++6908 DB FE           in a,($fe)
 138++690A E6 02           and $02
 139++690C 20 03           jr nz, .nosym
 140++690E 1E 50           ld e,80
 141++6910 19              add hl,de
 142++6911
 143++6911              .nosym
 144++6911
 145++6911 7E              ld a,(hl)
 146++6912 C9              ret
 147++6913
 148++6913              .rowtbl
 149++6913 FF FF FF FF     defb 255,255,255,255,255,255,255
 149++6917 FF FF FF
 150++691A FF FF FF FF     defb 255,255,255,255,255,255,255,255
 150++691E FF FF FF FF
 151++6922 04 FF FF FF     defb 4,255,255,255,255,255,255
 151++6926 FF FF FF
 152++6929 FF 03 FF FF     defb 255,3,255,255,255,2,255,1
 152++692D FF 02 FF 01
 153++6931 00 FF           defb 0,255
 154++6933
 155++6933              .table
 156++6933 00 7A 78 63     db 0,'z','x','c','v'      ; CAPS SHIFT, Z, X, C, V
 156++6937 76
 157++6938 61 73 64 66     db 'a','s','d','f','g'      ; A, S, D, F, G
 157++693C 67
 158++693D 71 77 65 72     db 'q','w','e','r','t'      ; Q, W, E, R, T
 158++6941 74
 159++6942 31 32 33 34     db '1','2','3','4','5'      ; 1, 2, 3, 4, 5
 159++6946 35
 160++6947 30 39 38 37     db '0','9','8','7','6'      ; 0, 9, 8, 7, 6
 160++694B 36
 161++694C 70 6F 69 75     db 'p','o','i','u','y'      ; P, O, I, U, Y
 161++6950 79
 162++6951 0D 6C 6B 6A     db 13,'l','k','j','h'       ; ENTER, L, K, J, H
 162++6955 68
 163++6956 20 00 6D 6E     db ' ',0,'m','n','b'      ; SPACE, SYM SHIFT, M, N, B
 163++695A 62
 164++695B
 165++695B                 ; the following are CAPS SHIFTed
 166++695B
 167++695B 00 5A 58 43     db 0,'Z','X','C','V'      ; CAPS SHIFT, Z, X, C, V
 167++695F 56
 168++6960 41 53 44 46     db 'A','S','D','F','G'      ; A, S, D, F, G
 168++6964 47
 169++6965 51 57 45 52     db 'Q','W','E','R','T'      ; Q, W, E, R, T
 169++6969 54
 170++696A 07 06 80 81     db 7,6,128,129,8            ; 1, 2, 3, 4, 5
 170++696E 08
 171++696F 0C 00 09 0B     db 12,0,9,11,10             ; 0, 9, 8, 7, 6
 171++6973 0A
 172++6974 50 4F 49 55     db 'P','O','I','U','Y'      ; P, O, I, U, Y
 172++6978 59
 173++6979 0D 4C 4B 4A     db 13,'L','K','J','H'       ; ENTER, L, K, J, H
 173++697D 48
 174++697E 20 00 4D 4E     db ' ',0,'M','N','B'      ; SPACE, SYM SHIFT, M, N, B
 174++6982 42
 175++6983
 176++6983                 ; the following are SYM SHIFTed
 177++6983
 178++6983 00 3A 60 3F     db 0,':',96,'?','/'       ; CAPS SHIFT, Z, X, C, V
 178++6987 2F
 179++6988 7E 7C 5C 7B     db '~','|',92,'{','}'       ; A, S, D, F, G
 179++698C 7D
 180++698D 83 84 85 3C     db 131,132,133,'<','>'      ; Q, W, E, R, T
 180++6991 3E
 181++6992 21 40 23 24     db '!','@','#','$','%'      ; 1, 2, 3, 4, 5
 181++6996 25
 182++6997 5F 29 28 27     db '_',')','(',39,'&'       ; 0, 9, 8, 7, 6
 182++699B 26
 183++699C 22 3B 82 5D     db 34,';',130,']','['       ; P, O, I, U, Y
 183++69A0 5B
 184++69A1 0D 3D 2B 2D     db 13,'=','+','-','^'       ; ENTER, L, K, J, H
 184++69A5 5E
 185++69A6 20 00 2E 2C     db ' ',0,'.',',','*'      ; SPACE, SYM SHIFT, M, N, B
 185++69AA 2A
 186++69AB
 187++69AB                 ; the following are CAPS SHIFTed and SYM SHIFTed ("CTRL" key)
 188++69AB
 189++69AB 00 1A 18 03     db 0,26,24,3,22           ; CAPS SHIFT, Z, X, C, V
 189++69AF 16
 190++69B0 01 13 04 06     db 1,19,4,6,7               ; A, S, D, F, G
 190++69B4 07
 191++69B5 11 17 05 12     db 17,23,5,18,20            ; Q, W, E, R, T
 191++69B9 14
 192++69BA 1B 1C 1D 1E     db 27,28,29,30,31           ; 1, 2, 3, 4, 5
 192++69BE 1F
 193++69BF 7F 00 86 60     db 127,0,134,'`',135      ; 0, 9, 8, 7, 6
 193++69C3 87
 194++69C4 10 0F 09 15     db 16,15,9,21,25            ; P, O, I, U, Y
 194++69C8 19
 195++69C9 0D 0C 0B 0A     db 13,12,11,10,8            ; ENTER, L, K, J, H
 195++69CD 08
 196++69CE 20 00 0D 0E     db ' ',0,13,14,2          ; SPACE, SYM SHIFT, M, N, B
 196++69D2 02
 197++69D3
 198++69D3                  endmodule
# file closed: dos/console.asm
   8++69D3              		include "trdos.asm"
# file opened: dos/trdos.asm
   1++69D3              ;trdos driver (izzx)
   2++69D3                  MODULE Dos
   3++69D3              ; API methods
   4++69D3              ESX_GETSETDRV = #89
   5++69D3              ESX_FOPEN = #9A
   6++69D3              ESX_FCLOSE = #9B
   7++69D3              ESX_FSYNC = #9C
   8++69D3              ESX_FREAD = #9D
   9++69D3              ESX_FWRITE = #9E
  10++69D3
  11++69D3              ; File modes
  12++69D3              FMODE_READ = #01
  13++69D3              FMODE_WRITE = #06
  14++69D3              FMODE_CREATE = #0E
  15++69D3
  16++69D3                  ; MACRO esxCall func
  17++69D3                  ; rst #8 : db func
  18++69D3                  ; ENDM
  19++69D3
  20++69D3              ;id = 0 файл не открыт
  21++69D3              ;id = 1 файл для чтения
  22++69D3              ;id = 2 файл для записи
  23++69D3              ;id = 3 файл для записи тип TRD
  24++69D3              ;id = 4 файл для записи тип SCL
  25++69D3
  26++69D3              ; HL - filename in ASCIIZ
  27++69D3              loadBuffer:
  28++69D3 06 01            ld b, Dos.FMODE_READ
  28++69D5 CD EF 69       call Dos.fopen
  29++69D8 F5               push af
  30++69D9 21 FC 94 01          ld hl, outputBuffer, bc, #ffff - outputBuffer
  30++69DD 03 6B
  30++69DF CD DC 6A       call Dos.fread
  31++69E2 21 FC 94             ld hl, outputBuffer
  31++69E5 09             add hl, bc
  31++69E6 AF             xor a
  31++69E7 77             ld (hl), a
  31++69E8 23             inc hl
  31++69E9 77             ld (hl), a
  32++69EA F1               pop af
  33++69EB CD C8 6A         call Dos.fclose
  34++69EE C9               ret
  35++69EF
  36++69EF
  37++69EF              ; Returns:
  38++69EF              ;  A - current drive
  39++69EF              ; getDefaultDrive: ;нигде не используется
  40++69EF                  ; ld a, 0 : esxCall ESX_GETSETDRV
  41++69EF                  ; ret
  42++69EF
  43++69EF
  44++69EF
  45++69EF              ; Opens file on default drive
  46++69EF              ; B - File mode
  47++69EF              ; HL - File name
  48++69EF              ; Returns:
  49++69EF              ;  A - file stream id
  50++69EF              fopen:
  51++69EF                  ; push bc : push hl
  52++69EF                  ; call getDefaultDrive
  53++69EF                  ; pop ix : pop bc
  54++69EF                  ; esxCall ESX_FOPEN
  55++69EF                  ; ret
  56++69EF 78           	ld a,b
  57++69F0 FE 01        	cp FMODE_READ ;если режим открытие файла
  58++69F2 28 06        	jr z,fopen_r
  59++69F4 FE 0E        	cp FMODE_CREATE
  60++69F6 28 39        	jr z,fopen_c ;если режим создание файла
  61++69F8 18 34        	jr fopen_err ;иначе выход
  62++69FA
  63++69FA              fopen_r	;открытие существующего файла на чтение (id=1)
  64++69FA CD 5F 6E     			call format_name ;
  65++69FD 0E 13        			ld      c,#13 ;move file info to syst var
  66++69FF CD 13 3D                 call    #3d13
  67++6A02 0E 0A                    ld      c,#0a ;find file
  68++6A04 CD 13 3D                 call    #3d13
  69++6A07 79                       ld      a,c
  70++6A08 FE FF        			cp 		#ff
  71++6A0A 28 22        			jr 		z,fopen_err ;если не нашли файла
  72++6A0C 0E 08                    ld      c,#08 ;read file title
  73++6A0E CD 13 3D                 call    #3d13
  74++6A11                          ;ld      hl,loadadr ;куда
  75++6A11 ED 5B EB 5C              ld      de,(#5ceb) ;начало файла сектор дорожка
  76++6A15 ED 53 0B 6F              ld      (f_r_cur_trk),de
  77++6A19
  78++6A19 3A EA 5C                 ld      a,(#5cea)
  79++6A1C 32 0D 6F                 ld      (f_r_len_sec),a ;длина в секторах
  80++6A1F                          ;or      a
  81++6A1F                          ;ret     z    ;выход если пустой
  82++6A1F
  83++6A1F ED 5B E8 5C  			ld de,(#5CE8) ; длина файла или программной части для BASIC
  84++6A23 ED 53 0E 6F  			ld      (f_r_len),de
  85++6A27
  86++6A27                          ; ld      de,(fcurtrk) ;текущие сектор дорожка
  87++6A27                          ; ld      (#5cf4),de ;восстановим
  88++6A27 AF           			xor a
  89++6A28 3E 01        			ld 		a,1
  90++6A2A 32 10 6F     			ld (f_r_flag),a ;флаг что файл для чтения открыт
  91++6A2D              			;id канала будет 1
  92++6A2D C9           	ret
  93++6A2E
  94++6A2E              fopen_err
  95++6A2E AF           	xor a ;если никакой файл не открыли, то id = 0
  96++6A2F 37           	scf ;флаг ошибки
  97++6A30 C9           	ret
  98++6A31
  99++6A31
 100++6A31              fopen_c	;создание нового файла (id=2-4)
 101++6A31 CD 5F 6E     	call format_name ;
 102++6A34              	;выясним, не образ ли это для разворачивания
 103++6A34 21 EE 6E         ld hl, trdExt1
 103++6A37 CD 27 62       call CompareBuff.search
 103++6A3A A7             and a
 103++6A3B 20 1D          jr nz, fopen_c_trd
 104++6A3D 21 F3 6E         ld hl, trdExt2
 104++6A40 CD 27 62       call CompareBuff.search
 104++6A43 A7             and a
 104++6A44 20 14          jr nz, fopen_c_trd
 105++6A46 21 F8 6E     	ld hl, sclExt1
 105++6A49 CD 27 62       call CompareBuff.search
 105++6A4C A7             and a
 105++6A4D 20 3A          jr nz, fopen_c_scl
 106++6A4F 21 FD 6E         ld hl, sclExt2
 106++6A52 CD 27 62       call CompareBuff.search
 106++6A55 A7             and a
 106++6A56 20 31          jr nz, fopen_c_scl
 107++6A58
 108++6A58
 109++6A58              fopen_c_2	;создание произвольного файла
 110++6A58 18 D4        	jr 		fopen_err ;пока отключено
 111++6A5A
 112++6A5A              	; ld      c,#13 ;move file info to syst var
 113++6A5A                  ; call    #3d13
 114++6A5A              	; ld de,256 ;запишем пока 1 сектор
 115++6A5A              	; ld hl,#4000 ;возьмём случайные данные из экрана
 116++6A5A                  ; ld      c,#0b ;запись файла CODE
 117++6A5A                  ; call    #3d13
 118++6A5A                  ; ld      a,c
 119++6A5A              	; cp 		#ff
 120++6A5A              	; jr 		z,fopen_err ;если ошибка
 121++6A5A
 122++6A5A                  ; ld      de,(#5ceb) ;начало файла сектор дорожка
 123++6A5A                  ; ld      (f_w_cur_trk),de
 124++6A5A                  ; ld      a,(#5cea)
 125++6A5A                  ; ld      (f_w_len_sec),a ;длина в секторах
 126++6A5A              	; xor a ;id канала будет 2
 127++6A5A              	; ld a,2
 128++6A5A              	; ld (f_w_flag),a ;флаг что файл для записи открыт
 129++6A5A              	; ret
 130++6A5A
 131++6A5A
 132++6A5A
 133++6A5A
 134++6A5A
 135++6A5A              fopen_c_trd	;открытие файла для разворачивания образа trd (id=3)
 136++6A5A 3A 19 5D     	ld a,(#5D19) ;номер дисковода по умолчанию
 137++6A5D C6 41        	add a,"A"
 138++6A5F 32 D4 6E     	ld (write_ima_d),a ;подставим букву в запросе
 139++6A62 21 BF 6E         ld hl, write_ima
 140++6A65 CD 10 68         call DialogBox.msgBox ;предуреждение
 141++6A68              WAITKEY_trd
 142++6A68 3A 04 5C     	ld 		a,(23556)
 143++6A6B FE FF        	cp 255
 144++6A6D 28 F9        	JR Z,WAITKEY_trd	;ждём любую клавишу
 145++6A6F
 146++6A6F 11 00 00     	ld      de,0 ;начало сектор дорожка
 147++6A72 ED 53 F4 5C      ld      (#5cf4),de
 148++6A76 AF           	xor a
 149++6A77 32 20 6F     	ld (sec_shift),a ;переменная
 150++6A7A 21 00 00     	ld hl,0
 151++6A7D 22 15 6F     	ld (f_w_len+0),hl
 152++6A80 22 17 6F     	ld (f_w_len+2),hl
 153++6A83 3E 03        	ld a,3 ;id канала
 154++6A85 32 14 6F     	ld (f_w_flag),a ;флаг что trd для записи открыт
 155++6A88 C9           	ret
 156++6A89
 157++6A89
 158++6A89
 159++6A89
 160++6A89              fopen_c_scl	;открытие файла для разворачивания образа scl (id=4)
 161++6A89 3A 19 5D     	ld a,(#5D19) ;номер дисковода по умолчанию
 162++6A8C C6 41        	add a,"A"
 163++6A8E 32 D4 6E     	ld (write_ima_d),a ;подставим букву в запросе
 164++6A91 21 BF 6E         ld hl, write_ima
 165++6A94 CD 10 68         call DialogBox.msgBox ;предуреждение
 166++6A97              WAITKEY_scl
 167++6A97 3A 04 5C     	ld 		a,(23556)
 168++6A9A FE FF        	cp 255
 169++6A9C 28 F9        	JR Z,WAITKEY_scl	;ждём любую клавишу
 170++6A9E
 171++6A9E 11 00 00     	ld      de,0 ;начало сектор дорожка
 172++6AA1 ED 53 F4 5C      ld      (#5cf4),de
 173++6AA5
 174++6AA5 21 00 48     	ld hl,cat_buf ;очистить место для каталога дискеты
 175++6AA8 11 01 48     	ld de,cat_buf+1
 176++6AAB 36 00        	ld (hl),0
 177++6AAD 01 FF 08     	ld bc,9*256-1
 178++6AB0 ED B0        	ldir
 179++6AB2
 180++6AB2 CD D4 6C     	call scl_parse ;запуск цикла сборки образа
 181++6AB5
 182++6AB5 AF           	xor a
 183++6AB6 32 20 6F     	ld (sec_shift),a ;переменная
 184++6AB9              	;ld (scl_que),a
 185++6AB9 21 00 00     	ld hl,0
 186++6ABC 22 15 6F     	ld (f_w_len+0),hl
 187++6ABF 22 17 6F     	ld (f_w_len+2),hl
 188++6AC2 3E 04        	ld a,4 ;id канала
 189++6AC4 32 14 6F     	ld (f_w_flag),a ;флаг что scl для записи открыт
 190++6AC7 C9           	ret
 191++6AC8
 192++6AC8
 193++6AC8
 194++6AC8              ; A - file stream id
 195++6AC8              fclose:
 196++6AC8                  ;esxCall ESX_FCLOSE
 197++6AC8              	; push af
 198++6AC8              ; WAITKEY2	XOR A:IN A,(#FE):CPL:AND #1F:JR Z,WAITKEY2
 199++6AC8              	; pop af
 200++6AC8 FE 04        	cp 4 ;если scl
 201++6ACA 20 08        	jr nz,fclose2
 202++6ACC 21 00 51     	ld hl,sec_buf ;
 203++6ACF 06 01        	ld b,1
 204++6AD1 CD B3 6C     	call scl_write_buf ;допишем остаток scl, если есть
 205++6AD4
 206++6AD4              fclose2
 207++6AD4 AF           	xor a ;как бы закрываем все файлы
 208++6AD5 32 10 6F     	ld (f_r_flag),a
 209++6AD8 32 14 6F     	ld (f_w_flag),a
 210++6ADB C9               ret
 211++6ADC
 212++6ADC
 213++6ADC
 214++6ADC
 215++6ADC              ; A - file stream id
 216++6ADC              ; BC - length
 217++6ADC              ; HL - buffer
 218++6ADC              ; Returns
 219++6ADC              ;  BC - length(how much was actually read)
 220++6ADC              fread: ;(id=1)
 221++6ADC                  ; push hl : pop ix
 222++6ADC                  ; esxCall ESX_FREAD
 223++6ADC              	; push af
 224++6ADC              	; ld a,4
 225++6ADC              	; out (254),a
 226++6ADC              ; WAITKEY	XOR A:IN A,(#FE):CPL:AND #1F:JR Z,WAITKEY
 227++6ADC              	; xor a
 228++6ADC              	; out (254),a
 229++6ADC              	; pop af
 230++6ADC
 231++6ADC FE 01        	cp 1 ;id = 1?
 232++6ADE 20 06        	jr nz,fread_no_chek ;выход если номер потока не = 1
 233++6AE0 3A 10 6F     	ld a,(f_r_flag)
 234++6AE3 B7           	or a
 235++6AE4 20 06        	jr nz,fread_chek ;файл уже открыт?
 236++6AE6              fread_no_chek ;выход с ошибкой
 237++6AE6 AF           	xor a
 238++6AE7 37           	scf ;флаг ошибки
 239++6AE8 01 00 00     	ld bc,0 ;ничего мы не считали
 240++6AEB C9           	ret
 241++6AEC
 242++6AEC              fread_chek
 243++6AEC ED 4B 0C 6F  	ld bc,(f_r_len_sec-1) ;загружаем файл целиком, не смотря на то, сколько байт было запрошено
 244++6AF0 0E 05            ld      c,5 ;read читаем целыми секторами
 245++6AF2 ED 5B 0B 6F  	ld de,(f_r_cur_trk)
 246++6AF6 CD 13 3D         call    #3d13
 247++6AF9 ED 4B 0E 6F  	ld bc,(f_r_len) ;возвратим сколько считали байт (длину файла)
 248++6AFD AF           	xor a ;флаги сбросим
 249++6AFE C9               ret
 250++6AFF
 251++6AFF              ; A - file stream id
 252++6AFF              ; BC - length
 253++6AFF              ; HL - buffer
 254++6AFF              ; Returns:
 255++6AFF              ;   BC - actually written bytes
 256++6AFF              fwrite: ;
 257++6AFF                  ; push hl : pop ix
 258++6AFF                  ; esxCall ESX_FWRITE
 259++6AFF
 260++6AFF              	; push af
 261++6AFF              	; ld a,2
 262++6AFF              	; out (254),a
 263++6AFF              ; WAITKEY1	XOR A:IN A,(#FE):CPL:AND #1F:JR Z,WAITKEY1
 264++6AFF              	; xor a
 265++6AFF              	; out (254),a
 266++6AFF              	; pop af
 267++6AFF
 268++6AFF FE 02        	cp 2 ;id = 2?
 269++6B01 28 0F        	jr z,fwrite_chek ;проверка id потока
 270++6B03 FE 03        	cp 3 ;id = 3?
 271++6B05 28 0D        	jr z,fwrite_chek_trd ;проверка id потока
 272++6B07 FE 04        	cp 4 ;id = 4?
 273++6B09 CA EE 6B     	jp z,fwrite_chek_scl ;проверка id потока
 274++6B0C
 275++6B0C
 276++6B0C              fwrite_no_chek ;выход с ошибкой
 277++6B0C AF           	xor a
 278++6B0D 37           	scf ;флаг ошибки
 279++6B0E 01 00 00     	ld bc,0 ;ничего мы не записали
 280++6B11 C9           	ret
 281++6B12
 282++6B12              fwrite_chek ;запись произвольного типа файла
 283++6B12 18 F8        	jr fwrite_no_chek ;пока отключено
 284++6B14              	; ld a,(f_w_flag)
 285++6B14              	; or a
 286++6B14              	; jr z,fwrite_no_chek ;файл уже открыт?
 287++6B14              	; ld (temp_bc),bc
 288++6B14              	; ;ld bc,(f_r_len_sec-1) ;
 289++6B14                  ; ld      c,6 ;пишем целыми секторами
 290++6B14              	; ld de,(f_w_cur_trk)
 291++6B14                  ; call    #3d13
 292++6B14              	; ld bc,(temp_bc) ;возвратим, что сколько запрашивали, столько и считали байт
 293++6B14              	; xor a ;флаги сбросим
 294++6B14                  ; ret
 295++6B14
 296++6B14
 297++6B14
 298++6B14
 299++6B14
 300++6B14              fwrite_chek_trd ;запись trd файла (разворачивание образа)
 301++6B14              	; ld a,2
 302++6B14              	; out (254),a
 303++6B14              ; WAITKEY_t	XOR A:IN A,(#FE):CPL:AND #1F:JR Z,WAITKEY_t
 304++6B14              	; xor a
 305++6B14              	; out (254),a
 306++6B14 3A 14 6F     	ld a,(f_w_flag)
 307++6B17 B7           	or a
 308++6B18 28 F2        	jr z,fwrite_no_chek ;файл уже открыт?
 309++6B1A ED 43 1A 6F  	ld (temp_bc),bc ;длина
 310++6B1E 22 1C 6F     	ld (temp_hl),hl ;адрес данных
 311++6B21 78           	ld a,b
 312++6B22 B1           	or c
 313++6B23 28 E7        	jr z,fwrite_no_chek ; если длина 0, то выход
 314++6B25
 315++6B25              	; ld a,b
 316++6B25              	; or a
 317++6B25              	; jr nz,testt1
 318++6B25              	; nop
 319++6B25
 320++6B25              ; testt1
 321++6B25
 322++6B25 AF           	xor a
 323++6B26 32 22 6F     	ld (sec_part),a ;обнулить переменные
 324++6B29 32 21 6F     	ld (sec_shift2),a
 325++6B2C 32 22 6F     	ld (sec_shift2+1),a
 326++6B2F 32 23 6F     	ld (sec_shift_flag),a
 327++6B32 32 19 6F     	ld (write_end_flag),a ;
 328++6B35
 329++6B35
 330++6B35 3A 20 6F     	ld a,(sec_shift)
 331++6B38 B7           	or a
 332++6B39 28 43        	jr z,fwrite_trd3 ;если смещения нет, то первую часть пропустим
 333++6B3B
 334++6B3B
 335++6B3B 4F           	ld c,a
 336++6B3C 06 00        	ld b,0
 337++6B3E 2A 1A 6F     	ld hl,(temp_bc) ;проверка заполнится ли целый сектор
 338++6B41 09           	add hl,bc
 339++6B42
 340++6B42 3E 01        	ld a,1
 341++6B44 32 19 6F     	ld (write_end_flag),a ;флаг что не нужно дописывать остаток
 342++6B47
 343++6B47 7C           	ld a,h
 344++6B48 B7           	or a
 345++6B49 20 05        	jr nz,fwrite_trd4
 346++6B4B 3E 01        	ld a,1
 347++6B4D 32 23 6F     	ld (sec_shift_flag),a ;флаг что не заполнен сектор
 348++6B50
 349++6B50              fwrite_trd4
 350++6B50 21 00 51     	ld hl,sec_buf ;буфер последнего сектора
 351++6B53 09           	add hl,bc ;на этой точке остановились
 352++6B54 EB           	ex de,hl
 353++6B55 2A 1C 6F     	ld hl,(temp_hl) ;присоединим начало данных в конец предыдущих
 354++6B58              	; ld a,c
 355++6B58              	; or a
 356++6B58              	; jr nz,fwrite_trd2
 357++6B58              	; inc b ;коррекция
 358++6B58              ; fwrite_trd2
 359++6B58              	; ld c,a
 360++6B58 AF           	xor a
 361++6B59 91           	sub c
 362++6B5A 4F           	ld c,a ;сколько осталось перенести до заполнения сектора
 363++6B5B ED 43 21 6F  	ld (sec_shift2),bc ;сохраним сколько добавили байт
 364++6B5F ED B0        	ldir
 365++6B61
 366++6B61 3A 23 6F     	ld a,(sec_shift_flag)
 367++6B64 B7           	or a
 368++6B65 20 17        	jr nz,fwrite_trd3 ;если сектор ещё не заполнен писать не будем
 369++6B67
 370++6B67 21 00 51     	ld hl,sec_buf
 371++6B6A ED 5B F4 5C  	ld de,(#5cf4)
 372++6B6E              	;ld (f_w_cur_trk),de	;запомним позицию
 373++6B6E 01 06 01         ld      bc,#0106 ;пишем 1 сектор из буфера
 374++6B71 CD 13 3D         call    #3d13
 375++6B74 79           	ld a,c
 376++6B75 FE FF        	cp 255
 377++6B77 CA 0C 6B     	jp z,fwrite_no_chek ;выход если ошибка
 378++6B7A
 379++6B7A AF           	xor a
 380++6B7B 32 19 6F     	ld (write_end_flag),a ;флаг что нужно дописывать остаток
 381++6B7E              	; ld de,(f_w_cur_trk) ;если сектор ещё не заполнен, останемся на старой позиции
 382++6B7E              	; ld (#5cf4),de
 383++6B7E              	; ld b,1 ;на сектор вперёд
 384++6B7E              	; ld de,(f_w_cur_trk)
 385++6B7E              	; call calc_next_pos
 386++6B7E              	; ld (f_w_cur_trk),de
 387++6B7E
 388++6B7E              fwrite_trd3
 389++6B7E 2A 1C 6F     	ld hl,(temp_hl) ;запишем остаток данных
 390++6B81              	;ld a,(sec_shift)
 391++6B81              	;ld c,a
 392++6B81              	;ld b,0
 393++6B81 ED 4B 21 6F  	ld bc,(sec_shift2)
 394++6B85 09           	add hl,bc ;с этой точки пишем
 395++6B86 22 1E 6F     	ld (temp_hl2),hl ;сохраним начало записи второго сектора
 396++6B89
 397++6B89 2A 1A 6F     	ld hl,(temp_bc) ;вычисление на чём остановимся в этот раз
 398++6B8C A7           	and a
 399++6B8D ED 42        	sbc hl,bc ;вычтем то, что добавили к первому сектору
 400++6B8F 4D           	ld c,l
 401++6B90 44           	ld b,h
 402++6B91 30 02        	jr nc,fwrite_trd5
 403++6B93 06 00        	ld b,0 ;коррекция если вышел минус
 404++6B95              fwrite_trd5
 405++6B95 2A 1C 6F     	ld hl,(temp_hl)
 406++6B98 09           	add hl,bc
 407++6B99
 408++6B99 11 FC 94     	ld de,outputBuffer
 409++6B9C A7           	and a
 410++6B9D ED 52        	sbc hl,de
 411++6B9F
 412++6B9F 7D           	ld a,l
 413++6BA0 32 20 6F     	ld (sec_shift),a ;смещение на следующий раз
 414++6BA3              	;ld hl,(temp_hl)
 415++6BA3
 416++6BA3
 417++6BA3              	; or a
 418++6BA3              	; jr z,fwrite_trd1
 419++6BA3              	; inc b  ;коррекция количества секторов
 420++6BA3
 421++6BA3 78           	ld a,b ;нужна проверка на количество секторов!!!
 422++6BA4 32 22 6F     	ld (sec_part),a ;запомним сколько секторов во второй части
 423++6BA7
 424++6BA7              	;ld a,b
 425++6BA7 B7           	or a
 426++6BA8 28 16        	jr z,fwrite_trd1 ;если размер данных меньше сектора, то пропустим запись
 427++6BAA
 428++6BAA 2A 1E 6F     	ld hl,(temp_hl2)
 429++6BAD              	;push bc
 430++6BAD ED 5B F4 5C  	ld de,(#5cf4)
 431++6BB1 0E 06            ld      c,6 ;пишем целыми секторами
 432++6BB3 CD 13 3D         call    #3d13
 433++6BB6 79           	ld a,c
 434++6BB7              	;pop bc
 435++6BB7 FE FF        	cp 255
 436++6BB9 CA 0C 6B     	jp z,fwrite_no_chek ;выход если ошибка
 437++6BBC              	; ld de,(f_w_cur_trk)
 438++6BBC              	; call calc_next_pos
 439++6BBC              	; ld (f_w_cur_trk),de
 440++6BBC
 441++6BBC AF           	xor a
 442++6BBD 32 19 6F     	ld (write_end_flag),a ;флаг что нужно дописывать остаток
 443++6BC0
 444++6BC0              fwrite_trd1
 445++6BC0 3A 19 6F     	ld a,(write_end_flag) ;нужно записывать остаток?
 446++6BC3 B7           	or a
 447++6BC4 20 12        	jr nz,fwrite_trd_ex ;не нужно
 448++6BC6
 449++6BC6 2A 1E 6F     	ld hl,(temp_hl2) ;сохраним незаписанный остаток
 450++6BC9 3A 22 6F     	ld a,(sec_part)
 451++6BCC 47           	ld b,a
 452++6BCD 0E 00        	ld c,0
 453++6BCF 09           	add hl,bc
 454++6BD0 11 00 51     	ld de,sec_buf
 455++6BD3 01 00 01     	ld bc,256
 456++6BD6 ED B0        	ldir
 457++6BD8              ;fwrite_trd2
 458++6BD8
 459++6BD8
 460++6BD8              fwrite_trd_ex
 461++6BD8 ED 4B 1A 6F  	ld bc,(temp_bc) ;возвратим, что сколько запрашивали, столько и записали байт
 462++6BDC              	;посчитаем общую длину записанного
 463++6BDC 2A 15 6F     	ld hl,(f_w_len)
 464++6BDF 09           	add hl,bc
 465++6BE0 22 15 6F     	ld (f_w_len),hl
 466++6BE3 30 07        	jr nc,fwrite_trd_ex1
 467++6BE5 2A 17 6F     	ld hl,(f_w_len+2)
 468++6BE8 23           	inc hl
 469++6BE9 22 17 6F     	ld (f_w_len+2),hl
 470++6BEC
 471++6BEC              fwrite_trd_ex1
 472++6BEC AF           	xor a ;флаги сбросим
 473++6BED C9               ret
 474++6BEE
 475++6BEE
 476++6BEE
 477++6BEE
 478++6BEE
 479++6BEE              ;------------------scl----------------------
 480++6BEE              fwrite_chek_scl ;запись scl файла (разворачивание образа)
 481++6BEE              	; ld a,2
 482++6BEE              	; out (254),a
 483++6BEE              ; WAITKEY_t	XOR A:IN A,(#FE):CPL:AND #1F:JR Z,WAITKEY_t
 484++6BEE              	; xor a
 485++6BEE              	; out (254),a
 486++6BEE 3A 14 6F     	ld a,(f_w_flag)
 487++6BF1 B7           	or a
 488++6BF2 CA 0C 6B     	jp z,fwrite_no_chek ;файл уже открыт?
 489++6BF5 ED 43 1A 6F  	ld (temp_bc),bc ;длина
 490++6BF9 22 1C 6F     	ld (temp_hl),hl ;адрес данных
 491++6BFC 78           	ld a,b
 492++6BFD B1           	or c
 493++6BFE CA 0C 6B     	jp z,fwrite_no_chek ; если длина 0, то выход
 494++6C01
 495++6C01              	; ld a,b
 496++6C01              	; or a
 497++6C01              	; jr nz,testt1
 498++6C01              	; nop
 499++6C01
 500++6C01              ; testt1
 501++6C01
 502++6C01 AF           	xor a
 503++6C02 32 22 6F     	ld (sec_part),a ;обнулить переменные
 504++6C05 32 21 6F     	ld (sec_shift2),a
 505++6C08 32 22 6F     	ld (sec_shift2+1),a
 506++6C0B 32 23 6F     	ld (sec_shift_flag),a
 507++6C0E 32 19 6F     	ld (write_end_flag),a ;
 508++6C11
 509++6C11
 510++6C11 3A 20 6F     	ld a,(sec_shift)
 511++6C14 B7           	or a
 512++6C15 28 38        	jr z,fwrite_scl3 ;если смещения нет, то первую часть пропустим
 513++6C17
 514++6C17
 515++6C17 4F           	ld c,a
 516++6C18 06 00        	ld b,0
 517++6C1A 2A 1A 6F     	ld hl,(temp_bc) ;проверка заполнится ли целый сектор
 518++6C1D 09           	add hl,bc
 519++6C1E
 520++6C1E 3E 01        	ld a,1
 521++6C20 32 19 6F     	ld (write_end_flag),a ;флаг что не нужно дописывать остаток
 522++6C23
 523++6C23 7C           	ld a,h
 524++6C24 B7           	or a
 525++6C25 20 05        	jr nz,fwrite_scl4
 526++6C27 3E 01        	ld a,1
 527++6C29 32 23 6F     	ld (sec_shift_flag),a ;флаг что не заполнен сектор
 528++6C2C
 529++6C2C              fwrite_scl4
 530++6C2C 21 00 51     	ld hl,sec_buf ;буфер последнего сектора
 531++6C2F 09           	add hl,bc ;на этой точке остановились
 532++6C30 EB           	ex de,hl
 533++6C31 2A 1C 6F     	ld hl,(temp_hl) ;присоединим начало данных в конец предыдущих
 534++6C34              	; ld a,c
 535++6C34              	; or a
 536++6C34              	; jr nz,fwrite_scl2
 537++6C34              	; inc b ;коррекция
 538++6C34              ; fwrite_scl2
 539++6C34              	; ld c,a
 540++6C34 AF           	xor a
 541++6C35 91           	sub c
 542++6C36 4F           	ld c,a ;сколько осталось перенести до заполнения сектора
 543++6C37 ED 43 21 6F  	ld (sec_shift2),bc ;сохраним сколько добавили байт
 544++6C3B ED B0        	ldir
 545++6C3D
 546++6C3D 3A 23 6F     	ld a,(sec_shift_flag)
 547++6C40 B7           	or a
 548++6C41 20 0C        	jr nz,fwrite_scl3 ;если сектор ещё не заполнен писать не будем
 549++6C43
 550++6C43 21 00 51     	ld hl,sec_buf
 551++6C46              	;ld de,(#5cf4)
 552++6C46              	;ld (f_w_cur_trk),de	;запомним позицию
 553++6C46 06 01            ld      b,#01 ;пишем 1 сектор из буфера
 554++6C48 CD B3 6C         call    scl_write_buf
 555++6C4B              	; ld a,c
 556++6C4B              	; cp 255
 557++6C4B              	; jp z,fwrite_no_chek ;выход если ошибка
 558++6C4B
 559++6C4B AF           	xor a
 560++6C4C 32 19 6F     	ld (write_end_flag),a ;флаг что нужно дописывать остаток
 561++6C4F              	; ld de,(f_w_cur_trk) ;если сектор ещё не заполнен, останемся на старой позиции
 562++6C4F              	; ld (#5cf4),de
 563++6C4F              	; ld b,1 ;на сектор вперёд
 564++6C4F              	; ld de,(f_w_cur_trk)
 565++6C4F              	; call calc_next_pos
 566++6C4F              	; ld (f_w_cur_trk),de
 567++6C4F
 568++6C4F              fwrite_scl3
 569++6C4F 2A 1C 6F     	ld hl,(temp_hl) ;запишем остаток данных
 570++6C52              	;ld a,(sec_shift)
 571++6C52              	;ld c,a
 572++6C52              	;ld b,0
 573++6C52 ED 4B 21 6F  	ld bc,(sec_shift2)
 574++6C56 09           	add hl,bc ;с этой точки пишем
 575++6C57 22 1E 6F     	ld (temp_hl2),hl ;сохраним начало записи второго сектора
 576++6C5A
 577++6C5A 2A 1A 6F     	ld hl,(temp_bc) ;вычисление на чём остановимся в этот раз
 578++6C5D A7           	and a
 579++6C5E ED 42        	sbc hl,bc ;вычтем то, что добавили к первому сектору
 580++6C60 4D           	ld c,l
 581++6C61 44           	ld b,h
 582++6C62 30 02        	jr nc,fwrite_scl5
 583++6C64 06 00        	ld b,0 ;коррекция если вышел минус
 584++6C66              fwrite_scl5
 585++6C66 2A 1C 6F     	ld hl,(temp_hl)
 586++6C69 09           	add hl,bc
 587++6C6A
 588++6C6A 11 FC 94     	ld de,outputBuffer
 589++6C6D A7           	and a
 590++6C6E ED 52        	sbc hl,de
 591++6C70
 592++6C70 7D           	ld a,l
 593++6C71 32 20 6F     	ld (sec_shift),a ;смещение на следующий раз
 594++6C74              	;ld hl,(temp_hl)
 595++6C74
 596++6C74
 597++6C74              	; or a
 598++6C74              	; jr z,fwrite_scl1
 599++6C74              	; inc b  ;коррекция количества секторов
 600++6C74
 601++6C74 78           	ld a,b ;нужна проверка на количество секторов!!!
 602++6C75 32 22 6F     	ld (sec_part),a ;запомним сколько секторов во второй части
 603++6C78
 604++6C78              	;ld a,b
 605++6C78 B7           	or a
 606++6C79 28 0A        	jr z,fwrite_scl1 ;если размер данных меньше сектора, то пропустим запись
 607++6C7B
 608++6C7B 2A 1E 6F     	ld hl,(temp_hl2)
 609++6C7E              	;push bc
 610++6C7E              	;ld de,(#5cf4)
 611++6C7E                  ;ld      c,6 ;пишем целыми секторами
 612++6C7E CD B3 6C         call    scl_write_buf
 613++6C81              	;ld a,c
 614++6C81              	;pop bc
 615++6C81              	; cp 255
 616++6C81              	; jp z,fwrite_no_chek ;выход если ошибка
 617++6C81              	; ld de,(f_w_cur_trk)
 618++6C81              	; call calc_next_pos
 619++6C81              	; ld (f_w_cur_trk),de
 620++6C81
 621++6C81 AF           	xor a
 622++6C82 32 19 6F     	ld (write_end_flag),a ;флаг что нужно дописывать остаток
 623++6C85
 624++6C85              fwrite_scl1
 625++6C85 3A 19 6F     	ld a,(write_end_flag) ;нужно записывать остаток?
 626++6C88 B7           	or a
 627++6C89 20 12        	jr nz,fwrite_scl_ex ;не нужно
 628++6C8B
 629++6C8B 2A 1E 6F     	ld hl,(temp_hl2) ;сохраним незаписанный остаток
 630++6C8E 3A 22 6F     	ld a,(sec_part)
 631++6C91 47           	ld b,a
 632++6C92 0E 00        	ld c,0
 633++6C94 09           	add hl,bc
 634++6C95 11 00 51     	ld de,sec_buf
 635++6C98 01 00 01     	ld bc,256
 636++6C9B ED B0        	ldir
 637++6C9D              ;fwrite_scl2
 638++6C9D
 639++6C9D
 640++6C9D              fwrite_scl_ex
 641++6C9D ED 4B 1A 6F  	ld bc,(temp_bc) ;возвратим, что сколько запрашивали, столько и записали байт
 642++6CA1              	;посчитаем общую длину записанного
 643++6CA1 2A 15 6F     	ld hl,(f_w_len)
 644++6CA4 09           	add hl,bc
 645++6CA5 22 15 6F     	ld (f_w_len),hl
 646++6CA8 30 07        	jr nc,fwrite_scl_ex1
 647++6CAA 2A 17 6F     	ld hl,(f_w_len+2)
 648++6CAD 23           	inc hl
 649++6CAE 22 17 6F     	ld (f_w_len+2),hl
 650++6CB1
 651++6CB1              fwrite_scl_ex1
 652++6CB1 AF           	xor a ;флаги сбросим
 653++6CB2 C9               ret
 654++6CB3
 655++6CB3
 656++6CB3
 657++6CB3
 658++6CB3
 659++6CB3
 660++6CB3              scl_write_buf ;заполнение промежуточного буфера
 661++6CB3 C5           	push bc ;сколько пакетов указано в b
 662++6CB4 11 00 53     	ld de,scl_buf ;перенесём сектор во временный буфер
 663++6CB7 01 00 01     	ld bc,256
 664++6CBA ED B0        	ldir
 665++6CBC 22 44 6F     	ld (scl_temp_hl2),hl ;сохраним адрес данных
 666++6CBF 3A 2C 6F     	ld a,(scl_que) ;проверим флаг что нужны данные
 667++6CC2 B7           	or a
 668++6CC3 28 08        	jr z,scl_write_buf_ret ;не будем вызывать парсер если не нужны
 669++6CC5 21 CD 6C     	ld hl,scl_write_buf_ret ;адрес возврата
 670++6CC8 E5           	push hl
 671++6CC9 2A 3E 6F     	ld hl,(scl_parse_ret_adr) ;адрес для продолжения основного цикла сборки
 672++6CCC E9           	jp (hl) ;отдадим пакет 256 байт парсеру
 673++6CCD              scl_write_buf_ret
 674++6CCD 2A 44 6F     	ld hl,(scl_temp_hl2)
 675++6CD0 C1           	pop bc
 676++6CD1 10 E0        	djnz scl_write_buf
 677++6CD3
 678++6CD3 C9           	ret
 679++6CD4
 680++6CD4
 681++6CD4
 682++6CD4              scl_parse ;разбор образа scl в trd, основной цикл
 683++6CD4              	;получить первый сектор
 684++6CD4              ;запрос порции данных по 256 байт
 685++6CD4 22 42 6F     	ld (scl_temp_hl),hl
 686++6CD7 ED 53 46 6F  	ld (scl_temp_de),de
 687++6CDB ED 43 48 6F  	ld (scl_temp_bc),bc
 688++6CDF 3E 01        	ld a,1
 689++6CE1 32 2C 6F     	ld (scl_que),a ;включим флаг что нужны данные
 690++6CE4 21 EB 6C     	ld hl,scl_parse_ret ;сохраним адрес возврата
 691++6CE7 22 3E 6F     	ld (scl_parse_ret_adr),hl
 692++6CEA C9           	ret ;вернёмся для ожидания данных
 693++6CEB              scl_parse_ret
 694++6CEB AF           	xor a
 695++6CEC 32 2C 6F     	ld (scl_que),a
 696++6CEF 2A 42 6F     	ld hl,(scl_temp_hl)
 697++6CF2 ED 5B 46 6F  	ld de,(scl_temp_de)
 698++6CF6 ED 4B 48 6F  	ld bc,(scl_temp_bc)
 699++6CFA
 700++6CFA 11 00 53     	ld de,scl_buf ;проверка метки образа
 701++6CFD 21 24 6F     	ld hl,scl_sign
 702++6D00 06 08        	ld b,8
 703++6D02              scl_parse_chk
 704++6D02 1A           	ld a,(de)
 705++6D03 BE           	cp (hl)
 706++6D04 20 06        	jr nz,scl_parse_chk_no
 707++6D06 23           	inc hl
 708++6D07 13           	inc de
 709++6D08 10 F8        	djnz scl_parse_chk
 710++6D0A 18 10        	jr scl_parse_chk_ok
 711++6D0C              scl_parse_chk_no ;если не совпало, значит плохой образ
 712++6D0C 21 2D 6F         ld hl, scl_err
 713++6D0F CD 10 68         call DialogBox.msgBox ;предуреждение
 714++6D12 AF           	xor a
 715++6D13 32 2C 6F     	ld (scl_que),a ;выключим флаг что нужны данные
 716++6D16 3E 04        	ld a,4 ;закроем файл
 717++6D18 CD C8 6A     	call fclose
 718++6D1B C9           	ret
 719++6D1C              scl_parse_chk_ok ;сигнатура правильная
 720++6D1C
 721++6D1C              ;формирование каталога
 722++6D1C 3A 08 53     	ld a,(scl_buf+8)
 723++6D1F 32 41 6F     	ld (scl_files),a ;всего файлов
 724++6D22 32 40 6F     	ld (scl_cat_cycl),a ;цикл
 725++6D25 21 09 53     	ld hl,scl_buf+9 ;адрес первого заголовка
 726++6D28 11 00 48     	ld de,cat_buf ;адрес формируемого каталога trd
 727++6D2B              scl_parse_cat2
 728++6D2B 06 0E        	ld b,14 ;14 байт одна запись
 729++6D2D              scl_parse_cat
 730++6D2D 7E           	ld a,(hl)
 731++6D2E 12           	ld (de),a
 732++6D2F 13           	inc de
 733++6D30 2C           	inc l ;адрес увеличиваем только в пределах младшего регистра
 734++6D31 20 26        	jr nz,scl_parse_cat1
 735++6D33              	;тут пора запросить следующий сектор
 736++6D33              ;запрос порции данных по 256 байт
 737++6D33 22 42 6F     	ld (scl_temp_hl),hl
 738++6D36 ED 53 46 6F  	ld (scl_temp_de),de
 739++6D3A ED 43 48 6F  	ld (scl_temp_bc),bc
 740++6D3E 3E 01        	ld a,1
 741++6D40 32 2C 6F     	ld (scl_que),a ;включим флаг что нужны данные
 742++6D43 21 4A 6D     	ld hl,scl_parse_ret1 ;сохраним адрес возврата
 743++6D46 22 3E 6F     	ld (scl_parse_ret_adr),hl
 744++6D49 C9           	ret ;вернёмся для ожидания данных
 745++6D4A              scl_parse_ret1
 746++6D4A AF           	xor a
 747++6D4B 32 2C 6F     	ld (scl_que),a
 748++6D4E 2A 42 6F     	ld hl,(scl_temp_hl)
 749++6D51 ED 5B 46 6F  	ld de,(scl_temp_de)
 750++6D55 ED 4B 48 6F  	ld bc,(scl_temp_bc)
 751++6D59
 752++6D59              scl_parse_cat1
 753++6D59 10 D2        	djnz scl_parse_cat
 754++6D5B 13           	inc de
 755++6D5C 13           	inc de
 756++6D5D 3A 40 6F     	ld a,(scl_cat_cycl)
 757++6D60 3D           	dec a
 758++6D61 32 40 6F     	ld (scl_cat_cycl),a
 759++6D64 20 C5        	jr nz,scl_parse_cat2
 760++6D66
 761++6D66 22 42 6F     	ld (scl_temp_hl),hl ;запомнить где остановились
 762++6D69
 763++6D69              ;подсчёт секторов и дорожек
 764++6D69 DD E5        	push ix
 765++6D6B 3A 41 6F     	ld a,(scl_files)
 766++6D6E 11 00 01     	ld de,#0100 ;данные с первой дорожки
 767++6D71 DD 21 00 48  	ld ix,cat_buf
 768++6D75 DD 73 0E     	ld (ix+14),e
 769++6D78 DD 72 0F     	ld (ix+15),d
 770++6D7B 21 00 00     	ld hl,0 ;общее количество секторов
 771++6D7E              scl_cacl
 772++6D7E 32 40 6F     	ld (scl_cat_cycl),a ;цикл
 773++6D81 DD 7E 0D     	ld a,(ix+13) ;длина файла в секторах
 774++6D84 4F           	ld c,a
 775++6D85 06 00        	ld b,0
 776++6D87 09           	add hl,bc ;секторов
 777++6D88
 778++6D88 01 10 00     	ld bc,16
 779++6D8B DD 09        	add ix,bc
 780++6D8D 47           	ld b,a
 781++6D8E CD B3 6E     	call calc_next_pos
 782++6D91 3A 40 6F     	ld a,(scl_cat_cycl)
 783++6D94 FE 01        	cp 1
 784++6D96 28 06        	jr z,scl_cacl2 ;в последний раз пропусим
 785++6D98 DD 73 0E     	ld (ix+14),e
 786++6D9B DD 72 0F     	ld (ix+15),d
 787++6D9E              scl_cacl2
 788++6D9E 3D           	dec a
 789++6D9F 20 DD        	jr nz,scl_cacl
 790++6DA1              	;теперь узнаем первый свободный сектор
 791++6DA1 DD 7E 0D     	ld a,(ix+13) ;длина файла в секторах
 792++6DA4 4F           	ld c,a
 793++6DA5 06 00        	ld b,0
 794++6DA7 09           	add hl,bc
 795++6DA8              	; ld b,a
 796++6DA8              	; call calc_next_pos
 797++6DA8 ED 53 E1 50  	ld (cat_buf+8*256+#e1),de ;Первый свободный сектор и дорожка на дискете
 798++6DAC 11 F0 09     	ld de,16*159
 799++6DAF EB           	ex de,hl
 800++6DB0 A7           	and a
 801++6DB1 ED 52        	sbc hl,de
 802++6DB3 22 E5 50     	ld (cat_buf+8*256+#e5),hl ;Число свободных секторов на диске
 803++6DB6 DD E1        	pop ix
 804++6DB8
 805++6DB8
 806++6DB8
 807++6DB8              ;запись содержимого файлов
 808++6DB8 3A 41 6F     	ld a,(scl_files) ;всего файлов
 809++6DBB 32 40 6F     	ld (scl_cat_cycl),a ;цикл
 810++6DBE 21 0D 48     	ld hl,cat_buf+13 ;адрес размер секторов файла
 811++6DC1 22 4A 6F     	ld (cat_cur_adr),hl
 812++6DC4
 813++6DC4 21 00 01     	ld hl,#0100 ;начиная с первой дорожки
 814++6DC7 22 F4 5C     	ld (#5cf4),hl
 815++6DCA              scl_parse_file2
 816++6DCA 2A 42 6F     	ld hl,(scl_temp_hl) ;адрес данных
 817++6DCD ED 5B 4A 6F  	ld de,(cat_cur_adr) ;адрес сектор дорожка файла
 818++6DD1              	;dec de
 819++6DD1 1A           	ld a,(de) ;количество секторов, цикл
 820++6DD2 4F           	ld c,a
 821++6DD3              scl_parse_file3
 822++6DD3 11 00 55     	ld de,scl_buf2 ;адрес ещё одного буфера
 823++6DD6 06 00        	ld b,0 ;256 байт один сектор, цикл
 824++6DD8              scl_parse_file
 825++6DD8 7E           	ld a,(hl)
 826++6DD9 12           	ld (de),a
 827++6DDA 13           	inc de
 828++6DDB 2C           	inc l ;адрес увеличиваем только в пределах младшего регистра
 829++6DDC 20 26        	jr nz,scl_parse_file1
 830++6DDE              	;тут пора запросить следующий сектор
 831++6DDE              ;запрос порции данных по 256 байт
 832++6DDE 22 42 6F     	ld (scl_temp_hl),hl
 833++6DE1 ED 53 46 6F  	ld (scl_temp_de),de
 834++6DE5 ED 43 48 6F  	ld (scl_temp_bc),bc
 835++6DE9 3E 01        	ld a,1
 836++6DEB 32 2C 6F     	ld (scl_que),a ;включим флаг что нужны данные
 837++6DEE 21 F5 6D     	ld hl,scl_parse_ret2 ;сохраним адрес возврата
 838++6DF1 22 3E 6F     	ld (scl_parse_ret_adr),hl
 839++6DF4 C9           	ret ;вернёмся для ожидания данных
 840++6DF5              scl_parse_ret2
 841++6DF5 AF           	xor a
 842++6DF6 32 2C 6F     	ld (scl_que),a
 843++6DF9 2A 42 6F     	ld hl,(scl_temp_hl)
 844++6DFC ED 5B 46 6F  	ld de,(scl_temp_de)
 845++6E00 ED 4B 48 6F  	ld bc,(scl_temp_bc)
 846++6E04
 847++6E04              scl_parse_file1
 848++6E04 10 D2        	djnz scl_parse_file
 849++6E06 22 42 6F     	ld (scl_temp_hl),hl
 850++6E09 ED 43 48 6F  	ld (scl_temp_bc),bc
 851++6E0D
 852++6E0D 21 00 55     	ld hl,scl_buf2 ;;запишем один сектор
 853++6E10 ED 5B F4 5C  	ld  de,(#5cf4)
 854++6E14 01 06 01         ld      bc,#0106 ;
 855++6E17 CD 13 3D         call    #3d13
 856++6E1A              	; ld a,c
 857++6E1A              	; cp 255
 858++6E1A              	; jp z,fwrite_no_chek ;выход если ошибка
 859++6E1A 2A 42 6F     	ld hl,(scl_temp_hl)
 860++6E1D ED 4B 48 6F  	ld bc,(scl_temp_bc)
 861++6E21
 862++6E21 0D           	dec c
 863++6E22 20 AF        	jr nz,scl_parse_file3
 864++6E24
 865++6E24 2A 4A 6F     	ld hl,(cat_cur_adr) ;адрес сектор дорожка файла
 866++6E27              	; ld e,(hl)
 867++6E27              	; inc hl
 868++6E27              	; ld d,(hl)
 869++6E27 01 10 00     	ld bc,16
 870++6E2A 09           	add hl,bc ;на следующий файл
 871++6E2B 22 4A 6F     	ld (cat_cur_adr),hl
 872++6E2E
 873++6E2E
 874++6E2E 3A 40 6F     	ld a,(scl_cat_cycl)
 875++6E31 3D           	dec a
 876++6E32 32 40 6F     	ld (scl_cat_cycl),a
 877++6E35 20 93        	jr nz,scl_parse_file2	;на следующий файл
 878++6E37
 879++6E37
 880++6E37
 881++6E37              ;формирование системного сектора №9 (8)
 882++6E37              	;
 883++6E37              	;ld (cat_buf+8*256+#e1),a ;// #E1 Первый свободный сектор на дискете
 884++6E37              	;
 885++6E37              	;ld (cat_buf+8*256+#e2),a ;// #E2 Первый свободный трек
 886++6E37 3E 16        	ld a,#16
 887++6E39 32 E3 50     	ld (cat_buf+8*256+#e3),a ;// #E3 16 80 дорожек, 2 стороны
 888++6E3C 3A 41 6F     	ld a,(scl_files)
 889++6E3F 32 E4 50     	ld (cat_buf+8*256+#e4),a ;// #E4 Общее количество файлов записанных на диск
 890++6E42              	;
 891++6E42              	;ld (cat_buf+8*256+#e5),a ;// #Е5,Е6 Число свободных секторов на диске
 892++6E42              	;ld (cat_buf+8*256+#e6),a
 893++6E42 3E 10        	ld a,#10
 894++6E44 32 E7 50     	ld (cat_buf+8*256+#e7),a ;// #E7 Код  #10,определяющий принадлежность к TR-DOS
 895++6E47
 896++6E47 21 02 6F     	ld hl,f_name ;запишем имя диска, взяв для этого имя файла
 897++6E4A 11 F5 50     	ld de,cat_buf+8*256+#f5 ;// #F5-#FC Имя диска в ASCII формате
 898++6E4D 01 08 00     	ld bc,8
 899++6E50 ED B0        	ldir
 900++6E52
 901++6E52 21 00 48     	ld hl,cat_buf ;запишем каталог на диск
 902++6E55 11 00 00     	ld de,0
 903++6E58 01 06 09         ld      bc,#0906 ;
 904++6E5B CD 13 3D         call    #3d13
 905++6E5E              	; ld a,c
 906++6E5E              	; cp 255
 907++6E5E              	; jp z,fwrite_no_chek ;выход если ошибка
 908++6E5E C9           	ret
 909++6E5F
 910++6E5F
 911++6E5F              ;-----------scl end --------------------
 912++6E5F
 913++6E5F
 914++6E5F
 915++6E5F
 916++6E5F
 917++6E5F
 918++6E5F
 919++6E5F
 920++6E5F
 921++6E5F
 922++6E5F              ; A - file stream id
 923++6E5F              ; fsync:
 924++6E5F              ;     esxCall ESX_FSYNC
 925++6E5F                  ; ret
 926++6E5F
 927++6E5F
 928++6E5F              ; HL - name (name.ext)
 929++6E5F              ; Returns:
 930++6E5F              ; HL - name (name    e)
 931++6E5F              format_name ;подгоняет имя файла под стандарт trdos (8+1)
 932++6E5F
 933++6E5F              	;сначала попробуем убрать из пути подпапку, если она есть
 934++6E5F 22 1C 6F     	ld (temp_hl),hl ;сохраним адрес исходного имени
 935++6E62 06 00        	ld b,#00 ;не больше 255 символов
 936++6E64              format_name5
 937++6E64 7E           	ld a,(hl)
 938++6E65 FE 2F        	cp "/" ;если есть подпапка
 939++6E67 28 0D        	jr z,format_name_path_yep
 940++6E69 7E           	ld a,(hl)
 941++6E6A FE 2E        	cp "." ;если ещё не дошли до расширения
 942++6E6C 20 05        	jr nz,format_name6
 943++6E6E 2A 1C 6F     	ld hl,(temp_hl) ;если дошли до расширения, то путей нет, вернёмся на начало имени
 944++6E71 18 04        	jr format_name_7 ;на выход
 945++6E73              format_name6
 946++6E73 23           	inc hl
 947++6E74 10 EE        	djnz format_name5
 948++6E76
 949++6E76              format_name_path_yep ;нашли
 950++6E76 23           	inc hl ;пропустим знак "/"
 951++6E77
 952++6E77              format_name_7
 953++6E77
 954++6E77
 955++6E77 E5           	push hl ;очистим место для нового имени
 956++6E78 21 02 6F     	ld hl,f_name
 957++6E7B 11 03 6F     	ld de,f_name+1
 958++6E7E 36 20        	ld (hl)," "
 959++6E80 01 08 00     	ld bc,8
 960++6E83 ED B0        	ldir
 961++6E85 E1           	pop hl
 962++6E86
 963++6E86 01 FF 09     	ld bc,#09ff ;длина имени 9 символов
 964++6E89 11 02 6F     	ld de,f_name ;куда
 965++6E8C              format_name2
 966++6E8C 7E           	ld a,(hl)
 967++6E8D FE 2E        	cp "."
 968++6E8F 20 08        	jr nz,format_name1
 969++6E91 23           	inc hl
 970++6E92 7E           	ld a,(hl)
 971++6E93 32 0A 6F     	ld (f_name+8),a ; и в конце первую букву расширения
 972++6E96 EB           	ex de,hl ;сохраним адрес исходного расширения
 973++6E97 18 16        	jr format_name_e
 974++6E99              format_name1
 975++6E99 ED A0        	ldi
 976++6E9B 10 EF        	djnz format_name2
 977++6E9D
 978++6E9D              	;если имя длинное, пропустим лишнее до расширения
 979++6E9D 06 00        	ld b,#00 ;не больше 255 символов
 980++6E9F              format_name3
 981++6E9F 7E           	ld a,(hl)
 982++6EA0 FE 2E        	cp "."
 983++6EA2 20 08        	jr nz,format_name4
 984++6EA4 23           	inc hl
 985++6EA5 7E           	ld a,(hl)
 986++6EA6 32 0A 6F     	ld (f_name+8),a ; и в конце первую букву расширения
 987++6EA9 EB           	ex de,hl ;сохраним адрес исходного расширения
 988++6EAA 18 03        	jr format_name_e
 989++6EAC              format_name4
 990++6EAC 23           	inc hl
 991++6EAD 10 F0        	djnz format_name3
 992++6EAF
 993++6EAF              format_name_e ;выход
 994++6EAF 21 02 6F     	ld hl,f_name ;вернём результат
 995++6EB2 C9           	ret
 996++6EB3
 997++6EB3              ; DE - trk/sec
 998++6EB3              ; B - sectors step
 999++6EB3              ; Returns:
1000++6EB3              ; DE - trk/sec
1001++6EB3              calc_next_pos		;вперёд на N секторов
1002++6EB3              			;ld b,4
1003++6EB3              			;ld  de,(#5ceb)
1004++6EB3              calc_next_pos2
1005++6EB3 1C           			inc e
1006++6EB4 7B           			ld a,e
1007++6EB5 FE 10        			cp 16
1008++6EB7 38 03        			jr c,calc_next_pos1
1009++6EB9 14           			inc d
1010++6EBA 1E 00        			ld e,0
1011++6EBC              calc_next_pos1
1012++6EBC              			;ld (#5ceb),de
1013++6EBC 10 F5        			djnz calc_next_pos2
1014++6EBE C9           			ret
1015++6EBF
1016++6EBF
1017++6EBF              ;testt db "123.trd"
1018++6EBF 49 6E 73 65  write_ima db "Insert disk to drive "
1018++6EC3 72 74 20 64
1018++6EC7 69 73 6B 20
1018++6ECB 74 6F 20 64
1018++6ECF 72 69 76 65
1018++6ED3 20
1019++6ED4 41 2E 20     write_ima_d db "A. "
1020++6ED7 41 6C 6C 20  		db "All data will be lost!",0
1020++6EDB 64 61 74 61
1020++6EDF 20 77 69 6C
1020++6EE3 6C 20 62 65
1020++6EE7 20 6C 6F 73
1020++6EEB 74 21 00
1021++6EEE
1022++6EEE 2E 74 72 64  trdExt1 db ".trd", 0
1022++6EF2 00
1023++6EF3 2E 54 52 44  trdExt2 db ".TRD", 0
1023++6EF7 00
1024++6EF8
1025++6EF8 2E 73 63 6C  sclExt1 db ".scl", 0
1025++6EFC 00
1026++6EFD 2E 53 43 4C  sclExt2 db ".SCL", 0
1026++6F01 00
1027++6F02
1028++6F02 00 00 00...  f_name ds 9 ;имя файла
1029++6F0B 00 00        f_r_cur_trk dw 	 0 ;текущие сектор-дорожка файла на чтение
1030++6F0D 00           f_r_len_sec db 0 ;длина файла на чтение в секторах
1031++6F0E 00 00        f_r_len dw 0;длина файла в байтах
1032++6F10 00           f_r_flag db 0 ;флаг что открыт файл на чтение
1033++6F11
1034++6F11 00 00        f_w_cur_trk dw 	 0 ;текущие сектор-дорожка файла на запись
1035++6F13 00           f_w_len_sec db 0 ;длина файла на запись в секторах
1036++6F14 00           f_w_flag db 0 ;флаг что открыт файл на запись
1037++6F15 00 00 00 00  f_w_len ds 4 ;длина записанных данных
1038++6F19 00           write_end_flag db 0 ;флаг что нужно записать остаток
1039++6F1A
1040++6F1A 00 00        temp_bc dw 0 ;хранение регистра
1041++6F1C 00 00        temp_hl dw 0 ;хранение регистра
1042++6F1E 00 00        temp_hl2 dw 0 ;хранение регистра
1043++6F20
1044++6F20 00           sec_shift db 0 ;указатель на каком байте остановлена запись
1045++6F21 00           sec_shift2 db 0 ;указатель на каком байте остановлена запись (остаток)
1046++6F22 00           sec_part db 0 ;сколько секторов во второй порции для записи
1047++6F23 00           sec_shift_flag db 0 ;флаг что буфер сектора не заполнен
1048++6F24
1049++6F24              ;секция scl
1050++6F24 53 49 4E 43  scl_sign db "SINCLAIR" ;метка
1050++6F28 4C 41 49 52
1051++6F2C 00           scl_que db 0 ;флаг запроса порции данных
1052++6F2D 53 43 4C 20  scl_err db "SCL image error!",0
1052++6F31 69 6D 61 67
1052++6F35 65 20 65 72
1052++6F39 72 6F 72 21
1052++6F3D 00
1053++6F3E 00 00        scl_parse_ret_adr dw 0; адрес возврата в цикл
1054++6F40 00           scl_cat_cycl db 0 ;переменная цикла
1055++6F41 00           scl_files db 0 ;всего файлов
1056++6F42 00 00        scl_temp_hl dw 0;;хранение регистра
1057++6F44 00 00        scl_temp_hl2 dw 0;
1058++6F46 00 00        scl_temp_de dw 0;
1059++6F48 00 00        scl_temp_bc dw 0;
1060++6F4A 00 00        cat_cur_adr dw 0;
1061++6F4C              ;scl end
1062++6F4C 00 00 00...  	align 256 ;временно
1063++7000              	;по адресу #4000 шрифт
1064++7000              cat_buf equ #4800 ;буфер для кататога диска 9*256
1065++7000              sec_buf equ cat_buf + 9*256 ;буфер сектора для записи 256
1066++7000              scl_buf equ sec_buf + 512 ;промежуточный буфер 256
1067++7000              scl_buf2 equ scl_buf + 512 ;промежуточный буфер 256
1068++7000
1069++7000                  ENDMODULE
# file closed: dos/trdos.asm
   9++7000              	ENDIF
  10++7000
  11++7000              	IFDEF ESXDOS
  12++7000 ~               		include "console.asm"
  13++7000 ~               		include "esxdos.asm"
  14++7000              	ENDIF
  15++7000
  16++7000              	IFDEF P3DOS
  17++7000 ~               		include "console.asm"
  18++7000 ~               		include "p3dos.asm"
  19++7000              	ENDIF
  20++7000
# file closed: dos/index.asm
  19+ 7000                  include "gopher/engine/history/index.asm"
# file opened: gopher/engine/history/index.asm
   1++7000                  include "controler.asm"
# file opened: gopher/engine/history/controler.asm
   1++7000                  module History
   2++7000              back:
   3++7000 3A 43 71         ld a, (depth)
   3++7003 FE 01          cp 1
   3++7005 CA 17 70       jp z, load
   4++7008 21 92 73 11      ld hl, historyBlock + HistoryRecord, de, historyBlock, bc, (total - 1) * HistoryRecord
   4++700C 44 71 01 38
   4++7010 09
   4++7011 ED B0          ldir ; Move history up
   5++7013 21 43 71         ld hl, depth
   5++7016 35             dec (hl)
   6++7017              ; Loads current resource
   7++7017              load:
   8++7017 21 34 70         ld hl, .msg
   8++701A CD 19 68       call DialogBox.msgNoWait
   9++701D AF               xor a
   9++701E 21 FC 94 11    ld hl, outputBuffer, de, outputBuffer + 1
   9++7022 FD 94
  10++7024              	IFDEF MSX
  11++7024 ~                	ld bc, (ramtop)
  12++7024 ~                	dec bc
  13++7024              	ELSE
  14++7024 01 02 6B         	ld bc, #ffff - outputBuffer - 1
  15++7027              	ENDIF
  16++7027
  17++7027 77               ld (hl), a
  18++7028 ED B0            ldir
  19++702A
  20++702A 3A 44 71         ld a, (historyBlock.isFile)
  20++702D A7             and a
  20++702E C2 2D 81       jp nz, Fetcher.fetchFromFS
  21++7031 C3 E0 80         jp Fetcher.fetchFromNet
  22++7034
  23++7034 20 20 20 20  .msg db "    Loading resource! Please wait! It will be here soon!", 0
  23++7038 4C 6F 61 64
  23++703C 69 6E 67 20
  23++7040 72 65 73 6F
  23++7044 75 72 63 65
  23++7048 21 20 50 6C
  23++704C 65 61 73 65
  23++7050 20 77 61 69
  23++7054 74 21 20 49
  23++7058 74 20 77 69
  23++705C 6C 6C 20 62
  23++7060 65 20 68 65
  23++7064 72 65 20 73
  23++7068 6F 6F 6E 21
  23++706C 00
  24++706D
  25++706D              home:
  26++706D 21 21 71         ld hl, homePage
  27++7070              ; HL - gopher row
  28++7070              navigate:
  29++7070 54 5D            ld de, hl
  30++7072 CD 59 7F         call UrlEncoder.isValidGopherRow
  31++7075 30 A0            jr nc, load ; Not valid - reload last
  32++7077 62 6B            ld hl, de
  33++7079 E5               push hl
  34++707A
  35++707A E5               push hl
  36++707B 21 C9 7C 11      ld hl, HistoryEnd - HistoryRecord, de, HistoryEnd, bc,  HistoryRecord * total
  36++707F 17 7F 01 86
  36++7083 0B
  36++7084 ED B8          lddr
  37++7086
  38++7086 ED 5B 8A 73      ld de, (Render.position), (historyBlock.position + HistoryRecord), de
  38++708A ED 53 D8 75
  39++708E                  ; Clean up struct
  40++708E AF               xor a
  40++708F 21 44 71 11    ld hl, historyBlock, de, historyBlock + 1, bc, historyBlockSize - 1, (hl), a
  40++7093 45 71 01 4D
  40++7097 02 77
  40++7099 ED B0          ldir
  41++709B E1               pop hl
  42++709C
  43++709C                  ; Fill record
  44++709C 54 5D            ld de, hl
  45++709E CD 18 7F         call UrlEncoder.isFile
  46++70A1 EB               ex hl, de
  47++70A2 11 44 71         ld de, historyBlock
  48++70A5 12               ld (de), a
  48++70A6 13             inc de
  49++70A7 7E               ld a, (hl)
  49++70A8 E5 D5          push hl, de
  49++70AA CD C3 62       call Render.getIcon
  49++70AD D1 E1          pop de, hl
  50++70AF 12               ld (de), a
  50++70B0 13             inc de
  51++70B1 3E 09            ld a, 9
  52++70B3
  53++70B3                  IFDEF MSX
  54++70B3 ~                	ld bc, #ff
  55++70B3                  ELSE
  56++70B3 01 FF 0F         	ld bc, #fff
  57++70B6                  ENDIF
  58++70B6
  59++70B6 ED B1            cpir
  60++70B8              .locatorCopy
  61++70B8 7E               ld a, (hl)
  61++70B9 FE 09          cp 9
  61++70BB 28 05          jr z, 1f
  62++70BD 12               ld (de), a
  62++70BE 23 13          inc hl, de
  63++70C0 18 F6            jr .locatorCopy
  64++70C2              1
  65++70C2 23               inc hl
  65++70C3 AF             xor a
  65++70C4 12             ld (de), a
  66++70C5 11 45 72         ld de, historyBlock.host
  67++70C8              .hostCopy
  68++70C8 7E               ld a, (hl)
  68++70C9 FE 09          cp 9
  68++70CB 28 05          jr z, 1f
  69++70CD 12               ld (de), a
  69++70CE 23 13          inc hl, de
  70++70D0 18 F6            jr .hostCopy
  71++70D2              1
  72++70D2 23               inc hl
  72++70D3 AF             xor a
  72++70D4 12             ld (de), a
  73++70D5 11 85 72         ld de, historyBlock.port
  74++70D8              .portCopy
  75++70D8 7E               ld a, (hl)
  76++70D9 FE 09            cp 9
  76++70DB 28 11          jr z, 1f
  77++70DD FE 0D            cp 13
  77++70DF 28 0D          jr z, 1f
  78++70E1 FE 0A            cp 10
  78++70E3 28 09          jr z, 1f
  79++70E5 FE 00            cp 0
  79++70E7 28 05          jr z, 1f
  80++70E9 12               ld (de), a
  80++70EA 23 13          inc hl, de
  81++70EC 18 EA            jr .portCopy
  82++70EE AF           1   xor a
  82++70EF 12             ld (de), a
  83++70F0 21 C0 67 11      ld hl, DialogBox.inputBuffer, de, historyBlock.search, bc, #ff
  83++70F4 8B 72 01 FF
  83++70F8 00
  83++70F9 ED B0          ldir
  84++70FB 11 00 00 ED      ld de, 0, (historyBlock.position), de
  84++70FF 53 8A 73
  85++7102 E1               pop hl
  86++7103 3A 43 71         ld a, (depth)
  86++7106 FE 05          cp total
  86++7108 30 04          jr nc, 1f
  87++710A 3C               inc a
  87++710B 32 43 71       ld (depth), a
  88++710E              1
  89++710E 3A 45 71         ld a,(historyBlock.mediaType)
  89++7111 FE 19          cp MIME_DOWNLOAD
  89++7113 CA C8 81       jp z, Gopher.download
  90++7116
  91++7116                  ifdef GS
  92++7116 ~                ld a,(historyBlock.mediaType)
  93++7116 ~                cp MIME_MOD
  94++7116 ~                jp nz,load
  95++7116 ~                ld a,(GeneralSound.GSdownType)
  96++7116 ~                xor 1
  97++7116 ~                jp z, downMod2file
  98++7116 ~
  99++7116 ~            downMod2GS
 100++7116 ~                jp Gopher.loadMod
 101++7116 ~            downMod2file
 102++7116 ~                jp Gopher.download
 103++7116                  else
 104++7116 3A 45 71         ld a,(historyBlock.mediaType)
 104++7119 FE 0D          cp MIME_MOD
 104++711B CA C8 81       jp z, Gopher.download
 105++711E                  endif
 106++711E
 107++711E C3 17 70         jp load
 108++7121
 109++7121              homePage:
 110++7121              	IFDEF MSX
 111++7121 ~                	db "1Home", TAB, "index.gph"
 112++7121 ~                	db TAB, "file", TAB, "70", CR, LF, 0
 113++7121                  ELSE
 114++7121 31 48 6F 6D      	db "1Home", TAB, "browser/index.gph"
 114++7125 65 09 62 72
 114++7129 6F 77 73 65
 114++712D 72 2F 69 6E
 114++7131 64 65 78 2E
 114++7135 67 70 68
 115++7138 09 66 69 6C      	db TAB, "file", TAB, "70", CR, LF, 0
 115++713C 65 09 37 30
 115++7140 0D 0A 00
 116++7143                  ENDIF
 117++7143                  endmodule
# file closed: gopher/engine/history/controler.asm
   2++7143                  include "model.asm"
# file opened: gopher/engine/history/model.asm
   1++7143              total   equ 5
   2++7143 00           depth   db 0
   3++7144
   4++7144              historyBlock:
   5++7144 00           .isFile    db  0
   6++7145 00           .mediaType db  0
   7++7146 00 00 00...  .locator   ds  #ff
   8++7245 00 00 00...  .host      ds  64
   9++7285 00 00 00...  .port      ds  6
  10++728B 00 00 00...  .search    ds  #ff
  11++738A 00 00        .position  dw  #0000    ;position
  12++738C
  13++738C 00 00 00 00      db 0,0,0,0,0,0  ;cursor_position page_offset
  13++7390 00 00
  14++7392
  15++7392              historyBlockSize = $ - historyBlock
  16++7392
  17++7392              HistoryRecord EQU $ - historyBlock
  18++7392                  dup total
  19++7392 00 00 00... >    ds HistoryRecord
  19++75E0 00 00 00... >    ds HistoryRecord
  19++782E 00 00 00... >    ds HistoryRecord
  19++7A7C 00 00 00... >    ds HistoryRecord
  19++7CCA 00 00 00... >    ds HistoryRecord
  20++7F18                  edup
  21++7F18              HistoryEnd equ $ - 1
  22++7F18
# file closed: gopher/engine/history/model.asm
# file closed: gopher/engine/history/index.asm
  20+ 7F18                  include "gopher/engine/urlencoder.asm"
# file opened: gopher/engine/urlencoder.asm
   1++7F18                  MODULE UrlEncoder
   2++7F18              ; HL - pointer to line in gopher page
   3++7F18              ; C - flag set when it's file
   4++7F18              isFile:
   5++7F18              .findServerLoop
   6++7F18 7E               ld a, (hl)
   6++7F19 A7             and a
   6++7F1A 28 3B          jr z, .notFile
   6++7F1C 23             inc hl
   7++7F1D FE 0D            cp 13
   7++7F1F 28 36          jr z, .notFile
   8++7F21 FE 09            cp 9
   8++7F23 28 02          jr z, .skipPath
   9++7F25 18 F1            jr .findServerLoop
  10++7F27              .skipPath
  11++7F27 7E               ld a, (hl)
  11++7F28 A7             and a
  11++7F29 28 2C          jr z, .notFile
  11++7F2B 23             inc hl
  12++7F2C FE 0D            cp 13
  12++7F2E 28 27          jr z, .notFile
  13++7F30 FE 09            cp 9
  13++7F32 28 02          jr z, .compareServer
  14++7F34 18 F1            jr .skipPath
  15++7F36              .compareServer
  16++7F36 7E               ld a, (hl)
  16++7F37 FE 66          cp "f"
  16++7F39 20 1C          jr nz, .notFile
  16++7F3B 23             inc hl
  17++7F3C 7E               ld a, (hl)
  17++7F3D FE 69          cp "i"
  17++7F3F 20 16          jr nz, .notFile
  17++7F41 23             inc hl
  18++7F42 7E               ld a, (hl)
  18++7F43 FE 6C          cp "l"
  18++7F45 20 10          jr nz, .notFile
  18++7F47 23             inc hl
  19++7F48 7E               ld a, (hl)
  19++7F49 FE 65          cp "e"
  19++7F4B 20 0A          jr nz, .notFile
  19++7F4D 23             inc hl
  20++7F4E 7E               ld a, (hl)
  20++7F4F FE 09          cp 9
  20++7F51 20 04          jr nz, .notFile
  20++7F53 23             inc hl
  21++7F54 3E 01            ld a, 1
  22++7F56 C9               ret
  23++7F57              .notFile
  24++7F57 AF               xor a
  25++7F58 C9               ret
  26++7F59
  27++7F59              ; Is enough fields to encode
  28++7F59              ; HL - pointer to line in gopher page
  29++7F59              ; C - flag set when there is enough fields
  30++7F59              isValidGopherRow:
  31++7F59 7E               ld a, (hl)
  31++7F5A A7             and a
  31++7F5B 28 FA          jr z, isFile.notFile
  31++7F5D 23             inc hl
  32++7F5E FE 0D            cp 13
  32++7F60 28 F5          jr z, isFile.notFile
  33++7F62 FE 09            cp 9
  33++7F64 28 02          jr z, .skipPath
  34++7F66 18 F1            jr isValidGopherRow
  35++7F68              .skipPath
  36++7F68 7E               ld a, (hl)
  36++7F69 A7             and a
  36++7F6A 28 EB          jr z, isFile.notFile
  36++7F6C 23             inc hl
  37++7F6D FE 0D            cp 13
  37++7F6F 28 E6          jr z, isFile.notFile
  38++7F71 FE 09            cp 9
  38++7F73 28 02          jr z, .skipHost
  39++7F75 18 F1            jr .skipPath
  40++7F77              .skipHost
  41++7F77 7E               ld a, (hl)
  41++7F78 A7             and a
  41++7F79 28 DC          jr z, isFile.notFile
  41++7F7B 23             inc hl
  42++7F7C FE 0D            cp 13
  42++7F7E 28 D7          jr z, isFile.notFile
  43++7F80 FE 09            cp 9
  43++7F82 28 02           jr z, .isValid
  44++7F84 18 F1            jr .skipHost
  45++7F86              .isValid:
  46++7F86 37               scf
  47++7F87 C9               ret
  48++7F88
  49++7F88              extractPath:
  50++7F88 21 46 71 11      ld hl, historyBlock.locator, de, nameBuffer, bc, #ff
  50++7F8C A0 7F 01 FF
  50++7F90 00
  50++7F91 ED B0          ldir
  51++7F93 C9               ret
  52++7F94
  53++7F94              extractHostName:
  54++7F94 21 45 72 11      ld hl, historyBlock.host, de, hostName, bc, 64
  54++7F98 A0 80 01 40
  54++7F9C 00
  54++7F9D ED B0          ldir
  55++7F9F C9               ret
  56++7FA0
  57++7FA0                  ENDMODULE
  58++7FA0
  59++7FA0 00 00 00...  nameBuffer ds #ff, 0
  60++809F
  61++809F 00                    db 0
  62++80A0 00 00 00...  hostName ds 64
# file closed: gopher/engine/urlencoder.asm
  21+ 80E0                  include "gopher/engine/fetcher.asm"
# file opened: gopher/engine/fetcher.asm
   1++80E0                  MODULE Fetcher
   2++80E0
   3++80E0              fetchFromNet:
   4++80E0
   5++80E0              	IFDEF MSX
   6++80E0 ~                	call Gopher.makeRequest
   6++80E0 ~              jr nz, .error
   7++80E0                  ELSE
   8++80E0 CD 9D 81         	call Gopher.makeRequest
   8++80E3 38 06          jr c, .error
   9++80E5                  ENDIF
  10++80E5
  11++80E5 CD B5 81         call Gopher.loadBuffer
  12++80E8 C3 39 81         jp MediaProcessor.processResource
  13++80EB              .error
  14++80EB 21 F4 80         ld hl, .err
  14++80EE CD 10 68       call DialogBox.msgBox
  15++80F1 C3 00 70         jp History.back
  16++80F4
  17++80F4 44 6F 63 75  .err db "Document fetch error! Check your connection or hostname!", 0
  17++80F8 6D 65 6E 74
  17++80FC 20 66 65 74
  17++8100 63 68 20 65
  17++8104 72 72 6F 72
  17++8108 21 20 43 68
  17++810C 65 63 6B 20
  17++8110 79 6F 75 72
  17++8114 20 63 6F 6E
  17++8118 6E 65 63 74
  17++811C 69 6F 6E 20
  17++8120 6F 72 20 68
  17++8124 6F 73 74 6E
  17++8128 61 6D 65 21
  17++812C 00
  18++812D
  19++812D
  20++812D              fetchFromFS:
  21++812D CD 88 7F         call UrlEncoder.extractPath
  22++8130              loadFile
  23++8130              	IFDEF MSX
  24++8130 ~                ld de, nameBuffer, a, FMODE_NO_WRITE
  25++8130 ~                call Dos.fopen
  26++8130 ~                ld a, b, (.fp), a
  27++8130 ~                ld de, outputBuffer, hl, (ramtop)
  28++8130 ~                call Dos.fread
  29++8130 ~                ld a, (.fp), b, a
  30++8130 ~                call Dos.fclose
  31++8130 ~                jp MediaProcessor.processResource
  32++8130 ~            .fp db 0
  33++8130              	ELSE
  34++8130 21 A0 7F         ld hl, nameBuffer
  35++8133 CD D3 69         call Dos.loadBuffer
  36++8136 C3 39 81         jp MediaProcessor.processResource
  37++8139              	ENDIF
  38++8139                  ENDMODULE
# file closed: gopher/engine/fetcher.asm
  22+ 8139                  include "gopher/engine/media-processor.asm"
# file opened: gopher/engine/media-processor.asm
   1++8139                  MODULE MediaProcessor
   2++8139              processResource:
   3++8139 CD 94 7F         call UrlEncoder.extractHostName
   4++813C 3A 45 71         ld a, (historyBlock.mediaType)
   5++813F FE 0E            cp MIME_MUSIC
   5++8141 28 13          jr z, processPT
   6++8143 FE 1A            cp MIME_LINK
   6++8145 28 15          jr z, processPage
   7++8147 FE B3            cp MIME_INPUT
   7++8149 28 11          jr z, processPage
   8++814B FE 01            cp MIME_IMAGE
   8++814D CA D7 94       jp z, ScreenViewer.display
   9++8150              	ifdef GS
  10++8150 ~                cp MIME_MOD
  10++8150 ~              jr z, processMOD
  11++8150              	endif
  12++8150              ; Fallback to plain text
  13++8150              processText:
  14++8150 CD 82 66         call Render.renderPlainTextScreen
  15++8153 C3 CA 66         jp   Render.plainTextLoop
  16++8156
  17++8156              processPT:
  18++8156 CD 89 88         call VortexProcessor.play
  19++8159 C3 00 70         jp History.back
  20++815C
  21++815C                  ifdef GS
  22++815C ~            processMOD:
  23++815C ~                call ModProcessor.play
  24++815C ~                jp History.back
  25++815C              	endif
  26++815C
  27++815C              processPage:
  28++815C 3A 64 67         ld a, (Render.play_next)
  28++815F A7             and a
  28++8160 20 06          jr nz, .playNext
  29++8162 CD E5 64         call Render.renderGopherScreen
  30++8165 C3 34 65         jp   Render.workLoop
  31++8168              .playNext
  32++8168 21 8C 73         ld hl, Render.cursor_position
  33++816B 34               inc (hl)
  34++816C CD E5 64         call Render.renderGopherScreen
  35++816F C3 1E 65         jp Render.checkBorder
  36++8172                  ENDMODULE
# file closed: gopher/engine/media-processor.asm
  23+ 8172                  include "gopher/gopher.asm"
# file opened: gopher/gopher.asm
   1++8172                  module Gopher
   2++8172              ; HL - gopher row
   3++8172              extractRequest:
   4++8172 21 46 71         ld hl, historyBlock.locator
   5++8175 11 BE 82         ld de, requestbuffer
   6++8178              .loop
   7++8178 7E               ld a, (hl)
   8++8179 12               ld (de), a
   9++817A 23               inc hl
  10++817B 13               inc de
  11++817C FE 00            cp 0
  12++817E 28 02            jr z, .search
  13++8180 18 F6            jr .loop
  14++8182              .search
  15++8182 1B               dec de
  16++8183 3A 45 71         ld a, (historyBlock.mediaType)
  17++8186 FE B3            cp MIME_INPUT
  18++8188 20 10            jr nz, .exit
  19++818A 21 8B 72         ld hl, historyBlock.search
  20++818D 3E 09            ld a, TAB
  21++818F 12               ld (de), a
  22++8190 13               inc de
  23++8191              .searchCopy
  24++8191 7E               ld a, (hl)
  25++8192 A7               and a
  25++8193 28 05          jr z, .exit
  26++8195 12               ld (de), a
  27++8196 23               inc hl
  27++8197 13             inc de
  28++8198 18 F7            jr .searchCopy
  29++819A              .exit
  30++819A AF               xor a
  31++819B 12               ld (de), a
  32++819C C9               ret
  33++819D
  34++819D
  35++819D              makeRequest:
  36++819D CD 72 81         call extractRequest
  37++81A0
  38++81A0 21 45 72         ld hl, historyBlock.host
  39++81A3 11 85 72         ld de, historyBlock.port
  40++81A6 CD 6B 86         call Wifi.openTCP
  41++81A9 D8               ret c
  42++81AA
  43++81AA 21 BE 82         ld hl, requestbuffer
  44++81AD CD 5C 87         call Wifi.tcpSendZ
  45++81B0 AF               xor a
  45++81B1 32 36 85       ld (Wifi.closed), a
  46++81B4 C9               ret
  47++81B5
  48++81B5
  49++81B5              loadBuffer:
  50++81B5 21 FC 94         ld hl, outputBuffer
  51++81B8 22 34 85         ld (Wifi.buffer_pointer), hl
  52++81BB              .loop
  53++81BB CD AC 87         call Wifi.getPacket
  54++81BE 3A 36 85         ld a, (Wifi.closed)
  54++81C1 A7             and a
  54++81C2 C0             ret nz
  55++81C3 CD C9 86         call Wifi.continue
  56++81C6 18 F3            jr .loop
  57++81C8
  58++81C8                  ifdef GS
  59++81C8 ~            loadMod:
  60++81C8 ~                xor a
  60++81C8 ~              call GeneralSound.init
  61++81C8 ~                ld hl, .progress
  61++81C8 ~              call DialogBox.msgNoWait
  62++81C8 ~                call makeRequest
  62++81C8 ~              jp c, Fetcher.fetchFromNet.error
  63++81C8 ~                call GeneralSound.loadModule
  64++81C8 ~            .loop
  65++81C8 ~                ld hl, outputBuffer, (Wifi.buffer_pointer), hl
  66++81C8 ~                call Wifi.getPacket
  67++81C8 ~                ld a, (Wifi.closed)
  67++81C8 ~              and a
  67++81C8 ~              jr nz, .exit
  68++81C8 ~                ld hl, outputBuffer, bc, (Wifi.bytes_avail)
  69++81C8 ~            .loadLoop
  70++81C8 ~                ld a, b
  70++81C8 ~              or c
  70++81C8 ~              and a
  70++81C8 ~              jr z, .nextFrame
  71++81C8 ~                ld a, (hl)
  71++81C8 ~              call GeneralSound.sendByte
  72++81C8 ~                dec bc
  73++81C8 ~                inc hl
  74++81C8 ~                jr .loadLoop
  75++81C8 ~            .nextFrame
  76++81C8 ~                call pulsing
  77++81C8 ~                ;call Wifi.continue
  78++81C8 ~                jr .loop
  79++81C8 ~            .exit
  80++81C8 ~                call GeneralSound.finishLoadingModule
  81++81C8 ~                ;jp History.back
  82++81C8 ~            	jp MediaProcessor.processResource
  83++81C8 ~            .progress db "MOD downloading directly to GS!", 0
  84++81C8                  endif
  85++81C8
  86++81C8              download:
  87++81C8 11 46 71         ld de, historyBlock.locator
  88++81CB 62 6B            ld hl, de
  89++81CD              .findFileName
  90++81CD 1A               ld a, (de)
  90++81CE 13             inc de
  91++81CF FE 2F            cp '/'
  91++81D1 20 02          jr nz, .skip
  92++81D3 62 6B            ld hl, de
  93++81D5              .skip
  94++81D5 A7               and a
  94++81D6 20 F5          jr nz, .findFileName
  95++81D8              .copy
  96++81D8                  ;; HL - filename pointer
  97++81D8 11 C0 67         ld de, DialogBox.inputBuffer
  98++81DB              .copyFileName
  99++81DB 7E               ld a, (hl)
  99++81DC A7             and a
  99++81DD 28 05          jr z, .finishCopy
 100++81DF
 101++81DF 12               ld (de), a
 101++81E0 23 13          inc hl, de
 102++81E2 18 F7            jr .copyFileName
 103++81E4              .finishCopy
 104++81E4 12               ld (de), a
 105++81E5 CD 69 67         call DialogBox.inputBox.noclear
 106++81E8 3A C0 67         ld a, (DialogBox.namedownload)
 106++81EB A7             and a
 106++81EC CA 00 70       jp z, History.back
 107++81EF
 108++81EF CD 9D 81         call makeRequest
 108++81F2 DA EB 80       jp c, Fetcher.fetchFromNet.error
 109++81F5
 110++81F5 06 0E 21 C0      ld b, Dos.FMODE_CREATE, hl, DialogBox.namedownload
 110++81F9 67
 111++81FA CD EF 69         call Dos.fopen
 112++81FD 32 9B 82         ld (.fp), a
 113++8200
 114++8200 21 76 82         ld hl, .progress
 114++8203 CD 19 68       call DialogBox.msgNoWait
 115++8206              .loop
 116++8206 21 FC 94 22      ld hl, outputBuffer, (Wifi.buffer_pointer), hl
 116++820A 34 85
 117++820C CD AC 87         call Wifi.getPacket
 118++820F 3A 36 85         ld a, (Wifi.closed)
 118++8212 A7             and a
 118++8213 20 12          jr nz, .exit
 119++8215
 120++8215 3A 9B 82 21      ld a, (.fp), hl, outputBuffer, bc, (Wifi.bytes_avail)
 120++8219 FC 94 ED 4B
 120++821D 32 85
 121++821F CD FF 6A         call Dos.fwrite
 122++8222 CD 9E 82         call pulsing
 123++8225 18 DF            jr .loop
 124++8227              .exit
 125++8227 3A 9B 82         ld a, (.fp)
 126++822A CD C8 6A         call Dos.fclose
 127++822D C3 00 70         jp History.back
 128++8230              .error
 129++8230 3A 9B 82         ld a, (.fp)
 130++8233 CD C8 6A         call Dos.fclose
 131++8236 21 3F 82         ld hl, .err
 132++8239 CD 10 68         call DialogBox.msgBox
 133++823C C3 00 70         jp History.back
 134++823F
 135++823F 4F 70 65 72  .err db "Operation failed! Sorry! Check filename or disk space!",0
 135++8243 61 74 69 6F
 135++8247 6E 20 66 61
 135++824B 69 6C 65 64
 135++824F 21 20 53 6F
 135++8253 72 72 79 21
 135++8257 20 43 68 65
 135++825B 63 6B 20 66
 135++825F 69 6C 65 6E
 135++8263 61 6D 65 20
 135++8267 6F 72 20 64
 135++826B 69 73 6B 20
 135++826F 73 70 61 63
 135++8273 65 21 00
 136++8276 44 6F 77 6E  .progress db "Downloading in progress! Wait a bit!", 0
 136++827A 6C 6F 61 64
 136++827E 69 6E 67 20
 136++8282 69 6E 20 70
 136++8286 72 6F 67 72
 136++828A 65 73 73 21
 136++828E 20 57 61 69
 136++8292 74 20 61 20
 136++8296 62 69 74 21
 136++829A 00
 137++829B 00           .fp db 0
 138++829C 00           socket db 0
 139++829D 20           pulsator db " "
 140++829E              pulsing
 141++829E 11 01 0B         ld de, #0B01
 141++82A1 CD 88 61       call TextMode.gotoXY
 142++82A4 3A 9D 82         ld a, (pulsator)
 143++82A7 FE 2A            cp '*'
 144++82A9 CA B5 82         jp z, printasterix
 145++82AC CD 8E 60         call TextMode.putC
 146++82AF 3E 2A            ld a, '*'
 147++82B1 32 9D 82         ld (pulsator),a
 148++82B4 C9               ret
 149++82B5              printasterix
 150++82B5 CD 8E 60         call TextMode.putC
 151++82B8 3E 20            ld a, ' '
 152++82BA 32 9D 82         ld (pulsator),a
 153++82BD C9               ret
 154++82BE
 155++82BE 00 00 00...  requestbuffer ds #1ff
 156++84BD                  endmodule
 157++84BD
# file closed: gopher/gopher.asm
  24+ 84BD                  include "drivers/index.asm"
# file opened: drivers/index.asm
   1++84BD                  IFDEF UNO
   2++84BD ~                	include "uart-uno.asm"
   3++84BD                  ENDIF
   4++84BD
   5++84BD                  IFDEF UNOUART
   6++84BD ~                	include "uart-uno.asm"
   7++84BD                  ENDIF
   8++84BD
   9++84BD                  IFDEF MB03
  10++84BD ~                	include "uart-mb03.asm"
  11++84BD                  ENDIF
  12++84BD
  13++84BD                  IFDEF AY
  14++84BD ~                	include "uart-ay.asm"
  15++84BD                  ENDIF
  16++84BD
  17++84BD                  IFDEF ZW
  18++84BD                  	include "uart-zxwifi.asm"
# file opened: drivers/uart-zxwifi.asm
   1++84BD              ; This driver works with 16c550 uart that's support AFE
   2++84BD                  module Uart
   3++84BD              ; Make init shorter and readable:-)
   4++84BD                  macro outp port, value
   5++84BD ~            	ld b, port
   6++84BD ~            	ld c, #EF
   7++84BD ~                ld a, value
   8++84BD ~                out (c), a
   9++84BD                  endm
  10++84BD
  11++84BD              ; Internal port constants
  12++84BD              RBR_THR = #F8
  13++84BD              IER     = RBR_THR + 1
  14++84BD              IIR_FCR = RBR_THR + 2
  15++84BD              LCR     = RBR_THR + 3
  16++84BD              MCR     = RBR_THR + 4
  17++84BD              LSR     = RBR_THR + 5
  18++84BD              MSR     = RBR_THR + 6
  19++84BD              SR      = RBR_THR + 7
  20++84BD
  21++84BD
  22++84BD              init:
  23++84BD                  IFDEF GZ
  24++84BD                  outp MCR,     #0d  // Assert RTS
  24++84BD 06 FC       >	ld b, MCR
  24++84BF 0E EF       >	ld c, #EF
  24++84C1 3E 0D       >    ld a, #0d
  24++84C3 ED 79       >    out (c), a
  25++84C5                  outp IIR_FCR, #87  // Enable fifo 8 level, and clear it
  25++84C5 06 FA       >	ld b, IIR_FCR
  25++84C7 0E EF       >	ld c, #EF
  25++84C9 3E 87       >    ld a, #87
  25++84CB ED 79       >    out (c), a
  26++84CD                  outp LCR,     #83  // 8n1, DLAB=1
  26++84CD 06 FB       >	ld b, LCR
  26++84CF 0E EF       >	ld c, #EF
  26++84D1 3E 83       >    ld a, #83
  26++84D3 ED 79       >    out (c), a
  27++84D5                  outp RBR_THR, 12  //(divider 12)
  27++84D5 06 F8       >	ld b, RBR_THR
  27++84D7 0E EF       >	ld c, #EF
  27++84D9 3E 0C       >    ld a, 12
  27++84DB ED 79       >    out (c), a
  28++84DD                  outp IER,     #00  // (divider 0). Divider is 16 bit, so we get (#0002 divider)
  28++84DD 06 F9       >	ld b, IER
  28++84DF 0E EF       >	ld c, #EF
  28++84E1 3E 00       >    ld a, #00
  28++84E3 ED 79       >    out (c), a
  29++84E5
  30++84E5                  outp LCR,     #03 // 8n1, DLAB=0
  30++84E5 06 FB       >	ld b, LCR
  30++84E7 0E EF       >	ld c, #EF
  30++84E9 3E 03       >    ld a, #03
  30++84EB ED 79       >    out (c), a
  31++84ED                  outp IER,     #00 // Disable int
  31++84ED 06 F9       >	ld b, IER
  31++84EF 0E EF       >	ld c, #EF
  31++84F1 3E 00       >    ld a, #00
  31++84F3 ED 79       >    out (c), a
  32++84F5                  outp MCR,     #2f // Enable AFE
  32++84F5 06 FC       >	ld b, MCR
  32++84F7 0E EF       >	ld c, #EF
  32++84F9 3E 2F       >    ld a, #2f
  32++84FB ED 79       >    out (c), a
  33++84FD C9               ret
  34++84FE                  ELSE
  35++84FE ~                outp MCR,     #0d  // Assert RTS
  36++84FE ~                outp IIR_FCR, #87  // Enable fifo 8 level, and clear it
  37++84FE ~                outp LCR,     #83  // 8n1, DLAB=1
  38++84FE ~                outp RBR_THR, 1  // 115200 (divider 1)
  39++84FE ~                outp IER,     #00  // (divider 0). Divider is 16 bit, so we get (#0002 divider)
  40++84FE ~
  41++84FE ~                outp LCR,     #03 // 8n1, DLAB=0
  42++84FE ~                outp IER,     #00 // Disable int
  43++84FE ~                outp MCR,     #2f // Enable AFE
  44++84FE ~
  45++84FE ~                ret
  46++84FE                  ENDIF
  47++84FE              retry_rec_count_max equ 50 ;ждать 1 байт максимум столько прерываний
  48++84FE
  49++84FE              ; Flag C <- Data available
  50++84FE              ; isAvailable:
  51++84FE                  ; ld a, LSR
  52++84FE                  ; in a, (#EF)
  53++84FE                  ; rrca
  54++84FE                  ; ret
  55++84FE
  56++84FE              ; Non-blocking read
  57++84FE              ; Flag C <- is byte was readen
  58++84FE              ; A <- byte
  59++84FE              ; read1:
  60++84FE                  ; ld a, LSR
  61++84FE                  ; in a, (#EF)
  62++84FE                  ; rrca
  63++84FE                  ; ret nc
  64++84FE                  ; ld a, RBR_THR
  65++84FE                  ; in a, (#EF)
  66++84FE                  ; scf
  67++84FE                  ; ret
  68++84FE
  69++84FE              ; Tries read byte with timeout
  70++84FE              ; Flag C <- is byte read
  71++84FE              ; A <- byte
  72++84FE              read:
  73++84FE AF           	xor a ;4
  74++84FF 32 78 5C     	ld (#5C78),a ;обнулить счётчик ожидания ;13
  75++8502              .wait
  76++8502 3E FD            ld a, LSR
  77++8504 DB EF            in a, (#EF)
  78++8506 0F               rrca
  79++8507 30 05        	jr nc, .readW
  80++8509 3E F8            ld a, RBR_THR
  81++850B DB EF            in a, (#EF)
  82++850D C9           	ret
  83++850E              .readW
  84++850E 3A 78 5C     	ld a,(#5C78)
  85++8511 FE 32        	cp retry_rec_count_max
  86++8513 38 ED        	jr c, .wait ;ещё попытка
  87++8515 AF           	xor a ;выключим флаг переноса если время вышло
  88++8516 C9           	ret
  89++8517
  90++8517
  91++8517
  92++8517
  93++8517              ; Blocking read
  94++8517              ; A <- Byte
  95++8517              ; readB:
  96++8517                  ; ld a, LSR
  97++8517                  ; in a, (#EF)
  98++8517                  ; rrca
  99++8517                  ; jr nc, readB
 100++8517              	; ld a, RBR_THR
 101++8517                  ; in a, (#EF)
 102++8517                  ; ret
 103++8517
 104++8517              ; A -> byte to send
 105++8517              write:
 106++8517 F5               push af
 107++8518              .wait
 108++8518 3E FD        	ld a, LSR
 109++851A DB EF            in a, (#EF)
 110++851C E6 20            and #20
 111++851E 28 F8            jr z, .wait
 112++8520 F1               pop af
 113++8521 06 F8        	ld b, RBR_THR
 114++8523 0E EF        	ld c, #EF
 115++8525 ED 79            out (c), a
 116++8527 C9               ret
 117++8528
 118++8528                  endmodule
# file closed: drivers/uart-zxwifi.asm
  19++8528                  ENDIF
  20++8528
  21++8528              	include "utils.asm"
# file opened: drivers/utils.asm
   1++8528              ;;; Macroses!!!!
   2++8528                  MACRO EspSend Text
   3++8528 ~                ld hl, .txtB
   4++8528 ~                ld e, (.txtE - .txtB)
   5++8528 ~                call espSend
   6++8528 ~                jr .txtE
   7++8528 ~            .txtB
   8++8528 ~                db Text
   9++8528 ~            .txtE
  10++8528                  ENDM
  11++8528
  12++8528                  MACRO EspCmd Text
  13++8528 ~                ld hl, .txtB
  14++8528 ~                ld e, (.txtE - .txtB)
  15++8528 ~                call espSend
  16++8528 ~                jr .txtE
  17++8528 ~            .txtB
  18++8528 ~                db Text
  19++8528 ~                db 13, 10
  20++8528 ~            .txtE
  21++8528                  ENDM
  22++8528
  23++8528                  MACRO EspCmdOkErr text
  24++8528 ~                EspCmd text
  25++8528 ~                call checkOkErr
  26++8528                  ENDM
  27++8528
  28++8528              ; IN DE - string pointer
  29++8528              ; OUT HL - string len
  30++8528              strLen:
  31++8528 21 00 00         ld hl, 0
  32++852B              .loop
  33++852B 1A               ld a, (de)
  33++852C A7             and a
  33++852D C8             ret z
  34++852E 13 23            inc de, hl
  35++8530 18 F9            jr .loop
# file closed: drivers/utils.asm
  22++8532
  23++8532              	IFDEF NEDOOSATM
  24++8532 ~            		include "uart-atm.asm"
  25++8532              	ENDIF
  26++8532
  27++8532              	IFDEF NEDOOSEVO
  28++8532 ~            		include "uart-evo.asm"
  29++8532                  ENDIF
  30++8532
  31++8532              	IFDEF NEDONET
  32++8532 ~            		include "nedowifi.asm"
  33++8532              	ELSE
  34++8532              	IFNDEF MSX
  35++8532              		include "wifi.asm"
# file opened: drivers/wifi.asm
   1++8532                  MODULE Wifi
   2++8532 00 00        bytes_avail dw 0
   3++8534 00 00        buffer_pointer dw 0
   4++8536 01           closed db 1
   5++8537              ; Initialize Wifi chip to work
   6++8537              init:
   7++8537
   8++8537 21 29 86         ld hl, .uartIniting
   8++853A CD 83 60       call TextMode.printZ
   9++853D CD BD 84         call Uart.init
  10++8540 21 3A 86         ld hl, .chipIniting
  10++8543 CD 83 60       call TextMode.printZ
  11++8546
  12++8546                  EspCmdOkErr "ATE0"
  12++8546             >    EspCmd "ATE0"
  12++8546 21 50 85    >    ld hl, .txtB
  12++8549 1E 06       >    ld e, (.txtE - .txtB)
  12++854B CD 3F 87    >    call espSend
  12++854E 18 06       >    jr .txtE
  12++8550             >.txtB
  12++8550 41 54 45 30 >    db "ATE0"
  12++8554 0D 0A       >    db 13, 10
  12++8556             >.txtE
  12++8556 CD CA 86    >    call checkOkErr
  13++8559 DA 09 86         jp c, .initError
  14++855C
  15++855C              ; Reading auth.pwd and send it to ESP
  16++855C 21 5F 95 06      ld hl, creds, b, Dos.FMODE_READ
  16++8560 01
  16++8561 CD EF 69       call Dos.fopen
  17++8564 F5               push af
  18++8565 21 70 95 01      ld hl,outputBuffer2, bc, 255
  18++8569 FF 00
  18++856B CD DC 6A       call Dos.fread
  19++856E F1               pop af
  20++856F CD C8 6A         call Dos.fclose
  21++8572
  22++8572 21 52 86         ld hl, .doneInit1
  22++8575 CD 83 60       call TextMode.printZ
  23++8578
  24++8578 21 70 95         ld hl,outputBuffer2
  25++857B CD 49 87         call espSendT
  26++857E 3E 0D            ld a, 13
  26++8580 CD 17 85       call Uart.write
  27++8583 3E 0A            ld a, 10
  27++8585 CD 17 85       call Uart.write
  28++8588 CD CA 86         call checkOkErr
  29++858B DA 09 86         jp c, .initError
  30++858E              ;
  31++858E                 	EspCmdOkErr "AT+CIPSERVER=0"
  31++858E             >    EspCmd "AT+CIPSERVER=0"
  31++858E 21 98 85    >    ld hl, .txtB
  31++8591 1E 10       >    ld e, (.txtE - .txtB)
  31++8593 CD 3F 87    >    call espSend
  31++8596 18 10       >    jr .txtE
  31++8598             >.txtB
  31++8598 41 54 2B 43 >    db "AT+CIPSERVER=0"
  31++859C 49 50 53 45 >
  31++85A0 52 56 45 52 >
  31++85A4 3D 30       >
  31++85A6 0D 0A       >    db 13, 10
  31++85A8             >.txtE
  31++85A8 CD CA 86    >    call checkOkErr
  32++85AB                  EspCmdOkErr "AT+CIPCLOSE" ; Close if there some connection was. Don't care about result
  32++85AB             >    EspCmd "AT+CIPCLOSE"
  32++85AB 21 B5 85    >    ld hl, .txtB
  32++85AE 1E 0D       >    ld e, (.txtE - .txtB)
  32++85B0 CD 3F 87    >    call espSend
  32++85B3 18 0D       >    jr .txtE
  32++85B5             >.txtB
  32++85B5 41 54 2B 43 >    db "AT+CIPCLOSE"
  32++85B9 49 50 43 4C >
  32++85BD 4F 53 45    >
  32++85C0 0D 0A       >    db 13, 10
  32++85C2             >.txtE
  32++85C2 CD CA 86    >    call checkOkErr
  33++85C5                  EspCmdOkErr "AT+CIPMUX=0" ; Single connection mode
  33++85C5             >    EspCmd "AT+CIPMUX=0"
  33++85C5 21 CF 85    >    ld hl, .txtB
  33++85C8 1E 0D       >    ld e, (.txtE - .txtB)
  33++85CA CD 3F 87    >    call espSend
  33++85CD 18 0D       >    jr .txtE
  33++85CF             >.txtB
  33++85CF 41 54 2B 43 >    db "AT+CIPMUX=0"
  33++85D3 49 50 4D 55 >
  33++85D7 58 3D 30    >
  33++85DA 0D 0A       >    db 13, 10
  33++85DC             >.txtE
  33++85DC CD CA 86    >    call checkOkErr
  34++85DF DA 09 86         jp c, .initError
  35++85E2
  36++85E2                  EspCmdOkErr "AT+CIPDINFO=0" ; Disable additional info
  36++85E2             >    EspCmd "AT+CIPDINFO=0"
  36++85E2 21 EC 85    >    ld hl, .txtB
  36++85E5 1E 0F       >    ld e, (.txtE - .txtB)
  36++85E7 CD 3F 87    >    call espSend
  36++85EA 18 0F       >    jr .txtE
  36++85EC             >.txtB
  36++85EC 41 54 2B 43 >    db "AT+CIPDINFO=0"
  36++85F0 49 50 44 49 >
  36++85F4 4E 46 4F 3D >
  36++85F8 30          >
  36++85F9 0D 0A       >    db 13, 10
  36++85FB             >.txtE
  36++85FB CD CA 86    >    call checkOkErr
  37++85FE DA 09 86         jp c, .initError
  38++8601
  39++8601 21 4B 86         ld hl, .doneInit
  39++8604 CD 83 60       call TextMode.printZ
  40++8607
  41++8607 B7               or a
  42++8608 C9               ret
  43++8609              .initError
  44++8609 21 11 86         ld hl, .errMsg
  44++860C CD 10 68       call DialogBox.msgBox
  45++860F 37               scf
  46++8610 C9               ret
  47++8611 57 69 46 69  .errMsg      db "WiFi chip init failed!", "\r", 0
  47++8615 20 63 68 69
  47++8619 70 20 69 6E
  47++861D 69 74 20 66
  47++8621 61 69 6C 65
  47++8625 64 21 0D 00
  48++8629 55 61 72 74  .uartIniting db "Uart initing...", "\r", 0
  48++862D 20 69 6E 69
  48++8631 74 69 6E 67
  48++8635 2E 2E 2E 0D
  48++8639 00
  49++863A 43 68 69 70  .chipIniting db "Chip initing...", "\r", 0
  49++863E 20 69 6E 69
  49++8642 74 69 6E 67
  49++8646 2E 2E 2E 0D
  49++864A 00
  50++864B 44 6F 6E 65  .doneInit    db "Done!","\r", 0
  50++864F 21 0D 00
  51++8652 53 65 6E 64  .doneInit1   db "Sending auth.pwd to ESP","\r", 0
  51++8656 69 6E 67 20
  51++865A 61 75 74 68
  51++865E 2E 70 77 64
  51++8662 20 74 6F 20
  51++8666 45 53 50 0D
  51++866A 00
  52++866B                  IFNDEF PROXY
  53++866B              ; HL - host pointer in gopher row
  54++866B              ; DE - port pointer in gopher row
  55++866B              openTCP:
  56++866B D5               push de
  57++866C E5               push hl
  58++866D                  EspCmdOkErr "AT+CIPCLOSE" ; Don't care about result. Just close if it didn't happens before
  58++866D             >    EspCmd "AT+CIPCLOSE"
  58++866D 21 77 86    >    ld hl, .txtB
  58++8670 1E 0D       >    ld e, (.txtE - .txtB)
  58++8672 CD 3F 87    >    call espSend
  58++8675 18 0D       >    jr .txtE
  58++8677             >.txtB
  58++8677 41 54 2B 43 >    db "AT+CIPCLOSE"
  58++867B 49 50 43 4C >
  58++867F 4F 53 45    >
  58++8682 0D 0A       >    db 13, 10
  58++8684             >.txtE
  58++8684 CD CA 86    >    call checkOkErr
  59++8687                  EspSend 'AT+CIPSTART="TCP","'
  59++8687 21 91 86    >    ld hl, .txtB
  59++868A 1E 13       >    ld e, (.txtE - .txtB)
  59++868C CD 3F 87    >    call espSend
  59++868F 18 13       >    jr .txtE
  59++8691             >.txtB
  59++8691 41 54 2B 43 >    db 'AT+CIPSTART="TCP","'
  59++8695 49 50 53 54 >
  59++8699 41 52 54 3D >
  59++869D 22 54 43 50 >
  59++86A1 22 2C 22    >
  59++86A4             >.txtE
  60++86A4 E1               pop hl
  61++86A5 CD 49 87         call espSendT
  62++86A8                  EspSend '",'
  62++86A8 21 B2 86    >    ld hl, .txtB
  62++86AB 1E 02       >    ld e, (.txtE - .txtB)
  62++86AD CD 3F 87    >    call espSend
  62++86B0 18 02       >    jr .txtE
  62++86B2             >.txtB
  62++86B2 22 2C       >    db '",'
  62++86B4             >.txtE
  63++86B4 E1               pop hl
  64++86B5 CD 49 87         call espSendT
  65++86B8 3E 0D            ld a, 13
  65++86BA CD 17 85       call Uart.write
  66++86BD 3E 0A            ld a, 10
  66++86BF CD 17 85       call Uart.write
  67++86C2 AF               xor a
  67++86C3 32 36 85       ld (closed), a
  68++86C6 C3 CA 86         jp checkOkErr
  69++86C9
  70++86C9              continue:
  71++86C9 C9               ret
  72++86CA                  ENDIF
  73++86CA
  74++86CA
  75++86CA
  76++86CA              checkOkErr:
  77++86CA CD FE 84         call Uart.read
  78++86CD FE 4F            cp 'O'
  78++86CF CA DF 86       jp z, .okStart ; OK
  79++86D2 FE 45            cp 'E'
  79++86D4 CA F4 86       jp z, .errStart ; ERROR
  80++86D7 FE 46            cp 'F'
  80++86D9 CA 19 87       jp z, .failStart ; FAIL
  81++86DC C3 CA 86         jp checkOkErr
  82++86DF              .okStart
  83++86DF CD FE 84         call Uart.read
  83++86E2 FE 4B          cp 'K'
  83++86E4 C2 CA 86       jp nz, checkOkErr
  84++86E7 CD FE 84         call Uart.read
  84++86EA FE 0D          cp 13
  84++86EC C2 CA 86       jp nz, checkOkErr
  85++86EF CD 36 87         call .flushToLF
  86++86F2 B7               or a
  87++86F3 C9               ret
  88++86F4              .errStart
  89++86F4 CD FE 84         call Uart.read
  89++86F7 FE 52          cp 'R'
  89++86F9 C2 CA 86       jp nz, checkOkErr
  90++86FC CD FE 84         call Uart.read
  90++86FF FE 52          cp 'R'
  90++8701 C2 CA 86       jp nz, checkOkErr
  91++8704 CD FE 84         call Uart.read
  91++8707 FE 4F          cp 'O'
  91++8709 C2 CA 86       jp nz, checkOkErr
  92++870C CD FE 84         call Uart.read
  92++870F FE 52          cp 'R'
  92++8711 C2 CA 86       jp nz, checkOkErr
  93++8714 CD 36 87         call .flushToLF
  94++8717 37               scf
  95++8718 C9               ret
  96++8719              .failStart
  97++8719 CD FE 84         call Uart.read
  97++871C FE 41          cp 'A'
  97++871E C2 CA 86       jp nz, checkOkErr
  98++8721 CD FE 84         call Uart.read
  98++8724 FE 49          cp 'I'
  98++8726 C2 CA 86       jp nz, checkOkErr
  99++8729 CD FE 84         call Uart.read
  99++872C FE 4C          cp 'L'
  99++872E C2 CA 86       jp nz, checkOkErr
 100++8731 CD 36 87         call .flushToLF
 101++8734 37               scf
 102++8735 C9               ret
 103++8736              .flushToLF
 104++8736 CD FE 84         call Uart.read
 105++8739 FE 0A            cp 10
 105++873B C2 36 87       jp nz, .flushToLF
 106++873E C9               ret
 107++873F
 108++873F              ; Send buffer to UART
 109++873F              ; HL - buff
 110++873F              ; E - count
 111++873F              espSend:
 112++873F 7E               ld a, (hl)
 112++8740 CD 17 85       call Uart.write
 113++8743 23               inc hl
 114++8744 1D               dec e
 115++8745 C2 3F 87         jp nz, espSend
 116++8748 C9               ret
 117++8749
 118++8749              ; HL - string that ends with one of the terminator(CR/LF/TAB/NULL)
 119++8749              espSendT:
 120++8749 7E               ld a, (hl)
 121++874A
 122++874A A7               and a
 122++874B C8             ret z
 123++874C FE 09            cp 9
 123++874E C8             ret z
 124++874F FE 0D            cp 13
 124++8751 C8             ret z
 125++8752 FE 0A            cp 10
 125++8754 C8             ret z
 126++8755
 127++8755 CD 17 85         call Uart.write
 128++8758 23               inc hl
 129++8759 C3 49 87         jp espSendT
 130++875C
 131++875C              ; HL - stringZ to send
 132++875C              ; Adds CR LF
 133++875C              tcpSendZ:
 134++875C E5               push hl
 135++875D                  EspSend "AT+CIPSEND="
 135++875D 21 67 87    >    ld hl, .txtB
 135++8760 1E 0B       >    ld e, (.txtE - .txtB)
 135++8762 CD 3F 87    >    call espSend
 135++8765 18 0B       >    jr .txtE
 135++8767             >.txtB
 135++8767 41 54 2B 43 >    db "AT+CIPSEND="
 135++876B 49 50 53 45 >
 135++876F 4E 44 3D    >
 135++8772             >.txtE
 136++8772 D1               pop de
 136++8773 D5             push de
 137++8774 CD 28 85         call strLen
 138++8777 23               inc hl
 138++8778 23             inc hl ; +CRLF
 139++8779 CD 41 88         call hlToNumEsp
 140++877C 3E 0D            ld a, 13
 140++877E CD 17 85       call Uart.write
 141++8781 3E 0A            ld a, 10
 141++8783 CD 17 85       call Uart.write
 142++8786 CD CA 86         call checkOkErr
 142++8789 D8             ret c
 143++878A              .wait
 144++878A CD FE 84         call Uart.read
 144++878D FE 3E          cp '>'
 144++878F C2 8A 87       jp nz, .wait
 145++8792 E1               pop hl
 146++8793              .loop
 147++8793 7E               ld a, (hl)
 147++8794 A7             and a
 147++8795 CA 9F 87       jp z, .exit
 148++8798 CD 17 85         call Uart.write
 149++879B 23               inc hl
 150++879C C3 93 87         jp .loop
 151++879F              .exit
 152++879F 3E 0D            ld a, 13
 152++87A1 CD 17 85       call Uart.write
 153++87A4 3E 0A            ld a, 10
 153++87A6 CD 17 85       call Uart.write
 154++87A9 C3 CA 86         jp checkOkErr
 155++87AC
 156++87AC              getPacket:
 157++87AC CD FE 84         call Uart.read
 158++87AF FE 2B            cp '+'
 158++87B1 CA E2 87       jp z, .ipdBegun    ; "+IPD," packet
 159++87B4 FE 4F            cp 'O'
 159++87B6 CA BC 87       jp z, .closedBegun ; It enough to check "OSED\n" :-)
 160++87B9 C3 AC 87         jp getPacket
 161++87BC              .closedBegun
 162++87BC CD FE 84         call Uart.read
 162++87BF FE 53          cp 'S'
 162++87C1 C2 BC 87       jp nz, .closedBegun
 163++87C4 CD FE 84         call Uart.read
 163++87C7 FE 45          cp 'E'
 163++87C9 C2 BC 87       jp nz, .closedBegun
 164++87CC CD FE 84         call Uart.read
 164++87CF FE 44          cp 'D'
 164++87D1 C2 BC 87       jp nz, .closedBegun
 165++87D4 CD FE 84         call Uart.read
 165++87D7 FE 0D          cp 13
 165++87D9 C2 BC 87       jp nz, .closedBegun
 166++87DC 3E 01 32 36      ld a, 1, (closed), a
 166++87E0 85
 167++87E1 C9               ret
 168++87E2              .ipdBegun
 169++87E2 CD FE 84         call Uart.read
 169++87E5 FE 49          cp 'I'
 169++87E7 C2 E2 87       jp nz, .ipdBegun
 170++87EA CD FE 84         call Uart.read
 170++87ED FE 50          cp 'P'
 170++87EF C2 E2 87       jp nz, .ipdBegun
 171++87F2 CD FE 84         call Uart.read
 171++87F5 FE 44          cp 'D'
 171++87F7 C2 E2 87       jp nz, .ipdBegun
 172++87FA CD FE 84         call Uart.read  ;Comma
 173++87FD CD 27 88         call .count_ipd_lenght
 173++8800 22 32 85       ld (bytes_avail), hl
 174++8803 54 5D            ld de, hl
 175++8805 2A 34 85         ld hl, (buffer_pointer)
 176++8808              .readp
 177++8808 7C               ld a, h
 177++8809 FE FF          cp #ff
 177++880B D2 1D 88       jp nc, .skipbuff
 178++880E CD FE 84         call Uart.read
 179++8811 77               ld (hl), a
 180++8812 1B               dec de
 181++8813 23               inc hl
 182++8814 7A               ld a, d
 182++8815 B3             or e
 182++8816 C2 08 88       jp nz, .readp
 183++8819 22 34 85         ld (buffer_pointer), hl
 184++881C C9               ret
 185++881D              .skipbuff
 186++881D CD FE 84         call Uart.read
 187++8820 1B               dec de
 187++8821 7A             ld a, d
 187++8822 B3             or e
 187++8823 C2 1D 88       jp nz, .skipbuff
 188++8826 C9               ret
 189++8827              .count_ipd_lenght
 190++8827 21 00 00     		ld hl,0			; count lenght
 191++882A E5           .cil1	push  hl
 192++882B CD FE 84             call Uart.read
 193++882E E1                   pop hl
 194++882F FE 3A        		cp ':'
 195++8831 C8                   ret z
 196++8832 D6 30        		sub 0x30
 197++8834 4D                   ld c,l
 198++8835 44                   ld b,h
 199++8836 29                   add hl,hl
 200++8837 29                   add hl,hl
 201++8838 09                   add hl,bc
 202++8839 29                   add hl,hl
 203++883A 4F                   ld c,a
 204++883B 06 00                ld b,0
 205++883D 09                   add hl,bc
 206++883E C3 2A 88     		jp .cil1
 207++8841
 208++8841              ; Based on: https://wikiti.brandonw.net/index.php?title=Z80_Routines:Other:DispHL
 209++8841              ; HL - number
 210++8841              ; It will be written to UART
 211++8841              hlToNumEsp:
 212++8841 01 F0 D8     	ld	bc,-10000
 213++8844 CD 5A 88     	call	.n1
 214++8847 01 18 FC     	ld	bc,-1000
 215++884A CD 5A 88     	call	.n1
 216++884D 01 9C FF     	ld	bc,-100
 217++8850 CD 5A 88     	call	.n1
 218++8853 0E F6        	ld	c,-10
 219++8855 CD 5A 88     	call	.n1
 220++8858 0E FF        	ld	c,-1
 221++885A 3E 2F        .n1	ld	a,'0'-1
 222++885C 3C           .n2	inc	a
 223++885D 09           	add	hl,bc
 224++885E DA 5C 88     	jp	c, .n2
 225++8861 ED 42        	sbc	hl,bc
 226++8863 C5               push bc
 227++8864 CD 17 85     	call Uart.write
 228++8867 C1               pop bc
 229++8868 C9               ret
 230++8869              flushToLF1
 231++8869 CD FE 84         call Uart.read
 232++886C FE 0A            cp 10
 232++886E C2 69 88       jp nz, flushToLF1
 233++8871 C9               ret
 234++8872                  ENDMODULE
# file closed: drivers/wifi.asm
  36++8872              	ENDIF
  37++8872              	ENDIF
  38++8872
  39++8872                  IFDEF NEDOOS
  40++8872 ~                	include "rtc-nos.asm"
  41++8872                  ENDIF
  42++8872
  43++8872
  44++8872                  IFDEF SMUCRTC
  45++8872 ~                	include "rtc-smuc.asm"
  46++8872                  ENDIF
  47++8872
  48++8872              	IFDEF MSX
  49++8872 ~                    include "drivers/unapi/unapi.asm"
  50++8872 ~                	include "drivers/unapi/tcp.asm"
  51++8872 ~            		include "rtc-msx.asm"
  52++8872                  ELSE
  53++8872              		include "proxy.asm"
# file opened: drivers/proxy.asm
   1++8872                  IFDEF PROXY
   2++8872 ~                MODULE Wifi
   3++8872 ~            ; Same singature as wifi.openTCP
   4++8872 ~            ; HL - host pointer in gopher row
   5++8872 ~            ; DE - port pointer in gopher row
   6++8872 ~            openTCP:
   7++8872 ~                push de
   8++8872 ~                push hl
   9++8872 ~
  10++8872 ~                xor a
  10++8872 ~              ld hl, hostBuff, de, hostBuff + 1, bc, 102, (hl), a
  10++8872 ~              ldir
  11++8872 ~
  12++8872 ~                EspCmdOkErr "AT+CIPCLOSE"
  13++8872 ~                EspCmdOkErr 'AT+CIPSTART="TCP","138.68.76.243",6912' // Replace here for yourown proxy. If you wish
  14++8872 ~                jr c, .error
  15++8872 ~                pop hl
  15++8872 ~              ld de, hostBuff
  16++8872 ~            .copyHost
  17++8872 ~                ld a, (hl)
  17++8872 ~              and a
  17++8872 ~              jr z, 1F
  17++8872 ~              and a
  17++8872 ~              jr z, 1F
  18++8872 ~                ld (de), a
  18++8872 ~              inc hl, de
  19++8872 ~                jr .copyHost
  20++8872 ~            1   xor a
  20++8872 ~              ld (de), a
  21++8872 ~                pop hl
  21++8872 ~              ld de, portBuff
  22++8872 ~            .copyPort
  23++8872 ~                ld a, (hl)
  23++8872 ~              and a
  23++8872 ~              jr z, 1F
  23++8872 ~              and a
  23++8872 ~              jr z, 1F
  24++8872 ~                ld (de), a
  24++8872 ~              inc hl, de
  25++8872 ~                jr .copyPort
  26++8872 ~            1   ld hl, hostBuff
  26++8872 ~              call tcpSendZ
  27++8872 ~                ld hl, portBuff
  27++8872 ~              call tcpSendZ
  28++8872 ~                xor a
  28++8872 ~              ld (closed), a
  29++8872 ~                ret
  30++8872 ~            .error
  31++8872 ~                pop hl
  31++8872 ~              pop de
  32++8872 ~                ret
  33++8872 ~
  34++8872 ~            continue:
  35++8872 ~                EspCmdOkErr "AT+CIPSEND=1"
  36++8872 ~                ret c
  37++8872 ~            .wait
  38++8872 ~                call Uart.read
  38++8872 ~              cp '>'
  38++8872 ~              jr nz, .wait
  39++8872 ~                ld a, 'c'
  39++8872 ~              call Uart.write
  40++8872 ~                jp checkOkErr
  41++8872 ~
  42++8872 ~            hostBuff ds 96
  43++8872 ~            portBuff ds 7
  44++8872 ~                ENDMODULE
  45++8872                  ENDIF
# file closed: drivers/proxy.asm
  54++8872              		include "memory.asm"
# file opened: drivers/memory.asm
   1++8872                  module Memory
   2++8872              BANKM = #5b5c
   3++8872              MEM_PORT = #7ffd
   4++8872
   5++8872              init:
   6++8872 F3               di
   7++8873 FD CB 01 A6      res 4, (iy + 1)
   8++8877
   9++8877 AF               xor a
   9++8878 CD 7C 88       call setPage
  10++887B C9               ret
  11++887C
  12++887C              ; a - page
  13++887C              setPage:
  14++887C F6 18            or #18
  14++887E 32 5C 5B       ld (BANKM), a
  15++8881 01 FD 7F         ld bc, MEM_PORT
  15++8884 ED 79          out (c), a
  16++8886 C9               ret
  17++8887
  18++8887                  endmodule
# file closed: drivers/memory.asm
  55++8887              	ENDIF
  56++8887
  57++8887              	IFDEF GS
  58++8887 ~            		include "general-sound.asm"
  59++8887              	ENDIF
# file closed: drivers/index.asm
  25+ 8887                  include "screen/rtc.asm"
# file opened: screen/rtc.asm
   1++8887              printRTC
   2++8887              	IFDEF RTC
   3++8887 ~            	call Clock.readTime
   4++8887 ~
   5++8887 ~            	ld a, (oldminutes)
   6++8887 ~            	ld d,a
   7++8887 ~            	ld a, (minutes)
   8++8887 ~            	cp d					; Update only if minutes changed
   9++8887 ~            	ret z
  10++8887 ~            	ld (oldminutes), a
  11++8887 ~
  12++8887 ~            	ld d,1 ;координаты Y,X
  13++8887 ~            	ld e,73
  14++8887 ~            	call TextMode.gotoXY
  15++8887 ~            	ld a,'['
  16++8887 ~            	call TextMode.putC
  17++8887 ~            	ld h,0
  18++8887 ~            	ld a,(hours) ;часы
  19++8887 ~            	ld l,a
  20++8887 ~            	call toDecimal
  21++8887 ~            	ld hl,decimalS+3
  22++8887 ~            	call TextMode.printZ
  23++8887 ~            	ld a,':'
  24++8887 ~            	call TextMode.putC
  25++8887 ~            	ld h,0
  26++8887 ~            	ld a,(minutes) ;минуты
  27++8887 ~            	ld l,a
  28++8887 ~            	call toDecimal
  29++8887 ~            	ld hl,decimalS+3
  30++8887 ~            	call TextMode.printZ
  31++8887 ~            	;ld a,':'
  32++8887 ~            	;call TextMode.putC
  33++8887 ~            	;ld h,0
  34++8887 ~            	;ld a,(seconds) ;секунды
  35++8887 ~            	;ld l,a
  36++8887 ~            	;call toDecimal
  37++8887 ~            	;ld hl,decimalS+3
  38++8887 ~            	;call TextMode.printZ
  39++8887 ~            	ld a,']'
  40++8887 ~            	call TextMode.putC
  41++8887 ~            	ret
  42++8887 ~
  43++8887 ~            toDecimal		;конвертирует 2 байта в 5 десятичных цифр
  44++8887 ~            				;на входе в HL число
  45++8887 ~            	ld de,10000 ;десятки тысяч
  46++8887 ~            	ld a,255
  47++8887 ~            toDecimal10k
  48++8887 ~            	and a
  49++8887 ~            	sbc hl,de
  50++8887 ~            	inc a
  51++8887 ~            	jr nc,toDecimal10k
  52++8887 ~            	add hl,de
  53++8887 ~            	add a,48
  54++8887 ~            	ld (decimalS),a
  55++8887 ~            	ld de,1000 ;тысячи
  56++8887 ~            	ld a,255
  57++8887 ~            toDecimal1k
  58++8887 ~            	and a
  59++8887 ~            	sbc hl,de
  60++8887 ~            	inc a
  61++8887 ~            	jr nc,toDecimal1k
  62++8887 ~            	add hl,de
  63++8887 ~            	add a,48
  64++8887 ~            	ld (decimalS+1),a
  65++8887 ~            	ld de,100 ;сотни
  66++8887 ~            	ld a,255
  67++8887 ~            toDecimal01k
  68++8887 ~            	and a
  69++8887 ~            	sbc hl,de
  70++8887 ~            	inc a
  71++8887 ~            	jr nc,toDecimal01k
  72++8887 ~            	add hl,de
  73++8887 ~            	add a,48
  74++8887 ~            	ld (decimalS+2),a
  75++8887 ~            	ld de,10 ;десятки
  76++8887 ~            	ld a,255
  77++8887 ~            toDecimal001k
  78++8887 ~            	and a
  79++8887 ~            	sbc hl,de
  80++8887 ~            	inc a
  81++8887 ~            	jr nc,toDecimal001k
  82++8887 ~            	add hl,de
  83++8887 ~            	add a,48
  84++8887 ~            	ld (decimalS+3),a
  85++8887 ~            	ld de,1 ;единицы
  86++8887 ~            	ld a,255
  87++8887 ~            toDecimal0001k
  88++8887 ~            	and a
  89++8887 ~            	sbc hl,de
  90++8887 ~            	inc a
  91++8887 ~            	jr nc,toDecimal0001k
  92++8887 ~            	add hl,de
  93++8887 ~            	add a,48
  94++8887 ~            	ld (decimalS+4),a
  95++8887 ~            	ret
  96++8887 ~            hours
  97++8887 ~            	db 0
  98++8887 ~            minutes
  99++8887 ~            	db 0
 100++8887 ~            seconds
 101++8887 ~            	db 0
 102++8887 ~            decimalS	ds 6 ;десятичные цифры
 103++8887              	ENDIF
 104++8887 C9           	ret
 105++8888              oldminutes		; не убирать под услоаие
 106++8888 FF           	db 255
 107++8889
 108++8889
 109++8889
 110++8889
# file closed: screen/rtc.asm
  26+ 8889
  27+ 8889                  IFDEF NEDOOS
  28+ 8889 ~                    include "screen/nedoscreen.asm"
  29+ 8889 ~                    include "player/vortexnedoos.asm"
  30+ 8889 ~                    include "player/mod-processor.asm"
  31+ 8889 ~            start:
  32+ 8889 ~            outputBuffer:
  33+ 8889 ~                    ld sp, 0x4000
  34+ 8889 ~                    ld c,nos.CMD_SETSYSDRV
  35+ 8889 ~                 	ex af,af'
  36+ 8889 ~            	    call nos.BDOS
  37+ 8889              	ELSE
  38+ 8889                      include "player/vortex-processor.asm"
# file opened: player/vortex-processor.asm
   1++8889                  MODULE VortexProcessor
   2++8889              	IFDEF MSX
   3++8889 ~            play:
   4++8889 ~                call Console.peekC
   4++8889 ~              and a
   5++8889 ~                jr nz, play
   6++8889 ~
   7++8889 ~                ld hl, message
   7++8889 ~              call DialogBox.msgNoWait
   8++8889 ~
   9++8889 ~                ld hl, outputBuffer
   9++8889 ~              call VTPL.INIT
  10++8889 ~            .loop
  11++8889 ~                halt
  11++8889 ~              di
  11++8889 ~              call VTPL.PLAY
  11++8889 ~              ei
  12++8889 ~                call Console.peekC
  12++8889 ~              and a
  12++8889 ~              jp nz, .stop
  13++8889 ~                jr nc, .loop
  14++8889 ~            .stop
  15++8889 ~                call VTPL.MUTE
  16++8889 ~            .wlp
  17++8889 ~                call Console.peekC
  17++8889 ~              and a
  18++8889 ~                jr nz, .wlp
  19++8889 ~                ret
  20++8889 ~
  21++8889 ~            message db "Press key to stop...", 0
  22++8889 ~                ENDMODULE
  23++8889 ~                include "msxplayer.asm"
  24++8889              	ELSE
  25++8889              play:
  26++8889 3E FF            ld a, 255
  27++888B 32 88 88         ld (oldminutes), a
  28++888E
  29++888E CD 48 68         call Console.waitForKeyUp
  30++8891
  31++8891 21 CC 88         ld hl, message
  31++8894 CD 19 68       call DialogBox.msgNoWait
  32++8897
  33++8897 21 FC 94         ld hl, outputBuffer
  33++889A CD 22 89       call VTPL.INIT
  34++889D
  35++889D
  36++889D 3E 01 32 64      ld a, 1, (Render.play_next), a
  36++88A1 67
  37++88A2
  38++88A2                  IFDEF GS
  39++88A2 ~                call GeneralSound.stopModule
  40++88A2                  ENDIF
  41++88A2              .loop
  42++88A2 76               halt
  42++88A3 F3             di
  42++88A4 CD 45 91       call VTPL.PLAY
  42++88A7 FB             ei
  43++88A8 AF               xor a
  43++88A9 DB FE          in a, (#fe)
  43++88AB 2F             cpl
  43++88AC E6 1F          and 31
  43++88AE C2 C6 88       jp nz, .stopKey
  44++88B1 CD 87 88         call printRTC
  45++88B4 3A EB 88         ld a, (VTPL.SETUP)
  45++88B7 17             rla
  45++88B8 30 E8          jr nc, .loop
  46++88BA 3E 01 32 64      ld a, 1, (Render.play_next), a
  46++88BE 67
  47++88BF              .stop
  48++88BF CD 10 89         call VTPL.MUTE
  49++88C2
  50++88C2                  IFDEF AY
  51++88C2 ~                call restoreAyState
  52++88C2                  ENDIF
  53++88C2
  54++88C2 CD 48 68         call Console.waitForKeyUp
  55++88C5 C9               ret
  56++88C6              .stopKey
  57++88C6 AF               xor a
  57++88C7 32 64 67       ld (Render.play_next), a
  58++88CA 18 F3            jr .stop
  59++88CC
  60++88CC                  IFDEF AY
  61++88CC ~            restoreAyState:
  62++88CC ~                ld a, #07
  63++88CC ~                ld bc, #fffd
  64++88CC ~                out (c), a
  65++88CC ~                ld a, #fc
  66++88CC ~                ld b, #bf
  67++88CC ~                out (c), a ; Enable read mode
  68++88CC ~
  69++88CC ~                ld a, #0e
  70++88CC ~                ld bc, #fffd
  71++88CC ~                out (c), a
  72++88CC ~                ret
  73++88CC              	ENDIF
  74++88CC 50 72 65 73  message db "Press key to stop...", 0
  74++88D0 73 20 6B 65
  74++88D4 79 20 74 6F
  74++88D8 20 73 74 6F
  74++88DC 70 2E 2E 2E
  74++88E0 00
  75++88E1                  ENDMODULE
  76++88E1                  include "player.asm"
# file opened: player/player.asm
   1++88E1              ;Universal PT2'n'PT3 Turbo Sound player for ZX Spectrum
   2++88E1              ;(c)2004-2007 S.V.Bulba <vorobey@mail.khstu.ru>
   3++88E1              ;Specially for AlCo
   4++88E1              ;http://bulba.untergrund.net/ (http://bulba.at.kz/)
   5++88E1              	MODULE VTPL
   6++88E1              ;Release number
   7++88E1              Release EQU "0"
   8++88E1              ;Conditional assembly
   9++88E1              ;1) Current position counters at (Vars1+0) and (Vars2+0)
  10++88E1              CurPosCounter=0
  11++88E1              ;2) Allow channels allocation bits at (START+10)
  12++88E1              ACBBAC=0
  13++88E1              ;3) Allow loop checking and disabling
  14++88E1              LoopChecker=1
  15++88E1              ;4) Insert official identificator
  16++88E1              Id=0
  17++88E1              ;5) Set IY for correct return to ZX Basic
  18++88E1              Basic=1
  19++88E1
  20++88E1              ;Features
  21++88E1              ;--------
  22++88E1              ;-Can be compiled at any address (i.e. no need rounding ORG
  23++88E1              ; address).
  24++88E1              ;-Variables (VARS) can be located at any address (not only after
  25++88E1              ; code block).
  26++88E1              ;-INIT subprogram checks PT3-module version and rightly
  27++88E1              ; generates both note and volume tables outside of code block
  28++88E1              ; (in VARS).
  29++88E1              ;-Two portamento (spc. command 3xxx) algorithms (depending of
  30++88E1              ; PT3 module version).
  31++88E1              ;-New 1.XX and 2.XX special command behaviour (only for PT v3.7
  32++88E1              ; and higher).
  33++88E1              ;-Any Tempo value are accepted (including Tempo=1 and Tempo=2).
  34++88E1              ;-TS modes: 2xPT3, 2xPT2 and PT v3.7 TS standard.
  35++88E1              ;-Fully compatible with Ay_Emul PT3 and PT2 players codes.
  36++88E1              ;-See also notes at the end of this source code.
  37++88E1
  38++88E1              ;Limitations
  39++88E1              ;-----------
  40++88E1              ;-Can run in RAM only (self-modified code is used).
  41++88E1              ;-PT2 position list must be end by #FF marker only.
  42++88E1
  43++88E1              ;Warning!!! PLAY subprogram can crash if no module are loaded
  44++88E1              ;into RAM or INIT subprogram was not called before.
  45++88E1
  46++88E1              ;Call MUTE or INIT one more time to mute sound after stopping
  47++88E1              ;playing
  48++88E1
  49++88E1              ;Test codes (commented)
  50++88E1              ;	LD A,32 ;SinglePT3(TS if TSPT3.7),ABC,Looped
  51++88E1              ;	LD (START+10),A
  52++88E1              ;	LD HL,#8000 ;Mod1
  53++88E1              ;	LD DE,#A000 ;Mod2 (optional)
  54++88E1              ;	CALL START+3
  55++88E1              ;	EI
  56++88E1              ;_LP	HALT
  57++88E1              ;	CALL START+5
  58++88E1              ;	XOR A
  59++88E1              ;	IN A,(#FE)
  60++88E1              ;	CPL
  61++88E1              ;	AND 15
  62++88E1              ;	JR Z,_LP
  63++88E1              ;	JR START+8
  64++88E1
  65++88E1              TonA	EQU 0
  66++88E1              TonB	EQU 2
  67++88E1              TonC	EQU 4
  68++88E1              Noise	EQU 6
  69++88E1              Mixer	EQU 7
  70++88E1              AmplA	EQU 8
  71++88E1              AmplB	EQU 9
  72++88E1              AmplC	EQU 10
  73++88E1              Env	EQU 11
  74++88E1              EnvTp	EQU 13
  75++88E1
  76++88E1              ;Entry and other points
  77++88E1              ;START initialize playing of modules at MDLADDR (single module)
  78++88E1              ;START+3 initialization with module address in HL and DE (TS)
  79++88E1              ;START+5 play one quark
  80++88E1              ;START+8 mute
  81++88E1              ;START+10 setup and status flags
  82++88E1
  83++88E1              START:
  84++88E1 21 FC 94     	LD HL,outputBuffer ;DE - address of 2nd module for TS
  85++88E4 18 3C        	JR INIT
  86++88E6 C3 45 91     	JP PLAY
  87++88E9 18 25        	JR MUTE
  88++88EB 00           SETUP	DB 0 ;set bit0, if you want to play without looping
  89++88EC              	     ;(optional);
  90++88EC              	     ;set bit1 for PT2 and reset for PT3 before
  91++88EC              	     ;calling INIT;
  92++88EC              	     ;bits2-3: %00-ABC, %01-ACB, %10-BAC (optional);
  93++88EC              	     ;bits4-5: %00-no TS, %01-2 modules TS, %10-
  94++88EC              	     ;autodetect PT3 TS-format by AlCo (PT 3.7+);
  95++88EC              	     ;Remark: old PT3 TS-format by AlCo (PT 3.6) is not
  96++88EC              	     ;documented and must be converted to new standard.
  97++88EC              	     ;bit6 is set each time, when loop point of 2nd TS
  98++88EC              	     ;module is passed (optional).
  99++88EC              	     ;bit7 is set each time, when loop point of 1st TS
 100++88EC              	     ;or of single module is passed (optional).
 101++88EC
 102++88EC              ;Identifier
 103++88EC              	IF Id
 104++88EC ~            	DB "=UniPT2/PT3/TS-Player r.",Release,"="
 105++88EC              	ENDIF
 106++88EC
 107++88EC              	IF LoopChecker
 108++88EC 21 EB 88     CHECKLP	LD HL,SETUP
 109++88EF FD CB 9E 46  	BIT 0,(IY-100+VRS.ModNum)
 110++88F3 28 04        	JR Z,CHL1
 111++88F5 CB F6        	SET 6,(HL)
 112++88F7 18 02        	JR CHL2
 113++88F9 CB FE        CHL1	SET 7,(HL)
 114++88FB CB 46        CHL2	BIT 0,(HL)
 115++88FD C8           	RET Z
 116++88FE E1           	POP HL
 117++88FF FD 34 09     	INC (IY-100+VRS.DelyCnt)
 118++8902 FD 34 BA     	INC (IY-100+VRS.ChanA+CHP.NtSkCn)
 119++8905 AF           	XOR A
 120++8906 FD 77 1D     	LD (IY-100+VRS.AYREGS+AmplA),A
 121++8909 FD 77 1E     	LD (IY-100+VRS.AYREGS+AmplB),A
 122++890C FD 77 1F     	LD (IY-100+VRS.AYREGS+AmplC),A
 123++890F C9           	RET
 124++8910              	ENDIF
 125++8910
 126++8910 AF           MUTE: XOR A
 127++8911 67           	LD H,A
 128++8912 6F           	LD L,A
 129++8913 32 9A 92     	LD (VARS1+VRS.AYREGS+AmplA),A
 130++8916 22 9B 92     	LD (VARS1+VRS.AYREGS+AmplB),HL
 131++8919 32 21 93     	LD (VARS2+VRS.AYREGS+AmplA),A
 132++891C 22 22 93     	LD (VARS2+VRS.AYREGS+AmplB),HL
 133++891F C3 5D 91     	JP ROUT
 134++8922
 135++8922              INIT:
 136++8922              ;HL - AddressOfModule
 137++8922              ;DE - AddresOf2ndModule
 138++8922 D5           	PUSH DE
 139++8923 E5           	PUSH HL
 140++8924 21 18 92     	LD HL,VARS
 141++8927 36 00        	LD (HL),0
 142++8929 11 19 92     	LD DE,VARS+1
 143++892C 01 0E 01     	LD BC,VAR0END-VARS-1
 144++892F ED B0        	LDIR
 145++8931 23           	INC HL
 146++8932 22 7B 92     	LD (VARS1+VRS.AdInPtA),HL ;ptr to zero
 147++8935 22 02 93     	LD (VARS2+VRS.AdInPtA),HL
 148++8938
 149++8938 E1           	POP HL
 150++8939 FD 21 7D 92  	LD IY,VARS1+100
 151++893D 3A EB 88     	LD A,(START+10)
 152++8940 E6 02        	AND 2
 153++8942 C2 CB 89     	JP NZ,I_PT2
 154++8945
 155++8945 CD 18 8B     	CALL INITPT3
 156++8948 21 18 1F     	LD HL,(e_-SamCnv-2)*256+#18
 157++894B 22 EB 8E     	LD (SamCnv),HL
 158++894E 3E BA        	LD A,#BA
 159++8950 32 B6 8E     	LD (OrnCP),A
 160++8953 32 E2 8E     	LD (SamCP),A
 161++8956 3E 7B        	LD A,#7B
 162++8958 32 B9 8E     	LD (OrnLD),A
 163++895B 32 E5 8E     	LD (SamLD),A
 164++895E 3E 87        	LD A,#87
 165++8960 32 DC 8E     	LD (SamClc2),A
 166++8963 E1           	POP HL
 167++8964              	;Use version and ton table of 1st module
 168++8964 DD 7E A9     	LD A,(IX+13-100) ;EXTRACT VERSION NUMBER
 169++8967 D6 30        	SUB #30
 170++8969 38 04        	JR C,L20
 171++896B FE 0A        	CP 10
 172++896D 38 02        	JR C,L21
 173++896F 3E 06        L20	LD A,6
 174++8971 32 89 8D     L21	LD (Version),A
 175++8974 F5           	PUSH AF ;VolTable version
 176++8975 FE 04        	CP 4
 177++8977 DD 7E FF     	LD A,(IX+99-100) ;TONE TABLE NUMBER
 178++897A 17           	RLA
 179++897B E6 07        	AND 7
 180++897D F5           	PUSH AF ;NoteTable number
 181++897E
 182++897E FD 21 04 93  	LD IY,VARS2+100
 183++8982 3A EB 88     	LD A,(START+10)
 184++8985 E6 30        	AND 48
 185++8987 28 37        	JR Z,NOTS
 186++8989 FE 10        	CP 16
 187++898B 28 27        	JR Z,TwoPT3s
 188++898D 3A 89 8D     	LD A,(Version)
 189++8990 FE 07        	CP 7
 190++8992 38 2C        	JR C,NOTS
 191++8994 DD 7E FE     	LD A,(IX+98-100) ;ALCO TS MARKER
 192++8997 FE 20        	CP #20
 193++8999 28 25        	JR Z,NOTS
 194++899B 21 19 92     	LD HL,VARS1
 195++899E 11 A0 92     	LD DE,VARS2
 196++89A1 01 87 00     	LD BC,VRS
 197++89A4 ED B0        	LDIR
 198++89A6 FD CB 9E CE  	SET 1,(IY-100+VRS.ModNum)
 199++89AA 4F           	LD C,A
 200++89AB 87           	ADD A,A
 201++89AC 81           	ADD A,C
 202++89AD D6 02        	SUB 2
 203++89AF 32 50 90     	LD (TSSub),A
 204++89B2 18 03        	JR AlCoTS_
 205++89B4 CD 18 8B     TwoPT3s	CALL INITPT3
 206++89B7 3E 01        AlCoTS_	LD A,1
 207++89B9 32 18 92     	LD (is_ts),A
 208++89BC FD CB 9E C6  	SET 0,(IY-100+VRS.ModNum)
 209++89C0
 210++89C0 01 D5 8C     NOTS	LD BC,PT3PD
 211++89C3 21 00 00     	LD HL,0
 212++89C6 11 E0 91     	LD DE,PT3EMPTYORN
 213++89C9 18 48        	JR INITCOMMON
 214++89CB
 215++89CB CD 50 8B     I_PT2	CALL INITPT2
 216++89CE 21 CB 51     	LD HL,#51CB
 217++89D1 22 EB 8E     	LD (SamCnv),HL
 218++89D4 3E BB        	LD A,#BB
 219++89D6 32 B6 8E     	LD (OrnCP),A
 220++89D9 32 E2 8E     	LD (SamCP),A
 221++89DC 3E 7A        	LD A,#7A
 222++89DE 32 B9 8E     	LD (OrnLD),A
 223++89E1 32 E5 8E     	LD (SamLD),A
 224++89E4 3E 80        	LD A,#80
 225++89E6 32 DC 8E     	LD (SamClc2),A
 226++89E9 E1           	POP HL
 227++89EA 3E 05        	LD A,5
 228++89EC 32 89 8D     	LD (Version),A
 229++89EF F5           	PUSH AF
 230++89F0 3E 02        	LD A,2
 231++89F2 F5           	PUSH AF
 232++89F3
 233++89F3 3A EB 88     	LD A,(START+10)
 234++89F6 E6 30        	AND 48
 235++89F8 28 10        	JR Z,NOTS2
 236++89FA
 237++89FA FD 21 04 93  	LD IY,VARS2+100
 238++89FE 3E 01        	LD A,1
 239++8A00 32 18 92     	LD (is_ts),A
 240++8A03 FD CB 9E C6  	SET 0,(IY-100+VRS.ModNum)
 241++8A07 CD 50 8B     	CALL INITPT2
 242++8A0A
 243++8A0A 01 0F 8C     NOTS2	LD BC,PT2PD
 244++8A0D 21 87 86     	LD HL,#8687
 245++8A10 11 36 93     	LD DE,PT2EMPTYORN
 246++8A13
 247++8A13              INITCOMMON
 248++8A13
 249++8A13              	IF Basic
 250++8A13 FD 21 3A 5C  	LD IY,#5C3A
 251++8A17              	ENDIF
 252++8A17
 253++8A17 ED 43 C0 8B  	LD (PTDEC),BC
 254++8A1B 22 52 90     	LD (PsCalc),HL
 255++8A1E D5           	PUSH DE
 256++8A1F
 257++8A1F              ;note table data depacker
 258++8A1F              ;(c) Ivan Roshin
 259++8A1F 11 E3 91     	LD DE,T_PACK
 260++8A22 01 88 93     	LD BC,T1_+(2*49)-1
 261++8A25 1A           TP_0	LD A,(DE)
 262++8A26 13           	INC DE
 263++8A27 FE 1E        	CP 15*2
 264++8A29 30 06        	JR NC,TP_1
 265++8A2B 67           	LD H,A
 266++8A2C 1A           	LD A,(DE)
 267++8A2D 6F           	LD L,A
 268++8A2E 13           	INC DE
 269++8A2F 18 07        	JR TP_2
 270++8A31 D5           TP_1	PUSH DE
 271++8A32 16 00        	LD D,0
 272++8A34 5F           	LD E,A
 273++8A35 19           	ADD HL,DE
 274++8A36 19           	ADD HL,DE
 275++8A37 D1           	POP DE
 276++8A38 7C           TP_2	LD A,H
 277++8A39 02           	LD (BC),A
 278++8A3A 0B           	DEC BC
 279++8A3B 7D           	LD A,L
 280++8A3C 02           	LD (BC),A
 281++8A3D 0B           	DEC BC
player.asm(282): warning: value 0x1F0 is truncated to 8bit value: 0xF0
 282++8A3E D6 F0        	SUB #F8*2
 283++8A40 20 E3        	JR NZ,TP_0
 284++8A42
 285++8A42 3C           	INC A
 286++8A43 32 86 92     	LD (VARS1+VRS.DelyCnt),A
 287++8A46 32 0D 93     	LD (VARS2+VRS.DelyCnt),A
 288++8A49 21 01 F0     	LD HL,#F001 ;H - CHP.Volume, L - CHP.NtSkCn
 289++8A4C 22 37 92     	LD (VARS1+VRS.ChanA+CHP.NtSkCn),HL
 290++8A4F 22 54 92     	LD (VARS1+VRS.ChanB+CHP.NtSkCn),HL
 291++8A52 22 71 92     	LD (VARS1+VRS.ChanC+CHP.NtSkCn),HL
 292++8A55 22 BE 92     	LD (VARS2+VRS.ChanA+CHP.NtSkCn),HL
 293++8A58 22 DB 92     	LD (VARS2+VRS.ChanB+CHP.NtSkCn),HL
 294++8A5B 22 F8 92     	LD (VARS2+VRS.ChanC+CHP.NtSkCn),HL
 295++8A5E E1           	POP HL
 296++8A5F 22 29 92     	LD (VARS1+VRS.ChanA+CHP.OrnPtr),HL
 297++8A62 22 46 92     	LD (VARS1+VRS.ChanB+CHP.OrnPtr),HL
 298++8A65 22 63 92     	LD (VARS1+VRS.ChanC+CHP.OrnPtr),HL
 299++8A68 22 B0 92     	LD (VARS2+VRS.ChanA+CHP.OrnPtr),HL
 300++8A6B 22 CD 92     	LD (VARS2+VRS.ChanB+CHP.OrnPtr),HL
 301++8A6E 22 EA 92     	LD (VARS2+VRS.ChanC+CHP.OrnPtr),HL
 302++8A71
 303++8A71 F1           	POP AF
 304++8A72
 305++8A72              ;NoteTableCreator (c) Ivan Roshin
 306++8A72              ;A - NoteTableNumber*2+VersionForNoteTable
 307++8A72              ;(xx1b - 3.xx..3.4r, xx0b - 3.4x..3.6x..VTII1.0)
 308++8A72
 309++8A72 21 90 91     	LD HL,NT_DATA
 310++8A75 16 00        	LD D,0
 311++8A77 87           	ADD A,A
 312++8A78 5F           	LD E,A
 313++8A79 19           	ADD HL,DE
 314++8A7A 5E           	LD E,(HL)
 315++8A7B 23           	INC HL
 316++8A7C CB 3B        	SRL E
 317++8A7E 9F           	SBC A,A
 318++8A7F E6 A7        	AND #A7 ;#00 (NOP) or #A7 (AND A)
 319++8A81 32 A9 8A     	LD (L3),A
 320++8A84 EB           	EX DE,HL
 321++8A85 01 27 93     	LD BC,T1_
 322++8A88 09           	ADD HL,BC
 323++8A89
 324++8A89 1A           	LD A,(DE)
player.asm(325): warning: value 0x91A0 is truncated to 8bit value: 0xA0
 325++8A8A C6 A0        	ADD A,T_
 326++8A8C 4F           	LD C,A
 327++8A8D CE 91        	ADC A,T_/256
 328++8A8F 91           	SUB C
 329++8A90 47           	LD B,A
 330++8A91 C5           	PUSH BC
 331++8A92 11 17 94     	LD DE,NT_
 332++8A95 D5           	PUSH DE
 333++8A96
 334++8A96 06 0C        	LD B,12
 335++8A98 C5           L1	PUSH BC
 336++8A99 4E           	LD C,(HL)
 337++8A9A 23           	INC HL
 338++8A9B E5           	PUSH HL
 339++8A9C 46           	LD B,(HL)
 340++8A9D
 341++8A9D D5           	PUSH DE
 342++8A9E EB           	EX DE,HL
 343++8A9F 11 17 00     	LD DE,23
 344++8AA2 DD 26 08     	LD IXH,8
 345++8AA5
 346++8AA5 CB 38        L2	SRL B
 347++8AA7 CB 19        	RR C
 348++8AA9 19           L3	DB #19	;AND A or NOP
 349++8AAA 79           	LD A,C
 350++8AAB 8A           	ADC A,D	;=ADC 0
 351++8AAC 77           	LD (HL),A
 352++8AAD 23           	INC HL
 353++8AAE 78           	LD A,B
 354++8AAF 8A           	ADC A,D
 355++8AB0 77           	LD (HL),A
 356++8AB1 19           	ADD HL,DE
 357++8AB2 DD 25        	DEC IXH
 358++8AB4 20 EF        	JR NZ,L2
 359++8AB6
 360++8AB6 D1           	POP DE
 361++8AB7 13           	INC DE
 362++8AB8 13           	INC DE
 363++8AB9 E1           	POP HL
 364++8ABA 23           	INC HL
 365++8ABB C1           	POP BC
 366++8ABC 10 DA        	DJNZ L1
 367++8ABE
 368++8ABE E1           	POP HL
 369++8ABF D1           	POP DE
 370++8AC0
 371++8AC0 7B           	LD A,E
player.asm(372): warning: value 0x91AC is truncated to 8bit value: 0xAC
 372++8AC1 FE AC        	CP TCOLD_1
 373++8AC3 20 05        	JR NZ,CORR_1
 374++8AC5 3E FD        	LD A,#FD
 375++8AC7 32 45 94     	LD (NT_+#2E),A
 376++8ACA
 377++8ACA 1A           CORR_1	LD A,(DE)
 378++8ACB A7           	AND A
 379++8ACC 28 11        	JR Z,TC_EXIT
 380++8ACE 1F           	RRA
 381++8ACF F5           	PUSH AF
 382++8AD0 87           	ADD A,A
 383++8AD1 4F           	LD C,A
 384++8AD2 09           	ADD HL,BC
 385++8AD3 F1           	POP AF
 386++8AD4 30 02        	JR NC,CORR_2
 387++8AD6 35           	DEC (HL)
 388++8AD7 35           	DEC (HL)
 389++8AD8 34           CORR_2	INC (HL)
 390++8AD9 A7           	AND A
 391++8ADA ED 42        	SBC HL,BC
 392++8ADC 13           	INC DE
 393++8ADD 18 EB        	JR CORR_1
 394++8ADF
 395++8ADF              TC_EXIT
 396++8ADF
 397++8ADF F1           	POP AF
 398++8AE0
 399++8AE0              ;VolTableCreator (c) Ivan Roshin
 400++8AE0              ;A - VersionForVolumeTable (0..4 - 3.xx..3.4x;
 401++8AE0              			   ;5.. - 2.x,3.5x..3.6x..VTII1.0)
 402++8AE0
 403++8AE0 FE 05        	CP 5
 404++8AE2 21 11 00     	LD HL,#11
 405++8AE5 54           	LD D,H
 406++8AE6 5C           	LD E,H
 407++8AE7 3E 17        	LD A,#17
 408++8AE9 30 03        	JR NC,M1
 409++8AEB 2D           	DEC L
 410++8AEC 5D           	LD E,L
 411++8AED AF           	XOR A
 412++8AEE 32 FF 8A     M1      LD (M2),A
 413++8AF1
 414++8AF1 DD 21 27 93  	LD IX,VT_+16
 415++8AF5
 416++8AF5 0E 0F        	LD C,#F
 417++8AF7 E5           INITV2  PUSH HL
 418++8AF8
 419++8AF8 19           	ADD HL,DE
 420++8AF9 EB           	EX DE,HL
 421++8AFA ED 62        	SBC HL,HL
 422++8AFC
 423++8AFC 06 10        	LD B,#10
 424++8AFE 7D           INITV1  LD A,L
 425++8AFF 7D           M2      DB #7D
 426++8B00 7C           	LD A,H
 427++8B01 CE 00        	ADC A,0
 428++8B03 DD 77 00     	LD (IX),A
 429++8B06 DD 23        	INC IX
 430++8B08 19           	ADD HL,DE
 431++8B09 10 F3        	DJNZ INITV1
 432++8B0B
 433++8B0B E1           	POP HL
 434++8B0C 7B           	LD A,E
 435++8B0D FE 77        	CP #77
 436++8B0F 20 01        	JR NZ,M3
 437++8B11 1C           	INC E
 438++8B12 0D           M3      DEC C
 439++8B13 20 E2        	JR NZ,INITV2
 440++8B15
 441++8B15 C3 5D 91     	JP ROUT
 442++8B18
 443++8B18 CD 8B 8B     INITPT3	CALL SETMDAD
 444++8B1B E5           	PUSH HL
 445++8B1C 11 64 00     	LD DE,100
 446++8B1F 19           	ADD HL,DE
 447++8B20 7E           	LD A,(HL)
 448++8B21 FD 77 08     	LD (IY-100+VRS.Delay),A
 449++8B24 E5           	PUSH HL
 450++8B25 DD E1        	POP IX
 451++8B27 19           	ADD HL,DE
 452++8B28 CD 99 8B     	CALL SETCPPT
 453++8B2B DD 5E 02     	LD E,(IX+102-100)
 454++8B2E 23           	INC HL
 455++8B2F
 456++8B2F              	IF CurPosCounter
 457++8B2F ~            	LD (IY-100+VRS.PosSub),L
 458++8B2F              	ENDIF
 459++8B2F
 460++8B2F 19           	ADD HL,DE
 461++8B30 CD A0 8B     	CALL SETLPPT
 462++8B33 D1           	POP DE
 463++8B34 DD 6E 03     	LD L,(IX+103-100)
 464++8B37 DD 66 04     	LD H,(IX+104-100)
 465++8B3A 19           	ADD HL,DE
 466++8B3B CD 84 8B     	CALL SETPTPT
 467++8B3E 21 A9 00     	LD HL,169
 468++8B41 19           	ADD HL,DE
 469++8B42 CD 92 8B     	CALL SETORPT
 470++8B45 21 69 00     	LD HL,105
 471++8B48 19           	ADD HL,DE
 472++8B49
 473++8B49 FD 75 FA     SETSMPT LD (IY-100+VRS.SamPtrs),L
 474++8B4C FD 74 FB     	LD (IY-100+VRS.SamPtrs+1),H
 475++8B4F C9           	RET
 476++8B50
 477++8B50 7E           INITPT2	LD A,(HL)
 478++8B51 FD 77 08     	LD (IY-100+VRS.Delay),A
 479++8B54 E5           	PUSH HL
 480++8B55 E5           	PUSH HL
 481++8B56 E5           	PUSH HL
 482++8B57 23           	INC HL
 483++8B58 23           	INC HL
 484++8B59 7E           	LD A,(HL)
 485++8B5A 23           	INC HL
 486++8B5B CD 49 8B     	CALL SETSMPT
 487++8B5E 5E           	LD E,(HL)
 488++8B5F 23           	INC HL
 489++8B60 56           	LD D,(HL)
 490++8B61 E1           	POP HL
 491++8B62 A7           	AND A
 492++8B63 ED 52        	SBC HL,DE
 493++8B65 CD 8B 8B     	CALL SETMDAD
 494++8B68 E1           	POP HL
 495++8B69 11 43 00     	LD DE,67
 496++8B6C 19           	ADD HL,DE
 497++8B6D CD 92 8B     	CALL SETORPT
 498++8B70 1E 20        	LD E,32
 499++8B72 19           	ADD HL,DE
 500++8B73 4E           	LD C,(HL)
 501++8B74 23           	INC HL
 502++8B75 46           	LD B,(HL)
 503++8B76 1E 1E        	LD E,30
 504++8B78 19           	ADD HL,DE
 505++8B79 CD 99 8B     	CALL SETCPPT
 506++8B7C 5F           	LD E,A
 507++8B7D 23           	INC HL
 508++8B7E
 509++8B7E              	IF CurPosCounter
 510++8B7E ~            	LD (IY-100+VRS.PosSub),L
 511++8B7E              	ENDIF
 512++8B7E
 513++8B7E 19           	ADD HL,DE
 514++8B7F CD A0 8B     	CALL SETLPPT
 515++8B82 E1           	POP HL
 516++8B83 09           	ADD HL,BC
 517++8B84
 518++8B84 FD 75 FC     SETPTPT	LD (IY-100+VRS.PatsPtr),L
 519++8B87 FD 74 FD     	LD (IY-100+VRS.PatsPtr+1),H
 520++8B8A C9           	RET
 521++8B8B
 522++8B8B FD 75 F6     SETMDAD	LD (IY-100+VRS.MODADDR),L
 523++8B8E FD 74 F7     	LD (IY-100+VRS.MODADDR+1),H
 524++8B91 C9           	RET
 525++8B92
 526++8B92 FD 75 F8     SETORPT	LD (IY-100+VRS.OrnPtrs),L
 527++8B95 FD 74 F9     	LD (IY-100+VRS.OrnPtrs+1),H
 528++8B98 C9           	RET
 529++8B99
 530++8B99 FD 75 04     SETCPPT	LD (IY-100+VRS.CrPsPtr),L
 531++8B9C FD 74 05     	LD (IY-100+VRS.CrPsPtr+1),H
 532++8B9F C9           	RET
 533++8BA0
 534++8BA0 FD 75 06     SETLPPT	LD (IY-100+VRS.LPosPtr),L
 535++8BA3 FD 74 07     	LD (IY-100+VRS.LPosPtr+1),H
 536++8BA6 C9           	RET
 537++8BA7
 538++8BA7 FD 75 13     SETENBS	LD (IY-100+VRS.EnvBase),L
 539++8BAA FD 74 14     	LD (IY-100+VRS.EnvBase+1),H
 540++8BAD C9           	RET
 541++8BAE
 542++8BAE FD 75 0C     SETESLD	LD (IY-100+VRS.CurESld),L
 543++8BB1 FD 74 0D     	LD (IY-100+VRS.CurESld+1),H
 544++8BB4 C9           	RET
 545++8BB5
 546++8BB5 FD E5        GETIX	PUSH IY
 547++8BB7 DD E1        	POP IX
 548++8BB9 DD 19        	ADD IX,DE
 549++8BBB C9           	RET
 550++8BBC
 551++8BBC CD B5 8B     PTDECOD CALL GETIX
 552++8BBF              PTDEC	EQU $+1
 553++8BBF C3 C3 C3     	JP #C3C3
 554++8BC2
 555++8BC2              ;PT2 pattern decoder
 556++8BC2 CD 58 8E     PD2_SAM	CALL SETSAM
 557++8BC5 18 4A        	JR PD2_LOOP
 558++8BC7
 559++8BC7 DD 77 08     PD2_EOff LD (IX-12+CHP.Env_En),A
 560++8BCA 18 45        	JR PD2_LOOP
 561++8BCC
 562++8BCC DD 36 08 10  PD2_ENV	LD (IX-12+CHP.Env_En),16
 563++8BD0 FD 77 22     	LD (IY-100+VRS.AYREGS+EnvTp),A
 564++8BD3 0A           	LD A,(BC)
 565++8BD4 03           	INC BC
 566++8BD5 6F           	LD L,A
 567++8BD6 0A           	LD A,(BC)
 568++8BD7 03           	INC BC
 569++8BD8 67           	LD H,A
 570++8BD9 CD A7 8B     	CALL SETENBS
 571++8BDC 18 33        	JR PD2_LOOP
 572++8BDE
 573++8BDE CD 39 8E     PD2_ORN	CALL SETORN
 574++8BE1 18 2E        	JR PD2_LOOP
 575++8BE3
 576++8BE3 3C           PD2_SKIP INC A
 577++8BE4 DD 77 05     	LD (IX-12+CHP.NNtSkp),A
 578++8BE7 18 28        	JR PD2_LOOP
 579++8BE9
 580++8BE9 0F           PD2_VOL	RRCA
 581++8BEA 0F           	RRCA
 582++8BEB 0F           	RRCA
 583++8BEC 0F           	RRCA
 584++8BED DD 77 10     	LD (IX-12+CHP.Volume),A
 585++8BF0 18 1F        	JR PD2_LOOP
 586++8BF2
 587++8BF2 CD 09 8E     PD2_DEL	CALL C_DELAY
 588++8BF5 18 1A        	JR PD2_LOOP
 589++8BF7
 590++8BF7 DD CB 09 D6  PD2_GLIS SET 2,(IX-12+CHP.Flags)
 591++8BFB 3C           	INC A
 592++8BFC DD 77 0A     	LD (IX-12+CHP.TnSlDl),A
 593++8BFF DD 77 F9     	LD (IX-12+CHP.TSlCnt),A
 594++8C02 0A           	LD A,(BC)
 595++8C03 03           	INC BC
 596++8C04 DD 77 0B             LD (IX-12+CHP.TSlStp),A
 597++8C07 87           	ADD A,A
 598++8C08 9F           	SBC A,A
 599++8C09 DD 77 0C             LD (IX-12+CHP.TSlStp+1),A
 600++8C0C 37           	SCF
 601++8C0D 18 01        	JR PD2_LP2
 602++8C0F
 603++8C0F A7           PT2PD	AND A
 604++8C10
 605++8C10 08           PD2_LP2	EX AF,AF'
 606++8C11
 607++8C11 0A           PD2_LOOP LD A,(BC)
 608++8C12 03           	INC BC
 609++8C13 C6 20        	ADD A,#20
 610++8C15 28 3F        	JR Z,PD2_REL
 611++8C17 38 A9        	JR C,PD2_SAM
 612++8C19 C6 60        	ADD A,96
 613++8C1B 38 3E        	JR C,PD2_NOTE
 614++8C1D 3C           	INC A
 615++8C1E 28 A7        	JR Z,PD2_EOff
 616++8C20 C6 0F        	ADD A,15
 617++8C22 CA 38 8D     	JP Z,PD_FIN
 618++8C25 38 A5        	JR C,PD2_ENV
 619++8C27 C6 10        	ADD A,#10
 620++8C29 38 B3        	JR C,PD2_ORN
 621++8C2B C6 40        	ADD A,#40
 622++8C2D 38 B4        	JR C,PD2_SKIP
 623++8C2F C6 10        	ADD A,#10
 624++8C31 38 B6        	JR C,PD2_VOL
 625++8C33 3C           	INC A
 626++8C34 28 BC        	JR Z,PD2_DEL
 627++8C36 3C           	INC A
 628++8C37 28 BE        	JR Z,PD2_GLIS
 629++8C39 3C           	INC A
 630++8C3A 28 0A        	JR Z,PD2_PORT
 631++8C3C 3C           	INC A
 632++8C3D 28 12        	JR Z,PD2_STOP
 633++8C3F 0A           	LD A,(BC)
 634++8C40 03           	INC BC
 635++8C41 DD 77 F7     	LD (IX-12+CHP.CrNsSl),A
 636++8C44 18 CB        	JR PD2_LOOP
 637++8C46
 638++8C46 DD CB 09 96  PD2_PORT RES 2,(IX-12+CHP.Flags)
 639++8C4A 0A           	LD A,(BC)
 640++8C4B 03           	INC BC
 641++8C4C 03           	INC BC ;ignoring precalc delta to right sound
 642++8C4D 03           	INC BC
 643++8C4E 37           	SCF
 644++8C4F 18 BF        	JR PD2_LP2
 645++8C51
 646++8C51 DD 77 F9     PD2_STOP LD (IX-12+CHP.TSlCnt),A
 647++8C54 18 BB        	JR PD2_LOOP
 648++8C56
 649++8C56 DD 77 09     PD2_REL	LD (IX-12+CHP.Flags),A
 650++8C59 18 2C        	JR PD2_EXIT
 651++8C5B
 652++8C5B 6F           PD2_NOTE LD L,A
 653++8C5C DD 7E 06     	LD A,(IX-12+CHP.Note)
 654++8C5F 32 72 8D     	LD (PrNote+1),A
 655++8C62 DD 75 06     	LD (IX-12+CHP.Note),L
 656++8C65 AF           	XOR A
 657++8C66 DD 77 F9     	LD (IX-12+CHP.TSlCnt),A
 658++8C69 DD CB 09 C6  	SET 0,(IX-12+CHP.Flags)
 659++8C6D 08           	EX AF,AF'
 660++8C6E 30 16        	JR NC,NOGLIS2
 661++8C70 DD CB 09 56  	BIT 2,(IX-12+CHP.Flags)
 662++8C74 20 0C        	JR NZ,NOPORT2
 663++8C76 32 98 8D     	LD (LoStep),A
 664++8C79 87           	ADD A,A
 665++8C7A 9F           	SBC A,A
 666++8C7B 08           	EX AF,AF'
 667++8C7C 67           	LD H,A
 668++8C7D 6F           	LD L,A
 669++8C7E 3C           	INC A
 670++8C7F CD 53 8D     	CALL SETPORT
 671++8C82 DD 36 F9 01  NOPORT2	LD (IX-12+CHP.TSlCnt),1
 672++8C86 AF           NOGLIS2	XOR A
 673++8C87
 674++8C87
 675++8C87 DD 77 F5     PD2_EXIT LD (IX-12+CHP.PsInSm),A
 676++8C8A DD 77 F4     	LD (IX-12+CHP.PsInOr),A
 677++8C8D DD 77 FA     	LD (IX-12+CHP.CrTnSl),A
 678++8C90 DD 77 FB     	LD (IX-12+CHP.CrTnSl+1),A
 679++8C93 C3 38 8D     	JP PD_FIN
 680++8C96
 681++8C96              ;PT3 pattern decoder
 682++8C96 DD 36 08 00  PD_OrSm	LD (IX-12+CHP.Env_En),0
 683++8C9A CD 39 8E     	CALL SETORN
 684++8C9D 0A           PD_SAM_	LD A,(BC)
 685++8C9E 03           	INC BC
 686++8C9F 0F           	RRCA
 687++8CA0
 688++8CA0 CD 58 8E     PD_SAM	CALL SETSAM
 689++8CA3 18 3F        	JR PD_LOOP
 690++8CA5
 691++8CA5 0F           PD_VOL	RRCA
 692++8CA6 0F           	RRCA
 693++8CA7 0F           	RRCA
 694++8CA8 0F           	RRCA
 695++8CA9 DD 77 10     	LD (IX-12+CHP.Volume),A
 696++8CAC 18 39        	JR PD_LP2
 697++8CAE
 698++8CAE DD 77 08     PD_EOff	LD (IX-12+CHP.Env_En),A
 699++8CB1 DD 77 F4     	LD (IX-12+CHP.PsInOr),A
 700++8CB4 18 31        	JR PD_LP2
 701++8CB6
 702++8CB6 3D           PD_SorE	DEC A
 703++8CB7 20 07        	JR NZ,PD_ENV
 704++8CB9 0A           	LD A,(BC)
 705++8CBA 03           	INC BC
 706++8CBB DD 77 05     	LD (IX-12+CHP.NNtSkp),A
 707++8CBE 18 27        	JR PD_LP2
 708++8CC0
 709++8CC0 CD 1E 8E     PD_ENV	CALL SETENV
 710++8CC3 18 22        	JR PD_LP2
 711++8CC5
 712++8CC5 CD 39 8E     PD_ORN	CALL SETORN
 713++8CC8 18 1A        	JR PD_LOOP
 714++8CCA
 715++8CCA DD 77 08     PD_ESAM	LD (IX-12+CHP.Env_En),A
 716++8CCD DD 77 F4     	LD (IX-12+CHP.PsInOr),A
 717++8CD0 C4 1E 8E     	CALL NZ,SETENV
 718++8CD3 18 C8        	JR PD_SAM_
 719++8CD5
 720++8CD5 DD 7E 06     PT3PD	LD A,(IX-12+CHP.Note)
 721++8CD8 32 72 8D     	LD (PrNote+1),A
 722++8CDB DD 6E FA     	LD L,(IX-12+CHP.CrTnSl)
 723++8CDE DD 66 FB     	LD H,(IX-12+CHP.CrTnSl+1)
 724++8CE1 22 8F 8D     	LD (PrSlide+1),HL
 725++8CE4
 726++8CE4 11 10 20     PD_LOOP	LD DE,#2010
 727++8CE7 0A           PD_LP2	LD A,(BC)
 728++8CE8 03           	INC BC
 729++8CE9 83           	ADD A,E
 730++8CEA 38 AA        	JR C,PD_OrSm
 731++8CEC 82           	ADD A,D
 732++8CED 28 49        	JR Z,PD_FIN
 733++8CEF 38 AF        	JR C,PD_SAM
 734++8CF1 83           	ADD A,E
 735++8CF2 28 25        	JR Z,PD_REL
 736++8CF4 38 AF        	JR C,PD_VOL
 737++8CF6 83           	ADD A,E
 738++8CF7 28 B5        	JR Z,PD_EOff
 739++8CF9 38 BB        	JR C,PD_SorE
 740++8CFB C6 60        	ADD A,96
 741++8CFD 38 20        	JR C,PD_NOTE
 742++8CFF 83           	ADD A,E
 743++8D00 38 C3        	JR C,PD_ORN
 744++8D02 82           	ADD A,D
 745++8D03 38 0F        	JR C,PD_NOIS
 746++8D05 83           	ADD A,E
 747++8D06 38 C2        	JR C,PD_ESAM
 748++8D08 87           	ADD A,A
 749++8D09 5F           	LD E,A
player.asm(750): warning: value 0x16D94 is truncated to 16bit value: 0x6D94
 750++8D0A 21 94 6D     	LD HL,SPCCOMS+#FF20-#2000
 751++8D0D 19           	ADD HL,DE
 752++8D0E 5E           	LD E,(HL)
 753++8D0F 23           	INC HL
 754++8D10 56           	LD D,(HL)
 755++8D11 D5           	PUSH DE
 756++8D12 18 D0        	JR PD_LOOP
 757++8D14
 758++8D14 FD 77 10     PD_NOIS	LD (IY-100+VRS.Ns_Base),A
 759++8D17 18 CE        	JR PD_LP2
 760++8D19
 761++8D19 DD CB 09 86  PD_REL	RES 0,(IX-12+CHP.Flags)
 762++8D1D 18 08        	JR PD_RES
 763++8D1F
 764++8D1F DD 77 06     PD_NOTE	LD (IX-12+CHP.Note),A
 765++8D22 DD CB 09 C6  	SET 0,(IX-12+CHP.Flags)
 766++8D26 AF           	XOR A
 767++8D27
 768++8D27 ED 73 36 8D  PD_RES	LD (PDSP_+1),SP
 769++8D2B DD F9        	LD SP,IX
 770++8D2D 67           	LD H,A
 771++8D2E 6F           	LD L,A
 772++8D2F E5           	PUSH HL
 773++8D30 E5           	PUSH HL
 774++8D31 E5           	PUSH HL
 775++8D32 E5           	PUSH HL
 776++8D33 E5           	PUSH HL
 777++8D34 E5           	PUSH HL
 778++8D35 31 31 31     PDSP_	LD SP,#3131
 779++8D38
 780++8D38 DD 7E 05     PD_FIN	LD A,(IX-12+CHP.NNtSkp)
 781++8D3B DD 77 0F     	LD (IX-12+CHP.NtSkCn),A
 782++8D3E C9           	RET
 783++8D3F
 784++8D3F 0A           C_PORTM LD A,(BC)
 785++8D40 03           	INC BC
 786++8D41              ;SKIP PRECALCULATED TONE DELTA (BECAUSE
 787++8D41              ;CANNOT BE RIGHT AFTER PT3 COMPILATION)
 788++8D41 03           	INC BC
 789++8D42 03           	INC BC
 790++8D43 08           	EX AF,AF'
 791++8D44 0A           	LD A,(BC) ;SIGNED TONE STEP
 792++8D45 03           	INC BC
 793++8D46 32 98 8D     	LD (LoStep),A
 794++8D49 0A           	LD A,(BC)
 795++8D4A 03           	INC BC
 796++8D4B A7           	AND A
 797++8D4C 08           	EX AF,AF'
 798++8D4D DD 6E FA     	LD L,(IX-12+CHP.CrTnSl)
 799++8D50 DD 66 FB     	LD H,(IX-12+CHP.CrTnSl+1)
 800++8D53
 801++8D53              ;Set portamento variables
 802++8D53              ;A - Delay; A' - Hi(Step); ZF' - (A'=0); HL - CrTnSl
 803++8D53
 804++8D53 DD CB 09 96  SETPORT	RES 2,(IX-12+CHP.Flags)
 805++8D57 DD 77 0A     	LD (IX-12+CHP.TnSlDl),A
 806++8D5A DD 77 F9     	LD (IX-12+CHP.TSlCnt),A
 807++8D5D E5           	PUSH HL
 808++8D5E 11 17 94     	LD DE,NT_
 809++8D61 DD 7E 06     	LD A,(IX-12+CHP.Note)
 810++8D64 DD 77 07     	LD (IX-12+CHP.SlToNt),A
 811++8D67 87           	ADD A,A
 812++8D68 6F           	LD L,A
 813++8D69 26 00        	LD H,0
 814++8D6B 19           	ADD HL,DE
 815++8D6C 7E           	LD A,(HL)
 816++8D6D 23           	INC HL
 817++8D6E 66           	LD H,(HL)
 818++8D6F 6F           	LD L,A
 819++8D70 E5           	PUSH HL
 820++8D71 3E 3E        PrNote	LD A,#3E
 821++8D73 DD 77 06     	LD (IX-12+CHP.Note),A
 822++8D76 87           	ADD A,A
 823++8D77 6F           	LD L,A
 824++8D78 26 00        	LD H,0
 825++8D7A 19           	ADD HL,DE
 826++8D7B 5E           	LD E,(HL)
 827++8D7C 23           	INC HL
 828++8D7D 56           	LD D,(HL)
 829++8D7E E1           	POP HL
 830++8D7F ED 52        	SBC HL,DE
 831++8D81 DD 75 0D     	LD (IX-12+CHP.TnDelt),L
 832++8D84 DD 74 0E     	LD (IX-12+CHP.TnDelt+1),H
 833++8D87 D1           	POP DE
 834++8D88              Version EQU $+1
 835++8D88 3E 3E        	LD A,#3E
 836++8D8A FE 06        	CP 6
 837++8D8C 38 09        	JR C,OLDPRTM ;Old 3xxx for PT v3.5-
 838++8D8E 11 11 11     PrSlide	LD DE,#1111
 839++8D91 DD 73 FA     	LD (IX-12+CHP.CrTnSl),E
 840++8D94 DD 72 FB     	LD (IX-12+CHP.CrTnSl+1),D
 841++8D97              LoStep	EQU $+1
 842++8D97 3E 3E        OLDPRTM	LD A,#3E
 843++8D99 08           	EX AF,AF'
 844++8D9A 28 01        	JR Z,NOSIG
 845++8D9C EB           	EX DE,HL
 846++8D9D ED 52        NOSIG	SBC HL,DE
 847++8D9F F2 A7 8D     	JP P,SET_STP
 848++8DA2 2F           	CPL
 849++8DA3 08           	EX AF,AF'
 850++8DA4 ED 44        	NEG
 851++8DA6 08           	EX AF,AF'
 852++8DA7 DD 77 0C     SET_STP	LD (IX-12+CHP.TSlStp+1),A
 853++8DAA 08           	EX AF,AF'
 854++8DAB DD 77 0B     	LD (IX-12+CHP.TSlStp),A
 855++8DAE DD 36 FE 00  	LD (IX-12+CHP.COnOff),0
 856++8DB2 C9           	RET
 857++8DB3
 858++8DB3 DD CB 09 D6  C_GLISS	SET 2,(IX-12+CHP.Flags)
 859++8DB7 0A           	LD A,(BC)
 860++8DB8 03           	INC BC
 861++8DB9 DD 77 0A     	LD (IX-12+CHP.TnSlDl),A
 862++8DBC A7           	AND A
 863++8DBD 20 07        	JR NZ,GL36
 864++8DBF 3A 89 8D     	LD A,(Version) ;AlCo PT3.7+
 865++8DC2 FE 07        	CP 7
 866++8DC4 9F           	SBC A,A
 867++8DC5 3C           	INC A
 868++8DC6 DD 77 F9     GL36	LD (IX-12+CHP.TSlCnt),A
 869++8DC9 0A           	LD A,(BC)
 870++8DCA 03           	INC BC
 871++8DCB 08           	EX AF,AF'
 872++8DCC 0A           	LD A,(BC)
 873++8DCD 03           	INC BC
 874++8DCE 18 D7        	JR SET_STP
 875++8DD0
 876++8DD0 0A           C_SMPOS	LD A,(BC)
 877++8DD1 03           	INC BC
 878++8DD2 DD 77 F5     	LD (IX-12+CHP.PsInSm),A
 879++8DD5 C9           	RET
 880++8DD6
 881++8DD6 0A           C_ORPOS	LD A,(BC)
 882++8DD7 03           	INC BC
 883++8DD8 DD 77 F4     	LD (IX-12+CHP.PsInOr),A
 884++8DDB C9           	RET
 885++8DDC
 886++8DDC 0A           C_VIBRT	LD A,(BC)
 887++8DDD 03           	INC BC
 888++8DDE DD 77 FF     	LD (IX-12+CHP.OnOffD),A
 889++8DE1 DD 77 FE     	LD (IX-12+CHP.COnOff),A
 890++8DE4 0A           	LD A,(BC)
 891++8DE5 03           	INC BC
 892++8DE6 DD 77 00     	LD (IX-12+CHP.OffOnD),A
 893++8DE9 AF           	XOR A
 894++8DEA DD 77 F9     	LD (IX-12+CHP.TSlCnt),A
 895++8DED DD 77 FA     	LD (IX-12+CHP.CrTnSl),A
 896++8DF0 DD 77 FB     	LD (IX-12+CHP.CrTnSl+1),A
 897++8DF3 C9           	RET
 898++8DF4
 899++8DF4 0A           C_ENGLS	LD A,(BC)
 900++8DF5 03           	INC BC
 901++8DF6 FD 77 0E     	LD (IY-100+VRS.Env_Del),A
 902++8DF9 FD 77 0F     	LD (IY-100+VRS.CurEDel),A
 903++8DFC 0A           	LD A,(BC)
 904++8DFD 03           	INC BC
 905++8DFE 6F           	LD L,A
 906++8DFF 0A           	LD A,(BC)
 907++8E00 03           	INC BC
 908++8E01 67           	LD H,A
 909++8E02 FD 75 0A     	LD (IY-100+VRS.ESldAdd),L
 910++8E05 FD 74 0B     	LD (IY-100+VRS.ESldAdd+1),H
 911++8E08 C9           	RET
 912++8E09
 913++8E09 0A           C_DELAY	LD A,(BC)
 914++8E0A 03           	INC BC
 915++8E0B FD 77 08     	LD (IY-100+VRS.Delay),A
 916++8E0E 21 A2 92     	LD HL,VARS2+VRS.ModNum ;if AlCo_TS
 917++8E11 CB 4E        	BIT 1,(HL)
 918++8E13 C8           	RET Z
 919++8E14 32 85 92     	LD (VARS1+VRS.Delay),A
 920++8E17 32 86 92     	LD (VARS1+VRS.DelyCnt),A
 921++8E1A 32 0C 93     	LD (VARS2+VRS.Delay),A
 922++8E1D C9           	RET
 923++8E1E
 924++8E1E DD 73 08     SETENV	LD (IX-12+CHP.Env_En),E
 925++8E21 FD 77 22     	LD (IY-100+VRS.AYREGS+EnvTp),A
 926++8E24 0A           	LD A,(BC)
 927++8E25 03           	INC BC
 928++8E26 67           	LD H,A
 929++8E27 0A           	LD A,(BC)
 930++8E28 03           	INC BC
 931++8E29 6F           	LD L,A
 932++8E2A CD A7 8B     	CALL SETENBS
 933++8E2D AF           	XOR A
 934++8E2E DD 77 F4     	LD (IX-12+CHP.PsInOr),A
 935++8E31 FD 77 0F     	LD (IY-100+VRS.CurEDel),A
 936++8E34 67           	LD H,A
 937++8E35 6F           	LD L,A
 938++8E36 C3 AE 8B     	JP SETESLD
 939++8E39
 940++8E39 87           SETORN	ADD A,A
 941++8E3A 5F           	LD E,A
 942++8E3B 16 00        	LD D,0
 943++8E3D DD 72 F4     	LD (IX-12+CHP.PsInOr),D
 944++8E40 FD 6E F8     	LD L,(IY-100+VRS.OrnPtrs)
 945++8E43 FD 66 F9     	LD H,(IY-100+VRS.OrnPtrs+1)
 946++8E46 19           	ADD HL,DE
 947++8E47 5E           	LD E,(HL)
 948++8E48 23           	INC HL
 949++8E49 56           	LD D,(HL)
 950++8E4A FD 6E F6     	LD L,(IY-100+VRS.MODADDR)
 951++8E4D FD 66 F7     	LD H,(IY-100+VRS.MODADDR+1)
 952++8E50 19           	ADD HL,DE
 953++8E51 DD 75 01     	LD (IX-12+CHP.OrnPtr),L
 954++8E54 DD 74 02     	LD (IX-12+CHP.OrnPtr+1),H
 955++8E57 C9           C_NOP	RET
 956++8E58
 957++8E58 87           SETSAM	ADD A,A
 958++8E59 5F           	LD E,A
 959++8E5A 16 00        	LD D,0
 960++8E5C FD 6E FA     	LD L,(IY-100+VRS.SamPtrs);
 961++8E5F FD 66 FB     	LD H,(IY-100+VRS.SamPtrs+1);
 962++8E62 19           	ADD HL,DE
 963++8E63 5E           	LD E,(HL)
 964++8E64 23           	INC HL
 965++8E65 56           	LD D,(HL)
 966++8E66 FD 6E F6     	LD L,(IY-100+VRS.MODADDR)
 967++8E69 FD 66 F7     	LD H,(IY-100+VRS.MODADDR+1)
 968++8E6C 19           	ADD HL,DE
 969++8E6D DD 75 03     	LD (IX-12+CHP.SamPtr),L
 970++8E70 DD 74 04     	LD (IX-12+CHP.SamPtr+1),H
 971++8E73 C9           	RET
 972++8E74
 973++8E74              ;ALL 16 ADDRESSES TO PROTECT FROM BROKEN PT3 MODULES
 974++8E74 57 8E        SPCCOMS DW C_NOP
 975++8E76 B3 8D        	DW C_GLISS
 976++8E78 3F 8D        	DW C_PORTM
 977++8E7A D0 8D        	DW C_SMPOS
 978++8E7C D6 8D        	DW C_ORPOS
 979++8E7E DC 8D        	DW C_VIBRT
 980++8E80 57 8E        	DW C_NOP
 981++8E82 57 8E        	DW C_NOP
 982++8E84 F4 8D        	DW C_ENGLS
 983++8E86 09 8E        	DW C_DELAY
 984++8E88 57 8E        	DW C_NOP
 985++8E8A 57 8E        	DW C_NOP
 986++8E8C 57 8E        	DW C_NOP
 987++8E8E 57 8E        	DW C_NOP
 988++8E90 57 8E        	DW C_NOP
 989++8E92 57 8E        	DW C_NOP
 990++8E94
 991++8E94 CD B5 8B     CHREGS	CALL GETIX
 992++8E97 AF           	XOR A
 993++8E98 32 D4 90     	LD (Ampl),A
 994++8E9B DD CB 15 46  	BIT 0,(IX+CHP.Flags)
 995++8E9F E5           	PUSH HL
 996++8EA0 CA E7 8F     	JP Z,CH_EXIT
 997++8EA3 ED 73 31 8F  	LD (CSP_+1),SP
 998++8EA7 DD 6E 0D     	LD L,(IX+CHP.OrnPtr)
 999++8EAA DD 66 0E     	LD H,(IX+CHP.OrnPtr+1)
1000++8EAD F9           	LD SP,HL
1001++8EAE D1           	POP DE
1002++8EAF 67           	LD H,A
1003++8EB0 DD 7E 00     	LD A,(IX+CHP.PsInOr)
1004++8EB3 6F           	LD L,A
1005++8EB4 39           	ADD HL,SP
1006++8EB5 3C           	INC A
1007++8EB6              		;PT2	PT3
1008++8EB6 3C           OrnCP	INC A	;CP E	CP D
1009++8EB7 38 01        	JR C,CH_ORPS
1010++8EB9 01           OrnLD	DB 1	;LD A,D	LD A,E
1011++8EBA DD 77 00     CH_ORPS	LD (IX+CHP.PsInOr),A
1012++8EBD DD 7E 12     	LD A,(IX+CHP.Note)
1013++8EC0 86           	ADD A,(HL)
1014++8EC1 F2 C5 8E     	JP P,CH_NTP
1015++8EC4 AF           	XOR A
1016++8EC5 FE 60        CH_NTP	CP 96
1017++8EC7 38 02        	JR C,CH_NOK
1018++8EC9 3E 5F        	LD A,95
1019++8ECB 87           CH_NOK	ADD A,A
1020++8ECC 08           	EX AF,AF'
1021++8ECD DD 6E 0F     	LD L,(IX+CHP.SamPtr)
1022++8ED0 DD 66 10     	LD H,(IX+CHP.SamPtr+1)
1023++8ED3 F9           	LD SP,HL
1024++8ED4 D1           	POP DE
1025++8ED5 26 00        	LD H,0
1026++8ED7 DD 7E 01     	LD A,(IX+CHP.PsInSm)
1027++8EDA 47           	LD B,A
1028++8EDB 87           	ADD A,A
1029++8EDC 87           SamClc2	ADD A,A ;or ADD A,B for PT2
1030++8EDD 6F           	LD L,A
1031++8EDE 39           	ADD HL,SP
1032++8EDF F9           	LD SP,HL
1033++8EE0 78           	LD A,B
1034++8EE1 3C           	INC A
1035++8EE2              		;PT2	PT3
1036++8EE2 3C           SamCP	INC A	;CP E	CP D
1037++8EE3 38 01        	JR C,CH_SMPS
1038++8EE5 01           SamLD	DB 1	;LD A,D	LD A,E
1039++8EE6 DD 77 01     CH_SMPS	LD (IX+CHP.PsInSm),A
1040++8EE9 C1           	POP BC
1041++8EEA E1           	POP HL
1042++8EEB
1043++8EEB              ;Convert PT2 sample to PT3
1044++8EEB              		;PT2		PT3
1045++8EEB E1           SamCnv	POP HL  ;BIT 2,C	JR e_
1046++8EEC E1           	POP HL
1047++8EED 60           	LD H,B
1048++8EEE 20 06        	JR NZ,$+8
1049++8EF0 EB           	EX DE,HL
1050++8EF1 A7           	AND A
1051++8EF2 ED 62        	SBC HL,HL
1052++8EF4 ED 52        	SBC HL,DE
1053++8EF6 51           	LD D,C
1054++8EF7 CB 19        	RR C
1055++8EF9 9F           	SBC A,A
1056++8EFA 2F           	CPL
1057++8EFB E6 3E        	AND #3E
1058++8EFD CB 19        	RR C
1059++8EFF CB 18        	RR B
1060++8F01 A1           	AND C
1061++8F02 4F           	LD C,A
1062++8F03 78           	LD A,B
1063++8F04 1F           	RRA
1064++8F05 1F           	RRA
1065++8F06 CB 1A        	RR D
1066++8F08 1F           	RRA
1067++8F09 E6 9F        	AND #9F
1068++8F0B 47           	LD B,A
1069++8F0C
1070++8F0C DD 5E 08     e_	LD E,(IX+CHP.TnAcc)
1071++8F0F DD 56 09     	LD D,(IX+CHP.TnAcc+1)
1072++8F12 19           	ADD HL,DE
1073++8F13 CB 70        	BIT 6,B
1074++8F15 28 06        	JR Z,CH_NOAC
1075++8F17 DD 75 08     	LD (IX+CHP.TnAcc),L
1076++8F1A DD 74 09     	LD (IX+CHP.TnAcc+1),H
1077++8F1D EB           CH_NOAC EX DE,HL
1078++8F1E 08           	EX AF,AF'
player.asm(1079): warning: value 0x9417 is truncated to 8bit value: 0x17
1079++8F1F C6 17        	ADD A,NT_
1080++8F21 6F           	LD L,A
1081++8F22 CE 94        	ADC A,NT_/256
1082++8F24 95           	SUB L
1083++8F25 67           	LD H,A
1084++8F26 F9           	LD SP,HL
1085++8F27 E1           	POP HL
1086++8F28 19           	ADD HL,DE
1087++8F29 DD 5E 06     	LD E,(IX+CHP.CrTnSl)
1088++8F2C DD 56 07     	LD D,(IX+CHP.CrTnSl+1)
1089++8F2F 19           	ADD HL,DE
1090++8F30 31 31 31     CSP_	LD SP,#3131
1091++8F33 E3           	EX (SP),HL
1092++8F34 AF           	XOR A
1093++8F35 DD B6 05     	OR (IX+CHP.TSlCnt)
1094++8F38 28 3E        	JR Z,CH_AMP
1095++8F3A DD 35 05     	DEC (IX+CHP.TSlCnt)
1096++8F3D 20 39        	JR NZ,CH_AMP
1097++8F3F DD 7E 16     	LD A,(IX+CHP.TnSlDl)
1098++8F42 DD 77 05     	LD (IX+CHP.TSlCnt),A
1099++8F45 DD 6E 17     	LD L,(IX+CHP.TSlStp)
1100++8F48 DD 66 18     	LD H,(IX+CHP.TSlStp+1)
1101++8F4B 7C           	LD A,H
1102++8F4C 19           	ADD HL,DE
1103++8F4D DD 75 06     	LD (IX+CHP.CrTnSl),L
1104++8F50 DD 74 07     	LD (IX+CHP.CrTnSl+1),H
1105++8F53 DD CB 15 56  	BIT 2,(IX+CHP.Flags)
1106++8F57 20 1F        	JR NZ,CH_AMP
1107++8F59 DD 5E 19     	LD E,(IX+CHP.TnDelt)
1108++8F5C DD 56 1A     	LD D,(IX+CHP.TnDelt+1)
1109++8F5F A7           	AND A
1110++8F60 28 01        	JR Z,CH_STPP
1111++8F62 EB           	EX DE,HL
1112++8F63 ED 52        CH_STPP SBC HL,DE
1113++8F65 FA 78 8F     	JP M,CH_AMP
1114++8F68 DD 7E 13     	LD A,(IX+CHP.SlToNt)
1115++8F6B DD 77 12     	LD (IX+CHP.Note),A
1116++8F6E AF           	XOR A
1117++8F6F DD 77 05     	LD (IX+CHP.TSlCnt),A
1118++8F72 DD 77 06     	LD (IX+CHP.CrTnSl),A
1119++8F75 DD 77 07     	LD (IX+CHP.CrTnSl+1),A
1120++8F78 DD 7E 02     CH_AMP	LD A,(IX+CHP.CrAmSl)
1121++8F7B CB 79        	BIT 7,C
1122++8F7D 28 13        	JR Z,CH_NOAM
1123++8F7F CB 71        	BIT 6,C
1124++8F81 28 07        	JR Z,CH_AMIN
1125++8F83 FE 0F        	CP 15
1126++8F85 28 0B        	JR Z,CH_NOAM
1127++8F87 3C           	INC A
1128++8F88 18 05        	JR CH_SVAM
1129++8F8A FE F1        CH_AMIN	CP -15
1130++8F8C 28 04        	JR Z,CH_NOAM
1131++8F8E 3D           	DEC A
1132++8F8F DD 77 02     CH_SVAM	LD (IX+CHP.CrAmSl),A
1133++8F92 6F           CH_NOAM	LD L,A
1134++8F93 78           	LD A,B
1135++8F94 E6 0F        	AND 15
1136++8F96 85           	ADD A,L
1137++8F97 F2 9B 8F     	JP P,CH_APOS
1138++8F9A AF           	XOR A
1139++8F9B FE 10        CH_APOS	CP 16
1140++8F9D 38 02        	JR C,CH_VOL
1141++8F9F 3E 0F        	LD A,15
1142++8FA1 DD B6 1C     CH_VOL	OR (IX+CHP.Volume)
player.asm(1143): warning: value 0x9317 is truncated to 8bit value: 0x17
1143++8FA4 C6 17        	ADD A,VT_
1144++8FA6 6F           	LD L,A
1145++8FA7 CE 93        	ADC A,VT_/256
1146++8FA9 95           	SUB L
1147++8FAA 67           	LD H,A
1148++8FAB 7E           	LD A,(HL)
1149++8FAC CB 41        CH_ENV	BIT 0,C
1150++8FAE 20 03        	JR NZ,CH_NOEN
1151++8FB0 DD B6 14     	OR (IX+CHP.Env_En)
1152++8FB3 32 D4 90     CH_NOEN	LD (Ampl),A
1153++8FB6 CB 78        	BIT 7,B
1154++8FB8 79           	LD A,C
1155++8FB9 28 1A        	JR Z,NO_ENSL
1156++8FBB 17           	RLA
1157++8FBC 17           	RLA
1158++8FBD CB 2F        	SRA A
1159++8FBF CB 2F        	SRA A
1160++8FC1 CB 2F        	SRA A
1161++8FC3 DD 86 04     	ADD A,(IX+CHP.CrEnSl) ;SEE COMMENT BELOW
1162++8FC6 CB 68        	BIT 5,B
1163++8FC8 28 03        	JR Z,NO_ENAC
1164++8FCA DD 77 04     	LD (IX+CHP.CrEnSl),A
1165++8FCD FD 86 12     NO_ENAC	ADD A,(IY-100+VRS.AddToEn) ;BUG IN PT3 - NEED WORD HERE
1166++8FD0 FD 77 12     	LD (IY-100+VRS.AddToEn),A
1167++8FD3 18 0E        	JR CH_MIX
1168++8FD5 1F           NO_ENSL RRA
1169++8FD6 DD 86 03     	ADD A,(IX+CHP.CrNsSl)
1170++8FD9 FD 77 11     	LD (IY-100+VRS.AddToNs),A
1171++8FDC CB 68        	BIT 5,B
1172++8FDE 28 03        	JR Z,CH_MIX
1173++8FE0 DD 77 03     	LD (IX+CHP.CrNsSl),A
1174++8FE3 78           CH_MIX	LD A,B
1175++8FE4 1F           	RRA
1176++8FE5 E6 48        	AND #48
1177++8FE7 FD B6 1C     CH_EXIT	OR (IY-100+VRS.AYREGS+Mixer)
1178++8FEA 0F           	RRCA
1179++8FEB FD 77 1C     	LD (IY-100+VRS.AYREGS+Mixer),A
1180++8FEE E1           	POP HL
1181++8FEF AF           	XOR A
1182++8FF0 DD B6 0A     	OR (IX+CHP.COnOff)
1183++8FF3 C8           	RET Z
1184++8FF4 DD 35 0A     	DEC (IX+CHP.COnOff)
1185++8FF7 C0           	RET NZ
1186++8FF8 DD AE 15     	XOR (IX+CHP.Flags)
1187++8FFB DD 77 15     	LD (IX+CHP.Flags),A
1188++8FFE 1F           	RRA
1189++8FFF DD 7E 0B     	LD A,(IX+CHP.OnOffD)
1190++9002 38 03        	JR C,CH_ONDL
1191++9004 DD 7E 0C     	LD A,(IX+CHP.OffOnD)
1192++9007 DD 77 0A     CH_ONDL	LD (IX+CHP.COnOff),A
1193++900A C9           	RET
1194++900B
1195++900B AF           PLAY_	XOR A
1196++900C FD 77 12     	LD (IY-100+VRS.AddToEn),A
1197++900F FD 77 1C     	LD (IY-100+VRS.AYREGS+Mixer),A
1198++9012 3D           	DEC A
1199++9013 FD 77 22     	LD (IY-100+VRS.AYREGS+EnvTp),A
1200++9016 FD 35 09     	DEC (IY-100+VRS.DelyCnt)
1201++9019 C2 C1 90     	JP NZ,PL2
1202++901C FD 35 BA     	DEC (IY-100+VRS.ChanA+CHP.NtSkCn)
1203++901F 20 6C        	JR NZ,PL1B
1204++9021 FD 4E FE     	LD C,(IY-100+VRS.AdInPtA)
1205++9024 FD 46 FF     	LD B,(IY-100+VRS.AdInPtA+1)
1206++9027 0A           	LD A,(BC)
1207++9028 A7           	AND A
1208++9029 20 56        	JR NZ,PL1A
1209++902B 57           	LD D,A
1210++902C FD 77 10     	LD (IY-100+VRS.Ns_Base),A
1211++902F FD 6E 04     	LD L,(IY-100+VRS.CrPsPtr)
1212++9032 FD 66 05     	LD H,(IY-100+VRS.CrPsPtr+1)
1213++9035 23           	INC HL
1214++9036 7E           	LD A,(HL)
1215++9037 3C           	INC A
1216++9038 20 0B        	JR NZ,PLNLP
1217++903A
1218++903A              	IF LoopChecker
1219++903A CD EC 88     	CALL CHECKLP
1220++903D              	ENDIF
1221++903D
1222++903D FD 6E 06     	LD L,(IY-100+VRS.LPosPtr)
1223++9040 FD 66 07     	LD H,(IY-100+VRS.LPosPtr+1)
1224++9043 7E           	LD A,(HL)
1225++9044 3C           	INC A
1226++9045 CD 99 8B     PLNLP	CALL SETCPPT
1227++9048 3D           	DEC A
1228++9049 FD CB 9E 4E  	BIT 1,(IY-100+VRS.ModNum)
1229++904D 28 03        	JR Z,NoAlCo
1230++904F              TSSub	EQU $+1
1231++904F D6 D6        	SUB #D6
1232++9051 2F           	CPL
1233++9052              NoAlCo
1234++9052              		;PT2		PT3
1235++9052 3D           PsCalc	DEC A	;ADD A,A	NOP
1236++9053 3D           	DEC A	;ADD A,(HL)	NOP
1237++9054 87           	ADD A,A
1238++9055 5F           	LD E,A
1239++9056 CB 12        	RL D
1240++9058
1241++9058              	IF CurPosCounter
1242++9058 ~            	LD A,L
1243++9058 ~            	SUB (IY-100+VRS.PosSub)
1244++9058 ~            	LD (IY-100+VRS.CurPos),A
1245++9058              	ENDIF
1246++9058
1247++9058 FD 6E FC     	LD L,(IY-100+VRS.PatsPtr)
1248++905B FD 66 FD     	LD H,(IY-100+VRS.PatsPtr+1)
1249++905E 19           	ADD HL,DE
1250++905F FD 5E F6     	LD E,(IY-100+VRS.MODADDR)
1251++9062 FD 56 F7     	LD D,(IY-100+VRS.MODADDR+1)
1252++9065 ED 73 7F 90  	LD (PSP_+1),SP
1253++9069 F9           	LD SP,HL
1254++906A E1           	POP HL
1255++906B 19           	ADD HL,DE
1256++906C 44           	LD B,H
1257++906D 4D           	LD C,L
1258++906E E1           	POP HL
1259++906F 19           	ADD HL,DE
1260++9070 FD 75 00     	LD (IY-100+VRS.AdInPtB),L
1261++9073 FD 74 01     	LD (IY-100+VRS.AdInPtB+1),H
1262++9076 E1           	POP HL
1263++9077 19           	ADD HL,DE
1264++9078 FD 75 02     	LD (IY-100+VRS.AdInPtC),L
1265++907B FD 74 03     	LD (IY-100+VRS.AdInPtC+1),H
1266++907E 31 31 31     PSP_	LD SP,#3131
1267++9081 11 AB FF     PL1A	LD DE,VRS.ChanA+12-100
1268++9084 CD BC 8B     	CALL PTDECOD
1269++9087 FD 71 FE     	LD (IY-100+VRS.AdInPtA),C
1270++908A FD 70 FF     	LD (IY-100+VRS.AdInPtA+1),B
1271++908D
1272++908D FD 35 D7     PL1B	DEC (IY-100+VRS.ChanB+CHP.NtSkCn)
1273++9090 20 12        	JR NZ,PL1C
1274++9092 11 C8 FF     	LD DE,VRS.ChanB+12-100
1275++9095 FD 4E 00     	LD C,(IY-100+VRS.AdInPtB)
1276++9098 FD 46 01     	LD B,(IY-100+VRS.AdInPtB+1)
1277++909B CD BC 8B     	CALL PTDECOD
1278++909E FD 71 00     	LD (IY-100+VRS.AdInPtB),C
1279++90A1 FD 70 01     	LD (IY-100+VRS.AdInPtB+1),B
1280++90A4
1281++90A4 FD 35 F4     PL1C	DEC (IY-100+VRS.ChanC+CHP.NtSkCn)
1282++90A7 20 12        	JR NZ,PL1D
1283++90A9 11 E5 FF     	LD DE,VRS.ChanC+12-100
1284++90AC FD 4E 02     	LD C,(IY-100+VRS.AdInPtC)
1285++90AF FD 46 03     	LD B,(IY-100+VRS.AdInPtC+1)
1286++90B2 CD BC 8B     	CALL PTDECOD
1287++90B5 FD 71 02     	LD (IY-100+VRS.AdInPtC),C
1288++90B8 FD 70 03     	LD (IY-100+VRS.AdInPtC+1),B
1289++90BB
1290++90BB FD 7E 08     PL1D	LD A,(IY-100+VRS.Delay)
1291++90BE FD 77 09     	LD (IY-100+VRS.DelyCnt),A
1292++90C1
1293++90C1 11 9F FF     PL2	LD DE,VRS.ChanA-100
1294++90C4 FD 6E 15     	LD L,(IY-100+VRS.AYREGS+TonA)
1295++90C7 FD 66 16     	LD H,(IY-100+VRS.AYREGS+TonA+1)
1296++90CA CD 94 8E     	CALL CHREGS
1297++90CD FD 75 15     	LD (IY-100+VRS.AYREGS+TonA),L
1298++90D0 FD 74 16     	LD (IY-100+VRS.AYREGS+TonA+1),H
1299++90D3              Ampl	EQU $+1
1300++90D3 3E 3E        	LD A,#3E
1301++90D5 FD 77 1D     	LD (IY-100+VRS.AYREGS+AmplA),A
1302++90D8 11 BC FF     	LD DE,VRS.ChanB-100
1303++90DB FD 6E 17     	LD L,(IY-100+VRS.AYREGS+TonB)
1304++90DE FD 66 18     	LD H,(IY-100+VRS.AYREGS+TonB+1)
1305++90E1 CD 94 8E     	CALL CHREGS
1306++90E4 FD 75 17     	LD (IY-100+VRS.AYREGS+TonB),L
1307++90E7 FD 74 18     	LD (IY-100+VRS.AYREGS+TonB+1),H
1308++90EA 3A D4 90     	LD A,(Ampl)
1309++90ED FD 77 1E     	LD (IY-100+VRS.AYREGS+AmplB),A
1310++90F0 11 D9 FF     	LD DE,VRS.ChanC-100
1311++90F3 FD 6E 19     	LD L,(IY-100+VRS.AYREGS+TonC)
1312++90F6 FD 66 1A     	LD H,(IY-100+VRS.AYREGS+TonC+1)
1313++90F9 CD 94 8E     	CALL CHREGS
1314++90FC FD 75 19     	LD (IY-100+VRS.AYREGS+TonC),L
1315++90FF FD 74 1A     	LD (IY-100+VRS.AYREGS+TonC+1),H
1316++9102 3A D4 90     	LD A,(Ampl)
1317++9105 FD 77 1F     	LD (IY-100+VRS.AYREGS+AmplC),A
1318++9108
1319++9108 FD 7E 10     	LD A,(IY-100+VRS.Ns_Base)
1320++910B FD 86 11     	ADD (IY-100+VRS.AddToNs)
1321++910E FD 77 1B     	LD (IY-100+VRS.AYREGS+Noise),A
1322++9111
1323++9111 FD 7E 12     	LD A,(IY-100+VRS.AddToEn)
1324++9114 5F           	LD E,A
1325++9115 87           	ADD A,A
1326++9116 9F           	SBC A,A
1327++9117 57           	LD D,A
1328++9118 FD 6E 13     	LD L,(IY-100+VRS.EnvBase)
1329++911B FD 66 14     	LD H,(IY-100+VRS.EnvBase+1)
1330++911E 19           	ADD HL,DE
1331++911F FD 5E 0C     	LD E,(IY-100+VRS.CurESld)
1332++9122 FD 56 0D     	LD D,(IY-100+VRS.CurESld+1)
1333++9125 19           	ADD HL,DE
1334++9126 FD 75 20     	LD (IY-100+VRS.AYREGS+Env),L
1335++9129 FD 74 21     	LD (IY-100+VRS.AYREGS+Env+1),H
1336++912C
1337++912C AF           	XOR A
1338++912D FD B6 0F     	OR (IY-100+VRS.CurEDel)
1339++9130 C8           	RET Z
1340++9131 FD 35 0F     	DEC (IY-100+VRS.CurEDel)
1341++9134 C0           	RET NZ
1342++9135 FD 7E 0E     	LD A,(IY-100+VRS.Env_Del)
1343++9138 FD 77 0F     	LD (IY-100+VRS.CurEDel),A
1344++913B FD 6E 0A     	LD L,(IY-100+VRS.ESldAdd)
1345++913E FD 66 0B     	LD H,(IY-100+VRS.ESldAdd+1)
1346++9141 19           	ADD HL,DE
1347++9142 C3 AE 8B     	JP SETESLD
1348++9145
1349++9145 FD 21 7D 92  PLAY    LD IY,VARS1+100
1350++9149 CD 0B 90     	CALL PLAY_
1351++914C 3A 18 92     	LD A,(is_ts)
1352++914F A7           	AND A
1353++9150 28 07        	JR Z,PL_nts
1354++9152 FD 21 04 93  	LD IY,VARS2+100
1355++9156 CD 0B 90     	CALL PLAY_
1356++9159              PL_nts
1357++9159              	IF Basic
1358++9159 FD 21 3A 5C  	LD IY,#5C3A
1359++915D              	ENDIF
1360++915D
1361++915D 01 FD FF     ROUT	LD BC,#FFFD
1362++9160 3A 18 92     	LD A,(is_ts)
1363++9163 A7           	AND A
1364++9164 28 02        	JR Z,r_nts ;keep old standard
1365++9166 ED 41        	OUT (C),B
1366++9168 08           r_nts	EX AF,AF'
1367++9169
1368++9169              	IF ACBBAC
1369++9169 ~            	LD IX,VARS1+VRS.AYREGS
1370++9169              	ELSE
1371++9169 21 92 92     	LD HL,VARS1+VRS.AYREGS
1372++916C              	ENDIF
1373++916C
1374++916C CD 78 91     	CALL ROUT_
1375++916F 08           	EX AF,AF'
1376++9170 C8           	RET Z
1377++9171 42           	LD B,D
1378++9172 2F           	CPL
1379++9173 ED 79        	OUT (C),A
1380++9175
1381++9175              	IF ACBBAC
1382++9175 ~            	LD IX,VARS2+VRS.AYREGS
1383++9175              	ELSE
1384++9175 21 19 93     	LD HL,VARS2+VRS.AYREGS
1385++9178              	ENDIF
1386++9178
1387++9178              ROUT_
1388++9178              	IF ACBBAC
1389++9178 ~            	LD A,(SETUP)
1390++9178 ~            	AND 12
1391++9178 ~            	JR Z,ABC
1392++9178 ~            	ADD A,CHTABLE
1393++9178 ~            	LD E,A
1394++9178 ~            	ADC A,CHTABLE/256
1395++9178 ~            	SUB E
1396++9178 ~            	LD D,A
1397++9178 ~            	LD B,0
1398++9178 ~            	PUSH IX
1399++9178 ~            	POP HL
1400++9178 ~            	LD A,(DE)
1401++9178 ~            	INC DE
1402++9178 ~            	LD C,A
1403++9178 ~            	ADD HL,BC
1404++9178 ~            	LD A,(IX+TonB)
1405++9178 ~            	LD C,(HL)
1406++9178 ~            	LD (IX+TonB),C
1407++9178 ~            	LD (HL),A
1408++9178 ~            	INC HL
1409++9178 ~            	LD A,(IX+TonB+1)
1410++9178 ~            	LD C,(HL)
1411++9178 ~            	LD (IX+TonB+1),C
1412++9178 ~            	LD (HL),A
1413++9178 ~            	LD A,(DE)
1414++9178 ~            	INC DE
1415++9178 ~            	LD C,A
1416++9178 ~            	ADD HL,BC
1417++9178 ~            	LD A,(IX+AmplB)
1418++9178 ~            	LD C,(HL)
1419++9178 ~            	LD (IX+AmplB),C
1420++9178 ~            	LD (HL),A
1421++9178 ~            	LD A,(DE)
1422++9178 ~            	INC DE
1423++9178 ~            	LD (RxCA1),A
1424++9178 ~            	XOR 8
1425++9178 ~            	LD (RxCA2),A
1426++9178 ~            	LD A,(DE)
1427++9178 ~            	AND (IX+Mixer)
1428++9178 ~            	LD E,A
1429++9178 ~            	LD A,(IX+Mixer)
1430++9178 ~            RxCA1	DB #E6
1431++9178 ~            	AND %010010
1432++9178 ~            	OR E
1433++9178 ~            	LD E,A
1434++9178 ~            	LD A,(IX+Mixer)
1435++9178 ~            	AND %010010
1436++9178 ~            RxCA2	OR E
1437++9178 ~            	OR E
1438++9178 ~            	LD (IX+Mixer),A
1439++9178 ~            ABC
1440++9178              	ENDIF
1441++9178
1442++9178 AF           	XOR A
1443++9179 11 BF FF     	LD DE,#FFBF
1444++917C
1445++917C              	IF ACBBAC
1446++917C ~            	LD BC,#FFFD
1447++917C ~            	PUSH IX
1448++917C ~            	POP HL
1449++917C              	ENDIF
1450++917C
1451++917C ED 79        LOUT	OUT (C),A
1452++917E 43           	LD B,E
1453++917F ED A3        	OUTI
1454++9181 42           	LD B,D
1455++9182 3C           	INC A
1456++9183 FE 0D        	CP 13
1457++9185 20 F5        	JR NZ,LOUT
1458++9187 ED 79        	OUT (C),A
1459++9189 7E           	LD A,(HL)
1460++918A A7           	AND A
1461++918B F8           	RET M
1462++918C 43           	LD B,E
1463++918D ED 79        	OUT (C),A
1464++918F C9           	RET
1465++9190
1466++9190              	IF ACBBAC
1467++9190 ~            CHTABLE	EQU $-4
1468++9190 ~            	DB 4,5,15,%001001,0,7,7,%100100
1469++9190              	ENDIF
1470++9190
1471++9190 64           NT_DATA	DB (T_NEW_0-T1_)*2
1472++9191 2A           	DB TCNEW_0-T_
1473++9192 65           	DB (T_OLD_0-T1_)*2+1
1474++9193 00           	DB TCOLD_0-T_
1475++9194 01           	DB (T_NEW_1-T1_)*2+1
1476++9195 0C           	DB TCNEW_1-T_
1477++9196 01           	DB (T_OLD_1-T1_)*2+1
1478++9197 0C           	DB TCOLD_1-T_
1479++9198 94           	DB (T_NEW_2-T1_)*2
1480++9199 35           	DB TCNEW_2-T_
1481++919A 30           	DB (T_OLD_2-T1_)*2
1482++919B 0E           	DB TCOLD_2-T_
1483++919C 60           	DB (T_NEW_3-T1_)*2
1484++919D 20           	DB TCNEW_3-T_
1485++919E 60           	DB (T_OLD_3-T1_)*2
1486++919F 21           	DB TCOLD_3-T_
1487++91A0
1488++91A0              T_
1489++91A0
1490++91A0 01 05 09 0B  TCOLD_0	DB #00+1,#04+1,#08+1,#0A+1,#0C+1,#0E+1,#12+1,#14+1
1490++91A4 0D 0F 13 15
1491++91A8 19 25 3D 00  	DB #18+1,#24+1,#3C+1,0
1492++91AC 5D 00        TCOLD_1	DB #5C+1,0
1493++91AE 31 37 4D 53  TCOLD_2	DB #30+1,#36+1,#4C+1,#52+1,#5E+1,#70+1,#82,#8C,#9C
1493++91B2 5F 71 82 8C
1493++91B6 9C
1494++91B7 9E A0 A6 A8  	DB #9E,#A0,#A6,#A8,#AA,#AC,#AE,#AE,0
1494++91BB AA AC AE AE
1494++91BF 00
1495++91C0 57           TCNEW_3	DB #56+1
1496++91C1 1F 23 25 29  TCOLD_3	DB #1E+1,#22+1,#24+1,#28+1,#2C+1,#2E+1,#32+1,#BE+1,0
1496++91C5 2D 2F 33 BF
1496++91C9 00
1497++91CA 1D 21 23 27  TCNEW_0	DB #1C+1,#20+1,#22+1,#26+1,#2A+1,#2C+1,#30+1,#54+1
1497++91CE 2B 2D 31 55
1498++91D2 BD BF 00     	DB #BC+1,#BE+1,0
1499++91D5              TCNEW_1 EQU TCOLD_1
1500++91D5 1B 21 25 29  TCNEW_2	DB #1A+1,#20+1,#24+1,#28+1,#2A+1,#3A+1,#4C+1,#5E+1
1500++91D9 2B 3B 4D 5F
1501++91DD BB BD BF 00  	DB #BA+1,#BC+1,#BE+1,0
1502++91E1
1503++91E1              PT3EMPTYORN EQU $-1
1504++91E1 01 00        	DB 1,0
1505++91E3
1506++91E3              ;first 12 values of tone tables (packed)
1507++91E3
player.asm(1508): warning: value 0xDD8 is truncated to 8bit value: 0xD8
1508++91E3 0D D8        T_PACK	DB #06EC*2/256,#06EC*2
1509++91E5 69           	DB #0755-#06EC
1510++91E6 70           	DB #07C5-#0755
1511++91E7 76           	DB #083B-#07C5
1512++91E8 7D           	DB #08B8-#083B
1513++91E9 85           	DB #093D-#08B8
1514++91EA 8D           	DB #09CA-#093D
1515++91EB 95           	DB #0A5F-#09CA
1516++91EC 9D           	DB #0AFC-#0A5F
1517++91ED A8           	DB #0BA4-#0AFC
1518++91EE B1           	DB #0C55-#0BA4
1519++91EF BB           	DB #0D10-#0C55
player.asm(1520): warning: value 0xCDA is truncated to 8bit value: 0xDA
1520++91F0 0C DA        	DB #066D*2/256,#066D*2
1521++91F2 62           	DB #06CF-#066D
1522++91F3 68           	DB #0737-#06CF
1523++91F4 6D           	DB #07A4-#0737
1524++91F5 75           	DB #0819-#07A4
1525++91F6 7B           	DB #0894-#0819
1526++91F7 83           	DB #0917-#0894
1527++91F8 8A           	DB #09A1-#0917
1528++91F9 92           	DB #0A33-#09A1
1529++91FA 9C           	DB #0ACF-#0A33
1530++91FB A4           	DB #0B73-#0ACF
1531++91FC AF           	DB #0C22-#0B73
1532++91FD B8           	DB #0CDA-#0C22
player.asm(1533): warning: value 0xE08 is truncated to 8bit value: 0x08
1533++91FE 0E 08        	DB #0704*2/256,#0704*2
1534++9200 6A           	DB #076E-#0704
1535++9201 72           	DB #07E0-#076E
1536++9202 78           	DB #0858-#07E0
1537++9203 7E           	DB #08D6-#0858
1538++9204 86           	DB #095C-#08D6
1539++9205 90           	DB #09EC-#095C
1540++9206 96           	DB #0A82-#09EC
1541++9207 A0           	DB #0B22-#0A82
1542++9208 AA           	DB #0BCC-#0B22
1543++9209 B4           	DB #0C80-#0BCC
1544++920A BE           	DB #0D3E-#0C80
player.asm(1545): warning: value 0xFC0 is truncated to 8bit value: 0xC0
1545++920B 0F C0        	DB #07E0*2/256,#07E0*2
1546++920D 78           	DB #0858-#07E0
1547++920E 88           	DB #08E0-#0858
1548++920F 80           	DB #0960-#08E0
1549++9210 90           	DB #09F0-#0960
1550++9211 98           	DB #0A88-#09F0
1551++9212 A0           	DB #0B28-#0A88
1552++9213 B0           	DB #0BD8-#0B28
1553++9214 A8           	DB #0C80-#0BD8
1554++9215 E0           	DB #0D60-#0C80
1555++9216 B0           	DB #0E10-#0D60
1556++9217 E8           	DB #0EF8-#0E10
1557++9218
1558++9218              ;vars from here can be stripped
1559++9218              ;you can move VARS to any other address
1560++9218
1561++9218              VARS
1562++9218
1563++9218 00           is_ts	DB 0
1564++9219
1565++9219              ;ChannelsVars
1566++9219              	STRUCT	CHP
1567++9219 ~            ;reset group
1568++9219 ~            PsInOr	DB 0
1569++9219 ~            PsInSm	DB 0
1570++9219 ~            CrAmSl	DB 0
1571++9219 ~            CrNsSl	DB 0
1572++9219 ~            CrEnSl	DB 0
1573++9219 ~            TSlCnt	DB 0
1574++9219 ~            CrTnSl	DW 0
1575++9219 ~            TnAcc	DW 0
1576++9219 ~            COnOff	DB 0
1577++9219 ~            ;reset group
1578++9219 ~
1579++9219 ~            OnOffD	DB 0
1580++9219 ~
1581++9219 ~            ;IX for PTDECOD here (+12)
1582++9219 ~            OffOnD	DB 0
1583++9219 ~            OrnPtr	DW 0
1584++9219 ~            SamPtr	DW 0
1585++9219 ~            NNtSkp	DB 0
1586++9219 ~            Note	DB 0
1587++9219 ~            SlToNt	DB 0
1588++9219 ~            Env_En	DB 0
1589++9219 ~            Flags	DB 0
1590++9219 ~             ;Enabled - 0, SimpleGliss - 2
1591++9219 ~            TnSlDl	DB 0
1592++9219 ~            TSlStp	DW 0
1593++9219 ~            TnDelt	DW 0
1594++9219 ~            NtSkCn	DB 0
1595++9219 ~            Volume	DB 0
1596++9219              	ENDS
1597++9219
1598++9219              	STRUCT	VRS
1599++9219 ~
1600++9219 ~            ;IF not works in STRUCT in SjASM :(
1601++9219 ~            ;	IF CurPosCounter
1602++9219 ~            CurPos	DB 0
1603++9219 ~            PosSub	DB 0
1604++9219 ~            ;	ENDIF
1605++9219 ~
1606++9219 ~            ModNum	DB 0 ;bit0: ChipNum
1607++9219 ~            	     ;bit1: 1-reversed patterns order (AlCo TS)
1608++9219 ~
1609++9219 ~            ChanA	DS CHP
1610++9219 ~            ChanB	DS CHP
1611++9219 ~            ChanC	DS CHP
1612++9219 ~
1613++9219 ~            ;GlobalVars
1614++9219 ~            MODADDR	DW 0
1615++9219 ~            OrnPtrs	DW 0
1616++9219 ~            SamPtrs	DW 0
1617++9219 ~            PatsPtr	DW 0
1618++9219 ~            AdInPtA	DW 0
1619++9219 ~            AdInPtB	DW 0
1620++9219 ~            AdInPtC	DW 0
1621++9219 ~            CrPsPtr	DW 0
1622++9219 ~            LPosPtr	DW 0
1623++9219 ~            Delay	DB 0
1624++9219 ~            DelyCnt	DB 0
1625++9219 ~            ESldAdd	DW 0
1626++9219 ~            CurESld	DW 0
1627++9219 ~            Env_Del	DB 0
1628++9219 ~            CurEDel	DB 0
1629++9219 ~            Ns_Base	DB 0
1630++9219 ~            AddToNs	DB 0
1631++9219 ~            AddToEn	DB 0
1632++9219 ~            EnvBase	DW 0
1633++9219 ~            AYREGS	DS 14
1634++9219              	ENDS
1635++9219
1636++9219 00 00 00...  VARS1	DS VRS
1637++92A0 00 00 00...  VARS2	DS VRS
1638++9327
1639++9327              VT_	EQU $-16
1640++9327 00 00 00...  	DS 256-16 ;CreatedVolumeTableAddress
1641++9417
1642++9417              T1_	EQU VT_+16 ;Tone tables data depacked here
1643++9417
1644++9417              T_OLD_1	EQU T1_
1645++9417              T_OLD_2	EQU T_OLD_1+24
1646++9417              T_OLD_3	EQU T_OLD_2+24
1647++9417              T_OLD_0	EQU T_OLD_3+2
1648++9417              T_NEW_0	EQU T_OLD_0
1649++9417              T_NEW_1	EQU T_OLD_1
1650++9417              T_NEW_2	EQU T_NEW_0+24
1651++9417              T_NEW_3	EQU T_OLD_3
1652++9417
1653++9417              PT2EMPTYORN EQU VT_+31 ;1,0,0 sequence
1654++9417
1655++9417 00 00 00...  NT_	DS 192 ;CreatedNoteTableAddress
1656++94D7
1657++94D7              VAR0END	EQU VT_+16 ;INIT zeroes from VARS to VAR0END-1
1658++94D7
1659++94D7              VARSEND EQU $
1660++94D7
1661++94D7              MDLADDR EQU outputBuffer
1662++94D7
1663++94D7              ;Release 0 steps:
1664++94D7              ;04/21/2007
1665++94D7              ;Works start (PTxPlay adaptation); first beta.
1666++94D7              ;04/22/2007
1667++94D7              ;Job finished; beta-testing.
1668++94D7              ;04/23/2007
1669++94D7              ;PT v3.7 TS mode corrected (after AlCo remarks).
1670++94D7              ;04/29/2007
1671++94D7              ;Added 1.XX and 2.XX special commands interpretation for PT3
1672++94D7              ;modules of v3.7+.
1673++94D7
1674++94D7              ;Size (minimal build for ZX Spectrum):
1675++94D7              ;Code block #908 bytes
1676++94D7              ;Variables #2BF bytes (can be stripped)
1677++94D7              ;Total size #908+#2BF=#BC7 (3015) bytes
1678++94D7              	ENDMODULE
# file closed: player/player.asm
  77++94D7                  ENDIF
# file closed: player/vortex-processor.asm
  39+ 94D7                      include "player/mod-processor.asm"
# file opened: player/mod-processor.asm
   1++94D7                  MODULE ModProcessor
   2++94D7                  ifdef GS
   3++94D7 ~
   4++94D7 ~                macro GS_WaitCommand2
   5++94D7 ~            .wait
   6++94D7 ~                in a, (CMD)
   7++94D7 ~                rrca
   8++94D7 ~                jr c, .wait
   9++94D7 ~                endm
  10++94D7 ~
  11++94D7 ~                macro GS_SendCommand2 nn
  12++94D7 ~                ld a, nn
  12++94D7 ~              out (CMD), a
  13++94D7 ~                endm
  14++94D7 ~
  15++94D7 ~            play:
  16++94D7 ~                ld a, 255
  17++94D7 ~                ld (oldminutes), a
  18++94D7 ~
  19++94D7 ~                call Console.waitForKeyUp
  20++94D7 ~
  21++94D7 ~                ld hl, Gopher.requestbuffer
  21++94D7 ~              call DialogBox.msgNoWait
  22++94D7 ~
  23++94D7 ~                ;ld a, 1, (Render.play_next), a
  24++94D7 ~            	xor a
  25++94D7 ~            	ld (last_song_position),a
  26++94D7 ~
  27++94D7 ~                ld h, #00, a, 32
  28++94D7 ~                call TextMode.fillLine
  29++94D7 ~                ld de, #0001
  29++94D7 ~              call TextMode.gotoXY
  30++94D7 ~                ld hl, message
  30++94D7 ~              call TextMode.printZ
  31++94D7 ~                ld a, #00
  32++94D7 ~                call TextMode.highlightLine
  33++94D7 ~
  34++94D7 ~            .loop
  35++94D7 ~                halt
  36++94D7 ~                xor a
  37++94D7 ~                call Console.peekC
  38++94D7 ~                cp Console.BACKSPACE
  39++94D7 ~                jp z, .stopKey
  40++94D7 ~            	cp SPACE
  41++94D7 ~                jp z, .playNext
  42++94D7 ~
  43++94D7 ~                call printRTC
  44++94D7 ~
  45++94D7 ~               ;проверка что MOD начал играть сначала
  46++94D7 ~                GS_SendCommand2 CMD_GET_SONG_POSITION
  47++94D7 ~                GS_WaitCommand2
  48++94D7 ~            	ld a,(last_song_position) ;предыдущая позиция
  49++94D7 ~            	ld c,a
  50++94D7 ~            	in a,(DATA) ;текущая позиция
  51++94D7 ~            	ld (last_song_position),a
  52++94D7 ~            	cp c
  53++94D7 ~            	jr nc, .loop ;если не меньше, продолжаем играть
  54++94D7 ~            .playNext
  55++94D7 ~                ld a, 1, (Render.play_next), a ;флаг что надо будет играть следующий файл
  56++94D7 ~            .stop
  57++94D7 ~                call GeneralSound.stopModule
  58++94D7 ~
  59++94D7 ~                call Console.waitForKeyUp
  60++94D7 ~                ret
  61++94D7 ~            .stopKey
  62++94D7 ~                xor a
  62++94D7 ~              ld (Render.play_next), a ;флаг что не надо играть следующий файл
  63++94D7 ~                jr .stop
  64++94D7 ~
  65++94D7 ~
  66++94D7 ~            message db "Playing MODs [SPACE] for next song [BACKSPACE] for stop playing", 0
  67++94D7 ~
  68++94D7 ~
  69++94D7 ~            CMD_GET_SONG_POSITION     = #60
  70++94D7 ~            last_song_position db 0
  71++94D7 ~
  72++94D7 ~            ;; Control ports
  73++94D7 ~            CMD  = 187
  74++94D7 ~            DATA = 179
  75++94D7                  endif
  76++94D7                  ENDMODULE
  77++94D7
# file closed: player/mod-processor.asm
  40+ 94D7                      include "screen/screen.asm"
# file opened: screen/screen.asm
   1++94D7                  module ScreenViewer
   2++94D7              display:
   3++94D7 CD 48 68         call Console.waitForKeyUp
   4++94DA 3E 07            ld a, 7
   4++94DC CD 7C 88       call Memory.setPage
   5++94DF 21 FC 94 11      ld hl, outputBuffer, de, #c000, bc, 6912
   5++94E3 00 C0 01 00
   5++94E7 1B
   5++94E8 ED B0          ldir
   6++94EA CD BE 61         call TextMode.disable
   7++94ED              .wait
   8++94ED 76           	halt
   9++94EE AF               xor a
   9++94EF DB FE          in a, (#fe)
   9++94F1 2F             cpl
   9++94F2 E6 1F          and 31
   9++94F4 28 F7          jr z, .wait
  10++94F6 CD 19 60         call TextMode.cls
  11++94F9 C3 00 70         jp History.back
  12++94FC
  13++94FC                  endmodule
# file closed: screen/screen.asm
  41+ 94FC              start:
  42+ 94FC              outputBuffer:
  43+ 94FC F3                   di
  44+ 94FD AF                   xor a
  44+ 94FE 32 6A 5C       ld (#5c6a), a  ; Thank you, Mario Prato, for feedback
  45+ 9501 32 00 5C             ld (#5c00),a
  46+ 9504 31 00 60             ld sp, asmOrg
  47+ 9507 CD 72 88             call Memory.init
  48+ 950A AF                   xor a
  48+ 950B D3 FE          out (#fe),a
  49+ 950D FB                   ei
  50+ 950E
  51+ 950E 3E 07                ld a, 7
  51+ 9510 CD 7C 88       call Memory.setPage
  52+ 9513                      ;; Logo
  53+ 9513 21 4E 95 06          ld hl, logo, b, Dos.FMODE_READ
  53+ 9517 01
  53+ 9518 CD EF 69       call Dos.fopen
  54+ 951B F5                   push af
  55+ 951C 21 00 C0 01          ld hl, #c000, bc, 6912
  55+ 9520 00 1B
  55+ 9522 CD DC 6A       call Dos.fread
  56+ 9525 F1                   pop af
  57+ 9526 CD C8 6A             call Dos.fclose
  58+ 9529
  59+ 9529 06 32                ld b, 50
  60+ 952B 76           1       halt
  61+ 952C 10 FD                djnz 1b
  62+ 952E                  ENDIF
  63+ 952E
  64+ 952E CD 03 60         call TextMode.init
  65+ 9531 21 3D 95     	ld hl, initing
  65+ 9534 CD 83 60       call TextMode.printZ
  66+ 9537 CD 37 85       	call Wifi.init
  67+ 953A C3 6D 70         jp History.home
  68+ 953D
  69+ 953D 49 6E 69 74  initing db "Initing Wifi...", "\r", 0
  69+ 9541 69 6E 67 20
  69+ 9545 57 69 66 69
  69+ 9549 2E 2E 2E 0D
  69+ 954D 00
  70+ 954E 62 72 6F 77  logo    db "browser/logo.scr", 0
  70+ 9552 73 65 72 2F
  70+ 9556 6C 6F 67 6F
  70+ 955A 2E 73 63 72
  70+ 955E 00
  71+ 955F 62 72 6F 77  creds   db "browser/auth.pwd", 0
  71+ 9563 73 65 72 2F
  71+ 9567 61 75 74 68
  71+ 956B 2E 70 77 64
  71+ 956F 00
  72+ 9570              outputBuffer2:
  73+ 9570 41 54 45 30      db  "ATE0", 0
  73+ 9574 00
  74+ 9575
  75+ 9575                  display "ENDS: ", $
  76+ 9575                  display "Buff size", #ffff - $
  77+ 9575                  IFDEF NEDOOS
  78+ 9575 ~                    savebin "moon.com", asmOrg, $ - asmOrg
  79+ 9575                  ELSE
  80+ 9575              		IFDEF TRDOS
  81+ 9575              			SAVETRD "MOONR.TRD",|"moon.C",asmOrg, $ - asmOrg
  82+ 9575              		ELSE
  83+ 9575 ~            			savebin "moon.bin", asmOrg, $ - asmOrg
  84+ 9575              	    	ENDIF
  85+ 9575                  ENDIF
  86+ 9575
# file closed: main-all.asm
  17  9575                  ENDIF
# file closed: main.asm
