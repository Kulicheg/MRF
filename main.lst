# file opened: main.asm
   1  0000                  DEFINE TCP_BUF_SIZE 1024
   2  0000              ; Generate version string
   3  0000                  LUA ALLPASS
   4  0000 ~                v = tostring(sj.get_define("V"))
   5  0000 ~                maj = string.sub(v, 1,1)
   6  0000 ~                min = string.sub(v, 2,2)
   7  0000 ~                sj.insert_define("VERSION_STRING", "\"" .. maj .. "." .. min .. "\"")
   8  0000 ~
   9  0000 ~                b = tostring(sj.get_define("BLD"))
  10  0000 ~                sj.insert_define("BUILD_STRING", "\"" .. b .. "\"")
  11  0000                  ENDLUA
  12  0000
  13  0000                  IFNDEF MSX
  14  0000                  device	zxspectrum128
  15  0000                  IFDEF NEDOOS
  16  0000 ~            	DEFINE CRLF "\r\n"
  17  0000 ~                    MODULE nos
  18  0000 ~                        include "../_sdk/sysdefs.asm"
  19  0000 ~                    ENDMODULE
  20  0000 ~                    org nos.PROGSTART
  21  0000                      ELSE
  22  0000              	DEFINE CRLF "\r"
  23  0000                      org 24576
  24  6000                  ENDIF
  25  6000              asmOrg:
  26  6000                  align 256
  27  6000 C3 40 9C         jp start
  28  6003                  include "vdp/index.asm"
# file opened: vdp/index.asm
   1+ 6003                  IFDEF TIMEX
   2+ 6003 ~                include "timex.asm"
   3+ 6003                  ENDIF
   4+ 6003
   5+ 6003                  IFDEF TIMEX80
   6+ 6003 ~                include "timex80.asm"
   7+ 6003                  ENDIF
   8+ 6003
   9+ 6003                  IFDEF ZXSCR
  10+ 6003                  include "zx.asm"
# file opened: vdp/zx.asm
   1++6003              COLOR=1
   2++6003              ;; Usual speccy screen driver
   3++6003                  module TextMode
   4++6003              init:
   5++6003 21 D5 61 06      ld hl, font_file, b, Dos.FMODE_READ
   5++6007 01
   6++6008 CD 64 6B         call Dos.fopen
   7++600B F5               push af
   8++600C 01 00 08 21      ld bc, 2048, hl, font64
   8++6010 00 40
   9++6012 CD 51 6C         call Dos.fread
  10++6015 F1               pop af
  11++6016 CD 3D 6C         call Dos.fclose
  12++6019 AF           	xor a
  12++601A D3 FE          out (#fe), a
  13++601C C9           	ret
  14++601D              cls:
  15++601D 11 00 00         ld de, 0
  15++6020 CD 3A 60       call gotoXY
  16++6023 3E 07            ld a, 7
  16++6025 CD CA 8F       call Memory.setPage
  17++6028 AF               xor a
  17++6029 D3 FE          out (#fe), a
  18++602B 21 00 C0 11      ld hl, #c000, de, #c001, bc, 6911, (hl), a
  18++602F 01 C0 01 FF
  18++6033 1A 77
  18++6035 ED B0          ldir
  19++6037 C3 CA 8F         jp Memory.setPage
  20++603A
  21++603A
  22++603A              ; Set console coordinates
  23++603A              ; d = row(0..23), e = column (0..63)
  24++603A              gotoXY:
  25++603A              	;rr e;;;
  26++603A CB 3B        	srl e
  27++603C 3E 00        	ld a, 0
  28++603E 32 62 63     	ld (half_tile_screen), a
  29++6041 ED 53 60 63      ld (col_screen), de
  30++6045 C9               ret
  31++6046
  32++6046              disable:
  33++6046                  ; Nothing to disable
  34++6046 C9               ret
  35++6047
  36++6047              ; H - line
  37++6047              ; A - char
  38++6047              fillLine:
  39++6047 F5               push af
  40++6048 54 1E 00         ld d, h, e, 0
  40++604B CD 3A 60       call gotoXY
  41++604E F1               pop af
  42++604F 21 69 63 11      ld hl, fill_buff, de, fill_buff + 1, bc, 63, (hl), a
  42++6053 6A 63 01 3F
  42++6057 00 77
  42++6059 ED B0          ldir
  43++605B 21 69 63         ld hl, fill_buff
  43++605E C3 BC 60       jp printZ
  44++6061
  45++6061              usualLine:
  46++6061 47               ld b, a
  47++6062 0E 00            ld c, 0
  48++6064 CD 79 61         call bc_to_attr
  49++6067 3E 07            ld a, 7
  49++6069 CD CA 8F       call Memory.setPage
  50++606C 36 07            ld (hl), #7
  51++606E 54 5D            ld de, hl
  52++6070 13               inc de
  53++6071 01 1F 00         ld bc, 31
  54++6074 ED B0            ldir
  55++6076 AF               xor a
  55++6077 CD CA 8F       call Memory.setPage
  56++607A C9               ret
  57++607B
  58++607B              highlightLine:
  59++607B 47               ld b, a
  60++607C 0E 00            ld c, 0
  61++607E CD 79 61         call bc_to_attr
  62++6081 3E 07            ld a, 7
  62++6083 CD CA 8F       call Memory.setPage
  63++6086 36 0C            ld (hl), #C
  64++6088 54 5D            ld de, hl
  65++608A 13               inc de
  66++608B 01 1F 00         ld bc, 31
  67++608E ED B0            ldir
  68++6090 AF               xor a
  68++6091 CD CA 8F       call Memory.setPage
  69++6094 C9               ret
  70++6095
  71++6095              mvCR
  72++6095 ED 5B 60 63  	ld de, (col_screen)
  73++6099 14           	inc d
  74++609A 1E 00        	ld e, 0
  75++609C 3E 00        	ld a, 0
  76++609E 32 62 63     	ld (half_tile_screen), a
  77++60A1 C3 3A 60     	jp gotoXY
  78++60A4
  79++60A4              ; Print just one symbol
  80++60A4              ; A - symbol
  81++60A4              putC
  82++60A4 FE 0D            cp 13
  82++60A6 CA 95 60       jp z, mvCR
  83++60A9 21 68 63     	ld hl, single_symbol
  84++60AC 77           	ld (hl), a
  85++60AD 3E 07        	ld a, 7
  85++60AF CD CA 8F       call Memory.setPage
  86++60B2 21 67 63         ld hl, single_symbol_print
  87++60B5 CD C7 60         call printL
  88++60B8 AF               xor a
  88++60B9 C3 CA 8F       jp Memory.setPage
  89++60BC
  90++60BC              ; Put string
  91++60BC              ; hl - string pointer that's begins from symbol count
  92++60BC              printZ
  93++60BC 7E               ld a, (hl)
  93++60BD A7             and a
  93++60BE C8             ret z
  94++60BF E5               push hl
  95++60C0 CD A4 60         call putC
  96++60C3 E1               pop hl
  97++60C4 23               inc hl
  98++60C5 18 F5            jr printZ
  99++60C7
 100++60C7              printL
 101++60C7 7E                   ld	a, (hl)
 102++60C8 A7           		and	a
 103++60C9 C8           		ret	z
 104++60CA
 105++60CA E5           		push	hl
 106++60CB CD 75 61     		call	calc_addr_attr
 107++60CE 3A 63 63     		ld	a,(attr_screen)
 108++60D1 77           		ld	(hl),a
 109++60D2 E1           		pop	hl
 110++60D3
 111++60D3 CD 64 61     		call	calc_addr_scr
 112++60D6
 113++60D6 3A 62 63     		ld	a,(half_tile_screen)
 114++60D9 CB 47        		bit	0,a
 115++60DB 7E           		ld	a,(hl)
 116++60DC C2 10 61     		jp	nz,print64_4
 117++60DF              print64_3
 118++60DF F5                   push    af
 119++60E0 E5           		push	hl
 120++60E1 CD 75 61     		call	calc_addr_attr
 121++60E4 3A 63 63     		ld	a,(attr_screen)
 122++60E7 77           		ld	(hl),a
 123++60E8 E1           		pop	hl
 124++60E9
 125++60E9 23                   inc     hl
 126++60EA E5                   push    hl
 127++60EB
 128++60EB 7E                   ld      a,(hl)
 129++60EC 6F           		ld	l,a
 130++60ED 26 00        		ld	h,0
 131++60EF 29           		add	hl,hl
 132++60F0 29           		add	hl,hl
 133++60F1 29           		add	hl,hl
 134++60F2 01 00 40             ld      bc,font64
 135++60F5 09                   add     hl,bc
 136++60F6
 137++60F6 D5                   push    de
 138++60F7
 139++60F7 06 06                ld      b,6
 140++60F9 AF           		xor	a
 141++60FA 12           		ld	(de),a
 142++60FB              print64_1
 143++60FB 14           	inc     d
 144++60FC 7E           	ld      a,(hl)
 145++60FD E6 F0        	and	#f0
 146++60FF 12           	ld      (de),a
 147++6100 23           	inc     hl
 148++6101 10 F8        	djnz    print64_1
 149++6103
 150++6103 14           	inc	d
 151++6104 AF           	xor	a
 152++6105 12           	ld	(de),a
 153++6106
 154++6106 3E 01        	ld	a,1
 155++6108 32 62 63     	ld	(half_tile_screen),a
 156++610B
 157++610B D1           	pop     de
 158++610C E1           	pop     hl
 159++610D F1           	pop     af
 160++610E
 161++610E 3D           	dec     a
 162++610F C8           	ret     z
 163++6110
 164++6110              print64_4
 165++6110 F5           	push    af
 166++6111
 167++6111 23           	inc     hl
 168++6112 E5           	push    hl
 169++6113
 170++6113 7E           	ld      a,(hl)
 171++6114 6F           	ld	l,a
 172++6115 26 00        	ld	h,0
 173++6117 29           	add	hl,hl
 174++6118 29           	add	hl,hl
 175++6119 29           	add	hl,hl
 176++611A 01 00 40     	ld      bc,font64
 177++611D 09           	add     hl,bc
 178++611E
 179++611E D5           	push    de
 180++611F
 181++611F 06 06        	ld      b,6
 182++6121 AF           	xor	a
 183++6122 12           	ld	(de),a
 184++6123              print64_2
 185++6123 14           	inc     d
 186++6124 7E           	ld      a,(hl)
 187++6125 E6 0F        	and     #0f
 188++6127 4F           	ld      c,a
 189++6128 1A           	ld      a,(de)
 190++6129 B1           	or      c
 191++612A 12           	ld      (de),a
 192++612B 23           	inc     hl
 193++612C 10 F5        	djnz    print64_2
 194++612E
 195++612E 14           	inc	d
 196++612F AF           	xor	a
 197++6130 12           	ld	(de),a
 198++6131
 199++6131 32 62 63     	ld	(half_tile_screen),a
 200++6134
 201++6134 D1           	pop     de
 202++6135
 203++6135 CD 3F 61     	call	move_cr64
 204++6138
 205++6138 E1           	pop     hl
 206++6139 F1           	pop     af
 207++613A 3D           	dec     a
 208++613B
 209++613B C2 DF 60     	jp      nz,print64_3
 210++613E
 211++613E C9           	ret
 212++613F
 213++613F              ; move cursor
 214++613F              move_cr64
 215++613F 13           	inc	de
 216++6140
 217++6140 21 60 63     	ld	hl,col_screen
 218++6143 34           	inc	(hl)
 219++6144 7E           	ld	a,(hl)
 220++6145
 221++6145 FE 20        	cp	32
 222++6147 D8           	ret	c
 223++6148
 224++6148 AF           	xor	a
 225++6149 32 62 63     	ld	(half_tile_screen),a
 226++614C 77           	ld	(hl),a
 227++614D 4F           	ld	c,a
 228++614E
 229++614E 23           	inc	hl
 230++614F 34           	inc	(hl)
 231++6150 7E           	ld	a,(hl)
 232++6151 47           	ld	b,a
 233++6152
 234++6152 FE 18        	cp	24
 235++6154 DA 60 61     	jp	c,move_cr64_01
 236++6157
 237++6157 3E 17        	ld	a,23
 238++6159 77           	ld	(hl),a
 239++615A 47           	ld	b,a
 240++615B
 241++615B C5           	push	bc
 242++615C CD 89 61     	call	scroll_up8
 243++615F C1           	pop	bc
 244++6160
 245++6160              move_cr64_01
 246++6160 CD 64 61     	call	calc_addr_scr
 247++6163 C9           	ret
 248++6164
 249++6164              calc_addr_scr
 250++6164 78           	ld      a,b
 251++6165 57           	ld      d,a
 252++6166 0F           	rrca
 253++6167 0F           	rrca
 254++6168 0F           	rrca
 255++6169 A7 E6 E0     	and     a,224
 256++616C 81           	add     a,c
 257++616D 5F           	ld      e,a
 258++616E 7A           	ld      a,d
 259++616F E6 18        	and     24
 260++6171 F6 C0        	or      #c0
 261++6173 57           	ld      d,a
 262++6174 C9           	ret
 263++6175
 264++6175              calc_addr_attr
 265++6175 ED 4B 60 63  	ld	bc,(col_screen)
 266++6179              bc_to_attr:
 267++6179 78           	ld	a,b
 268++617A 0F           	rrca
 269++617B 0F           	rrca
 270++617C 0F           	rrca
 271++617D 6F           	ld	l,a
 272++617E E6 1F        	and	31
 273++6180 F6 D8        	or	#d8
 274++6182 67           	ld	h,a
 275++6183 7D           	ld	a,l
 276++6184 E6 FC        	and	252
 277++6186 B1           	or	c
 278++6187 6F           	ld	l,a
 279++6188 C9           	ret
 280++6189
 281++6189              scroll_up8
 282++6189 21 E0 61     	ld	hl,table_addr_scr
 283++618C 06 B8        	ld	b,184
 284++618E
 285++618E              scroll_up8_01
 286++618E C5           	push	bc
 287++618F
 288++618F 5E           	ld	e,(hl)
 289++6190 23           	inc	hl
 290++6191 56           	ld	d,(hl)
 291++6192 23           	inc	hl
 292++6193
 293++6193 E5           	push	hl
 294++6194
 295++6194 01 0E 00     	ld	bc,14
 296++6197 09           	add	hl,bc
 297++6198 4E           	ld	c,(hl)
 298++6199 23           	inc	hl
 299++619A 46           	ld	b,(hl)
 300++619B
 301++619B 60           	ld	h,b
 302++619C 69           	ld	l,c
 303++619D
 304++619D 01 20 00     	ld	bc,32
 305++61A0 ED B0        	ldir
 306++61A2
 307++61A2 E1           	pop	hl
 308++61A3 C1           	pop	bc
 309++61A4 10 E8        	djnz	scroll_up8_01
 310++61A6
 311++61A6 06 08        	ld	b,8
 312++61A8
 313++61A8              scroll_up8_02
 314++61A8 C5           	push	bc
 315++61A9
 316++61A9 5E           	ld	e,(hl)
 317++61AA 23           	inc	hl
 318++61AB 56           	ld	d,(hl)
 319++61AC 23           	inc	hl
 320++61AD
 321++61AD E5           	push	hl
 322++61AE
 323++61AE 62           	ld	h,d
 324++61AF 6B           	ld	l,e
 325++61B0 13           	inc	de
 326++61B1 36 00        	ld	(hl),0
 327++61B3 01 1F 00     	ld	bc,31
 328++61B6 ED B0        	ldir
 329++61B8
 330++61B8 E1           	pop	hl
 331++61B9 C1           	pop	bc
 332++61BA 10 EC        	djnz	scroll_up8_02
 333++61BC 11 00 D8 21  	ld	de,#D800, hl,#D820, bc,736
 333++61C0 20 D8 01 E0
 333++61C4 02
 334++61C5 ED B0        	ldir
 335++61C7 1A           	ld	a,(de)
 336++61C8 21 E0 DA 11  	ld	hl,#dae0, de,#dae1, (hl),a, bc,31
 336++61CC E1 DA 77 01
 336++61D0 1F 00
 337++61D2 ED B0        	ldir
 338++61D4
 339++61D4 C9           	ret
 340++61D5
 341++61D5              font64 equ #4000 ; Using ZX-Spectrum screen as font buffer
 342++61D5 66 6F 6E 74  font_file db "font64.bin", 0
 342++61D9 36 34 2E 62
 342++61DD 69 6E 00
 343++61E0
 344++61E0
 345++61E0              table_addr_scr
 346++61E0 00 40 00 41  	defw	#4000,#4100,#4200,#4300,#4400,#4500,#4600,#4700
 346++61E4 00 42 00 43
 346++61E8 00 44 00 45
 346++61EC 00 46 00 47
 347++61F0 20 40 20 41  	defw	#4020,#4120,#4220,#4320,#4420,#4520,#4620,#4720
 347++61F4 20 42 20 43
 347++61F8 20 44 20 45
 347++61FC 20 46 20 47
 348++6200 40 40 40 41  	defw	#4040,#4140,#4240,#4340,#4440,#4540,#4640,#4740
 348++6204 40 42 40 43
 348++6208 40 44 40 45
 348++620C 40 46 40 47
 349++6210 60 40 60 41  	defw	#4060,#4160,#4260,#4360,#4460,#4560,#4660,#4760
 349++6214 60 42 60 43
 349++6218 60 44 60 45
 349++621C 60 46 60 47
 350++6220 80 40 80 41  	defw	#4080,#4180,#4280,#4380,#4480,#4580,#4680,#4780
 350++6224 80 42 80 43
 350++6228 80 44 80 45
 350++622C 80 46 80 47
 351++6230 A0 40 A0 41  	defw	#40a0,#41a0,#42a0,#43a0,#44a0,#45a0,#46a0,#47a0
 351++6234 A0 42 A0 43
 351++6238 A0 44 A0 45
 351++623C A0 46 A0 47
 352++6240 C0 40 C0 41  	defw	#40c0,#41c0,#42c0,#43c0,#44c0,#45c0,#46c0,#47c0
 352++6244 C0 42 C0 43
 352++6248 C0 44 C0 45
 352++624C C0 46 C0 47
 353++6250 E0 40 E0 41  	defw	#40e0,#41e0,#42e0,#43e0,#44e0,#45e0,#46e0,#47e0
 353++6254 E0 42 E0 43
 353++6258 E0 44 E0 45
 353++625C E0 46 E0 47
 354++6260
 355++6260 00 48 00 49  	defw	#4800,#4900,#4a00,#4b00,#4c00,#4d00,#4e00,#4f00
 355++6264 00 4A 00 4B
 355++6268 00 4C 00 4D
 355++626C 00 4E 00 4F
 356++6270 20 48 20 49  	defw	#4820,#4920,#4a20,#4b20,#4c20,#4d20,#4e20,#4f20
 356++6274 20 4A 20 4B
 356++6278 20 4C 20 4D
 356++627C 20 4E 20 4F
 357++6280 40 48 40 49  	defw	#4840,#4940,#4a40,#4b40,#4c40,#4d40,#4e40,#4f40
 357++6284 40 4A 40 4B
 357++6288 40 4C 40 4D
 357++628C 40 4E 40 4F
 358++6290 60 48 60 49  	defw	#4860,#4960,#4a60,#4b60,#4c60,#4d60,#4e60,#4f60
 358++6294 60 4A 60 4B
 358++6298 60 4C 60 4D
 358++629C 60 4E 60 4F
 359++62A0 80 48 80 49  	defw	#4880,#4980,#4a80,#4b80,#4c80,#4d80,#4e80,#4f80
 359++62A4 80 4A 80 4B
 359++62A8 80 4C 80 4D
 359++62AC 80 4E 80 4F
 360++62B0 A0 48 A0 49  	defw	#48a0,#49a0,#4aa0,#4ba0,#4ca0,#4da0,#4ea0,#4fa0
 360++62B4 A0 4A A0 4B
 360++62B8 A0 4C A0 4D
 360++62BC A0 4E A0 4F
 361++62C0 C0 48 C0 49  	defw	#48c0,#49c0,#4ac0,#4bc0,#4cc0,#4dc0,#4ec0,#4fc0
 361++62C4 C0 4A C0 4B
 361++62C8 C0 4C C0 4D
 361++62CC C0 4E C0 4F
 362++62D0 E0 48 E0 49  	defw	#48e0,#49e0,#4ae0,#4be0,#4ce0,#4de0,#4ee0,#4fe0
 362++62D4 E0 4A E0 4B
 362++62D8 E0 4C E0 4D
 362++62DC E0 4E E0 4F
 363++62E0
 364++62E0 00 50 00 51  	defw	#5000,#5100,#5200,#5300,#5400,#5500,#5600,#5700
 364++62E4 00 52 00 53
 364++62E8 00 54 00 55
 364++62EC 00 56 00 57
 365++62F0 20 50 20 51  	defw	#5020,#5120,#5220,#5320,#5420,#5520,#5620,#5720
 365++62F4 20 52 20 53
 365++62F8 20 54 20 55
 365++62FC 20 56 20 57
 366++6300 40 50 40 51  	defw	#5040,#5140,#5240,#5340,#5440,#5540,#5640,#5740
 366++6304 40 52 40 53
 366++6308 40 54 40 55
 366++630C 40 56 40 57
 367++6310 60 50 60 51  	defw	#5060,#5160,#5260,#5360,#5460,#5560,#5660,#5760
 367++6314 60 52 60 53
 367++6318 60 54 60 55
 367++631C 60 56 60 57
 368++6320 80 50 80 51  	defw	#5080,#5180,#5280,#5380,#5480,#5580,#5680,#5780
 368++6324 80 52 80 53
 368++6328 80 54 80 55
 368++632C 80 56 80 57
 369++6330 A0 50 A0 51  	defw	#50a0,#51a0,#52a0,#53a0,#54a0,#55a0,#56a0,#57a0
 369++6334 A0 52 A0 53
 369++6338 A0 54 A0 55
 369++633C A0 56 A0 57
 370++6340 C0 50 C0 51  	defw	#50c0,#51c0,#52c0,#53c0,#54c0,#55c0,#56c0,#57c0
 370++6344 C0 52 C0 53
 370++6348 C0 54 C0 55
 370++634C C0 56 C0 57
 371++6350 E0 50 E0 51  	defw	#50e0,#51e0,#52e0,#53e0,#54e0,#55e0,#56e0,#57e0
 371++6354 E0 52 E0 53
 371++6358 E0 54 E0 55
 371++635C E0 56 E0 57
 372++6360
 373++6360
 374++6360 00           col_screen			db	0
 375++6361 00           row_screen			db	0
 376++6362 00           half_tile_screen	db	0
 377++6363 07           attr_screen			db	07
 378++6364
 379++6364 00 00        col_screen_temp			dw	0
 380++6366 00           half_tile_screen_temp	db	0
 381++6367
 382++6367 01           single_symbol_print db 1
 383++6368 00           single_symbol 		db 0
 384++6369
 385++6369 00 00 00...  fill_buff ds 65
 386++63AA
 387++63AA                  endmodule
# file closed: vdp/zx.asm
  11+ 63AA                  ENDIF
  12+ 63AA
  13+ 63AA              	IFDEF NEDOOS
  14+ 63AA ~                include "nedotext.asm"
  15+ 63AA                  ENDIF
# file closed: vdp/index.asm
  29  63AA                  include "utils/index.asm"
# file opened: utils/index.asm
   1+ 63AA                  include "atoi.asm"
# file opened: utils/atoi.asm
   1++63AA              ; DE - buffer
   2++63AA              ; HL - output
   3++63AA              atohl:
   4++63AA 21 00 00         ld hl, 0
   5++63AD              .loop
   6++63AD 1A               ld a, (de)
   7++63AE 13               inc de
   8++63AF                  ; Sepparators
   9++63AF C5 E5            push bc, hl
  10++63B1 01 05 00             ld bc, sepparators_len
  11++63B4 21 CC 63             ld hl, sepparators
  12++63B7 ED B1                cpir
  13++63B9 E1 C1            pop hl, bc
  14++63BB C8               ret z
  15++63BC
  16++63BC D6 30            sub '0'
  17++63BE
  18++63BE C5               push bc
  19++63BF 4D                   ld c, l
  20++63C0 44                   ld b, h
  21++63C1
  22++63C1 29                   add hl, hl
  23++63C2 29                   add hl, hl
  24++63C3 09                   add hl, bc
  25++63C4 29                   add hl, hl
  26++63C5 4F                   ld c, a
  27++63C6 06 00                ld b, 0
  28++63C8 09                   add hl, bc
  29++63C9 C1               pop bc
  30++63CA 18 E1            jr .loop
  31++63CC
# file closed: utils/atoi.asm
   2+ 63CC                  include "constants.asm"
# file opened: utils/constants.asm
   1++63CC              TAB = 9
   2++63CC              CR = 13
   3++63CC              LF = 10
   4++63CC              NULL = 0
   5++63CC              SPACE = ' '
   6++63CC              ESC = 27
   7++63CC              BACKSPACE = 8
   8++63CC
   9++63CC                  IFDEF TIMEX80
  10++63CC ~            MIME_DOWNLOAD 	= #19
  11++63CC ~            MIME_LINK 		= #1A
  12++63CC ~            MIME_TEXT 		= #10
  13++63CC ~            MIME_IMAGE 		= #01
  14++63CC ~            MIME_MUSIC 		= #0e
  15++63CC ~            MIME_INPUT 		= #b3
  16++63CC ~            MIME_MOD 		= #0d
  17++63CC ~
  18++63CC ~            BORDER_TOP = #b2
  19++63CC ~            BORDER_BOTTOM = #b1
  20++63CC                  ELSE
  21++63CC              	IFDEF MSX
  22++63CC ~            MIME_DOWNLOAD 	= 1
  23++63CC ~            MIME_LINK		= 2
  24++63CC ~            MIME_TEXT 		= 3
  25++63CC ~            MIME_IMAGE 		= 4
  26++63CC ~            MIME_MUSIC 		= 5
  27++63CC ~            MIME_INPUT 		= 6
  28++63CC ~            MIME_MOD      	= 7
  29++63CC ~            BORDER_TOP    = 7
  30++63CC ~            BORDER_BOTTOM = 8
  31++63CC              	ELSE
  32++63CC              MIME_DOWNLOAD = 1
  33++63CC              MIME_LINK     = 2
  34++63CC              MIME_TEXT     = 3
  35++63CC              MIME_IMAGE    = 6
  36++63CC              MIME_MUSIC    = 5
  37++63CC              MIME_INPUT    = 4
  38++63CC              MIME_MOD      = 7
  39++63CC
  40++63CC              BORDER_TOP    = 9
  41++63CC              BORDER_BOTTOM = 8
  42++63CC              	ENDIF
  43++63CC
  44++63CC
  45++63CC
  46++63CC
  47++63CC              	ENDIF
  48++63CC
  49++63CC 0D 0A 09 00  sepparators db CR, LF, TAB, NULL, SPACE
  49++63D0 20
  50++63D1              sepparators_len = $ - sepparators
# file closed: utils/constants.asm
   3+ 63D1                  include "strutils.asm"
# file opened: utils/strutils.asm
   1++63D1              ; de - pointer
   2++63D1              ; hl - count
   3++63D1              strlen:
   4++63D1 21 00 00         ld hl, 0
   5++63D4              .loop
   6++63D4 1A               ld a, (de)
   7++63D5 A7               and a
   7++63D6 28 04          jr z, .exit
   8++63D8 23               inc hl
   9++63D9 13               inc de
  10++63DA 18 F8            jr .loop
  11++63DC              .exit
  12++63DC C9               ret
  13++63DD
  14++63DD                  module CompareBuff
  15++63DD
  16++63DD              ; Pushes A to buffer
  17++63DD              push
  18++63DD F5               push af
  19++63DE 06 20            ld b, 32
  19++63E0 21 29 64       ld hl, buffer + 1
  19++63E3 11 28 64       ld de, buffer
  20++63E6              .loop
  21++63E6 7E               ld a, (hl)
  21++63E7 12             ld (de), a
  21++63E8 23             inc hl
  21++63E9 13             inc de
  21++63EA 10 FA          djnz .loop
  22++63EC F1               pop af
  23++63ED 21 47 64         ld hl, buffer + 31
  23++63F0 77             ld (hl), a
  24++63F1 C9               ret
  25++63F2
  26++63F2              ; HL - Compare string(null terminated)
  27++63F2              ; A - 0 NOT Found
  28++63F2              ;     1 Found
  29++63F2              search:
  30++63F2 06 00            ld b, 0
  30++63F4 E5             push hl
  31++63F5              .loop:
  32++63F5 7E               ld a, (hl)
  32++63F6 23             inc hl
  32++63F7 04             inc b
  32++63F8 A7             and a
  32++63F9 C2 F5 63       jp nz, .loop
  33++63FC 05               dec b
  33++63FD E1             pop hl
  33++63FE C5             push bc
  33++63FF E5             push hl
  34++6400 E1               pop hl
  35++6401 11 48 64         ld de, buffer + 32
  36++6404              .sourceLoop
  37++6404 1B               dec de
  37++6405 10 FD          djnz .sourceLoop
  38++6407 C1               pop bc
  39++6408              .compare
  40++6408 C5               push bc
  40++6409 F5             push af
  41++640A 1A               ld a, (de)
  41++640B 47             ld b, a
  42++640C F1               pop af
  42++640D 7E             ld a, (hl)
  42++640E B8             cp b
  42++640F C1             pop bc
  42++6410 3E 00          ld a, 0
  42++6412 C0             ret nz
  43++6413 13               inc de
  43++6414 23             inc hl
  44++6415 10 F1            djnz .compare
  45++6417 3E 01            ld a, 1
  46++6419 C9               ret
  47++641A
  48++641A              clear:
  49++641A AF               xor a
  49++641B 21 28 64       ld hl, buffer
  49++641E 11 29 64       ld de, buffer + 1
  49++6421 01 20 00       ld bc, 32
  49++6424 77             ld (hl), a
  49++6425 ED B0          ldir
  50++6427 C9               ret
  51++6428
  52++6428 00 00 00...  buffer ds 32
  53++6448
  54++6448                  endmodule
# file closed: utils/strutils.asm
   4+ 6448                  IFDEF MSX
   5+ 6448 ~            	    include "bios.asm"
   6+ 6448                  ENDIF
   7+ 6448                  include "screen.asm"
# file opened: utils/screen.asm
   1++6448              LINE_LIMIT = 63
   2++6448
   3++6448                  IFDEF NEDOOS
   4++6448 ~            LINE_LIMIT = 79
   5++6448                  ENDIF
   6++6448
   7++6448                  IFDEF TIMEX80
   8++6448 ~            LINE_LIMIT = 84
   9++6448                  ENDIF
  10++6448
  11++6448                  IFDEF MSX
  12++6448 ~            LINE_LIMIT = 79
  13++6448                  ENDIF
  14++6448              ; HL - string pointer
  15++6448              print70Text:
  16++6448 06 3F            ld b, LINE_LIMIT
  17++644A              .loop
  18++644A 7E               ld a, (hl)
  19++644B A7               and a
  19++644C C8             ret z
  20++644D FE 0D            cp 13
  20++644F C8             ret z
  21++6450 FE 0A            cp 10
  21++6452 C8             ret z
  22++6453 C5               push bc
  23++6454 E5               push hl
  24++6455 CD A4 60         call TextMode.putC
  25++6458 E1               pop hl
  26++6459 23               inc hl
  27++645A C1               pop bc
  28++645B 05               dec b
  29++645C 78               ld a, b
  29++645D A7             and a
  29++645E C8             ret z
  30++645F C3 4A 64         jp .loop
  31++6462
  32++6462              ; HL - string pointer
  33++6462              print70Goph:
  34++6462 06 3F            ld b, LINE_LIMIT
  35++6464              .loop
  36++6464 7E               ld a, (hl)
  36++6465 FE 09          cp 09
  36++6467 C8             ret z
  37++6468 A7               and a
  37++6469 C8             ret z
  38++646A C5               push bc
  39++646B E5               push hl
  40++646C CD A4 60         call TextMode.putC
  41++646F E1               pop hl
  42++6470 23               inc hl
  43++6471 C1               pop bc
  44++6472 05               dec b
  45++6473 78               ld a, b
  45++6474 A7             and a
  45++6475 C8             ret z
  46++6476 C3 64 64         jp .loop
# file closed: utils/screen.asm
# file closed: utils/index.asm
  30  6479                  include "gopher/render/index.asm"
# file opened: gopher/render/index.asm
   1+ 6479                  MODULE Render
   2+ 6479              PER_PAGE = 22
   3+ 6479              CURSOR_OFFSET = 2
   4+ 6479                  include "row.asm"
# file opened: gopher/render/row.asm
   1++6479              ; A - row number
   2++6479              ; HL - pointer to row
   3++6479              renderRow:
   4++6479 C6 02            add CURSOR_OFFSET
   5++647B 57               ld d,a
   6++647C 1E 00            ld e,0
   7++647E CD 3A 60         call TextMode.gotoXY
   8++6481 7E               ld a,(hl)
   9++6482 E5               push hl
  10++6483 CD 8E 64         call getIcon
  11++6486 CD A4 60         call TextMode.putC
  12++6489 E1               pop hl
  13++648A 23               inc hl
  14++648B C3 62 64         jp print70Goph
  15++648E
  16++648E              ; A - gopher id char
  17++648E              getIcon:
  18++648E FE 69            cp 'i'
  18++6490 CA AA 64       jp z, .info
  19++6493 FE 39            cp '9'
  19++6495 CA AD 64       jp z, .down
  20++6498 FE 31            cp '1'
  20++649A CA 13 65       jp z, .page
  21++649D FE 30            cp '0'
  21++649F CA 16 65       jp z, .text
  22++64A2 FE 37            cp '7'
  22++64A4 CA 19 65       jp z, .input
  23++64A7 3E 20            ld a, ' '
  24++64A9 C9               ret
  25++64AA              .info
  26++64AA 3E 20            ld a, SPACE
  26++64AC C9             ret
  27++64AD              .down
  28++64AD 54 5D            ld de, hl
  29++64AF 01 FF 00 3E      ld bc, #ff, a, TAB
  29++64B3 09
  29++64B4 ED B1          cpir
  30++64B6 78               ld a, b
  30++64B7 B1             or c
  30++64B8 28 56          jr z, .downExit
  31++64BA D5               push de
  32++64BB              .nameLoop
  33++64BB 7E               ld a, (hl)
  33++64BC A7             and a
  33++64BD 28 10          jr z, .check
  34++64BF FE 09            cp TAB
  34++64C1 28 0C          jr z, .check
  35++64C3 FE 0D            cp CR
  35++64C5 28 08          jr z, .check
  36++64C7 E5               push hl
  37++64C8 CD DD 63         call CompareBuff.push
  38++64CB E1               pop hl
  39++64CC 23               inc hl
  40++64CD 18 EC            jr .nameLoop
  41++64CF              .check
  42++64CF 21 28 65         ld hl, scrExt1
  42++64D2 CD F2 63       call CompareBuff.search
  42++64D5 A7             and a
  42++64D6 20 44          jr nz, .image
  43++64D8 21 2D 65         ld hl, scrExt2
  43++64DB CD F2 63       call CompareBuff.search
  43++64DE A7             and a
  43++64DF 20 3B          jr nz, .image
  44++64E1 3E 03            ld a, 3
  44++64E3 32 2F 90       ld (VTPL.SETUP), a ; 0 bit - looping, 1 bit - pt2 file
  45++64E6 21 3C 65         ld hl, pt2Ext1
  45++64E9 CD F2 63       call CompareBuff.search
  45++64EC A7             and a
  45++64ED 20 31          jr nz, .music
  46++64EF 21 41 65         ld hl, pt2Ext2
  46++64F2 CD F2 63       call CompareBuff.search
  46++64F5 A7             and a
  46++64F6 20 28          jr nz, .music
  47++64F8 3E 01            ld a, 1
  47++64FA 32 2F 90       ld (VTPL.SETUP), a
  48++64FD 21 32 65         ld hl, pt3Ext1
  48++6500 CD F2 63       call CompareBuff.search
  48++6503 A7             and a
  48++6504 20 1A          jr nz, .music
  49++6506 21 37 65         ld hl, pt3Ext2
  49++6509 CD F2 63       call CompareBuff.search
  49++650C A7             and a
  49++650D 20 11          jr nz, .music
  50++650F
  51++650F                  ; General Sound support
  52++650F                  ifdef GS
  53++650F ~                ld hl, modExt1
  53++650F ~              call CompareBuff.search
  53++650F ~              and a
  53++650F ~              jr nz, .mod
  54++650F ~                ld hl, modExt2
  54++650F ~              call CompareBuff.search
  54++650F ~              and a
  54++650F ~              jr nz, .mod
  55++650F                  endif
  56++650F
  57++650F              .checkExit
  58++650F E1               pop hl
  59++6510              .downExit
  60++6510 3E 01            ld a, MIME_DOWNLOAD
  60++6512 C9             ret
  61++6513              .page
  62++6513 3E 02            ld a, MIME_LINK
  62++6515 C9             ret
  63++6516              .text
  64++6516 3E 03            ld a, MIME_TEXT
  64++6518 C9             ret
  65++6519              .input
  66++6519 3E 04            ld a, MIME_INPUT
  66++651B C9             ret
  67++651C              .image
  68++651C E1               pop hl
  68++651D 3E 06          ld a, MIME_IMAGE
  68++651F C9             ret
  69++6520              .music
  70++6520 E1               pop hl
  70++6521 3E 05          ld a, MIME_MUSIC
  70++6523 C9             ret
  71++6524              .mod
  72++6524 E1               pop hl
  72++6525 3E 07          ld a, MIME_MOD
  72++6527 C9             ret
  73++6528
  74++6528 2E 73 63 72  scrExt1 db ".scr", 0
  74++652C 00
  75++652D 2E 53 43 52  scrExt2 db ".SCR", 0
  75++6531 00
  76++6532
  77++6532 2E 70 74 33  pt3Ext1 db ".pt3", 0
  77++6536 00
  78++6537 2E 50 54 33  pt3Ext2 db ".PT3", 0
  78++653B 00
  79++653C 2E 70 74 32  pt2Ext1 db ".pt2", 0
  79++6540 00
  80++6541 2E 50 54 32  pt2Ext2 db ".PT2", 0
  80++6545 00
  81++6546 2E 6D 6F 64  modExt1 db ".mod", 0
  81++654A 00
  82++654B 2E 4D 4F 44  modExt2 db ".MOD", 0
  82++654F 00
# file closed: gopher/render/row.asm
   5+ 6550                  include "buffer.asm"
# file opened: gopher/render/buffer.asm
   1++6550              ; BC - line count
   2++6550              findLine:
   3++6550 21 40 9C         ld hl, outputBuffer
   4++6553 78               ld a,b
   5++6554 B1               or c
   6++6555 CA 83 65         jp z, .checkEmpty
   7++6558              .preloop
   8++6558 16 0D            ld d,13
   9++655A              .loop
  10++655A 7E               ld a, (hl)
  10++655B A7             and a
  10++655C CA 86 65       jp z, .nope
  11++655F BA               cp d
  11++6560 23             inc hl
  11++6561 CA 79 65       jp z, .checkLF  ;13
  12++6564 FE 0A            cp 10
  12++6566 CA 6C 65       jp z, .nextCheck     ;10
  13++6569 C3 5A 65         jp .loop
  14++656C              .nextCheck
  15++656C A7               and a
  15++656D CA 86 65       jp z, .nope
  16++6570 0B               dec bc
  17++6571 5F               ld e,a
  18++6572 78               ld a,b
  19++6573 B1               or c
  20++6574 7B               ld a,e
  21++6575 C2 5A 65         jp nz, .loop
  22++6578 C9               ret
  23++6579              .checkLF
  24++6579 7E               ld a, (hl)
  25++657A FE 0A            cp 10
  25++657C C2 6C 65       jp nz, .nextCheck    ;10
  26++657F 23               inc hl
  27++6580 C3 6C 65         jp  .nextCheck
  28++6583              .checkEmpty
  29++6583 7E               ld a, (hl)
  29++6584 A7             and a
  29++6585 C0             ret nz
  30++6586              .nope
  31++6586 21 00 00         ld hl, 0
  31++6589 C9             ret
  32++658A
# file closed: gopher/render/buffer.asm
   6+ 658A                  include "ui.asm"
# file opened: gopher/render/ui.asm
   1++658A                  IFDEF ZXSCR
   2++658A                  DEFINE LEFT_TAB "[D]omain:                                  "
   3++658A                  ENDIF
   4++658A
   5++658A                  IFDEF TIMEX     ;UNKNOWM fallback to 64
   6++658A ~                DEFINE LEFT_TAB "[D]omain:                                  "
   7++658A                  ENDIF
   8++658A
   9++658A                  IFDEF TIMEX80
  10++658A ~                DEFINE LEFT_TAB "[D]omain:                                                      "
  11++658A                  ENDIF
  12++658A
  13++658A                  IFDEF NEDOOS
  14++658A ~                DEFINE LEFT_TAB "[D]omain:                                                  "
  15++658A                  ENDIF
  16++658A
  17++658A                  IFDEF MSX
  18++658A ~                DEFINE LEFT_TAB "[D]omain:                                              "
  19++658A                  ENDIF
  20++658A              prepareScreen:
  21++658A CD 1D 60         call TextMode.cls
  22++658D 21 5D 66         ld hl, header
  22++6590 CD BC 60       call TextMode.printZ
  23++6593 11 0A 00         ld de, #000A
  23++6596 CD 3A 60       call TextMode.gotoXY
  24++6599 21 A0 87         ld hl, hostName
  24++659C CD BC 60       call TextMode.printZ
  25++659F AF               xor a
  25++65A0 CD 7B 60       call TextMode.highlightLine
  26++65A3 C9               ret
  27++65A4
  28++65A4              inputHost:
  29++65A4 CD BD 69         	call Console.waitForKeyUp
  30++65A7              .loop
  31++65A7 11 0A 00         ld de, #000A
  31++65AA CD 3A 60       call TextMode.gotoXY
  31++65AD 21 A0 87       ld hl, hostName
  31++65B0 CD BC 60       call TextMode.printZ
  32++65B3 3E 04            ld a, MIME_INPUT
  32++65B5 CD A4 60       call TextMode.putC
  33++65B8 3E 20            ld a, ' '
  33++65BA CD A4 60       call TextMode.putC
  34++65BD              .wait
  35++65BD CD CA 69         call Console.getC
  36++65C0 5F               ld e, a
  37++65C1 FE 0C            cp Console.BACKSPACE
  37++65C3 28 17          jr z, .removeChar
  38++65C5 FE 0D            cp CR
  38++65C7 CA EA 65       jp z, inputNavigate
  39++65CA FE 20            cp 32
  39++65CC 38 EF          jr c, .wait
  40++65CE              .putC
  41++65CE AF               xor a
  41++65CF 21 A0 87 01    ld hl, hostName, bc, 48
  41++65D3 30 00
  41++65D5 ED B1          cpir
  42++65D7 77               ld (hl), a
  42++65D8 2B             dec hl
  42++65D9 73             ld (hl), e
  43++65DA 18 CB            jr .loop
  44++65DC              .removeChar
  45++65DC AF               xor a
  46++65DD 21 A0 87 01      ld hl, hostName, bc, 48
  46++65E1 30 00
  46++65E3 ED B1          cpir
  47++65E5 2B               dec hl
  47++65E6 2B             dec hl
  47++65E7 77             ld (hl), a
  48++65E8 18 BD            jr .loop
  49++65EA
  50++65EA              inputNavigate:
  51++65EA 21 A0 87 11      ld hl, hostName, de, domain
  51++65EE 1D 66
  52++65F0 7E               ld a,(hl)
  53++65F1 A7               and a
  54++65F2 CA 17 71         jp z, History.load
  55++65F5              .loop
  56++65F5 7E               ld a, (hl)
  56++65F6 A7             and a
  56++65F7 28 05          jr z, .complete
  57++65F9 12               ld (de), a
  57++65FA 23 13          inc hl, de
  58++65FC 18 F7            jr .loop
  59++65FE              .complete
  60++65FE 3E 09            ld a, TAB
  60++6600 12             ld (de), a
  60++6601 13             inc de
  61++6602 3E 37            ld a, '7'
  61++6604 12             ld (de), a
  61++6605 13             inc de
  62++6606 3E 30            ld a, '0'
  62++6608 12             ld (de), a
  62++6609 13             inc de
  63++660A 3E 0D            ld a, CR
  63++660C 12             ld (de), a
  63++660D 13             inc de
  64++660E 3E 0A            ld a, LF
  64++6610 12             ld (de), a
  64++6611 13             inc de
  65++6612 21 18 66         ld hl, navRow
  65++6615 C3 70 71       jp History.navigate
  66++6618
  67++6618 31 20 09 2F  navRow db "1 ", TAB, "/", TAB
  67++661C 09
  68++661D 6E 69 68 69  domain db "nihirash.net"
  68++6621 72 61 73 68
  68++6625 2E 6E 65 74
  69++6629 00 00 00...      ds 64 - ($ - domain)
  70++665D
  71++665D              	IFDEF MSX
  72++665D ~            header db LEFT_TAB, "    MRF"
  73++665D ~                   db VERSION_STRING
  74++665D ~                   db "."
  75++665D ~                   db BUILD_STRING
  76++665D ~                   db " [MSX UNAPI]",13, 0
  77++665D              	ENDIF
  78++665D
  79++665D                  IFDEF MB03
  80++665D ~            header db LEFT_TAB, "    MRF"
  81++665D ~                   db VERSION_STRING
  82++665D ~                   db "."
  83++665D ~                   db BUILD_STRING
  84++665D ~                   db " [MB03+]",13, 0
  85++665D                     ENDIF
  86++665D
  87++665D                  IFDEF UNO
  88++665D ~            header db LEFT_TAB, "MRF"
  89++665D ~                   db VERSION_STRING
  90++665D ~                   db "."
  91++665D ~                   db BUILD_STRING
  92++665D ~                   db " [UNO UART]",13, 0
  93++665D                  ENDIF
  94++665D
  95++665D                  IFDEF AY
  96++665D ~            header db LEFT_TAB, "  MRF"
  97++665D ~                   db VERSION_STRING
  98++665D ~                   db "."
  99++665D ~                   db BUILD_STRING
 100++665D ~                   db " [AYWIFI]",13, 0
 101++665D              	ENDIF
 102++665D
 103++665D                  IFDEF ZW
 104++665D ~            header db LEFT_TAB, "  MRF"
 105++665D ~                   db VERSION_STRING
 106++665D ~                   db "."
 107++665D ~                   db BUILD_STRING
 108++665D ~                   db " [ZXWiFi]",13, 0
 109++665D                  ENDIF
 110++665D
 111++665D                   IFDEF NEDOOSATM
 112++665D ~            header db LEFT_TAB, "MRF"
 113++665D ~                   db VERSION_STRING
 114++665D ~                   db "."
 115++665D ~                   db BUILD_STRING
 116++665D ~                   db " [ATM UART]",13, 0
 117++665D                  ENDIF
 118++665D
 119++665D                  IFDEF NEDOOSEVO
 120++665D ~            header db LEFT_TAB, "MRF"
 121++665D ~                   db VERSION_STRING
 122++665D ~                   db "."
 123++665D ~                   db BUILD_STRING
 124++665D ~                   db " [EVO UART]",13, 0
 125++665D                  ENDIF
 126++665D
 127++665D                  IFDEF UNOUART
 128++665D 5B 44 5D 6F  header db "[D]omain:                                  ", "MRF"
 128++6661 6D 61 69 6E
 128++6665 3A 20 20 20
 128++6669 20 20 20 20
 128++666D 20 20 20 20
 128++6671 20 20 20 20
 128++6675 20 20 20 20
 128++6679 20 20 20 20
 128++667D 20 20 20 20
 128++6681 20 20 20 20
 128++6685 20 20 20 4D
 128++6689 52 46
 129++668B 31 2E 37            db "1.7"
 130++668E 2E                  db "."
 131++668F 37                  db "7"
 132++6690 20 5B 55 4E         db " [UNO UART]",13, 0
 132++6694 4F 20 55 41
 132++6698 52 54 5D 0D
 132++669C 00
 133++669D                  ENDIF
 134++669D
 135++669D                  IFDEF NEDOOS
 136++669D ~            	IFNDEF NEDOOSATM
 137++669D ~            	IFNDEF NEDOOSEVO
 138++669D ~            header db LEFT_TAB, " MRF"
 139++669D ~                   db VERSION_STRING
 140++669D ~                   db "."
 141++669D ~                   db BUILD_STRING
 142++669D ~                   db " [nedoNET]",13, 0
 143++669D ~
 144++669D ~                ENDIF
 145++669D ~            	ENDIF
 146++669D              	ENDIF
 147++669D
# file closed: gopher/render/ui.asm
   7+ 669D                  include "gopher-page.asm"
# file opened: gopher/render/gopher-page.asm
   1++669D              renderGopherScreen:
   2++669D CD 8A 65         call Render.prepareScreen
   3++66A0 06 16            ld b, PER_PAGE
   4++66A2              .loop
   5++66A2 C5               push bc
   6++66A3 3E 16            ld a, PER_PAGE
   7++66A5 90               sub b
   8++66A6 47               ld b,a
   9++66A7 5F               ld e,a
  10++66A8
  11++66A8 48                   ld c,b
  12++66A9 06 00                ld b,0
  13++66AB
  14++66AB 2A 8E 75             ld hl, (page_offset)
  15++66AE 09                   add hl,bc
  16++66AF 44 4D                ld bc,hl
  17++66B1 D5                   push de
  18++66B2 CD 50 65         call Render.findLine
  19++66B5 D1               pop de
  20++66B6
  21++66B6 7C               ld a, h
  22++66B7 B5               or l
  23++66B8 28 04            jr z, .exit
  24++66BA 7B               ld a, e
  25++66BB CD 79 64         call renderRow
  26++66BE              .exit
  27++66BE C1               pop bc
  28++66BF 10 E1            djnz .loop
  29++66C1 CD B4 67         call showCursor
  30++66C4 C9               ret
  31++66C5
  32++66C5              checkBorder:
  33++66C5 3A 8C 75         ld a, (cursor_position)
  33++66C8 FE FF          cp #ff
  33++66CA CA D8 67       jp z, pageUp
  34++66CD 3A 8C 75         ld a, (cursor_position)
  34++66D0 FE 16          cp PER_PAGE
  34++66D2 CA 0B 68       jp z, pageDn
  35++66D5 CD B4 67         call showCursor
  36++66D8 C3 DB 66         jp workLoop
  37++66DB
  38++66DB              workLoop:
  39++66DB 3A D9 68         ld a, (play_next)
  39++66DE A7             and a
  39++66DF C2 69 67       jp nz, navigate
  40++66E2
  41++66E2                  dup 5
  42++66E2 76          >    halt
  42++66E3 76          >    halt
  42++66E4 76          >    halt
  42++66E5 76          >    halt
  42++66E6 76          >    halt
  43++66E7                  edup
  44++66E7              .nothing
  45++66E7 CD DB 69         call Console.peekC
  46++66EA A7               and a
  46++66EB CA E7 66       jp z, .nothing
  47++66EE
  48++66EE FE 31            cp '1'
  48++66F0 CA 00 71       jp z, History.back
  49++66F3 FE 32            cp '2'
  49++66F5 CA 69 67       jp z, navigate
  50++66F8 FE 33            cp '3'
  50++66FA CA C4 67       jp z, cursorDown
  51++66FD FE 34            cp '4'
  51++66FF CA CE 67       jp z, cursorUp
  52++6702 FE 35            cp '5'
  52++6704 CA D8 67       jp z, pageUp
  53++6707 FE 38            cp '8'
  53++6709 CA 0B 68       jp z, pageDn
  54++670C FE 36            cp '6'
  54++670E CA C4 67       jp z, cursorDown
  55++6711 FE 37            cp '7'
  55++6713 CA CE 67       jp z, cursorUp
  56++6716
  57++6716 FE 0A            cp Console.KEY_DN
  57++6718 CA C4 67       jp z, cursorDown
  58++671B FE 61            cp 'a'
  58++671D CA C4 67       jp z, cursorDown
  59++6720 FE 0B            cp Console.KEY_UP
  59++6722 CA CE 67       jp z, cursorUp
  60++6725 FE 71            cp 'q'
  60++6727 CA CE 67       jp z, cursorUp
  61++672A FE 08            cp Console.KEY_LT
  61++672C CA D8 67       jp z, pageUp
  62++672F FE 6F            cp 'o'
  62++6731 CA D8 67       jp z, pageUp
  63++6734 FE 09            cp Console.KEY_RT
  63++6736 CA 0B 68       jp z, pageDn
  64++6739 FE 70            cp 'p'
  64++673B CA 0B 68       jp z, pageDn
  65++673E
  66++673E FE 68            cp 'h'
  66++6740 CA 6D 71       jp z, History.home
  67++6743 FE 48            cp 'H'
  67++6745 CA 6D 71       jp z, History.home
  68++6748
  69++6748 FE 62            cp 'b'
  69++674A CA 00 71       jp z, History.back
  70++674D FE 42            cp 'B'
  70++674F CA 00 71       jp z, History.back
  71++6752 FE 0C            cp Console.BACKSPACE
  71++6754 CA 00 71       jp z, History.back
  72++6757
  73++6757 FE 64            cp 'd'
  73++6759 CA A4 65       jp z, inputHost
  74++675C FE 44            cp 'D'
  74++675E CA A4 65       jp z, inputHost
  75++6761
  76++6761 FE 0D            cp CR
  76++6763 CA 69 67       jp z, navigate
  77++6766
  78++6766                  IFDEF MSX
  79++6766 ~                	cp ESC
  79++6766 ~              jp z, exit
  80++6766                  ENDIF
  81++6766
  82++6766                  IFDEF GS
  83++6766 ~                cp 'M'
  83++6766 ~              call z, GeneralSound.toggleModule
  84++6766 ~                cp 'm'
  84++6766 ~              call z, GeneralSound.toggleModule
  85++6766 ~                cp 'g'
  85++6766 ~              call z, GeneralSound.toggleDownload
  86++6766 ~                cp 'G'
  86++6766 ~              call z, GeneralSound.toggleDownload
  87++6766                  ENDIF
  88++6766
  89++6766                  IFDEF TIMEX80
  90++6766 ~                cp 'T'
  90++6766 ~              call z, TextMode.toggleColor
  91++6766 ~                cp 't'
  91++6766 ~              call z, TextMode.toggleColor
  92++6766                  ENDIF
  93++6766
  94++6766 C3 DB 66         jp workLoop
  95++6769
  96++6769              navigate:
  97++6769 CD BD 69         call Console.waitForKeyUp
  98++676C AF               xor a
  98++676D 32 D9 68       ld (play_next), a
  99++6770 CD BC 67         call hideCursor
 100++6773 ED 4B 8E 75      ld bc, (page_offset)
 101++6777 2A 8C 75         ld hl, (cursor_position)
 102++677A 09               add hl,bc
 103++677B 44               ld b, h ;HHHHH
 104++677C 4D               ld c, l ;LLLLL
 105++677D D5               push de
 106++677E CD 50 65         call Render.findLine
 107++6781 D1               pop de
 108++6782 7E               ld a, (hl)
 109++6783 FE 31            cp '1'
 109++6785 CA 9D 67       jp z, .load
 110++6788 FE 30            cp '0'
 110++678A CA 9D 67       jp z, .load
 111++678D FE 39            cp '9'
 111++678F CA 9D 67       jp z, .load
 112++6792 FE 37            cp '7'
 112++6794 CA A5 67       jp z, .input
 113++6797 CD B4 67         call showCursor
 114++679A C3 DB 66         jp workLoop
 115++679D              .load
 116++679D E5               push hl
 117++679E CD 8E 64         call getIcon
 118++67A1 E1               pop hl
 119++67A2 C3 70 71         jp History.navigate
 120++67A5              .input
 121++67A5 E5               push hl
 122++67A6 CD DA 68         call DialogBox.inputBox
 123++67A9 E1               pop hl
 124++67AA 3A 35 69         ld a, (DialogBox.inputBuffer)
 124++67AD A7             and a
 124++67AE CA 17 71       jp z, History.load
 125++67B1 C3 9D 67         jp .load
 126++67B4
 127++67B4              showCursor:
 128++67B4 3A 8C 75         ld a, (cursor_position)
 128++67B7 C6 02          add CURSOR_OFFSET
 129++67B9 C3 7B 60         jp TextMode.highlightLine
 130++67BC
 131++67BC              hideCursor:
 132++67BC 3A 8C 75         ld a, (cursor_position)
 132++67BF C6 02          add CURSOR_OFFSET
 133++67C1 C3 61 60         jp TextMode.usualLine
 134++67C4
 135++67C4              cursorDown:
 136++67C4 CD BC 67         call hideCursor
 137++67C7 21 8C 75         ld hl, cursor_position
 138++67CA 34               inc (hl)
 139++67CB C3 C5 66         jp checkBorder
 140++67CE
 141++67CE              cursorUp:
 142++67CE CD BC 67         call hideCursor
 143++67D1 21 8C 75         ld hl, cursor_position
 144++67D4 35               dec (hl)
 145++67D5 C3 C5 66         jp checkBorder
 146++67D8
 147++67D8              pageUp:
 148++67D8 3A 8E 75         ld a, (page_offset)
 148++67DB FE 00          cp 0
 148++67DD C2 EB 67       jp nz, .pageUp2
 149++67E0 3A 8F 75         ld a, (page_offset + 1)
 149++67E3 FE 00          cp 0
 149++67E5 C2 EB 67       jp nz, .pageUp2
 150++67E8 C3 01 68         jp .skip
 151++67EB              .pageUp2:
 152++67EB 3E 15            ld a, PER_PAGE - 1
 152++67ED 32 8C 75       ld (cursor_position), a
 153++67F0 2A 8E 75         ld hl, (page_offset)
 154++67F3 11 16 00         ld de,PER_PAGE
 155++67F6 ED 52            sbc hl,de
 156++67F8 22 8E 75         ld (page_offset), hl
 157++67FB              .exit
 158++67FB CD 9D 66         call renderGopherScreen
 159++67FE C3 DB 66         jp workLoop
 160++6801              .skip
 161++6801 AF               xor a
 161++6802 32 8C 75       ld (cursor_position), a
 161++6805 CD 9D 66       call renderGopherScreen
 161++6808 C3 DB 66       jp workLoop
 162++680B
 163++680B              pageDn:
 164++680B AF                xor a
 164++680C 32 8C 75       ld (cursor_position), a
 165++680F 2A 8E 75         ld hl,(page_offset)
 166++6812 11 16 00         ld de,PER_PAGE
 167++6815 19               add hl,de
 168++6816 22 8E 75         ld (page_offset), hl
 169++6819 C3 FB 67         jp pageUp.exit
 170++681C
 171++681C
 172++681C
# file closed: gopher/render/gopher-page.asm
   8+ 681C                  include "plaintext.asm"
# file opened: gopher/render/plaintext.asm
   1++681C              renderPlainTextScreen:
   2++681C CD 8A 65         call prepareScreen
   3++681F 06 16            ld b, PER_PAGE
   4++6821              .loop
   5++6821 C5               push bc
   6++6822 3E 16            ld a, PER_PAGE
   7++6824 90               sub b
   8++6825 47               ld b,a
   9++6826 5F               ld e,a
  10++6827 48               ld c,b
  11++6828 06 00            ld b,0
  12++682A 2A 8E 75         ld hl, (page_offset)
  13++682D 09               add hl,bc
  14++682E 44 4D            ld bc,hl
  15++6830 D5               push de
  16++6831 CD 50 65         call Render.findLine
  17++6834 D1               pop de
  18++6835 7C               ld a, h
  18++6836 B5             or l
  18++6837 CA 4A 68       jp z, .exit
  19++683A 7B               ld a, e
  20++683B C6 02            add CURSOR_OFFSET
  20++683D 57 1E 01       ld d, a, e, 1
  20++6840 CD 3A 60       call TextMode.gotoXY
  21++6843 CD 48 64         call print70Text
  22++6846 C1               pop bc
  23++6847 10 D8            djnz .loop
  24++6849 C9               ret
  25++684A              .exit
  26++684A C1               pop bc
  27++684B C9               ret
  28++684C
  29++684C              plainTextLoop:
  30++684C CD CA 69         call Console.getC
  31++684F
  32++684F FE 31            cp '1'
  32++6851 CA 00 71       jp z, History.back
  33++6854 FE 32            cp '2'
  33++6856 CA 69 67       jp z, navigate
  34++6859 FE 35            cp '5'
  34++685B CA B7 68       jp z, textUp
  35++685E FE 38            cp '8'
  35++6860 CA A7 68       jp z, textDown
  36++6863 FE 08            cp Console.KEY_LT
  36++6865 CA B7 68       jp z, textUp
  37++6868 FE 09            cp Console.KEY_RT
  37++686A CA A7 68       jp z, textDown
  38++686D
  39++686D FE 0A            cp Console.KEY_DN
  39++686F CA A7 68       jp z, textDown
  40++6872 FE 61            cp 'a'
  40++6874 CA A7 68       jp z, textDown
  41++6877
  42++6877 FE 0B            cp Console.KEY_UP
  42++6879 CA B7 68       jp z, textUp
  43++687C FE 71            cp 'q'
  43++687E CA B7 68       jp z, textUp
  44++6881
  45++6881 FE 68            cp 'h'
  45++6883 CA 6D 71       jp z, History.home
  46++6886 FE 48            cp 'H'
  46++6888 CA 6D 71       jp z, History.home
  47++688B
  48++688B FE 62            cp 'b'
  48++688D CA 00 71       jp z, History.back
  49++6890 FE 42            cp 'B'
  49++6892 CA 00 71       jp z, History.back
  50++6895
  51++6895 FE 64            cp 'd'
  51++6897 CA A4 65       jp z, inputHost
  52++689A FE 44            cp 'D'
  52++689C CA A4 65       jp z, inputHost
  53++689F
  54++689F FE 0C            cp Console.BACKSPACE
  54++68A1 CA 00 71       jp z, History.back
  55++68A4
  56++68A4                  IFDEF MSX
  57++68A4 ~                	cp ESC
  57++68A4 ~              jp z, exit
  58++68A4                  ENDIF
  59++68A4
  60++68A4                  IFDEF GS
  61++68A4 ~                cp 'M'
  61++68A4 ~              call z, GeneralSound.toggleModule
  62++68A4 ~                cp 'm'
  62++68A4 ~              call z, GeneralSound.toggleModule
  63++68A4                  ENDIF
  64++68A4
  65++68A4                  IFDEF TIMEX80
  66++68A4 ~                cp 'T'
  66++68A4 ~              call z, TextMode.toggleColor
  67++68A4 ~                cp 't'
  67++68A4 ~              call z, TextMode.toggleColor
  68++68A4                  ENDIF
  69++68A4
  70++68A4 C3 4C 68         jp plainTextLoop
  71++68A7
  72++68A7
  73++68A7              textDown:
  74++68A7 2A 8E 75         ld hl,(page_offset)
  75++68AA 11 16 00         ld de,PER_PAGE
  76++68AD 19               add hl,de
  77++68AE 22 8E 75         ld (page_offset), hl
  78++68B1 CD 1C 68         call renderPlainTextScreen
  79++68B4 C3 4C 68         jp plainTextLoop
  80++68B7
  81++68B7              textUp:
  82++68B7 3A 8E 75         ld a, (page_offset)
  82++68BA FE 00          cp 0
  82++68BC 20 0A          jr nz, .textUp2
  83++68BE 3A 8F 75         ld a, (page_offset + 1)
  83++68C1 FE 00          cp 0
  83++68C3 20 03          jr nz, .textUp2
  84++68C5 C3 4C 68         jp plainTextLoop
  85++68C8
  86++68C8              .textUp2:
  87++68C8 2A 8E 75         ld hl,(page_offset)
  88++68CB 11 16 00         ld de,PER_PAGE
  89++68CE ED 52            sbc hl,de
  90++68D0 22 8E 75         ld (page_offset), hl
  91++68D3 CD 1C 68         call renderPlainTextScreen
  92++68D6 C3 4C 68         jp plainTextLoop
  93++68D9
# file closed: gopher/render/plaintext.asm
   9+ 68D9
  10+ 68D9 00           play_next       db  0
  11+ 68DA              position        EQU historyBlock.position
  12+ 68DA              cursor_position EQU position + 2
  13+ 68DA              page_offset     EQU position + 4
  14+ 68DA
  15+ 68DA                  ENDMODULE
  16+ 68DA
  17+ 68DA                  include "dialogbox.asm"
# file opened: gopher/render/dialogbox.asm
   1++68DA                  module DialogBox
   2++68DA
   3++68DA              inputBox:
   4++68DA AF               xor a
   4++68DB 32 35 69       ld (inputBuffer), a
   5++68DE              .noclear
   6++68DE CD 96 69         call drawBox
   7++68E1              .loop
   8++68E1 11 05 0B         ld de, #0B05
   8++68E4 CD 3A 60       call TextMode.gotoXY
   9++68E7 21 35 69         ld hl, inputBuffer
   9++68EA CD BC 60       call TextMode.printZ
  10++68ED 3E 04            ld a, MIME_INPUT
  10++68EF CD A4 60       call TextMode.putC
  10++68F2 3E 20          ld a, ' '
  10++68F4 CD A4 60       call TextMode.putC
  11++68F7              .checkkey
  12++68F7 CD CA 69         call Console.getC
  13++68FA FE 0C            cp Console.BACKSPACE
  13++68FC 28 16          jr z, .removeChar
  14++68FE FE 0D        	cp CR
  14++6900 C8             ret z
  15++6901 FE 20            cp SPACE
  15++6903 38 F2          jr c, .checkkey
  16++6905              .putC
  17++6905 5F               ld e, a
  18++6906 AF               xor a
  18++6907 21 35 69 01    ld hl, inputBuffer, bc, #ff
  18++690B FF 00
  18++690D ED B1          cpir
  19++690F 77               ld (hl), a
  19++6910 2B             dec hl
  19++6911 73             ld (hl), e
  20++6912 18 CD            jr .loop
  21++6914              .removeChar
  22++6914 AF               xor a
  23++6915 21 35 69 01      ld hl, inputBuffer, bc, #ff
  23++6919 FF 00
  23++691B ED B1          cpir
  24++691D E5               push hl
  25++691E 11 36 69             ld de, inputBuffer + 1
  26++6921 B7                   or a
  26++6922 ED 52          sbc hl, de
  27++6924 7C                   ld a, h
  27++6925 B5             or l
  28++6926 E1               pop hl
  29++6927 28 B8            jr z, .loop
  30++6929 AF               xor a
  31++692A 2B               dec hl
  31++692B 2B             dec hl
  31++692C 77             ld (hl), a
  32++692D 18 B2            jr .loop
  33++692F
  34++692F              	IFNDEF MSX
  35++692F              delayinput:
  36++692F 06 32           ld b, 50
  37++6931              .loop2
  38++6931 76               halt
  39++6932 10 FD            djnz .loop2
  40++6934 C9               ret
  41++6935              namedownload
  42++6935                  IFDEF NEDOOS
  43++6935 ~            		db "..",92,"downloads",92
  44++6935                  ENDIF
  45++6935                  ENDIF
  46++6935 00 00 00...  inputBuffer ds 80
  47++6985
  48++6985              msgBox:
  49++6985 CD 8E 69         call msgNoWait
  50++6988 06 96            ld b, 150
  51++698A              .loop
  52++698A 76               halt
  53++698B 10 FD            djnz .loop
  54++698D C9               ret
  55++698E
  56++698E              msgNoWait:
  57++698E E5               push hl
  58++698F CD 96 69         call drawBox
  59++6992 E1               pop hl
  60++6993 C3 BC 60         jp TextMode.printZ
  61++6996
  62++6996              drawBox:
  63++6996 26 0A 3E 09      ld h, #0a, a, BORDER_TOP
  64++699A CD 47 60         call TextMode.fillLine
  65++699D 26 0B 3E 20      ld h, #0b, a, ' '
  66++69A1 CD 47 60         call TextMode.fillLine
  67++69A4 26 0C 3E 08      ld h, #0c, a, BORDER_BOTTOM
  68++69A8 CD 47 60         call TextMode.fillLine
  69++69AB 3E 0A            ld a, #0a
  70++69AD CD 7B 60         call TextMode.highlightLine
  71++69B0 3E 0C            ld a, #0c
  72++69B2 CD 7B 60         call TextMode.highlightLine
  73++69B5 11 03 0B         ld de,#0B03
  74++69B8 CD 3A 60         call TextMode.gotoXY
  75++69BB C9               ret
  76++69BC                  endmodule
  77++69BC
# file closed: gopher/render/dialogbox.asm
# file closed: gopher/render/index.asm
  31  69BC                  include "dos/index.asm"
# file opened: dos/index.asm
   1+ 69BC              	IFDEF NEDOOS
   2+ 69BC ~            	    include "nedoconsole.asm"
   3+ 69BC ~            		include "nedoos.asm"
   4+ 69BC              	ENDIF
   5+ 69BC
   6+ 69BC              	IFDEF TRDOS
   7+ 69BC                  	include "console.asm"
# file opened: dos/console.asm
   1++69BC                  module Console
   2++69BC              KEY_UP = 11
   3++69BC              KEY_DN = 10
   4++69BC              KEY_LT = 8
   5++69BC              KEY_RT = 9
   6++69BC              BACKSPACE = 12
   7++69BC 00           keyCode db 0
   8++69BD
   9++69BD              BASIC_KEY = #5C08
  10++69BD
  11++69BD              waitForKeyUp:
  12++69BD 76           	halt
  13++69BE AF              xor a
  13++69BF DB FE          in a, (#fe)
  13++69C1 2F             cpl
  13++69C2 E6 1F          and 31
  13++69C4 20 F7          jr nz, waitForKeyUp
  14++69C6 32 08 5C        ld (BASIC_KEY), a
  15++69C9 C9              ret
  16++69CA
  17++69CA              getC:
  18++69CA AF              xor a
  19++69CB 32 08 5C        ld (BASIC_KEY),a
  20++69CE              getC2:
  21++69CE 3A 08 5C        ld a,(BASIC_KEY)
  22++69D1 A7              and a
  22++69D2 28 FA          jr z, getC2
  23++69D4 47              ld b,a
  24++69D5 AF              xor a
  24++69D6 32 08 5C       ld (BASIC_KEY), a
  25++69D9 78              ld a, b
  26++69DA C9              ret
  27++69DB
  28++69DB              peekC:
  29++69DB AF               xor a
  29++69DC 32 08 5C       ld (BASIC_KEY),a
  30++69DF CD E3 69         call inkey
  31++69E2 C9               ret
  32++69E3
  33++69E3              inkey:
  34++69E3 11 00 00        ld de,0
  35++69E6 01 FE FE        ld bc,$fefe
  36++69E9 ED 78           in a,(c)
  37++69EB F6 E1           or $e1
  38++69ED FE FF           cp $ff
  39++69EF 20 57           jr nz, .keyhitA
  40++69F1
  41++69F1 1E 05           ld e,5
  42++69F3 06 FD           ld b,$fd
  43++69F5 ED 78           in a,(c)
  44++69F7 F6 E0           or $e0
  45++69F9 FE FF           cp $ff
  46++69FB 20 4B           jr nz, .keyhitA
  47++69FD
  48++69FD 1E 0A           ld e,10
  49++69FF 06 FB           ld b,$fb
  50++6A01 ED 78           in a,(c)
  51++6A03 F6 E0           or $e0
  52++6A05 FE FF           cp $ff
  53++6A07 20 3F           jr nz, .keyhitA
  54++6A09
  55++6A09 1E 0F           ld e,15
  56++6A0B 06 F7           ld b,$f7
  57++6A0D ED 78           in a,(c)
  58++6A0F F6 E0           or $e0
  59++6A11 FE FF           cp $ff
  60++6A13 20 33           jr nz, .keyhitA
  61++6A15
  62++6A15 1E 14           ld e,20
  63++6A17 06 EF           ld b,$ef
  64++6A19 ED 78           in a,(c)
  65++6A1B F6 E0           or $e0
  66++6A1D FE FF           cp $ff
  67++6A1F 20 27           jr nz, .keyhitA
  68++6A21
  69++6A21 1E 19           ld e,25
  70++6A23 06 DF           ld b,$df
  71++6A25 ED 78           in a,(c)
  72++6A27 F6 E0           or $e0
  73++6A29 FE FF           cp $ff
  74++6A2B 20 1B           jr nz, .keyhitA
  75++6A2D
  76++6A2D 1E 1E           ld e,30
  77++6A2F 06 BF           ld b,$bf
  78++6A31 ED 78           in a,(c)
  79++6A33 F6 E0           or $e0
  80++6A35 FE FF           cp $ff
  81++6A37 20 0F           jr nz, .keyhitA
  82++6A39
  83++6A39 1E 23           ld e,35
  84++6A3B 06 7F           ld b,$7f
  85++6A3D ED 78           in a,(c)
  86++6A3F F6 E2           or $e2
  87++6A41 FE FF           cp $ff
  88++6A43 4F              ld c,a
  89++6A44 20 19           jr nz, .keyhitB
  90++6A46
  91++6A46              .nokey
  92++6A46 AF              xor a
  93++6A47 C9              ret
  94++6A48
  95++6A48              .keyhitA
  96++6A48
  97++6A48 4F              ld c,a
  98++6A49
  99++6A49 78              ld a,b
 100++6A4A 2F              cpl
 101++6A4B F6 81           or $81
 102++6A4D DB FE           in a,($fe)
 103++6A4F F6 E0           or $e0
 104++6A51 FE FF           cp $ff
 105++6A53 20 F1           jr nz, .nokey
 106++6A55
 107++6A55 3E 7F           ld a,$7f
 108++6A57 DB FE           in a,($fe)
 109++6A59 F6 E2           or $e2
 110++6A5B FE FF           cp $ff
 111++6A5D 20 E7           jr nz, .nokey
 112++6A5F
 113++6A5F              .keyhitB
 114++6A5F
 115++6A5F 06 00           ld b,0
 116++6A61 21 A8 69        ld hl,.rowtbl-$e0
 117++6A64 09              add hl,bc
 118++6A65 7E              ld a,(hl)
 119++6A66 FE 05           cp 5
 120++6A68 30 DC           jr nc, .nokey
 121++6A6A 83              add a,e
 122++6A6B 5F              ld e,a
 123++6A6C
 124++6A6C 21 A8 6A        ld hl,.table
 125++6A6F 19              add hl,de
 126++6A70
 127++6A70 3E FE           ld a,$fe
 128++6A72 DB FE           in a,($fe)
 129++6A74 E6 01           and $01
 130++6A76 20 03           jr nz, .nocaps
 131++6A78 1E 28           ld e,40
 132++6A7A 19              add hl,de
 133++6A7B
 134++6A7B              .nocaps
 135++6A7B
 136++6A7B 3E 7F           ld a,$7f
 137++6A7D DB FE           in a,($fe)
 138++6A7F E6 02           and $02
 139++6A81 20 03           jr nz, .nosym
 140++6A83 1E 50           ld e,80
 141++6A85 19              add hl,de
 142++6A86
 143++6A86              .nosym
 144++6A86
 145++6A86 7E              ld a,(hl)
 146++6A87 C9              ret
 147++6A88
 148++6A88              .rowtbl
 149++6A88 FF FF FF FF     defb 255,255,255,255,255,255,255
 149++6A8C FF FF FF
 150++6A8F FF FF FF FF     defb 255,255,255,255,255,255,255,255
 150++6A93 FF FF FF FF
 151++6A97 04 FF FF FF     defb 4,255,255,255,255,255,255
 151++6A9B FF FF FF
 152++6A9E FF 03 FF FF     defb 255,3,255,255,255,2,255,1
 152++6AA2 FF 02 FF 01
 153++6AA6 00 FF           defb 0,255
 154++6AA8
 155++6AA8              .table
 156++6AA8 00 7A 78 63     db 0,'z','x','c','v'      ; CAPS SHIFT, Z, X, C, V
 156++6AAC 76
 157++6AAD 61 73 64 66     db 'a','s','d','f','g'      ; A, S, D, F, G
 157++6AB1 67
 158++6AB2 71 77 65 72     db 'q','w','e','r','t'      ; Q, W, E, R, T
 158++6AB6 74
 159++6AB7 31 32 33 34     db '1','2','3','4','5'      ; 1, 2, 3, 4, 5
 159++6ABB 35
 160++6ABC 30 39 38 37     db '0','9','8','7','6'      ; 0, 9, 8, 7, 6
 160++6AC0 36
 161++6AC1 70 6F 69 75     db 'p','o','i','u','y'      ; P, O, I, U, Y
 161++6AC5 79
 162++6AC6 0D 6C 6B 6A     db 13,'l','k','j','h'       ; ENTER, L, K, J, H
 162++6ACA 68
 163++6ACB 20 00 6D 6E     db ' ',0,'m','n','b'      ; SPACE, SYM SHIFT, M, N, B
 163++6ACF 62
 164++6AD0
 165++6AD0                 ; the following are CAPS SHIFTed
 166++6AD0
 167++6AD0 00 5A 58 43     db 0,'Z','X','C','V'      ; CAPS SHIFT, Z, X, C, V
 167++6AD4 56
 168++6AD5 41 53 44 46     db 'A','S','D','F','G'      ; A, S, D, F, G
 168++6AD9 47
 169++6ADA 51 57 45 52     db 'Q','W','E','R','T'      ; Q, W, E, R, T
 169++6ADE 54
 170++6ADF 07 06 80 81     db 7,6,128,129,8            ; 1, 2, 3, 4, 5
 170++6AE3 08
 171++6AE4 0C 00 09 0B     db 12,0,9,11,10             ; 0, 9, 8, 7, 6
 171++6AE8 0A
 172++6AE9 50 4F 49 55     db 'P','O','I','U','Y'      ; P, O, I, U, Y
 172++6AED 59
 173++6AEE 0D 4C 4B 4A     db 13,'L','K','J','H'       ; ENTER, L, K, J, H
 173++6AF2 48
 174++6AF3 20 00 4D 4E     db ' ',0,'M','N','B'      ; SPACE, SYM SHIFT, M, N, B
 174++6AF7 42
 175++6AF8
 176++6AF8                 ; the following are SYM SHIFTed
 177++6AF8
 178++6AF8 00 3A 60 3F     db 0,':',96,'?','/'       ; CAPS SHIFT, Z, X, C, V
 178++6AFC 2F
 179++6AFD 7E 7C 5C 7B     db '~','|',92,'{','}'       ; A, S, D, F, G
 179++6B01 7D
 180++6B02 83 84 85 3C     db 131,132,133,'<','>'      ; Q, W, E, R, T
 180++6B06 3E
 181++6B07 21 40 23 24     db '!','@','#','$','%'      ; 1, 2, 3, 4, 5
 181++6B0B 25
 182++6B0C 5F 29 28 27     db '_',')','(',39,'&'       ; 0, 9, 8, 7, 6
 182++6B10 26
 183++6B11 22 3B 82 5D     db 34,';',130,']','['       ; P, O, I, U, Y
 183++6B15 5B
 184++6B16 0D 3D 2B 2D     db 13,'=','+','-','^'       ; ENTER, L, K, J, H
 184++6B1A 5E
 185++6B1B 20 00 2E 2C     db ' ',0,'.',',','*'      ; SPACE, SYM SHIFT, M, N, B
 185++6B1F 2A
 186++6B20
 187++6B20                 ; the following are CAPS SHIFTed and SYM SHIFTed ("CTRL" key)
 188++6B20
 189++6B20 00 1A 18 03     db 0,26,24,3,22           ; CAPS SHIFT, Z, X, C, V
 189++6B24 16
 190++6B25 01 13 04 06     db 1,19,4,6,7               ; A, S, D, F, G
 190++6B29 07
 191++6B2A 11 17 05 12     db 17,23,5,18,20            ; Q, W, E, R, T
 191++6B2E 14
 192++6B2F 1B 1C 1D 1E     db 27,28,29,30,31           ; 1, 2, 3, 4, 5
 192++6B33 1F
 193++6B34 7F 00 86 60     db 127,0,134,'`',135      ; 0, 9, 8, 7, 6
 193++6B38 87
 194++6B39 10 0F 09 15     db 16,15,9,21,25            ; P, O, I, U, Y
 194++6B3D 19
 195++6B3E 0D 0C 0B 0A     db 13,12,11,10,8            ; ENTER, L, K, J, H
 195++6B42 08
 196++6B43 20 00 0D 0E     db ' ',0,13,14,2          ; SPACE, SYM SHIFT, M, N, B
 196++6B47 02
 197++6B48
 198++6B48                  endmodule
# file closed: dos/console.asm
   8+ 6B48              		include "trdos.asm"
# file opened: dos/trdos.asm
   1++6B48              ;trdos driver (izzx)
   2++6B48                  MODULE Dos
   3++6B48              ; API methods
   4++6B48              ESX_GETSETDRV = #89
   5++6B48              ESX_FOPEN = #9A
   6++6B48              ESX_FCLOSE = #9B
   7++6B48              ESX_FSYNC = #9C
   8++6B48              ESX_FREAD = #9D
   9++6B48              ESX_FWRITE = #9E
  10++6B48
  11++6B48              ; File modes
  12++6B48              FMODE_READ = #01
  13++6B48              FMODE_WRITE = #06
  14++6B48              FMODE_CREATE = #0E
  15++6B48
  16++6B48                  ; MACRO esxCall func
  17++6B48                  ; rst #8 : db func
  18++6B48                  ; ENDM
  19++6B48
  20++6B48              ;id = 0 файл не открыт
  21++6B48              ;id = 1 файл для чтения
  22++6B48              ;id = 2 файл для записи
  23++6B48              ;id = 3 файл для записи тип TRD
  24++6B48              ;id = 4 файл для записи тип SCL
  25++6B48
  26++6B48              ; HL - filename in ASCIIZ
  27++6B48              loadBuffer:
  28++6B48 06 01            ld b, Dos.FMODE_READ
  28++6B4A CD 64 6B       call Dos.fopen
  29++6B4D F5               push af
  30++6B4E 21 40 9C 01          ld hl, outputBuffer, bc, #ffff - outputBuffer
  30++6B52 BF 63
  30++6B54 CD 51 6C       call Dos.fread
  31++6B57 21 40 9C             ld hl, outputBuffer
  31++6B5A 09             add hl, bc
  31++6B5B AF             xor a
  31++6B5C 77             ld (hl), a
  31++6B5D 23             inc hl
  31++6B5E 77             ld (hl), a
  32++6B5F F1               pop af
  33++6B60 CD 3D 6C         call Dos.fclose
  34++6B63 C9               ret
  35++6B64
  36++6B64
  37++6B64              ; Returns:
  38++6B64              ;  A - current drive
  39++6B64              ; getDefaultDrive: ;нигде не используется
  40++6B64                  ; ld a, 0 : esxCall ESX_GETSETDRV
  41++6B64                  ; ret
  42++6B64
  43++6B64
  44++6B64
  45++6B64              ; Opens file on default drive
  46++6B64              ; B - File mode
  47++6B64              ; HL - File name
  48++6B64              ; Returns:
  49++6B64              ;  A - file stream id
  50++6B64              fopen:
  51++6B64                  ; push bc : push hl
  52++6B64                  ; call getDefaultDrive
  53++6B64                  ; pop ix : pop bc
  54++6B64                  ; esxCall ESX_FOPEN
  55++6B64                  ; ret
  56++6B64 78           	ld a,b
  57++6B65 FE 01        	cp FMODE_READ ;если режим открытие файла
  58++6B67 28 06        	jr z,fopen_r
  59++6B69 FE 0E        	cp FMODE_CREATE
  60++6B6B 28 39        	jr z,fopen_c ;если режим создание файла
  61++6B6D 18 34        	jr fopen_err ;иначе выход
  62++6B6F
  63++6B6F              fopen_r	;открытие существующего файла на чтение (id=1)
  64++6B6F CD D4 6F     			call format_name ;
  65++6B72 0E 13        			ld      c,#13 ;move file info to syst var
  66++6B74 CD 13 3D                 call    #3d13
  67++6B77 0E 0A                    ld      c,#0a ;find file
  68++6B79 CD 13 3D                 call    #3d13
  69++6B7C 79                       ld      a,c
  70++6B7D FE FF        			cp 		#ff
  71++6B7F 28 22        			jr 		z,fopen_err ;если не нашли файла
  72++6B81 0E 08                    ld      c,#08 ;read file title
  73++6B83 CD 13 3D                 call    #3d13
  74++6B86                          ;ld      hl,loadadr ;куда
  75++6B86 ED 5B EB 5C              ld      de,(#5ceb) ;начало файла сектор дорожка
  76++6B8A ED 53 80 70              ld      (f_r_cur_trk),de
  77++6B8E
  78++6B8E 3A EA 5C                 ld      a,(#5cea)
  79++6B91 32 82 70                 ld      (f_r_len_sec),a ;длина в секторах
  80++6B94                          ;or      a
  81++6B94                          ;ret     z    ;выход если пустой
  82++6B94
  83++6B94 ED 5B E8 5C  			ld de,(#5CE8) ; длина файла или программной части для BASIC
  84++6B98 ED 53 83 70  			ld      (f_r_len),de
  85++6B9C
  86++6B9C                          ; ld      de,(fcurtrk) ;текущие сектор дорожка
  87++6B9C                          ; ld      (#5cf4),de ;восстановим
  88++6B9C AF           			xor a
  89++6B9D 3E 01        			ld 		a,1
  90++6B9F 32 85 70     			ld (f_r_flag),a ;флаг что файл для чтения открыт
  91++6BA2              			;id канала будет 1
  92++6BA2 C9           	ret
  93++6BA3
  94++6BA3              fopen_err
  95++6BA3 AF           	xor a ;если никакой файл не открыли, то id = 0
  96++6BA4 37           	scf ;флаг ошибки
  97++6BA5 C9           	ret
  98++6BA6
  99++6BA6
 100++6BA6              fopen_c	;создание нового файла (id=2-4)
 101++6BA6 CD D4 6F     	call format_name ;
 102++6BA9              	;выясним, не образ ли это для разворачивания
 103++6BA9 21 63 70         ld hl, trdExt1
 103++6BAC CD F2 63       call CompareBuff.search
 103++6BAF A7             and a
 103++6BB0 20 1D          jr nz, fopen_c_trd
 104++6BB2 21 68 70         ld hl, trdExt2
 104++6BB5 CD F2 63       call CompareBuff.search
 104++6BB8 A7             and a
 104++6BB9 20 14          jr nz, fopen_c_trd
 105++6BBB 21 6D 70     	ld hl, sclExt1
 105++6BBE CD F2 63       call CompareBuff.search
 105++6BC1 A7             and a
 105++6BC2 20 3A          jr nz, fopen_c_scl
 106++6BC4 21 72 70         ld hl, sclExt2
 106++6BC7 CD F2 63       call CompareBuff.search
 106++6BCA A7             and a
 106++6BCB 20 31          jr nz, fopen_c_scl
 107++6BCD
 108++6BCD
 109++6BCD              fopen_c_2	;создание произвольного файла
 110++6BCD 18 D4        	jr 		fopen_err ;пока отключено
 111++6BCF
 112++6BCF              	; ld      c,#13 ;move file info to syst var
 113++6BCF                  ; call    #3d13
 114++6BCF              	; ld de,256 ;запишем пока 1 сектор
 115++6BCF              	; ld hl,#4000 ;возьмём случайные данные из экрана
 116++6BCF                  ; ld      c,#0b ;запись файла CODE
 117++6BCF                  ; call    #3d13
 118++6BCF                  ; ld      a,c
 119++6BCF              	; cp 		#ff
 120++6BCF              	; jr 		z,fopen_err ;если ошибка
 121++6BCF
 122++6BCF                  ; ld      de,(#5ceb) ;начало файла сектор дорожка
 123++6BCF                  ; ld      (f_w_cur_trk),de
 124++6BCF                  ; ld      a,(#5cea)
 125++6BCF                  ; ld      (f_w_len_sec),a ;длина в секторах
 126++6BCF              	; xor a ;id канала будет 2
 127++6BCF              	; ld a,2
 128++6BCF              	; ld (f_w_flag),a ;флаг что файл для записи открыт
 129++6BCF              	; ret
 130++6BCF
 131++6BCF
 132++6BCF
 133++6BCF
 134++6BCF
 135++6BCF              fopen_c_trd	;открытие файла для разворачивания образа trd (id=3)
 136++6BCF 3A 19 5D     	ld a,(#5D19) ;номер дисковода по умолчанию
 137++6BD2 C6 41        	add a,"A"
 138++6BD4 32 49 70     	ld (write_ima_d),a ;подставим букву в запросе
 139++6BD7 21 34 70         ld hl, write_ima
 140++6BDA CD 85 69         call DialogBox.msgBox ;предуреждение
 141++6BDD              WAITKEY_trd
 142++6BDD 3A 04 5C     	ld 		a,(23556)
 143++6BE0 FE FF        	cp 255
 144++6BE2 28 F9        	JR Z,WAITKEY_trd	;ждём любую клавишу
 145++6BE4
 146++6BE4 11 00 00     	ld      de,0 ;начало сектор дорожка
 147++6BE7 ED 53 F4 5C      ld      (#5cf4),de
 148++6BEB AF           	xor a
 149++6BEC 32 95 70     	ld (sec_shift),a ;переменная
 150++6BEF 21 00 00     	ld hl,0
 151++6BF2 22 8A 70     	ld (f_w_len+0),hl
 152++6BF5 22 8C 70     	ld (f_w_len+2),hl
 153++6BF8 3E 03        	ld a,3 ;id канала
 154++6BFA 32 89 70     	ld (f_w_flag),a ;флаг что trd для записи открыт
 155++6BFD C9           	ret
 156++6BFE
 157++6BFE
 158++6BFE
 159++6BFE
 160++6BFE              fopen_c_scl	;открытие файла для разворачивания образа scl (id=4)
 161++6BFE 3A 19 5D     	ld a,(#5D19) ;номер дисковода по умолчанию
 162++6C01 C6 41        	add a,"A"
 163++6C03 32 49 70     	ld (write_ima_d),a ;подставим букву в запросе
 164++6C06 21 34 70         ld hl, write_ima
 165++6C09 CD 85 69         call DialogBox.msgBox ;предуреждение
 166++6C0C              WAITKEY_scl
 167++6C0C 3A 04 5C     	ld 		a,(23556)
 168++6C0F FE FF        	cp 255
 169++6C11 28 F9        	JR Z,WAITKEY_scl	;ждём любую клавишу
 170++6C13
 171++6C13 11 00 00     	ld      de,0 ;начало сектор дорожка
 172++6C16 ED 53 F4 5C      ld      (#5cf4),de
 173++6C1A
 174++6C1A 21 00 48     	ld hl,cat_buf ;очистить место для каталога дискеты
 175++6C1D 11 01 48     	ld de,cat_buf+1
 176++6C20 36 00        	ld (hl),0
 177++6C22 01 FF 08     	ld bc,9*256-1
 178++6C25 ED B0        	ldir
 179++6C27
 180++6C27 CD 49 6E     	call scl_parse ;запуск цикла сборки образа
 181++6C2A
 182++6C2A AF           	xor a
 183++6C2B 32 95 70     	ld (sec_shift),a ;переменная
 184++6C2E              	;ld (scl_que),a
 185++6C2E 21 00 00     	ld hl,0
 186++6C31 22 8A 70     	ld (f_w_len+0),hl
 187++6C34 22 8C 70     	ld (f_w_len+2),hl
 188++6C37 3E 04        	ld a,4 ;id канала
 189++6C39 32 89 70     	ld (f_w_flag),a ;флаг что scl для записи открыт
 190++6C3C C9           	ret
 191++6C3D
 192++6C3D
 193++6C3D
 194++6C3D              ; A - file stream id
 195++6C3D              fclose:
 196++6C3D                  ;esxCall ESX_FCLOSE
 197++6C3D              	; push af
 198++6C3D              ; WAITKEY2	XOR A:IN A,(#FE):CPL:AND #1F:JR Z,WAITKEY2
 199++6C3D              	; pop af
 200++6C3D FE 04        	cp 4 ;если scl
 201++6C3F 20 08        	jr nz,fclose2
 202++6C41 21 00 51     	ld hl,sec_buf ;
 203++6C44 06 01        	ld b,1
 204++6C46 CD 28 6E     	call scl_write_buf ;допишем остаток scl, если есть
 205++6C49
 206++6C49              fclose2
 207++6C49 AF           	xor a ;как бы закрываем все файлы
 208++6C4A 32 85 70     	ld (f_r_flag),a
 209++6C4D 32 89 70     	ld (f_w_flag),a
 210++6C50 C9               ret
 211++6C51
 212++6C51
 213++6C51
 214++6C51
 215++6C51              ; A - file stream id
 216++6C51              ; BC - length
 217++6C51              ; HL - buffer
 218++6C51              ; Returns
 219++6C51              ;  BC - length(how much was actually read)
 220++6C51              fread: ;(id=1)
 221++6C51                  ; push hl : pop ix
 222++6C51                  ; esxCall ESX_FREAD
 223++6C51              	; push af
 224++6C51              	; ld a,4
 225++6C51              	; out (254),a
 226++6C51              ; WAITKEY	XOR A:IN A,(#FE):CPL:AND #1F:JR Z,WAITKEY
 227++6C51              	; xor a
 228++6C51              	; out (254),a
 229++6C51              	; pop af
 230++6C51
 231++6C51 FE 01        	cp 1 ;id = 1?
 232++6C53 20 06        	jr nz,fread_no_chek ;выход если номер потока не = 1
 233++6C55 3A 85 70     	ld a,(f_r_flag)
 234++6C58 B7           	or a
 235++6C59 20 06        	jr nz,fread_chek ;файл уже открыт?
 236++6C5B              fread_no_chek ;выход с ошибкой
 237++6C5B AF           	xor a
 238++6C5C 37           	scf ;флаг ошибки
 239++6C5D 01 00 00     	ld bc,0 ;ничего мы не считали
 240++6C60 C9           	ret
 241++6C61
 242++6C61              fread_chek
 243++6C61 ED 4B 81 70  	ld bc,(f_r_len_sec-1) ;загружаем файл целиком, не смотря на то, сколько байт было запрошено
 244++6C65 0E 05            ld      c,5 ;read читаем целыми секторами
 245++6C67 ED 5B 80 70  	ld de,(f_r_cur_trk)
 246++6C6B CD 13 3D         call    #3d13
 247++6C6E ED 4B 83 70  	ld bc,(f_r_len) ;возвратим сколько считали байт (длину файла)
 248++6C72 AF           	xor a ;флаги сбросим
 249++6C73 C9               ret
 250++6C74
 251++6C74              ; A - file stream id
 252++6C74              ; BC - length
 253++6C74              ; HL - buffer
 254++6C74              ; Returns:
 255++6C74              ;   BC - actually written bytes
 256++6C74              fwrite: ;
 257++6C74                  ; push hl : pop ix
 258++6C74                  ; esxCall ESX_FWRITE
 259++6C74
 260++6C74              	; push af
 261++6C74              	; ld a,2
 262++6C74              	; out (254),a
 263++6C74              ; WAITKEY1	XOR A:IN A,(#FE):CPL:AND #1F:JR Z,WAITKEY1
 264++6C74              	; xor a
 265++6C74              	; out (254),a
 266++6C74              	; pop af
 267++6C74
 268++6C74 FE 02        	cp 2 ;id = 2?
 269++6C76 28 0F        	jr z,fwrite_chek ;проверка id потока
 270++6C78 FE 03        	cp 3 ;id = 3?
 271++6C7A 28 0D        	jr z,fwrite_chek_trd ;проверка id потока
 272++6C7C FE 04        	cp 4 ;id = 4?
 273++6C7E CA 63 6D     	jp z,fwrite_chek_scl ;проверка id потока
 274++6C81
 275++6C81
 276++6C81              fwrite_no_chek ;выход с ошибкой
 277++6C81 AF           	xor a
 278++6C82 37           	scf ;флаг ошибки
 279++6C83 01 00 00     	ld bc,0 ;ничего мы не записали
 280++6C86 C9           	ret
 281++6C87
 282++6C87              fwrite_chek ;запись произвольного типа файла
 283++6C87 18 F8        	jr fwrite_no_chek ;пока отключено
 284++6C89              	; ld a,(f_w_flag)
 285++6C89              	; or a
 286++6C89              	; jr z,fwrite_no_chek ;файл уже открыт?
 287++6C89              	; ld (temp_bc),bc
 288++6C89              	; ;ld bc,(f_r_len_sec-1) ;
 289++6C89                  ; ld      c,6 ;пишем целыми секторами
 290++6C89              	; ld de,(f_w_cur_trk)
 291++6C89                  ; call    #3d13
 292++6C89              	; ld bc,(temp_bc) ;возвратим, что сколько запрашивали, столько и считали байт
 293++6C89              	; xor a ;флаги сбросим
 294++6C89                  ; ret
 295++6C89
 296++6C89
 297++6C89
 298++6C89
 299++6C89
 300++6C89              fwrite_chek_trd ;запись trd файла (разворачивание образа)
 301++6C89              	; ld a,2
 302++6C89              	; out (254),a
 303++6C89              ; WAITKEY_t	XOR A:IN A,(#FE):CPL:AND #1F:JR Z,WAITKEY_t
 304++6C89              	; xor a
 305++6C89              	; out (254),a
 306++6C89 3A 89 70     	ld a,(f_w_flag)
 307++6C8C B7           	or a
 308++6C8D 28 F2        	jr z,fwrite_no_chek ;файл уже открыт?
 309++6C8F ED 43 8F 70  	ld (temp_bc),bc ;длина
 310++6C93 22 91 70     	ld (temp_hl),hl ;адрес данных
 311++6C96 78           	ld a,b
 312++6C97 B1           	or c
 313++6C98 28 E7        	jr z,fwrite_no_chek ; если длина 0, то выход
 314++6C9A
 315++6C9A              	; ld a,b
 316++6C9A              	; or a
 317++6C9A              	; jr nz,testt1
 318++6C9A              	; nop
 319++6C9A
 320++6C9A              ; testt1
 321++6C9A
 322++6C9A AF           	xor a
 323++6C9B 32 97 70     	ld (sec_part),a ;обнулить переменные
 324++6C9E 32 96 70     	ld (sec_shift2),a
 325++6CA1 32 97 70     	ld (sec_shift2+1),a
 326++6CA4 32 98 70     	ld (sec_shift_flag),a
 327++6CA7 32 8E 70     	ld (write_end_flag),a ;
 328++6CAA
 329++6CAA
 330++6CAA 3A 95 70     	ld a,(sec_shift)
 331++6CAD B7           	or a
 332++6CAE 28 43        	jr z,fwrite_trd3 ;если смещения нет, то первую часть пропустим
 333++6CB0
 334++6CB0
 335++6CB0 4F           	ld c,a
 336++6CB1 06 00        	ld b,0
 337++6CB3 2A 8F 70     	ld hl,(temp_bc) ;проверка заполнится ли целый сектор
 338++6CB6 09           	add hl,bc
 339++6CB7
 340++6CB7 3E 01        	ld a,1
 341++6CB9 32 8E 70     	ld (write_end_flag),a ;флаг что не нужно дописывать остаток
 342++6CBC
 343++6CBC 7C           	ld a,h
 344++6CBD B7           	or a
 345++6CBE 20 05        	jr nz,fwrite_trd4
 346++6CC0 3E 01        	ld a,1
 347++6CC2 32 98 70     	ld (sec_shift_flag),a ;флаг что не заполнен сектор
 348++6CC5
 349++6CC5              fwrite_trd4
 350++6CC5 21 00 51     	ld hl,sec_buf ;буфер последнего сектора
 351++6CC8 09           	add hl,bc ;на этой точке остановились
 352++6CC9 EB           	ex de,hl
 353++6CCA 2A 91 70     	ld hl,(temp_hl) ;присоединим начало данных в конец предыдущих
 354++6CCD              	; ld a,c
 355++6CCD              	; or a
 356++6CCD              	; jr nz,fwrite_trd2
 357++6CCD              	; inc b ;коррекция
 358++6CCD              ; fwrite_trd2
 359++6CCD              	; ld c,a
 360++6CCD AF           	xor a
 361++6CCE 91           	sub c
 362++6CCF 4F           	ld c,a ;сколько осталось перенести до заполнения сектора
 363++6CD0 ED 43 96 70  	ld (sec_shift2),bc ;сохраним сколько добавили байт
 364++6CD4 ED B0        	ldir
 365++6CD6
 366++6CD6 3A 98 70     	ld a,(sec_shift_flag)
 367++6CD9 B7           	or a
 368++6CDA 20 17        	jr nz,fwrite_trd3 ;если сектор ещё не заполнен писать не будем
 369++6CDC
 370++6CDC 21 00 51     	ld hl,sec_buf
 371++6CDF ED 5B F4 5C  	ld de,(#5cf4)
 372++6CE3              	;ld (f_w_cur_trk),de	;запомним позицию
 373++6CE3 01 06 01         ld      bc,#0106 ;пишем 1 сектор из буфера
 374++6CE6 CD 13 3D         call    #3d13
 375++6CE9 79           	ld a,c
 376++6CEA FE FF        	cp 255
 377++6CEC CA 81 6C     	jp z,fwrite_no_chek ;выход если ошибка
 378++6CEF
 379++6CEF AF           	xor a
 380++6CF0 32 8E 70     	ld (write_end_flag),a ;флаг что нужно дописывать остаток
 381++6CF3              	; ld de,(f_w_cur_trk) ;если сектор ещё не заполнен, останемся на старой позиции
 382++6CF3              	; ld (#5cf4),de
 383++6CF3              	; ld b,1 ;на сектор вперёд
 384++6CF3              	; ld de,(f_w_cur_trk)
 385++6CF3              	; call calc_next_pos
 386++6CF3              	; ld (f_w_cur_trk),de
 387++6CF3
 388++6CF3              fwrite_trd3
 389++6CF3 2A 91 70     	ld hl,(temp_hl) ;запишем остаток данных
 390++6CF6              	;ld a,(sec_shift)
 391++6CF6              	;ld c,a
 392++6CF6              	;ld b,0
 393++6CF6 ED 4B 96 70  	ld bc,(sec_shift2)
 394++6CFA 09           	add hl,bc ;с этой точки пишем
 395++6CFB 22 93 70     	ld (temp_hl2),hl ;сохраним начало записи второго сектора
 396++6CFE
 397++6CFE 2A 8F 70     	ld hl,(temp_bc) ;вычисление на чём остановимся в этот раз
 398++6D01 A7           	and a
 399++6D02 ED 42        	sbc hl,bc ;вычтем то, что добавили к первому сектору
 400++6D04 4D           	ld c,l
 401++6D05 44           	ld b,h
 402++6D06 30 02        	jr nc,fwrite_trd5
 403++6D08 06 00        	ld b,0 ;коррекция если вышел минус
 404++6D0A              fwrite_trd5
 405++6D0A 2A 91 70     	ld hl,(temp_hl)
 406++6D0D 09           	add hl,bc
 407++6D0E
 408++6D0E 11 40 9C     	ld de,outputBuffer
 409++6D11 A7           	and a
 410++6D12 ED 52        	sbc hl,de
 411++6D14
 412++6D14 7D           	ld a,l
 413++6D15 32 95 70     	ld (sec_shift),a ;смещение на следующий раз
 414++6D18              	;ld hl,(temp_hl)
 415++6D18
 416++6D18
 417++6D18              	; or a
 418++6D18              	; jr z,fwrite_trd1
 419++6D18              	; inc b  ;коррекция количества секторов
 420++6D18
 421++6D18 78           	ld a,b ;нужна проверка на количество секторов!!!
 422++6D19 32 97 70     	ld (sec_part),a ;запомним сколько секторов во второй части
 423++6D1C
 424++6D1C              	;ld a,b
 425++6D1C B7           	or a
 426++6D1D 28 16        	jr z,fwrite_trd1 ;если размер данных меньше сектора, то пропустим запись
 427++6D1F
 428++6D1F 2A 93 70     	ld hl,(temp_hl2)
 429++6D22              	;push bc
 430++6D22 ED 5B F4 5C  	ld de,(#5cf4)
 431++6D26 0E 06            ld      c,6 ;пишем целыми секторами
 432++6D28 CD 13 3D         call    #3d13
 433++6D2B 79           	ld a,c
 434++6D2C              	;pop bc
 435++6D2C FE FF        	cp 255
 436++6D2E CA 81 6C     	jp z,fwrite_no_chek ;выход если ошибка
 437++6D31              	; ld de,(f_w_cur_trk)
 438++6D31              	; call calc_next_pos
 439++6D31              	; ld (f_w_cur_trk),de
 440++6D31
 441++6D31 AF           	xor a
 442++6D32 32 8E 70     	ld (write_end_flag),a ;флаг что нужно дописывать остаток
 443++6D35
 444++6D35              fwrite_trd1
 445++6D35 3A 8E 70     	ld a,(write_end_flag) ;нужно записывать остаток?
 446++6D38 B7           	or a
 447++6D39 20 12        	jr nz,fwrite_trd_ex ;не нужно
 448++6D3B
 449++6D3B 2A 93 70     	ld hl,(temp_hl2) ;сохраним незаписанный остаток
 450++6D3E 3A 97 70     	ld a,(sec_part)
 451++6D41 47           	ld b,a
 452++6D42 0E 00        	ld c,0
 453++6D44 09           	add hl,bc
 454++6D45 11 00 51     	ld de,sec_buf
 455++6D48 01 00 01     	ld bc,256
 456++6D4B ED B0        	ldir
 457++6D4D              ;fwrite_trd2
 458++6D4D
 459++6D4D
 460++6D4D              fwrite_trd_ex
 461++6D4D ED 4B 8F 70  	ld bc,(temp_bc) ;возвратим, что сколько запрашивали, столько и записали байт
 462++6D51              	;посчитаем общую длину записанного
 463++6D51 2A 8A 70     	ld hl,(f_w_len)
 464++6D54 09           	add hl,bc
 465++6D55 22 8A 70     	ld (f_w_len),hl
 466++6D58 30 07        	jr nc,fwrite_trd_ex1
 467++6D5A 2A 8C 70     	ld hl,(f_w_len+2)
 468++6D5D 23           	inc hl
 469++6D5E 22 8C 70     	ld (f_w_len+2),hl
 470++6D61
 471++6D61              fwrite_trd_ex1
 472++6D61 AF           	xor a ;флаги сбросим
 473++6D62 C9               ret
 474++6D63
 475++6D63
 476++6D63
 477++6D63
 478++6D63
 479++6D63              ;------------------scl----------------------
 480++6D63              fwrite_chek_scl ;запись scl файла (разворачивание образа)
 481++6D63              	; ld a,2
 482++6D63              	; out (254),a
 483++6D63              ; WAITKEY_t	XOR A:IN A,(#FE):CPL:AND #1F:JR Z,WAITKEY_t
 484++6D63              	; xor a
 485++6D63              	; out (254),a
 486++6D63 3A 89 70     	ld a,(f_w_flag)
 487++6D66 B7           	or a
 488++6D67 CA 81 6C     	jp z,fwrite_no_chek ;файл уже открыт?
 489++6D6A ED 43 8F 70  	ld (temp_bc),bc ;длина
 490++6D6E 22 91 70     	ld (temp_hl),hl ;адрес данных
 491++6D71 78           	ld a,b
 492++6D72 B1           	or c
 493++6D73 CA 81 6C     	jp z,fwrite_no_chek ; если длина 0, то выход
 494++6D76
 495++6D76              	; ld a,b
 496++6D76              	; or a
 497++6D76              	; jr nz,testt1
 498++6D76              	; nop
 499++6D76
 500++6D76              ; testt1
 501++6D76
 502++6D76 AF           	xor a
 503++6D77 32 97 70     	ld (sec_part),a ;обнулить переменные
 504++6D7A 32 96 70     	ld (sec_shift2),a
 505++6D7D 32 97 70     	ld (sec_shift2+1),a
 506++6D80 32 98 70     	ld (sec_shift_flag),a
 507++6D83 32 8E 70     	ld (write_end_flag),a ;
 508++6D86
 509++6D86
 510++6D86 3A 95 70     	ld a,(sec_shift)
 511++6D89 B7           	or a
 512++6D8A 28 38        	jr z,fwrite_scl3 ;если смещения нет, то первую часть пропустим
 513++6D8C
 514++6D8C
 515++6D8C 4F           	ld c,a
 516++6D8D 06 00        	ld b,0
 517++6D8F 2A 8F 70     	ld hl,(temp_bc) ;проверка заполнится ли целый сектор
 518++6D92 09           	add hl,bc
 519++6D93
 520++6D93 3E 01        	ld a,1
 521++6D95 32 8E 70     	ld (write_end_flag),a ;флаг что не нужно дописывать остаток
 522++6D98
 523++6D98 7C           	ld a,h
 524++6D99 B7           	or a
 525++6D9A 20 05        	jr nz,fwrite_scl4
 526++6D9C 3E 01        	ld a,1
 527++6D9E 32 98 70     	ld (sec_shift_flag),a ;флаг что не заполнен сектор
 528++6DA1
 529++6DA1              fwrite_scl4
 530++6DA1 21 00 51     	ld hl,sec_buf ;буфер последнего сектора
 531++6DA4 09           	add hl,bc ;на этой точке остановились
 532++6DA5 EB           	ex de,hl
 533++6DA6 2A 91 70     	ld hl,(temp_hl) ;присоединим начало данных в конец предыдущих
 534++6DA9              	; ld a,c
 535++6DA9              	; or a
 536++6DA9              	; jr nz,fwrite_scl2
 537++6DA9              	; inc b ;коррекция
 538++6DA9              ; fwrite_scl2
 539++6DA9              	; ld c,a
 540++6DA9 AF           	xor a
 541++6DAA 91           	sub c
 542++6DAB 4F           	ld c,a ;сколько осталось перенести до заполнения сектора
 543++6DAC ED 43 96 70  	ld (sec_shift2),bc ;сохраним сколько добавили байт
 544++6DB0 ED B0        	ldir
 545++6DB2
 546++6DB2 3A 98 70     	ld a,(sec_shift_flag)
 547++6DB5 B7           	or a
 548++6DB6 20 0C        	jr nz,fwrite_scl3 ;если сектор ещё не заполнен писать не будем
 549++6DB8
 550++6DB8 21 00 51     	ld hl,sec_buf
 551++6DBB              	;ld de,(#5cf4)
 552++6DBB              	;ld (f_w_cur_trk),de	;запомним позицию
 553++6DBB 06 01            ld      b,#01 ;пишем 1 сектор из буфера
 554++6DBD CD 28 6E         call    scl_write_buf
 555++6DC0              	; ld a,c
 556++6DC0              	; cp 255
 557++6DC0              	; jp z,fwrite_no_chek ;выход если ошибка
 558++6DC0
 559++6DC0 AF           	xor a
 560++6DC1 32 8E 70     	ld (write_end_flag),a ;флаг что нужно дописывать остаток
 561++6DC4              	; ld de,(f_w_cur_trk) ;если сектор ещё не заполнен, останемся на старой позиции
 562++6DC4              	; ld (#5cf4),de
 563++6DC4              	; ld b,1 ;на сектор вперёд
 564++6DC4              	; ld de,(f_w_cur_trk)
 565++6DC4              	; call calc_next_pos
 566++6DC4              	; ld (f_w_cur_trk),de
 567++6DC4
 568++6DC4              fwrite_scl3
 569++6DC4 2A 91 70     	ld hl,(temp_hl) ;запишем остаток данных
 570++6DC7              	;ld a,(sec_shift)
 571++6DC7              	;ld c,a
 572++6DC7              	;ld b,0
 573++6DC7 ED 4B 96 70  	ld bc,(sec_shift2)
 574++6DCB 09           	add hl,bc ;с этой точки пишем
 575++6DCC 22 93 70     	ld (temp_hl2),hl ;сохраним начало записи второго сектора
 576++6DCF
 577++6DCF 2A 8F 70     	ld hl,(temp_bc) ;вычисление на чём остановимся в этот раз
 578++6DD2 A7           	and a
 579++6DD3 ED 42        	sbc hl,bc ;вычтем то, что добавили к первому сектору
 580++6DD5 4D           	ld c,l
 581++6DD6 44           	ld b,h
 582++6DD7 30 02        	jr nc,fwrite_scl5
 583++6DD9 06 00        	ld b,0 ;коррекция если вышел минус
 584++6DDB              fwrite_scl5
 585++6DDB 2A 91 70     	ld hl,(temp_hl)
 586++6DDE 09           	add hl,bc
 587++6DDF
 588++6DDF 11 40 9C     	ld de,outputBuffer
 589++6DE2 A7           	and a
 590++6DE3 ED 52        	sbc hl,de
 591++6DE5
 592++6DE5 7D           	ld a,l
 593++6DE6 32 95 70     	ld (sec_shift),a ;смещение на следующий раз
 594++6DE9              	;ld hl,(temp_hl)
 595++6DE9
 596++6DE9
 597++6DE9              	; or a
 598++6DE9              	; jr z,fwrite_scl1
 599++6DE9              	; inc b  ;коррекция количества секторов
 600++6DE9
 601++6DE9 78           	ld a,b ;нужна проверка на количество секторов!!!
 602++6DEA 32 97 70     	ld (sec_part),a ;запомним сколько секторов во второй части
 603++6DED
 604++6DED              	;ld a,b
 605++6DED B7           	or a
 606++6DEE 28 0A        	jr z,fwrite_scl1 ;если размер данных меньше сектора, то пропустим запись
 607++6DF0
 608++6DF0 2A 93 70     	ld hl,(temp_hl2)
 609++6DF3              	;push bc
 610++6DF3              	;ld de,(#5cf4)
 611++6DF3                  ;ld      c,6 ;пишем целыми секторами
 612++6DF3 CD 28 6E         call    scl_write_buf
 613++6DF6              	;ld a,c
 614++6DF6              	;pop bc
 615++6DF6              	; cp 255
 616++6DF6              	; jp z,fwrite_no_chek ;выход если ошибка
 617++6DF6              	; ld de,(f_w_cur_trk)
 618++6DF6              	; call calc_next_pos
 619++6DF6              	; ld (f_w_cur_trk),de
 620++6DF6
 621++6DF6 AF           	xor a
 622++6DF7 32 8E 70     	ld (write_end_flag),a ;флаг что нужно дописывать остаток
 623++6DFA
 624++6DFA              fwrite_scl1
 625++6DFA 3A 8E 70     	ld a,(write_end_flag) ;нужно записывать остаток?
 626++6DFD B7           	or a
 627++6DFE 20 12        	jr nz,fwrite_scl_ex ;не нужно
 628++6E00
 629++6E00 2A 93 70     	ld hl,(temp_hl2) ;сохраним незаписанный остаток
 630++6E03 3A 97 70     	ld a,(sec_part)
 631++6E06 47           	ld b,a
 632++6E07 0E 00        	ld c,0
 633++6E09 09           	add hl,bc
 634++6E0A 11 00 51     	ld de,sec_buf
 635++6E0D 01 00 01     	ld bc,256
 636++6E10 ED B0        	ldir
 637++6E12              ;fwrite_scl2
 638++6E12
 639++6E12
 640++6E12              fwrite_scl_ex
 641++6E12 ED 4B 8F 70  	ld bc,(temp_bc) ;возвратим, что сколько запрашивали, столько и записали байт
 642++6E16              	;посчитаем общую длину записанного
 643++6E16 2A 8A 70     	ld hl,(f_w_len)
 644++6E19 09           	add hl,bc
 645++6E1A 22 8A 70     	ld (f_w_len),hl
 646++6E1D 30 07        	jr nc,fwrite_scl_ex1
 647++6E1F 2A 8C 70     	ld hl,(f_w_len+2)
 648++6E22 23           	inc hl
 649++6E23 22 8C 70     	ld (f_w_len+2),hl
 650++6E26
 651++6E26              fwrite_scl_ex1
 652++6E26 AF           	xor a ;флаги сбросим
 653++6E27 C9               ret
 654++6E28
 655++6E28
 656++6E28
 657++6E28
 658++6E28
 659++6E28
 660++6E28              scl_write_buf ;заполнение промежуточного буфера
 661++6E28 C5           	push bc ;сколько пакетов указано в b
 662++6E29 11 00 53     	ld de,scl_buf ;перенесём сектор во временный буфер
 663++6E2C 01 00 01     	ld bc,256
 664++6E2F ED B0        	ldir
 665++6E31 22 B9 70     	ld (scl_temp_hl2),hl ;сохраним адрес данных
 666++6E34 3A A1 70     	ld a,(scl_que) ;проверим флаг что нужны данные
 667++6E37 B7           	or a
 668++6E38 28 08        	jr z,scl_write_buf_ret ;не будем вызывать парсер если не нужны
 669++6E3A 21 42 6E     	ld hl,scl_write_buf_ret ;адрес возврата
 670++6E3D E5           	push hl
 671++6E3E 2A B3 70     	ld hl,(scl_parse_ret_adr) ;адрес для продолжения основного цикла сборки
 672++6E41 E9           	jp (hl) ;отдадим пакет 256 байт парсеру
 673++6E42              scl_write_buf_ret
 674++6E42 2A B9 70     	ld hl,(scl_temp_hl2)
 675++6E45 C1           	pop bc
 676++6E46 10 E0        	djnz scl_write_buf
 677++6E48
 678++6E48 C9           	ret
 679++6E49
 680++6E49
 681++6E49
 682++6E49              scl_parse ;разбор образа scl в trd, основной цикл
 683++6E49              	;получить первый сектор
 684++6E49              ;запрос порции данных по 256 байт
 685++6E49 22 B7 70     	ld (scl_temp_hl),hl
 686++6E4C ED 53 BB 70  	ld (scl_temp_de),de
 687++6E50 ED 43 BD 70  	ld (scl_temp_bc),bc
 688++6E54 3E 01        	ld a,1
 689++6E56 32 A1 70     	ld (scl_que),a ;включим флаг что нужны данные
 690++6E59 21 60 6E     	ld hl,scl_parse_ret ;сохраним адрес возврата
 691++6E5C 22 B3 70     	ld (scl_parse_ret_adr),hl
 692++6E5F C9           	ret ;вернёмся для ожидания данных
 693++6E60              scl_parse_ret
 694++6E60 AF           	xor a
 695++6E61 32 A1 70     	ld (scl_que),a
 696++6E64 2A B7 70     	ld hl,(scl_temp_hl)
 697++6E67 ED 5B BB 70  	ld de,(scl_temp_de)
 698++6E6B ED 4B BD 70  	ld bc,(scl_temp_bc)
 699++6E6F
 700++6E6F 11 00 53     	ld de,scl_buf ;проверка метки образа
 701++6E72 21 99 70     	ld hl,scl_sign
 702++6E75 06 08        	ld b,8
 703++6E77              scl_parse_chk
 704++6E77 1A           	ld a,(de)
 705++6E78 BE           	cp (hl)
 706++6E79 20 06        	jr nz,scl_parse_chk_no
 707++6E7B 23           	inc hl
 708++6E7C 13           	inc de
 709++6E7D 10 F8        	djnz scl_parse_chk
 710++6E7F 18 10        	jr scl_parse_chk_ok
 711++6E81              scl_parse_chk_no ;если не совпало, значит плохой образ
 712++6E81 21 A2 70         ld hl, scl_err
 713++6E84 CD 85 69         call DialogBox.msgBox ;предуреждение
 714++6E87 AF           	xor a
 715++6E88 32 A1 70     	ld (scl_que),a ;выключим флаг что нужны данные
 716++6E8B 3E 04        	ld a,4 ;закроем файл
 717++6E8D CD 3D 6C     	call fclose
 718++6E90 C9           	ret
 719++6E91              scl_parse_chk_ok ;сигнатура правильная
 720++6E91
 721++6E91              ;формирование каталога
 722++6E91 3A 08 53     	ld a,(scl_buf+8)
 723++6E94 32 B6 70     	ld (scl_files),a ;всего файлов
 724++6E97 32 B5 70     	ld (scl_cat_cycl),a ;цикл
 725++6E9A 21 09 53     	ld hl,scl_buf+9 ;адрес первого заголовка
 726++6E9D 11 00 48     	ld de,cat_buf ;адрес формируемого каталога trd
 727++6EA0              scl_parse_cat2
 728++6EA0 06 0E        	ld b,14 ;14 байт одна запись
 729++6EA2              scl_parse_cat
 730++6EA2 7E           	ld a,(hl)
 731++6EA3 12           	ld (de),a
 732++6EA4 13           	inc de
 733++6EA5 2C           	inc l ;адрес увеличиваем только в пределах младшего регистра
 734++6EA6 20 26        	jr nz,scl_parse_cat1
 735++6EA8              	;тут пора запросить следующий сектор
 736++6EA8              ;запрос порции данных по 256 байт
 737++6EA8 22 B7 70     	ld (scl_temp_hl),hl
 738++6EAB ED 53 BB 70  	ld (scl_temp_de),de
 739++6EAF ED 43 BD 70  	ld (scl_temp_bc),bc
 740++6EB3 3E 01        	ld a,1
 741++6EB5 32 A1 70     	ld (scl_que),a ;включим флаг что нужны данные
 742++6EB8 21 BF 6E     	ld hl,scl_parse_ret1 ;сохраним адрес возврата
 743++6EBB 22 B3 70     	ld (scl_parse_ret_adr),hl
 744++6EBE C9           	ret ;вернёмся для ожидания данных
 745++6EBF              scl_parse_ret1
 746++6EBF AF           	xor a
 747++6EC0 32 A1 70     	ld (scl_que),a
 748++6EC3 2A B7 70     	ld hl,(scl_temp_hl)
 749++6EC6 ED 5B BB 70  	ld de,(scl_temp_de)
 750++6ECA ED 4B BD 70  	ld bc,(scl_temp_bc)
 751++6ECE
 752++6ECE              scl_parse_cat1
 753++6ECE 10 D2        	djnz scl_parse_cat
 754++6ED0 13           	inc de
 755++6ED1 13           	inc de
 756++6ED2 3A B5 70     	ld a,(scl_cat_cycl)
 757++6ED5 3D           	dec a
 758++6ED6 32 B5 70     	ld (scl_cat_cycl),a
 759++6ED9 20 C5        	jr nz,scl_parse_cat2
 760++6EDB
 761++6EDB 22 B7 70     	ld (scl_temp_hl),hl ;запомнить где остановились
 762++6EDE
 763++6EDE              ;подсчёт секторов и дорожек
 764++6EDE DD E5        	push ix
 765++6EE0 3A B6 70     	ld a,(scl_files)
 766++6EE3 11 00 01     	ld de,#0100 ;данные с первой дорожки
 767++6EE6 DD 21 00 48  	ld ix,cat_buf
 768++6EEA DD 73 0E     	ld (ix+14),e
 769++6EED DD 72 0F     	ld (ix+15),d
 770++6EF0 21 00 00     	ld hl,0 ;общее количество секторов
 771++6EF3              scl_cacl
 772++6EF3 32 B5 70     	ld (scl_cat_cycl),a ;цикл
 773++6EF6 DD 7E 0D     	ld a,(ix+13) ;длина файла в секторах
 774++6EF9 4F           	ld c,a
 775++6EFA 06 00        	ld b,0
 776++6EFC 09           	add hl,bc ;секторов
 777++6EFD
 778++6EFD 01 10 00     	ld bc,16
 779++6F00 DD 09        	add ix,bc
 780++6F02 47           	ld b,a
 781++6F03 CD 28 70     	call calc_next_pos
 782++6F06 3A B5 70     	ld a,(scl_cat_cycl)
 783++6F09 FE 01        	cp 1
 784++6F0B 28 06        	jr z,scl_cacl2 ;в последний раз пропусим
 785++6F0D DD 73 0E     	ld (ix+14),e
 786++6F10 DD 72 0F     	ld (ix+15),d
 787++6F13              scl_cacl2
 788++6F13 3D           	dec a
 789++6F14 20 DD        	jr nz,scl_cacl
 790++6F16              	;теперь узнаем первый свободный сектор
 791++6F16 DD 7E 0D     	ld a,(ix+13) ;длина файла в секторах
 792++6F19 4F           	ld c,a
 793++6F1A 06 00        	ld b,0
 794++6F1C 09           	add hl,bc
 795++6F1D              	; ld b,a
 796++6F1D              	; call calc_next_pos
 797++6F1D ED 53 E1 50  	ld (cat_buf+8*256+#e1),de ;Первый свободный сектор и дорожка на дискете
 798++6F21 11 F0 09     	ld de,16*159
 799++6F24 EB           	ex de,hl
 800++6F25 A7           	and a
 801++6F26 ED 52        	sbc hl,de
 802++6F28 22 E5 50     	ld (cat_buf+8*256+#e5),hl ;Число свободных секторов на диске
 803++6F2B DD E1        	pop ix
 804++6F2D
 805++6F2D
 806++6F2D
 807++6F2D              ;запись содержимого файлов
 808++6F2D 3A B6 70     	ld a,(scl_files) ;всего файлов
 809++6F30 32 B5 70     	ld (scl_cat_cycl),a ;цикл
 810++6F33 21 0D 48     	ld hl,cat_buf+13 ;адрес размер секторов файла
 811++6F36 22 BF 70     	ld (cat_cur_adr),hl
 812++6F39
 813++6F39 21 00 01     	ld hl,#0100 ;начиная с первой дорожки
 814++6F3C 22 F4 5C     	ld (#5cf4),hl
 815++6F3F              scl_parse_file2
 816++6F3F 2A B7 70     	ld hl,(scl_temp_hl) ;адрес данных
 817++6F42 ED 5B BF 70  	ld de,(cat_cur_adr) ;адрес сектор дорожка файла
 818++6F46              	;dec de
 819++6F46 1A           	ld a,(de) ;количество секторов, цикл
 820++6F47 4F           	ld c,a
 821++6F48              scl_parse_file3
 822++6F48 11 00 55     	ld de,scl_buf2 ;адрес ещё одного буфера
 823++6F4B 06 00        	ld b,0 ;256 байт один сектор, цикл
 824++6F4D              scl_parse_file
 825++6F4D 7E           	ld a,(hl)
 826++6F4E 12           	ld (de),a
 827++6F4F 13           	inc de
 828++6F50 2C           	inc l ;адрес увеличиваем только в пределах младшего регистра
 829++6F51 20 26        	jr nz,scl_parse_file1
 830++6F53              	;тут пора запросить следующий сектор
 831++6F53              ;запрос порции данных по 256 байт
 832++6F53 22 B7 70     	ld (scl_temp_hl),hl
 833++6F56 ED 53 BB 70  	ld (scl_temp_de),de
 834++6F5A ED 43 BD 70  	ld (scl_temp_bc),bc
 835++6F5E 3E 01        	ld a,1
 836++6F60 32 A1 70     	ld (scl_que),a ;включим флаг что нужны данные
 837++6F63 21 6A 6F     	ld hl,scl_parse_ret2 ;сохраним адрес возврата
 838++6F66 22 B3 70     	ld (scl_parse_ret_adr),hl
 839++6F69 C9           	ret ;вернёмся для ожидания данных
 840++6F6A              scl_parse_ret2
 841++6F6A AF           	xor a
 842++6F6B 32 A1 70     	ld (scl_que),a
 843++6F6E 2A B7 70     	ld hl,(scl_temp_hl)
 844++6F71 ED 5B BB 70  	ld de,(scl_temp_de)
 845++6F75 ED 4B BD 70  	ld bc,(scl_temp_bc)
 846++6F79
 847++6F79              scl_parse_file1
 848++6F79 10 D2        	djnz scl_parse_file
 849++6F7B 22 B7 70     	ld (scl_temp_hl),hl
 850++6F7E ED 43 BD 70  	ld (scl_temp_bc),bc
 851++6F82
 852++6F82 21 00 55     	ld hl,scl_buf2 ;;запишем один сектор
 853++6F85 ED 5B F4 5C  	ld  de,(#5cf4)
 854++6F89 01 06 01         ld      bc,#0106 ;
 855++6F8C CD 13 3D         call    #3d13
 856++6F8F              	; ld a,c
 857++6F8F              	; cp 255
 858++6F8F              	; jp z,fwrite_no_chek ;выход если ошибка
 859++6F8F 2A B7 70     	ld hl,(scl_temp_hl)
 860++6F92 ED 4B BD 70  	ld bc,(scl_temp_bc)
 861++6F96
 862++6F96 0D           	dec c
 863++6F97 20 AF        	jr nz,scl_parse_file3
 864++6F99
 865++6F99 2A BF 70     	ld hl,(cat_cur_adr) ;адрес сектор дорожка файла
 866++6F9C              	; ld e,(hl)
 867++6F9C              	; inc hl
 868++6F9C              	; ld d,(hl)
 869++6F9C 01 10 00     	ld bc,16
 870++6F9F 09           	add hl,bc ;на следующий файл
 871++6FA0 22 BF 70     	ld (cat_cur_adr),hl
 872++6FA3
 873++6FA3
 874++6FA3 3A B5 70     	ld a,(scl_cat_cycl)
 875++6FA6 3D           	dec a
 876++6FA7 32 B5 70     	ld (scl_cat_cycl),a
 877++6FAA 20 93        	jr nz,scl_parse_file2	;на следующий файл
 878++6FAC
 879++6FAC
 880++6FAC
 881++6FAC              ;формирование системного сектора №9 (8)
 882++6FAC              	;
 883++6FAC              	;ld (cat_buf+8*256+#e1),a ;// #E1 Первый свободный сектор на дискете
 884++6FAC              	;
 885++6FAC              	;ld (cat_buf+8*256+#e2),a ;// #E2 Первый свободный трек
 886++6FAC 3E 16        	ld a,#16
 887++6FAE 32 E3 50     	ld (cat_buf+8*256+#e3),a ;// #E3 16 80 дорожек, 2 стороны
 888++6FB1 3A B6 70     	ld a,(scl_files)
 889++6FB4 32 E4 50     	ld (cat_buf+8*256+#e4),a ;// #E4 Общее количество файлов записанных на диск
 890++6FB7              	;
 891++6FB7              	;ld (cat_buf+8*256+#e5),a ;// #Е5,Е6 Число свободных секторов на диске
 892++6FB7              	;ld (cat_buf+8*256+#e6),a
 893++6FB7 3E 10        	ld a,#10
 894++6FB9 32 E7 50     	ld (cat_buf+8*256+#e7),a ;// #E7 Код  #10,определяющий принадлежность к TR-DOS
 895++6FBC
 896++6FBC 21 77 70     	ld hl,f_name ;запишем имя диска, взяв для этого имя файла
 897++6FBF 11 F5 50     	ld de,cat_buf+8*256+#f5 ;// #F5-#FC Имя диска в ASCII формате
 898++6FC2 01 08 00     	ld bc,8
 899++6FC5 ED B0        	ldir
 900++6FC7
 901++6FC7 21 00 48     	ld hl,cat_buf ;запишем каталог на диск
 902++6FCA 11 00 00     	ld de,0
 903++6FCD 01 06 09         ld      bc,#0906 ;
 904++6FD0 CD 13 3D         call    #3d13
 905++6FD3              	; ld a,c
 906++6FD3              	; cp 255
 907++6FD3              	; jp z,fwrite_no_chek ;выход если ошибка
 908++6FD3 C9           	ret
 909++6FD4
 910++6FD4
 911++6FD4              ;-----------scl end --------------------
 912++6FD4
 913++6FD4
 914++6FD4
 915++6FD4
 916++6FD4
 917++6FD4
 918++6FD4
 919++6FD4
 920++6FD4
 921++6FD4
 922++6FD4              ; A - file stream id
 923++6FD4              ; fsync:
 924++6FD4              ;     esxCall ESX_FSYNC
 925++6FD4                  ; ret
 926++6FD4
 927++6FD4
 928++6FD4              ; HL - name (name.ext)
 929++6FD4              ; Returns:
 930++6FD4              ; HL - name (name    e)
 931++6FD4              format_name ;подгоняет имя файла под стандарт trdos (8+1)
 932++6FD4
 933++6FD4              	;сначала попробуем убрать из пути подпапку, если она есть
 934++6FD4 22 91 70     	ld (temp_hl),hl ;сохраним адрес исходного имени
 935++6FD7 06 00        	ld b,#00 ;не больше 255 символов
 936++6FD9              format_name5
 937++6FD9 7E           	ld a,(hl)
 938++6FDA FE 2F        	cp "/" ;если есть подпапка
 939++6FDC 28 0D        	jr z,format_name_path_yep
 940++6FDE 7E           	ld a,(hl)
 941++6FDF FE 2E        	cp "." ;если ещё не дошли до расширения
 942++6FE1 20 05        	jr nz,format_name6
 943++6FE3 2A 91 70     	ld hl,(temp_hl) ;если дошли до расширения, то путей нет, вернёмся на начало имени
 944++6FE6 18 04        	jr format_name_7 ;на выход
 945++6FE8              format_name6
 946++6FE8 23           	inc hl
 947++6FE9 10 EE        	djnz format_name5
 948++6FEB
 949++6FEB              format_name_path_yep ;нашли
 950++6FEB 23           	inc hl ;пропустим знак "/"
 951++6FEC
 952++6FEC              format_name_7
 953++6FEC
 954++6FEC
 955++6FEC E5           	push hl ;очистим место для нового имени
 956++6FED 21 77 70     	ld hl,f_name
 957++6FF0 11 78 70     	ld de,f_name+1
 958++6FF3 36 20        	ld (hl)," "
 959++6FF5 01 08 00     	ld bc,8
 960++6FF8 ED B0        	ldir
 961++6FFA E1           	pop hl
 962++6FFB
 963++6FFB 01 FF 09     	ld bc,#09ff ;длина имени 9 символов
 964++6FFE 11 77 70     	ld de,f_name ;куда
 965++7001              format_name2
 966++7001 7E           	ld a,(hl)
 967++7002 FE 2E        	cp "."
 968++7004 20 08        	jr nz,format_name1
 969++7006 23           	inc hl
 970++7007 7E           	ld a,(hl)
 971++7008 32 7F 70     	ld (f_name+8),a ; и в конце первую букву расширения
 972++700B EB           	ex de,hl ;сохраним адрес исходного расширения
 973++700C 18 16        	jr format_name_e
 974++700E              format_name1
 975++700E ED A0        	ldi
 976++7010 10 EF        	djnz format_name2
 977++7012
 978++7012              	;если имя длинное, пропустим лишнее до расширения
 979++7012 06 00        	ld b,#00 ;не больше 255 символов
 980++7014              format_name3
 981++7014 7E           	ld a,(hl)
 982++7015 FE 2E        	cp "."
 983++7017 20 08        	jr nz,format_name4
 984++7019 23           	inc hl
 985++701A 7E           	ld a,(hl)
 986++701B 32 7F 70     	ld (f_name+8),a ; и в конце первую букву расширения
 987++701E EB           	ex de,hl ;сохраним адрес исходного расширения
 988++701F 18 03        	jr format_name_e
 989++7021              format_name4
 990++7021 23           	inc hl
 991++7022 10 F0        	djnz format_name3
 992++7024
 993++7024              format_name_e ;выход
 994++7024 21 77 70     	ld hl,f_name ;вернём результат
 995++7027 C9           	ret
 996++7028
 997++7028              ; DE - trk/sec
 998++7028              ; B - sectors step
 999++7028              ; Returns:
1000++7028              ; DE - trk/sec
1001++7028              calc_next_pos		;вперёд на N секторов
1002++7028              			;ld b,4
1003++7028              			;ld  de,(#5ceb)
1004++7028              calc_next_pos2
1005++7028 1C           			inc e
1006++7029 7B           			ld a,e
1007++702A FE 10        			cp 16
1008++702C 38 03        			jr c,calc_next_pos1
1009++702E 14           			inc d
1010++702F 1E 00        			ld e,0
1011++7031              calc_next_pos1
1012++7031              			;ld (#5ceb),de
1013++7031 10 F5        			djnz calc_next_pos2
1014++7033 C9           			ret
1015++7034
1016++7034
1017++7034              ;testt db "123.trd"
1018++7034 49 6E 73 65  write_ima db "Insert disk to drive "
1018++7038 72 74 20 64
1018++703C 69 73 6B 20
1018++7040 74 6F 20 64
1018++7044 72 69 76 65
1018++7048 20
1019++7049 41 2E 20     write_ima_d db "A. "
1020++704C 41 6C 6C 20  		db "All data will be lost!",0
1020++7050 64 61 74 61
1020++7054 20 77 69 6C
1020++7058 6C 20 62 65
1020++705C 20 6C 6F 73
1020++7060 74 21 00
1021++7063
1022++7063 2E 74 72 64  trdExt1 db ".trd", 0
1022++7067 00
1023++7068 2E 54 52 44  trdExt2 db ".TRD", 0
1023++706C 00
1024++706D
1025++706D 2E 73 63 6C  sclExt1 db ".scl", 0
1025++7071 00
1026++7072 2E 53 43 4C  sclExt2 db ".SCL", 0
1026++7076 00
1027++7077
1028++7077 00 00 00...  f_name ds 9 ;имя файла
1029++7080 00 00        f_r_cur_trk dw 	 0 ;текущие сектор-дорожка файла на чтение
1030++7082 00           f_r_len_sec db 0 ;длина файла на чтение в секторах
1031++7083 00 00        f_r_len dw 0;длина файла в байтах
1032++7085 00           f_r_flag db 0 ;флаг что открыт файл на чтение
1033++7086
1034++7086 00 00        f_w_cur_trk dw 	 0 ;текущие сектор-дорожка файла на запись
1035++7088 00           f_w_len_sec db 0 ;длина файла на запись в секторах
1036++7089 00           f_w_flag db 0 ;флаг что открыт файл на запись
1037++708A 00 00 00 00  f_w_len ds 4 ;длина записанных данных
1038++708E 00           write_end_flag db 0 ;флаг что нужно записать остаток
1039++708F
1040++708F 00 00        temp_bc dw 0 ;хранение регистра
1041++7091 00 00        temp_hl dw 0 ;хранение регистра
1042++7093 00 00        temp_hl2 dw 0 ;хранение регистра
1043++7095
1044++7095 00           sec_shift db 0 ;указатель на каком байте остановлена запись
1045++7096 00           sec_shift2 db 0 ;указатель на каком байте остановлена запись (остаток)
1046++7097 00           sec_part db 0 ;сколько секторов во второй порции для записи
1047++7098 00           sec_shift_flag db 0 ;флаг что буфер сектора не заполнен
1048++7099
1049++7099              ;секция scl
1050++7099 53 49 4E 43  scl_sign db "SINCLAIR" ;метка
1050++709D 4C 41 49 52
1051++70A1 00           scl_que db 0 ;флаг запроса порции данных
1052++70A2 53 43 4C 20  scl_err db "SCL image error!",0
1052++70A6 69 6D 61 67
1052++70AA 65 20 65 72
1052++70AE 72 6F 72 21
1052++70B2 00
1053++70B3 00 00        scl_parse_ret_adr dw 0; адрес возврата в цикл
1054++70B5 00           scl_cat_cycl db 0 ;переменная цикла
1055++70B6 00           scl_files db 0 ;всего файлов
1056++70B7 00 00        scl_temp_hl dw 0;;хранение регистра
1057++70B9 00 00        scl_temp_hl2 dw 0;
1058++70BB 00 00        scl_temp_de dw 0;
1059++70BD 00 00        scl_temp_bc dw 0;
1060++70BF 00 00        cat_cur_adr dw 0;
1061++70C1              ;scl end
1062++70C1 00 00 00...  	align 256 ;временно
1063++7100              	;по адресу #4000 шрифт
1064++7100              cat_buf equ #4800 ;буфер для кататога диска 9*256
1065++7100              sec_buf equ cat_buf + 9*256 ;буфер сектора для записи 256
1066++7100              scl_buf equ sec_buf + 512 ;промежуточный буфер 256
1067++7100              scl_buf2 equ scl_buf + 512 ;промежуточный буфер 256
1068++7100
1069++7100                  ENDMODULE
# file closed: dos/trdos.asm
   9+ 7100              	ENDIF
  10+ 7100
  11+ 7100              	IFDEF ESXDOS
  12+ 7100 ~               		include "console.asm"
  13+ 7100 ~               		include "esxdos.asm"
  14+ 7100              	ENDIF
  15+ 7100
  16+ 7100              	IFDEF P3DOS
  17+ 7100 ~               		include "console.asm"
  18+ 7100 ~               		include "p3dos.asm"
  19+ 7100              	ENDIF
  20+ 7100
# file closed: dos/index.asm
  32  7100                  include "gopher/engine/history/index.asm"
# file opened: gopher/engine/history/index.asm
   1+ 7100                  include "controler.asm"
# file opened: gopher/engine/history/controler.asm
   1++7100                  module History
   2++7100              back:
   3++7100 3A 43 72         ld a, (depth)
   3++7103 FE 01          cp 1
   3++7105 CA 17 71       jp z, load
   4++7108 21 92 75 11      ld hl, historyBlock + HistoryRecord, de, historyBlock, bc, (total - 1) * HistoryRecord
   4++710C 44 72 01 38
   4++7110 0D
   4++7111 ED B0          ldir ; Move history up
   5++7113 21 43 72         ld hl, depth
   5++7116 35             dec (hl)
   6++7117              ; Loads current resource
   7++7117              load:
   8++7117 21 34 71         ld hl, .msg
   8++711A CD 8E 69       call DialogBox.msgNoWait
   9++711D AF               xor a
   9++711E 21 40 9C 11    ld hl, outputBuffer, de, outputBuffer + 1
   9++7122 41 9C
  10++7124              	IFDEF MSX
  11++7124 ~                	ld bc, (ramtop)
  12++7124 ~                	dec bc
  13++7124              	ELSE
  14++7124 01 BE 63         	ld bc, #ffff - outputBuffer - 1
  15++7127              	ENDIF
  16++7127
  17++7127 77               ld (hl), a
  18++7128 ED B0            ldir
  19++712A
  20++712A 3A 44 72         ld a, (historyBlock.isFile)
  20++712D A7             and a
  20++712E C2 2D 88       jp nz, Fetcher.fetchFromFS
  21++7131 C3 E0 87         jp Fetcher.fetchFromNet
  22++7134
  23++7134 20 20 20 20  .msg db "    Loading resource! Please wait! It will be here soon!", 0
  23++7138 4C 6F 61 64
  23++713C 69 6E 67 20
  23++7140 72 65 73 6F
  23++7144 75 72 63 65
  23++7148 21 20 50 6C
  23++714C 65 61 73 65
  23++7150 20 77 61 69
  23++7154 74 21 20 49
  23++7158 74 20 77 69
  23++715C 6C 6C 20 62
  23++7160 65 20 68 65
  23++7164 72 65 20 73
  23++7168 6F 6F 6E 21
  23++716C 00
  24++716D
  25++716D              home:
  26++716D 21 21 72         ld hl, homePage
  27++7170              ; HL - gopher row
  28++7170              navigate:
  29++7170 54 5D            ld de, hl
  30++7172 CD 59 86         call UrlEncoder.isValidGopherRow
  31++7175 30 A0            jr nc, load ; Not valid - reload last
  32++7177 62 6B            ld hl, de
  33++7179 E5               push hl
  34++717A
  35++717A E5               push hl
  36++717B 21 C9 82 11      ld hl, HistoryEnd - HistoryRecord, de, HistoryEnd, bc,  HistoryRecord * total
  36++717F 17 86 01 86
  36++7183 10
  36++7184 ED B8          lddr
  37++7186
  38++7186 ED 5B 8A 75      ld de, (Render.position), (historyBlock.position + HistoryRecord), de
  38++718A ED 53 D8 78
  39++718E                  ; Clean up struct
  40++718E AF               xor a
  40++718F 21 44 72 11    ld hl, historyBlock, de, historyBlock + 1, bc, historyBlockSize - 1, (hl), a
  40++7193 45 72 01 4D
  40++7197 03 77
  40++7199 ED B0          ldir
  41++719B E1               pop hl
  42++719C
  43++719C                  ; Fill record
  44++719C 54 5D            ld de, hl
  45++719E CD 18 86         call UrlEncoder.isFile
  46++71A1 EB               ex hl, de
  47++71A2 11 44 72         ld de, historyBlock
  48++71A5 12               ld (de), a
  48++71A6 13             inc de
  49++71A7 7E               ld a, (hl)
  49++71A8 E5 D5          push hl, de
  49++71AA CD 8E 64       call Render.getIcon
  49++71AD D1 E1          pop de, hl
  50++71AF 12               ld (de), a
  50++71B0 13             inc de
  51++71B1 3E 09            ld a, 9
  52++71B3
  53++71B3                  IFDEF MSX
  54++71B3 ~                	ld bc, #ff
  55++71B3                  ELSE
  56++71B3 01 FF 0F         	ld bc, #fff
  57++71B6                  ENDIF
  58++71B6
  59++71B6 ED B1            cpir
  60++71B8              .locatorCopy
  61++71B8 7E               ld a, (hl)
  61++71B9 FE 09          cp 9
  61++71BB 28 05          jr z, 1f
  62++71BD 12               ld (de), a
  62++71BE 23 13          inc hl, de
  63++71C0 18 F6            jr .locatorCopy
  64++71C2              1
  65++71C2 23               inc hl
  65++71C3 AF             xor a
  65++71C4 12             ld (de), a
  66++71C5 11 45 74         ld de, historyBlock.host
  67++71C8              .hostCopy
  68++71C8 7E               ld a, (hl)
  68++71C9 FE 09          cp 9
  68++71CB 28 05          jr z, 1f
  69++71CD 12               ld (de), a
  69++71CE 23 13          inc hl, de
  70++71D0 18 F6            jr .hostCopy
  71++71D2              1
  72++71D2 23               inc hl
  72++71D3 AF             xor a
  72++71D4 12             ld (de), a
  73++71D5 11 85 74         ld de, historyBlock.port
  74++71D8              .portCopy
  75++71D8 7E               ld a, (hl)
  76++71D9 FE 09            cp 9
  76++71DB 28 11          jr z, 1f
  77++71DD FE 0D            cp 13
  77++71DF 28 0D          jr z, 1f
  78++71E1 FE 0A            cp 10
  78++71E3 28 09          jr z, 1f
  79++71E5 FE 00            cp 0
  79++71E7 28 05          jr z, 1f
  80++71E9 12               ld (de), a
  80++71EA 23 13          inc hl, de
  81++71EC 18 EA            jr .portCopy
  82++71EE AF           1   xor a
  82++71EF 12             ld (de), a
  83++71F0 21 35 69 11      ld hl, DialogBox.inputBuffer, de, historyBlock.search, bc, #ff
  83++71F4 8B 74 01 FF
  83++71F8 00
  83++71F9 ED B0          ldir
  84++71FB 11 00 00 ED      ld de, 0, (historyBlock.position), de
  84++71FF 53 8A 75
  85++7202 E1               pop hl
  86++7203 3A 43 72         ld a, (depth)
  86++7206 FE 05          cp total
  86++7208 30 04          jr nc, 1f
  87++720A 3C               inc a
  87++720B 32 43 72       ld (depth), a
  88++720E              1
  89++720E 3A 45 72         ld a,(historyBlock.mediaType)
  89++7211 FE 01          cp MIME_DOWNLOAD
  89++7213 CA C5 88       jp z, Gopher.download
  90++7216
  91++7216                  ifdef GS
  92++7216 ~                ld a,(historyBlock.mediaType)
  93++7216 ~                cp MIME_MOD
  94++7216 ~                jp nz,load
  95++7216 ~                ld a,(GeneralSound.GSdownType)
  96++7216 ~                xor 1
  97++7216 ~                jp z, downMod2file
  98++7216 ~
  99++7216 ~            downMod2GS
 100++7216 ~                jp Gopher.loadMod
 101++7216 ~            downMod2file
 102++7216 ~                jp Gopher.download
 103++7216                  else
 104++7216 3A 45 72         ld a,(historyBlock.mediaType)
 104++7219 FE 07          cp MIME_MOD
 104++721B CA C5 88       jp z, Gopher.download
 105++721E                  endif
 106++721E
 107++721E C3 17 71         jp load
 108++7221
 109++7221              homePage:
 110++7221              	IFDEF MSX
 111++7221 ~                	db "1Home", TAB, "index.gph"
 112++7221 ~                	db TAB, "file", TAB, "70", CR, LF, 0
 113++7221                  ELSE
 114++7221 31 48 6F 6D      	db "1Home", TAB, "browser/index.gph"
 114++7225 65 09 62 72
 114++7229 6F 77 73 65
 114++722D 72 2F 69 6E
 114++7231 64 65 78 2E
 114++7235 67 70 68
 115++7238 09 66 69 6C      	db TAB, "file", TAB, "70", CR, LF, 0
 115++723C 65 09 37 30
 115++7240 0D 0A 00
 116++7243                  ENDIF
 117++7243                  endmodule
# file closed: gopher/engine/history/controler.asm
   2+ 7243                  include "model.asm"
# file opened: gopher/engine/history/model.asm
   1++7243              total   equ 5
   2++7243 00           depth   db 0
   3++7244
   4++7244              historyBlock:
   5++7244 00           .isFile    db  0
   6++7245 00           .mediaType db  0
   7++7246 00 00 00...  .locator   ds  #1ff
   8++7445 00 00 00...  .host      ds  64
   9++7485 00 00 00...  .port      ds  6
  10++748B 00 00 00...  .search    ds  #ff
  11++758A 00 00        .position  dw  #0000    ;position
  12++758C
  13++758C 00 00 00 00      db 0,0,0,0,0,0  ;cursor_position page_offset
  13++7590 00 00
  14++7592
  15++7592              historyBlockSize = $ - historyBlock
  16++7592
  17++7592              HistoryRecord EQU $ - historyBlock
  18++7592                  dup total
  19++7592 00 00 00... >    ds HistoryRecord
  19++78E0 00 00 00... >    ds HistoryRecord
  19++7C2E 00 00 00... >    ds HistoryRecord
  19++7F7C 00 00 00... >    ds HistoryRecord
  19++82CA 00 00 00... >    ds HistoryRecord
  20++8618                  edup
  21++8618              HistoryEnd equ $ - 1
  22++8618
# file closed: gopher/engine/history/model.asm
# file closed: gopher/engine/history/index.asm
  33  8618                  include "gopher/engine/urlencoder.asm"
# file opened: gopher/engine/urlencoder.asm
   1+ 8618                  MODULE UrlEncoder
   2+ 8618              ; HL - pointer to line in gopher page
   3+ 8618              ; C - flag set when it's file
   4+ 8618              isFile:
   5+ 8618              .findServerLoop
   6+ 8618 7E               ld a, (hl)
   6+ 8619 A7             and a
   6+ 861A 28 3B          jr z, .notFile
   6+ 861C 23             inc hl
   7+ 861D FE 0D            cp 13
   7+ 861F 28 36          jr z, .notFile
   8+ 8621 FE 09            cp 9
   8+ 8623 28 02          jr z, .skipPath
   9+ 8625 18 F1            jr .findServerLoop
  10+ 8627              .skipPath
  11+ 8627 7E               ld a, (hl)
  11+ 8628 A7             and a
  11+ 8629 28 2C          jr z, .notFile
  11+ 862B 23             inc hl
  12+ 862C FE 0D            cp 13
  12+ 862E 28 27          jr z, .notFile
  13+ 8630 FE 09            cp 9
  13+ 8632 28 02          jr z, .compareServer
  14+ 8634 18 F1            jr .skipPath
  15+ 8636              .compareServer
  16+ 8636 7E               ld a, (hl)
  16+ 8637 FE 66          cp "f"
  16+ 8639 20 1C          jr nz, .notFile
  16+ 863B 23             inc hl
  17+ 863C 7E               ld a, (hl)
  17+ 863D FE 69          cp "i"
  17+ 863F 20 16          jr nz, .notFile
  17+ 8641 23             inc hl
  18+ 8642 7E               ld a, (hl)
  18+ 8643 FE 6C          cp "l"
  18+ 8645 20 10          jr nz, .notFile
  18+ 8647 23             inc hl
  19+ 8648 7E               ld a, (hl)
  19+ 8649 FE 65          cp "e"
  19+ 864B 20 0A          jr nz, .notFile
  19+ 864D 23             inc hl
  20+ 864E 7E               ld a, (hl)
  20+ 864F FE 09          cp 9
  20+ 8651 20 04          jr nz, .notFile
  20+ 8653 23             inc hl
  21+ 8654 3E 01            ld a, 1
  22+ 8656 C9               ret
  23+ 8657              .notFile
  24+ 8657 AF               xor a
  25+ 8658 C9               ret
  26+ 8659
  27+ 8659              ; Is enough fields to encode
  28+ 8659              ; HL - pointer to line in gopher page
  29+ 8659              ; C - flag set when there is enough fields
  30+ 8659              isValidGopherRow:
  31+ 8659 7E               ld a, (hl)
  31+ 865A A7             and a
  31+ 865B 28 FA          jr z, isFile.notFile
  31+ 865D 23             inc hl
  32+ 865E FE 0D            cp 13
  32+ 8660 28 F5          jr z, isFile.notFile
  33+ 8662 FE 09            cp 9
  33+ 8664 28 02          jr z, .skipPath
  34+ 8666 18 F1            jr isValidGopherRow
  35+ 8668              .skipPath
  36+ 8668 7E               ld a, (hl)
  36+ 8669 A7             and a
  36+ 866A 28 EB          jr z, isFile.notFile
  36+ 866C 23             inc hl
  37+ 866D FE 0D            cp 13
  37+ 866F 28 E6          jr z, isFile.notFile
  38+ 8671 FE 09            cp 9
  38+ 8673 28 02          jr z, .skipHost
  39+ 8675 18 F1            jr .skipPath
  40+ 8677              .skipHost
  41+ 8677 7E               ld a, (hl)
  41+ 8678 A7             and a
  41+ 8679 28 DC          jr z, isFile.notFile
  41+ 867B 23             inc hl
  42+ 867C FE 0D            cp 13
  42+ 867E 28 D7          jr z, isFile.notFile
  43+ 8680 FE 09            cp 9
  43+ 8682 28 02           jr z, .isValid
  44+ 8684 18 F1            jr .skipHost
  45+ 8686              .isValid:
  46+ 8686 37               scf
  47+ 8687 C9               ret
  48+ 8688
  49+ 8688              extractPath:
  50+ 8688 21 46 72 11      ld hl, historyBlock.locator, de, nameBuffer, bc, #ff
  50+ 868C A0 86 01 FF
  50+ 8690 00
  50+ 8691 ED B0          ldir
  51+ 8693 C9               ret
  52+ 8694
  53+ 8694              extractHostName:
  54+ 8694 21 45 74 11      ld hl, historyBlock.host, de, hostName, bc, 64
  54+ 8698 A0 87 01 40
  54+ 869C 00
  54+ 869D ED B0          ldir
  55+ 869F C9               ret
  56+ 86A0
  57+ 86A0                  ENDMODULE
  58+ 86A0
  59+ 86A0 00 00 00...  nameBuffer ds #ff, 0
  60+ 879F
  61+ 879F 00                    db 0
  62+ 87A0 00 00 00...  hostName ds 64
# file closed: gopher/engine/urlencoder.asm
  34  87E0                  include "gopher/engine/fetcher.asm"
# file opened: gopher/engine/fetcher.asm
   1+ 87E0                  MODULE Fetcher
   2+ 87E0
   3+ 87E0              fetchFromNet:
   4+ 87E0
   5+ 87E0              	IFDEF MSX
   6+ 87E0 ~                	call Gopher.makeRequest
   6+ 87E0 ~              jr nz, .error
   7+ 87E0                  ELSE
   8+ 87E0 CD 9A 88         	call Gopher.makeRequest
   8+ 87E3 38 06          jr c, .error
   9+ 87E5                  ENDIF
  10+ 87E5
  11+ 87E5 CD B2 88         call Gopher.loadBuffer
  12+ 87E8 C3 39 88         jp MediaProcessor.processResource
  13+ 87EB              .error
  14+ 87EB 21 F4 87         ld hl, .err
  14+ 87EE CD 85 69       call DialogBox.msgBox
  15+ 87F1 C3 00 71         jp History.back
  16+ 87F4
  17+ 87F4 44 6F 63 75  .err db "Document fetch error! Check your connection or hostname!", 0
  17+ 87F8 6D 65 6E 74
  17+ 87FC 20 66 65 74
  17+ 8800 63 68 20 65
  17+ 8804 72 72 6F 72
  17+ 8808 21 20 43 68
  17+ 880C 65 63 6B 20
  17+ 8810 79 6F 75 72
  17+ 8814 20 63 6F 6E
  17+ 8818 6E 65 63 74
  17+ 881C 69 6F 6E 20
  17+ 8820 6F 72 20 68
  17+ 8824 6F 73 74 6E
  17+ 8828 61 6D 65 21
  17+ 882C 00
  18+ 882D
  19+ 882D
  20+ 882D              fetchFromFS:
  21+ 882D CD 88 86         call UrlEncoder.extractPath
  22+ 8830              loadFile
  23+ 8830              	IFDEF MSX
  24+ 8830 ~                ld de, nameBuffer, a, FMODE_NO_WRITE
  25+ 8830 ~                call Dos.fopen
  26+ 8830 ~                ld a, b, (.fp), a
  27+ 8830 ~                ld de, outputBuffer, hl, (ramtop)
  28+ 8830 ~                call Dos.fread
  29+ 8830 ~                ld a, (.fp), b, a
  30+ 8830 ~                call Dos.fclose
  31+ 8830 ~                jp MediaProcessor.processResource
  32+ 8830 ~            .fp db 0
  33+ 8830              	ELSE
  34+ 8830 21 A0 86         ld hl, nameBuffer
  35+ 8833 CD 48 6B         call Dos.loadBuffer
  36+ 8836 C3 39 88         jp MediaProcessor.processResource
  37+ 8839              	ENDIF
  38+ 8839                  ENDMODULE
# file closed: gopher/engine/fetcher.asm
  35  8839                  include "gopher/engine/media-processor.asm"
# file opened: gopher/engine/media-processor.asm
   1+ 8839                  MODULE MediaProcessor
   2+ 8839              processResource:
   3+ 8839 CD 94 86         call UrlEncoder.extractHostName
   4+ 883C 3A 45 72         ld a, (historyBlock.mediaType)
   5+ 883F FE 05            cp MIME_MUSIC
   5+ 8841 28 13          jr z, processPT
   6+ 8843 FE 02            cp MIME_LINK
   6+ 8845 28 15          jr z, processPage
   7+ 8847 FE 04            cp MIME_INPUT
   7+ 8849 28 11          jr z, processPage
   8+ 884B FE 06            cp MIME_IMAGE
   8+ 884D CA 1B 9C       jp z, ScreenViewer.display
   9+ 8850              ; Fallback to plain text
  10+ 8850              processText:
  11+ 8850 CD 1C 68         call Render.renderPlainTextScreen
  12+ 8853 C3 4C 68         jp   Render.plainTextLoop
  13+ 8856
  14+ 8856              processPT:
  15+ 8856 CD D5 8F         call VortexProcessor.play
  16+ 8859 C3 00 71         jp History.back
  17+ 885C
  18+ 885C              processPage:
  19+ 885C 3A D9 68         ld a, (Render.play_next)
  19+ 885F A7             and a
  19+ 8860 20 06          jr nz, .playNext
  20+ 8862 CD 9D 66         call Render.renderGopherScreen
  21+ 8865 C3 DB 66         jp   Render.workLoop
  22+ 8868              .playNext
  23+ 8868 21 8C 75         ld hl, Render.cursor_position
  24+ 886B 34               inc (hl)
  25+ 886C C3 C5 66         jp Render.checkBorder
  26+ 886F                  ENDMODULE
# file closed: gopher/engine/media-processor.asm
  36  886F                  include "gopher/gopher.asm"
# file opened: gopher/gopher.asm
   1+ 886F                  module Gopher
   2+ 886F              ; HL - gopher row
   3+ 886F              extractRequest:
   4+ 886F 21 46 72         ld hl, historyBlock.locator
   5+ 8872 11 C2 89         ld de, requestbuffer
   6+ 8875              .loop
   7+ 8875 7E               ld a, (hl)
   8+ 8876 12               ld (de), a
   9+ 8877 23               inc hl
  10+ 8878 13               inc de
  11+ 8879 FE 00            cp 0
  12+ 887B 28 02            jr z, .search
  13+ 887D 18 F6            jr .loop
  14+ 887F              .search
  15+ 887F 1B               dec de
  16+ 8880 3A 45 72         ld a, (historyBlock.mediaType)
  17+ 8883 FE 04            cp MIME_INPUT
  18+ 8885 20 10            jr nz, .exit
  19+ 8887 21 8B 74         ld hl, historyBlock.search
  20+ 888A 3E 09            ld a, TAB
  21+ 888C 12               ld (de), a
  22+ 888D 13               inc de
  23+ 888E              .searchCopy
  24+ 888E 7E               ld a, (hl)
  25+ 888F A7               and a
  25+ 8890 28 05          jr z, .exit
  26+ 8892 12               ld (de), a
  27+ 8893 23               inc hl
  27+ 8894 13             inc de
  28+ 8895 18 F7            jr .searchCopy
  29+ 8897              .exit
  30+ 8897 AF               xor a
  31+ 8898 12               ld (de), a
  32+ 8899 C9               ret
  33+ 889A
  34+ 889A
  35+ 889A              makeRequest:
  36+ 889A CD 6F 88         call extractRequest
  37+ 889D
  38+ 889D 21 45 74         ld hl, historyBlock.host
  39+ 88A0 11 85 74         ld de, historyBlock.port
  40+ 88A3 CD B3 8D         call Wifi.openTCP
  41+ 88A6 D8               ret c
  42+ 88A7
  43+ 88A7 21 C2 89         ld hl, requestbuffer
  44+ 88AA CD A4 8E         call Wifi.tcpSendZ
  45+ 88AD AF               xor a
  45+ 88AE 32 85 8C       ld (Wifi.closed), a
  46+ 88B1 C9               ret
  47+ 88B2
  48+ 88B2
  49+ 88B2              loadBuffer:
  50+ 88B2 21 40 9C         ld hl, outputBuffer
  51+ 88B5 22 83 8C         ld (Wifi.buffer_pointer), hl
  52+ 88B8              .loop
  53+ 88B8 CD F4 8E         call Wifi.getPacket
  54+ 88BB 3A 85 8C         ld a, (Wifi.closed)
  54+ 88BE A7             and a
  54+ 88BF C0             ret nz
  55+ 88C0 CD 11 8E         call Wifi.continue
  56+ 88C3 18 F3            jr .loop
  57+ 88C5
  58+ 88C5                  ifdef GS
  59+ 88C5 ~            loadMod:
  60+ 88C5 ~                xor a
  60+ 88C5 ~              call GeneralSound.init
  61+ 88C5 ~                ld hl, .progress
  61+ 88C5 ~              call DialogBox.msgNoWait
  62+ 88C5 ~                call makeRequest
  62+ 88C5 ~              jp c, Fetcher.fetchFromNet.error
  63+ 88C5 ~                call GeneralSound.loadModule
  64+ 88C5 ~            .loop
  65+ 88C5 ~                ld hl, outputBuffer, (Wifi.buffer_pointer), hl
  66+ 88C5 ~                call Wifi.getPacket
  67+ 88C5 ~                ld a, (Wifi.closed)
  67+ 88C5 ~              and a
  67+ 88C5 ~              jr nz, .exit
  68+ 88C5 ~                ld hl, outputBuffer, bc, (Wifi.bytes_avail)
  69+ 88C5 ~            .loadLoop
  70+ 88C5 ~                ld a, b
  70+ 88C5 ~              or c
  70+ 88C5 ~              and a
  70+ 88C5 ~              jr z, .nextFrame
  71+ 88C5 ~                ld a, (hl)
  71+ 88C5 ~              call GeneralSound.sendByte
  72+ 88C5 ~                dec bc
  73+ 88C5 ~                inc hl
  74+ 88C5 ~                jr .loadLoop
  75+ 88C5 ~            .nextFrame
  76+ 88C5 ~                call pulsing
  77+ 88C5 ~                call Wifi.continue
  78+ 88C5 ~                jr .loop
  79+ 88C5 ~            .exit
  80+ 88C5 ~                call GeneralSound.finishLoadingModule
  81+ 88C5 ~                jp History.back
  82+ 88C5 ~            .progress db "MOD downloading directly to GS!", 0
  83+ 88C5                  endif
  84+ 88C5
  85+ 88C5              download:
  86+ 88C5 11 46 72         ld de, historyBlock.locator
  87+ 88C8 62 6B            ld hl, de
  88+ 88CA              .findFileName
  89+ 88CA 1A               ld a, (de)
  89+ 88CB 13             inc de
  90+ 88CC FE 2F            cp '/'
  90+ 88CE 20 02          jr nz, .skip
  91+ 88D0 62 6B            ld hl, de
  92+ 88D2              .skip
  93+ 88D2 A7               and a
  93+ 88D3 20 F5          jr nz, .findFileName
  94+ 88D5              .copy
  95+ 88D5                  ;; HL - filename pointer
  96+ 88D5 11 35 69         ld de, DialogBox.inputBuffer
  97+ 88D8              .copyFileName
  98+ 88D8 7E               ld a, (hl)
  98+ 88D9 A7             and a
  98+ 88DA 28 05          jr z, .finishCopy
  99+ 88DC
 100+ 88DC 12               ld (de), a
 100+ 88DD 23 13          inc hl, de
 101+ 88DF 18 F7            jr .copyFileName
 102+ 88E1              .finishCopy
 103+ 88E1 12               ld (de), a
 104+ 88E2 CD DE 68         call DialogBox.inputBox.noclear
 105+ 88E5 3A 35 69         ld a, (DialogBox.namedownload)
 105+ 88E8 A7             and a
 105+ 88E9 CA 00 71       jp z, History.back
 106+ 88EC
 107+ 88EC CD 9A 88         call makeRequest
 107+ 88EF DA EB 87       jp c, Fetcher.fetchFromNet.error
 108+ 88F2
 109+ 88F2 06 0E 21 35      ld b, Dos.FMODE_CREATE, hl, DialogBox.namedownload
 109+ 88F6 69
 110+ 88F7 CD 64 6B         call Dos.fopen
 111+ 88FA 32 9B 89         ld (.fp), a
 112+ 88FD
 113+ 88FD 21 76 89         ld hl, .progress
 113+ 8900 CD 8E 69       call DialogBox.msgNoWait
 114+ 8903              .loop
 115+ 8903 21 40 9C 22      ld hl, outputBuffer, (Wifi.buffer_pointer), hl
 115+ 8907 83 8C
 116+ 8909 CD F4 8E         call Wifi.getPacket
 117+ 890C 3A 85 8C         ld a, (Wifi.closed)
 117+ 890F A7             and a
 117+ 8910 20 15          jr nz, .exit
 118+ 8912
 119+ 8912 3A 9B 89 21      ld a, (.fp), hl, outputBuffer, bc, (Wifi.bytes_avail)
 119+ 8916 40 9C ED 4B
 119+ 891A 81 8C
 120+ 891C CD 74 6C         call Dos.fwrite
 121+ 891F CD 9E 89         call pulsing
 122+ 8922 CD 11 8E         call Wifi.continue
 123+ 8925 18 DC            jr .loop
 124+ 8927              .exit
 125+ 8927 3A 9B 89         ld a, (.fp)
 126+ 892A CD 3D 6C         call Dos.fclose
 127+ 892D C3 00 71         jp History.back
 128+ 8930              .error
 129+ 8930 3A 9B 89         ld a, (.fp)
 130+ 8933 CD 3D 6C         call Dos.fclose
 131+ 8936 21 3F 89         ld hl, .err
 132+ 8939 CD 85 69         call DialogBox.msgBox
 133+ 893C C3 00 71         jp History.back
 134+ 893F
 135+ 893F 4F 70 65 72  .err db "Operation failed! Sorry! Check filename or disk space!",0
 135+ 8943 61 74 69 6F
 135+ 8947 6E 20 66 61
 135+ 894B 69 6C 65 64
 135+ 894F 21 20 53 6F
 135+ 8953 72 72 79 21
 135+ 8957 20 43 68 65
 135+ 895B 63 6B 20 66
 135+ 895F 69 6C 65 6E
 135+ 8963 61 6D 65 20
 135+ 8967 6F 72 20 64
 135+ 896B 69 73 6B 20
 135+ 896F 73 70 61 63
 135+ 8973 65 21 00
 136+ 8976 44 6F 77 6E  .progress db "Downloading in progress! Wait a bit!", 0
 136+ 897A 6C 6F 61 64
 136+ 897E 69 6E 67 20
 136+ 8982 69 6E 20 70
 136+ 8986 72 6F 67 72
 136+ 898A 65 73 73 21
 136+ 898E 20 57 61 69
 136+ 8992 74 20 61 20
 136+ 8996 62 69 74 21
 136+ 899A 00
 137+ 899B 00           .fp db 0
 138+ 899C 00           socket db 0
 139+ 899D 20           pulsator db " "
 140+ 899E              pulsing
 141+ 899E 11 01 0B         ld de, #0B01
 141+ 89A1 CD 3A 60       call TextMode.gotoXY
 142+ 89A4 3A 9D 89         ld a, (pulsator)
 143+ 89A7 FE 2A            cp '*'
 144+ 89A9 CA B7 89         jp z, printasterix
 145+ 89AC 3E 2A            ld a, '*'
 146+ 89AE 32 9D 89         ld (pulsator),a
 147+ 89B1 3E 20            ld a,' '
 148+ 89B3 CD A4 60         call TextMode.putC
 149+ 89B6 C9               ret
 150+ 89B7              printasterix
 151+ 89B7 3E 20            ld a, ' '
 152+ 89B9 32 9D 89         ld (pulsator),a
 153+ 89BC 3E 2A            ld a,'*'
 154+ 89BE CD A4 60         call TextMode.putC
 155+ 89C1 C9               ret
 156+ 89C2
 157+ 89C2 00 00 00...  requestbuffer ds #1ff
 158+ 8BC1                  endmodule
 159+ 8BC1
# file closed: gopher/gopher.asm
  37  8BC1                  include "drivers/index.asm"
# file opened: drivers/index.asm
   1+ 8BC1                  IFDEF UNO
   2+ 8BC1 ~                	include "uno-uart.asm"
   3+ 8BC1                  ENDIF
   4+ 8BC1
   5+ 8BC1                  IFDEF UNOUART
   6+ 8BC1                  	include "uno-uart.asm"
# file opened: drivers/uno-uart.asm
   1++8BC1                  MODULE Uart
   2++8BC1              UART_DATA_REG = #c6
   3++8BC1              UART_STAT_REG = #c7
   4++8BC1              UART_BYTE_RECIVED = #80
   5++8BC1              UART_BYTE_SENDING = #40
   6++8BC1              SCANDBLCTRL_REG = #0B
   7++8BC1              ZXUNO_ADDR = #FC3B
   8++8BC1              ZXUNO_REG = #FD3B
   9++8BC1
  10++8BC1
  11++8BC1              ; Enable UART
  12++8BC1              ; Cleaning all flags by reading UART regs
  13++8BC1              ; Wastes AF and BC
  14++8BC1              init:
  15++8BC1 01 3B FC         ld bc, ZXUNO_ADDR
  15++8BC4 3E C7          ld a, UART_STAT_REG
  15++8BC6 ED 79          out (c), a
  16++8BC8 01 3B FD         ld bc, ZXUNO_REG
  16++8BCB ED 78          in A, (c)
  17++8BCD 01 3B FC         ld bc, ZXUNO_ADDR
  17++8BD0 3E C6          ld a, UART_DATA_REG
  17++8BD2 ED 79          out (c), a
  18++8BD4 01 3B FD         ld bc, ZXUNO_REG
  18++8BD7 ED 78          in A, (c)
  19++8BD9 06 FF            ld b, #ff
  20++8BDB              .loop
  21++8BDB C5               push bc
  22++8BDC CD 1D 8C         call uartRead
  23++8BDF C1               pop bc
  24++8BE0 10 F9            djnz .loop
  25++8BE2 C9               ret
  26++8BE3
  27++8BE3              read:
  28++8BE3 CD 1D 8C         call uartRead
  29++8BE6 30 FB            jr nc, read
  30++8BE8 C9               ret
  31++8BE9
  32++8BE9              ; Write single byte to UART
  33++8BE9              ; A - byte to write
  34++8BE9              ; BC will be wasted
  35++8BE9              write:
  36++8BE9 F5               push af
  37++8BEA 01 3B FC         ld bc, ZXUNO_ADDR
  37++8BED 3E C7          ld a, UART_STAT_REG
  37++8BEF ED 79          out (c), a
  38++8BF1 01 3B FD         ld bc, ZXUNO_REG
  38++8BF4 ED 78          in A, (c)
  38++8BF6 E6 80          and UART_BYTE_RECIVED
  39++8BF8 20 17            jr nz, .is_recvF
  40++8BFA              .checkSent
  41++8BFA 01 3B FD         ld bc, ZXUNO_REG
  41++8BFD ED 78          in A, (c)
  41++8BFF E6 40          and UART_BYTE_SENDING
  42++8C01 20 F7            jr nz, .checkSent
  43++8C03
  44++8C03 01 3B FC         ld bc, ZXUNO_ADDR
  44++8C06 3E C6          ld a, UART_DATA_REG
  44++8C08 ED 79          out (c), a
  45++8C0A
  46++8C0A 01 3B FD         ld bc, ZXUNO_REG
  46++8C0D F1             pop af
  46++8C0E ED 79          out (c), a
  47++8C10 C9               ret
  48++8C11              .is_recvF
  49++8C11 F5               push af
  49++8C12 E5             push hl
  50++8C13 21 76 8C         ld hl, is_recv
  50++8C16 3E 01          ld a, 1
  50++8C18 77             ld (hl), a
  51++8C19
  52++8C19 E1               pop hl
  52++8C1A F1             pop af
  53++8C1B 18 DD            jr .checkSent
  54++8C1D
  55++8C1D              ; Read byte from UART
  56++8C1D              ; A: byte
  57++8C1D              ; B:
  58++8C1D              ;     1 - Was read
  59++8C1D              ;     0 - Nothing to read
  60++8C1D              uartRead:
  61++8C1D 3A 74 8C         ld a, (poked_byte)
  61++8C20 E6 01          and 1
  61++8C22 20 19          jr nz, .retBuff
  62++8C24
  63++8C24 3A 76 8C         ld a, (is_recv)
  63++8C27 E6 01          and 1
  63++8C29 20 31          jr nz, recvRet
  64++8C2B
  65++8C2B 01 3B FC         ld bc, ZXUNO_ADDR
  65++8C2E 3E C7          ld a, UART_STAT_REG
  65++8C30 ED 79          out (c), a
  66++8C32 01 3B FD         ld bc, ZXUNO_REG
  66++8C35 ED 78          in a, (c)
  66++8C37 E6 80          and UART_BYTE_RECIVED
  67++8C39 20 0C            jr nz, retReadByte
  68++8C3B
  69++8C3B B7               or a
  70++8C3C C9               ret
  71++8C3D              .retBuff
  72++8C3D 3E 00            ld a, 0
  72++8C3F 32 74 8C       ld (poked_byte), a
  72++8C42 3A 75 8C       ld a, (byte_buff)
  73++8C45 37               scf
  74++8C46 C9               ret
  75++8C47
  76++8C47              retReadByte:
  77++8C47 AF               xor a
  77++8C48 32 74 8C       ld (poked_byte), a
  77++8C4B 32 76 8C       ld (is_recv), a
  78++8C4E
  79++8C4E 01 3B FC         ld bc, ZXUNO_ADDR
  79++8C51 3E C6          ld a, UART_DATA_REG
  79++8C53 ED 79          out (c), a
  80++8C55 01 3B FD         ld bc, ZXUNO_REG
  80++8C58 ED 78          in a, (c)
  81++8C5A
  82++8C5A 37               scf
  83++8C5B C9               ret
  84++8C5C
  85++8C5C              recvRet:
  86++8C5C 01 3B FC         ld bc, ZXUNO_ADDR
  86++8C5F 3E C6          ld a,  UART_DATA_REG
  86++8C61 ED 79          out (c),a
  87++8C63
  88++8C63 01 3B FD         ld bc, ZXUNO_REG
  88++8C66 ED 78          in a, (c)
  89++8C68 21 76 8C         ld hl, is_recv
  89++8C6B 36 00          ld (hl), 0
  90++8C6D 21 74 8C         ld hl, poked_byte
  90++8C70 36 00          ld (hl), 0
  91++8C72
  92++8C72 37               scf
  93++8C73 C9               ret
  94++8C74
  95++8C74 00           poked_byte defb 0
  96++8C75 00           byte_buff defb 0
  97++8C76 00           is_recv defb 0
  98++8C77
  99++8C77                  ENDMODULE
# file closed: drivers/uno-uart.asm
   7+ 8C77                  ENDIF
   8+ 8C77
   9+ 8C77                  IFDEF MB03
  10+ 8C77 ~                	include "mb03-uart.asm"
  11+ 8C77                  ENDIF
  12+ 8C77
  13+ 8C77                  IFDEF AY
  14+ 8C77 ~                	include "ay-uart.asm"
  15+ 8C77                  ENDIF
  16+ 8C77
  17+ 8C77                  IFDEF ZW
  18+ 8C77 ~                	include "zx-wifi.asm"
  19+ 8C77                  ENDIF
  20+ 8C77
  21+ 8C77              	include "utils.asm"
# file opened: drivers/utils.asm
   1++8C77              ;;; Macroses!!!!
   2++8C77                  MACRO EspSend Text
   3++8C77 ~                ld hl, .txtB
   4++8C77 ~                ld e, (.txtE - .txtB)
   5++8C77 ~                call espSend
   6++8C77 ~                jr .txtE
   7++8C77 ~            .txtB
   8++8C77 ~                db Text
   9++8C77 ~            .txtE
  10++8C77                  ENDM
  11++8C77
  12++8C77                  MACRO EspCmd Text
  13++8C77 ~                ld hl, .txtB
  14++8C77 ~                ld e, (.txtE - .txtB)
  15++8C77 ~                call espSend
  16++8C77 ~                jr .txtE
  17++8C77 ~            .txtB
  18++8C77 ~                db Text
  19++8C77 ~                db 13, 10
  20++8C77 ~            .txtE
  21++8C77                  ENDM
  22++8C77
  23++8C77                  MACRO EspCmdOkErr text
  24++8C77 ~                EspCmd text
  25++8C77 ~                call checkOkErr
  26++8C77                  ENDM
  27++8C77
  28++8C77              ; IN DE - string pointer
  29++8C77              ; OUT HL - string len
  30++8C77              strLen:
  31++8C77 21 00 00         ld hl, 0
  32++8C7A              .loop
  33++8C7A 1A               ld a, (de)
  33++8C7B A7             and a
  33++8C7C C8             ret z
  34++8C7D 13 23            inc de, hl
  35++8C7F 18 F9            jr .loop
# file closed: drivers/utils.asm
  22+ 8C81
  23+ 8C81              	IFDEF NEDOOSATM
  24+ 8C81 ~            		include "atm-uart.asm"
  25+ 8C81              	ENDIF
  26+ 8C81
  27+ 8C81              	IFDEF NEDOOSEVO
  28+ 8C81 ~            		include "evo-uart.asm"
  29+ 8C81                     	ENDIF
  30+ 8C81
  31+ 8C81              	IFDEF NEDONET
  32+ 8C81 ~            		include "nedowifi.asm"
  33+ 8C81              	ELSE
  34+ 8C81              		include "wifi.asm"
# file opened: drivers/wifi.asm
   1++8C81                  MODULE Wifi
   2++8C81 00 00        bytes_avail dw 0
   3++8C83 00 00        buffer_pointer dw 0
   4++8C85 01           closed db 1
   5++8C86              ; Initialize Wifi chip to work
   6++8C86              init:
   7++8C86
   8++8C86 21 78 8D         ld hl, .uartIniting
   8++8C89 CD BC 60       call TextMode.printZ
   9++8C8C CD C1 8B         call Uart.init
  10++8C8F 21 89 8D         ld hl, .chipIniting
  10++8C92 CD BC 60       call TextMode.printZ
  11++8C95
  12++8C95                  EspCmdOkErr "ATE0"
  12++8C95             >    EspCmd "ATE0"
  12++8C95 21 9F 8C    >    ld hl, .txtB
  12++8C98 1E 06       >    ld e, (.txtE - .txtB)
  12++8C9A CD 87 8E    >    call espSend
  12++8C9D 18 06       >    jr .txtE
  12++8C9F             >.txtB
  12++8C9F 41 54 45 30 >    db "ATE0"
  12++8CA3 0D 0A       >    db 13, 10
  12++8CA5             >.txtE
  12++8CA5 CD 12 8E    >    call checkOkErr
  13++8CA8 DA 58 8D         jp c, .initError
  14++8CAB
  15++8CAB                  IFDEF AUTH
  16++8CAB 21 A3 9C 06      ld hl, creds, b, Dos.FMODE_READ
  16++8CAF 01
  16++8CB0 CD 64 6B       call Dos.fopen
  17++8CB3 F5               push af
  18++8CB4 21 B4 9C 01      ld hl,outputBuffer2, bc, 255
  18++8CB8 FF 00
  18++8CBA CD 51 6C       call Dos.fread
  19++8CBD F1               pop af
  20++8CBE CD 3D 6C         call Dos.fclose
  21++8CC1
  22++8CC1 21 A1 8D         ld hl, .doneInit1
  22++8CC4 CD BC 60       call TextMode.printZ
  23++8CC7                  ;ld hl, outputBuffer2 : call TextMode.printZ
  24++8CC7
  25++8CC7 21 B4 9C         ld hl,outputBuffer2
  26++8CCA CD 91 8E         call espSendT
  27++8CCD 3E 0D            ld a, 13
  27++8CCF CD E9 8B       call Uart.write
  28++8CD2 3E 0A            ld a, 10
  28++8CD4 CD E9 8B       call Uart.write
  29++8CD7 CD 12 8E         call checkOkErr
  30++8CDA DA 58 8D         jp c, .initError
  31++8CDD                  ENDIF
  32++8CDD
  33++8CDD                 	EspCmdOkErr "AT+CIPSERVER=0"
  33++8CDD             >    EspCmd "AT+CIPSERVER=0"
  33++8CDD 21 E7 8C    >    ld hl, .txtB
  33++8CE0 1E 10       >    ld e, (.txtE - .txtB)
  33++8CE2 CD 87 8E    >    call espSend
  33++8CE5 18 10       >    jr .txtE
  33++8CE7             >.txtB
  33++8CE7 41 54 2B 43 >    db "AT+CIPSERVER=0"
  33++8CEB 49 50 53 45 >
  33++8CEF 52 56 45 52 >
  33++8CF3 3D 30       >
  33++8CF5 0D 0A       >    db 13, 10
  33++8CF7             >.txtE
  33++8CF7 CD 12 8E    >    call checkOkErr
  34++8CFA                  EspCmdOkErr "AT+CIPCLOSE" ; Close if there some connection was. Don't care about result
  34++8CFA             >    EspCmd "AT+CIPCLOSE"
  34++8CFA 21 04 8D    >    ld hl, .txtB
  34++8CFD 1E 0D       >    ld e, (.txtE - .txtB)
  34++8CFF CD 87 8E    >    call espSend
  34++8D02 18 0D       >    jr .txtE
  34++8D04             >.txtB
  34++8D04 41 54 2B 43 >    db "AT+CIPCLOSE"
  34++8D08 49 50 43 4C >
  34++8D0C 4F 53 45    >
  34++8D0F 0D 0A       >    db 13, 10
  34++8D11             >.txtE
  34++8D11 CD 12 8E    >    call checkOkErr
  35++8D14                  EspCmdOkErr "AT+CIPMUX=0" ; Single connection mode
  35++8D14             >    EspCmd "AT+CIPMUX=0"
  35++8D14 21 1E 8D    >    ld hl, .txtB
  35++8D17 1E 0D       >    ld e, (.txtE - .txtB)
  35++8D19 CD 87 8E    >    call espSend
  35++8D1C 18 0D       >    jr .txtE
  35++8D1E             >.txtB
  35++8D1E 41 54 2B 43 >    db "AT+CIPMUX=0"
  35++8D22 49 50 4D 55 >
  35++8D26 58 3D 30    >
  35++8D29 0D 0A       >    db 13, 10
  35++8D2B             >.txtE
  35++8D2B CD 12 8E    >    call checkOkErr
  36++8D2E DA 58 8D         jp c, .initError
  37++8D31
  38++8D31                  EspCmdOkErr "AT+CIPDINFO=0" ; Disable additional info
  38++8D31             >    EspCmd "AT+CIPDINFO=0"
  38++8D31 21 3B 8D    >    ld hl, .txtB
  38++8D34 1E 0F       >    ld e, (.txtE - .txtB)
  38++8D36 CD 87 8E    >    call espSend
  38++8D39 18 0F       >    jr .txtE
  38++8D3B             >.txtB
  38++8D3B 41 54 2B 43 >    db "AT+CIPDINFO=0"
  38++8D3F 49 50 44 49 >
  38++8D43 4E 46 4F 3D >
  38++8D47 30          >
  38++8D48 0D 0A       >    db 13, 10
  38++8D4A             >.txtE
  38++8D4A CD 12 8E    >    call checkOkErr
  39++8D4D DA 58 8D         jp c, .initError
  40++8D50
  41++8D50 21 9A 8D         ld hl, .doneInit
  41++8D53 CD BC 60       call TextMode.printZ
  42++8D56
  43++8D56 B7               or a
  44++8D57 C9               ret
  45++8D58              .initError
  46++8D58 21 60 8D         ld hl, .errMsg
  46++8D5B CD 85 69       call DialogBox.msgBox
  47++8D5E 37               scf
  48++8D5F C9               ret
  49++8D60 57 69 46 69  .errMsg      db "WiFi chip init failed!", "\r", 0
  49++8D64 20 63 68 69
  49++8D68 70 20 69 6E
  49++8D6C 69 74 20 66
  49++8D70 61 69 6C 65
  49++8D74 64 21 0D 00
  50++8D78 55 61 72 74  .uartIniting db "Uart initing...", "\r", 0
  50++8D7C 20 69 6E 69
  50++8D80 74 69 6E 67
  50++8D84 2E 2E 2E 0D
  50++8D88 00
  51++8D89 43 68 69 70  .chipIniting db "Chip initing...", "\r", 0
  51++8D8D 20 69 6E 69
  51++8D91 74 69 6E 67
  51++8D95 2E 2E 2E 0D
  51++8D99 00
  52++8D9A 44 6F 6E 65  .doneInit    db "Done!","\r", 0
  52++8D9E 21 0D 00
  53++8DA1 43 6F 6E 6E  .doneInit1   db "Connecting to AP","\r", 0
  53++8DA5 65 63 74 69
  53++8DA9 6E 67 20 74
  53++8DAD 6F 20 41 50
  53++8DB1 0D 00
  54++8DB3                  IFNDEF PROXY
  55++8DB3              ; HL - host pointer in gopher row
  56++8DB3              ; DE - port pointer in gopher row
  57++8DB3              openTCP:
  58++8DB3 D5               push de
  59++8DB4 E5               push hl
  60++8DB5                  EspCmdOkErr "AT+CIPCLOSE" ; Don't care about result. Just close if it didn't happens before
  60++8DB5             >    EspCmd "AT+CIPCLOSE"
  60++8DB5 21 BF 8D    >    ld hl, .txtB
  60++8DB8 1E 0D       >    ld e, (.txtE - .txtB)
  60++8DBA CD 87 8E    >    call espSend
  60++8DBD 18 0D       >    jr .txtE
  60++8DBF             >.txtB
  60++8DBF 41 54 2B 43 >    db "AT+CIPCLOSE"
  60++8DC3 49 50 43 4C >
  60++8DC7 4F 53 45    >
  60++8DCA 0D 0A       >    db 13, 10
  60++8DCC             >.txtE
  60++8DCC CD 12 8E    >    call checkOkErr
  61++8DCF                  EspSend 'AT+CIPSTART="TCP","'
  61++8DCF 21 D9 8D    >    ld hl, .txtB
  61++8DD2 1E 13       >    ld e, (.txtE - .txtB)
  61++8DD4 CD 87 8E    >    call espSend
  61++8DD7 18 13       >    jr .txtE
  61++8DD9             >.txtB
  61++8DD9 41 54 2B 43 >    db 'AT+CIPSTART="TCP","'
  61++8DDD 49 50 53 54 >
  61++8DE1 41 52 54 3D >
  61++8DE5 22 54 43 50 >
  61++8DE9 22 2C 22    >
  61++8DEC             >.txtE
  62++8DEC E1               pop hl
  63++8DED CD 91 8E         call espSendT
  64++8DF0                  EspSend '",'
  64++8DF0 21 FA 8D    >    ld hl, .txtB
  64++8DF3 1E 02       >    ld e, (.txtE - .txtB)
  64++8DF5 CD 87 8E    >    call espSend
  64++8DF8 18 02       >    jr .txtE
  64++8DFA             >.txtB
  64++8DFA 22 2C       >    db '",'
  64++8DFC             >.txtE
  65++8DFC E1               pop hl
  66++8DFD CD 91 8E         call espSendT
  67++8E00 3E 0D            ld a, 13
  67++8E02 CD E9 8B       call Uart.write
  68++8E05 3E 0A            ld a, 10
  68++8E07 CD E9 8B       call Uart.write
  69++8E0A AF               xor a
  69++8E0B 32 85 8C       ld (closed), a
  70++8E0E C3 12 8E         jp checkOkErr
  71++8E11
  72++8E11              continue:
  73++8E11 C9               ret
  74++8E12                  ENDIF
  75++8E12
  76++8E12
  77++8E12
  78++8E12              checkOkErr:
  79++8E12 CD E3 8B         call Uart.read
  80++8E15 FE 4F            cp 'O'
  80++8E17 CA 27 8E       jp z, .okStart ; OK
  81++8E1A FE 45            cp 'E'
  81++8E1C CA 3C 8E       jp z, .errStart ; ERROR
  82++8E1F FE 46            cp 'F'
  82++8E21 CA 61 8E       jp z, .failStart ; FAIL
  83++8E24 C3 12 8E         jp checkOkErr
  84++8E27              .okStart
  85++8E27 CD E3 8B         call Uart.read
  85++8E2A FE 4B          cp 'K'
  85++8E2C C2 12 8E       jp nz, checkOkErr
  86++8E2F CD E3 8B         call Uart.read
  86++8E32 FE 0D          cp 13
  86++8E34 C2 12 8E       jp nz, checkOkErr
  87++8E37 CD 7E 8E         call .flushToLF
  88++8E3A B7               or a
  89++8E3B C9               ret
  90++8E3C              .errStart
  91++8E3C CD E3 8B         call Uart.read
  91++8E3F FE 52          cp 'R'
  91++8E41 C2 12 8E       jp nz, checkOkErr
  92++8E44 CD E3 8B         call Uart.read
  92++8E47 FE 52          cp 'R'
  92++8E49 C2 12 8E       jp nz, checkOkErr
  93++8E4C CD E3 8B         call Uart.read
  93++8E4F FE 4F          cp 'O'
  93++8E51 C2 12 8E       jp nz, checkOkErr
  94++8E54 CD E3 8B         call Uart.read
  94++8E57 FE 52          cp 'R'
  94++8E59 C2 12 8E       jp nz, checkOkErr
  95++8E5C CD 7E 8E         call .flushToLF
  96++8E5F 37               scf
  97++8E60 C9               ret
  98++8E61              .failStart
  99++8E61 CD E3 8B         call Uart.read
  99++8E64 FE 41          cp 'A'
  99++8E66 C2 12 8E       jp nz, checkOkErr
 100++8E69 CD E3 8B         call Uart.read
 100++8E6C FE 49          cp 'I'
 100++8E6E C2 12 8E       jp nz, checkOkErr
 101++8E71 CD E3 8B         call Uart.read
 101++8E74 FE 4C          cp 'L'
 101++8E76 C2 12 8E       jp nz, checkOkErr
 102++8E79 CD 7E 8E         call .flushToLF
 103++8E7C 37               scf
 104++8E7D C9               ret
 105++8E7E              .flushToLF
 106++8E7E CD E3 8B         call Uart.read
 107++8E81 FE 0A            cp 10
 107++8E83 C2 7E 8E       jp nz, .flushToLF
 108++8E86 C9               ret
 109++8E87
 110++8E87              ; Send buffer to UART
 111++8E87              ; HL - buff
 112++8E87              ; E - count
 113++8E87              espSend:
 114++8E87 7E               ld a, (hl)
 114++8E88 CD E9 8B       call Uart.write
 115++8E8B 23               inc hl
 116++8E8C 1D               dec e
 117++8E8D C2 87 8E         jp nz, espSend
 118++8E90 C9               ret
 119++8E91
 120++8E91              ; HL - string that ends with one of the terminator(CR/LF/TAB/NULL)
 121++8E91              espSendT:
 122++8E91 7E               ld a, (hl)
 123++8E92
 124++8E92 A7               and a
 124++8E93 C8             ret z
 125++8E94 FE 09            cp 9
 125++8E96 C8             ret z
 126++8E97 FE 0D            cp 13
 126++8E99 C8             ret z
 127++8E9A FE 0A            cp 10
 127++8E9C C8             ret z
 128++8E9D
 129++8E9D CD E9 8B         call Uart.write
 130++8EA0 23               inc hl
 131++8EA1 C3 91 8E         jp espSendT
 132++8EA4
 133++8EA4              ; HL - stringZ to send
 134++8EA4              ; Adds CR LF
 135++8EA4              tcpSendZ:
 136++8EA4 E5               push hl
 137++8EA5                  EspSend "AT+CIPSEND="
 137++8EA5 21 AF 8E    >    ld hl, .txtB
 137++8EA8 1E 0B       >    ld e, (.txtE - .txtB)
 137++8EAA CD 87 8E    >    call espSend
 137++8EAD 18 0B       >    jr .txtE
 137++8EAF             >.txtB
 137++8EAF 41 54 2B 43 >    db "AT+CIPSEND="
 137++8EB3 49 50 53 45 >
 137++8EB7 4E 44 3D    >
 137++8EBA             >.txtE
 138++8EBA D1               pop de
 138++8EBB D5             push de
 139++8EBC CD 77 8C         call strLen
 140++8EBF 23               inc hl
 140++8EC0 23             inc hl ; +CRLF
 141++8EC1 CD 8F 8F         call hlToNumEsp
 142++8EC4 3E 0D            ld a, 13
 142++8EC6 CD E9 8B       call Uart.write
 143++8EC9 3E 0A            ld a, 10
 143++8ECB CD E9 8B       call Uart.write
 144++8ECE CD 12 8E         call checkOkErr
 144++8ED1 D8             ret c
 145++8ED2              .wait
 146++8ED2 CD E3 8B         call Uart.read
 146++8ED5 FE 3E          cp '>'
 146++8ED7 C2 D2 8E       jp nz, .wait
 147++8EDA E1               pop hl
 148++8EDB              .loop
 149++8EDB 7E               ld a, (hl)
 149++8EDC A7             and a
 149++8EDD CA E7 8E       jp z, .exit
 150++8EE0 CD E9 8B         call Uart.write
 151++8EE3 23               inc hl
 152++8EE4 C3 DB 8E         jp .loop
 153++8EE7              .exit
 154++8EE7 3E 0D            ld a, 13
 154++8EE9 CD E9 8B       call Uart.write
 155++8EEC 3E 0A            ld a, 10
 155++8EEE CD E9 8B       call Uart.write
 156++8EF1 C3 12 8E         jp checkOkErr
 157++8EF4
 158++8EF4              getPacket:
 159++8EF4 CD E3 8B         call Uart.read
 160++8EF7 FE 2B            cp '+'
 160++8EF9 CA 2A 8F       jp z, .ipdBegun    ; "+IPD," packet
 161++8EFC FE 4F            cp 'O'
 161++8EFE CA 04 8F       jp z, .closedBegun ; It enough to check "OSED\n" :-)
 162++8F01 C3 F4 8E         jp getPacket
 163++8F04              .closedBegun
 164++8F04 CD E3 8B         call Uart.read
 164++8F07 FE 53          cp 'S'
 164++8F09 C2 F4 8E       jp nz, getPacket
 165++8F0C CD E3 8B         call Uart.read
 165++8F0F FE 45          cp 'E'
 165++8F11 C2 F4 8E       jp nz, getPacket
 166++8F14 CD E3 8B         call Uart.read
 166++8F17 FE 44          cp 'D'
 166++8F19 C2 F4 8E       jp nz, getPacket
 167++8F1C CD E3 8B         call Uart.read
 167++8F1F FE 0D          cp 13
 167++8F21 C2 F4 8E       jp nz, getPacket
 168++8F24 3E 01 32 85      ld a, 1, (closed), a
 168++8F28 8C
 169++8F29 C9               ret
 170++8F2A              .ipdBegun
 171++8F2A CD E3 8B         call Uart.read
 171++8F2D FE 49          cp 'I'
 171++8F2F C2 F4 8E       jp nz, getPacket
 172++8F32 CD E3 8B         call Uart.read
 172++8F35 FE 50          cp 'P'
 172++8F37 C2 F4 8E       jp nz, getPacket
 173++8F3A CD E3 8B         call Uart.read
 173++8F3D FE 44          cp 'D'
 173++8F3F C2 F4 8E       jp nz, getPacket
 174++8F42 CD E3 8B         call Uart.read ; Comma
 175++8F45 CD 75 8F         call .count_ipd_lenght
 175++8F48 22 81 8C       ld (bytes_avail), hl
 176++8F4B 44 4D            ld bc, hl
 177++8F4D 2A 83 8C         ld hl, (buffer_pointer)
 178++8F50              .readp
 179++8F50 7C               ld a, h
 179++8F51 FE FE          cp #fe
 179++8F53 D2 69 8F       jp nc, .skipbuff
 180++8F56 C5 E5            push bc, hl
 181++8F58 CD E3 8B         call Uart.read
 182++8F5B E1 C1            pop hl, bc
 183++8F5D 77               ld (hl), a
 184++8F5E 0B               dec bc
 184++8F5F 23             inc hl
 185++8F60 78               ld a, b
 185++8F61 B1             or c
 185++8F62 C2 50 8F       jp nz, .readp
 186++8F65 22 83 8C         ld (buffer_pointer), hl
 187++8F68 C9               ret
 188++8F69              .skipbuff
 189++8F69 C5               push bc
 190++8F6A CD E3 8B         call Uart.read
 191++8F6D C1               pop bc
 192++8F6E 0B               dec bc
 192++8F6F 78             ld a, b
 192++8F70 B1             or c
 192++8F71 C2 69 8F       jp nz, .skipbuff
 193++8F74 C9               ret
 194++8F75              .count_ipd_lenght
 195++8F75 21 00 00     		ld hl,0			; count lenght
 196++8F78 E5           .cil1	push  hl
 197++8F79 CD E3 8B             call Uart.read
 198++8F7C E1                   pop hl
 199++8F7D FE 3A        		cp ':'
 199++8F7F C8             ret z
 200++8F80 D6 30        		sub 0x30
 200++8F82 4D             ld c,l
 200++8F83 44             ld b,h
 200++8F84 29             add hl,hl
 200++8F85 29             add hl,hl
 200++8F86 09             add hl,bc
 200++8F87 29             add hl,hl
 200++8F88 4F             ld c,a
 200++8F89 06 00          ld b,0
 200++8F8B 09             add hl,bc
 201++8F8C C3 78 8F     		jp .cil1
 202++8F8F
 203++8F8F              ; Based on: https://wikiti.brandonw.net/index.php?title=Z80_Routines:Other:DispHL
 204++8F8F              ; HL - number
 205++8F8F              ; It will be written to UART
 206++8F8F              hlToNumEsp:
 207++8F8F 01 F0 D8     	ld	bc,-10000
 208++8F92 CD A8 8F     	call	.n1
 209++8F95 01 18 FC     	ld	bc,-1000
 210++8F98 CD A8 8F     	call	.n1
 211++8F9B 01 9C FF     	ld	bc,-100
 212++8F9E CD A8 8F     	call	.n1
 213++8FA1 0E F6        	ld	c,-10
 214++8FA3 CD A8 8F     	call	.n1
 215++8FA6 0E FF        	ld	c,-1
 216++8FA8 3E 2F        .n1	ld	a,'0'-1
 217++8FAA 3C           .n2	inc	a
 218++8FAB 09           	add	hl,bc
 219++8FAC DA AA 8F     	jp	c, .n2
 220++8FAF ED 42        	sbc	hl,bc
 221++8FB1 C5               push bc
 222++8FB2 CD E9 8B     	call Uart.write
 223++8FB5 C1               pop bc
 224++8FB6 C9               ret
 225++8FB7              flushToLF1
 226++8FB7 CD E3 8B         call Uart.read
 227++8FBA FE 0A            cp 10
 227++8FBC C2 B7 8F       jp nz, flushToLF1
 228++8FBF C9               ret
 229++8FC0                  ENDMODULE
# file closed: drivers/wifi.asm
  35+ 8FC0              	ENDIF
  36+ 8FC0
  37+ 8FC0              ;	IFDEF NEDOOS
  38+ 8FC0              ;       	include "nedoos.asm"
  39+ 8FC0              ;	ENDIF
  40+ 8FC0
  41+ 8FC0              	include "proxy.asm"
# file opened: drivers/proxy.asm
   1++8FC0                  IFDEF PROXY
   2++8FC0 ~                MODULE Wifi
   3++8FC0 ~            ; Same singature as wifi.openTCP
   4++8FC0 ~            ; HL - host pointer in gopher row
   5++8FC0 ~            ; DE - port pointer in gopher row
   6++8FC0 ~            openTCP:
   7++8FC0 ~                push de
   8++8FC0 ~                push hl
   9++8FC0 ~
  10++8FC0 ~                xor a
  10++8FC0 ~              ld hl, hostBuff, de, hostBuff + 1, bc, 102, (hl), a
  10++8FC0 ~              ldir
  11++8FC0 ~
  12++8FC0 ~                EspCmdOkErr "AT+CIPCLOSE"
  13++8FC0 ~                EspCmdOkErr 'AT+CIPSTART="TCP","138.68.76.243",6912' // Replace here for yourown proxy. If you wish
  14++8FC0 ~                jr c, .error
  15++8FC0 ~                pop hl
  15++8FC0 ~              ld de, hostBuff
  16++8FC0 ~            .copyHost
  17++8FC0 ~                ld a, (hl)
  17++8FC0 ~              and a
  17++8FC0 ~              jr z, 1F
  17++8FC0 ~              and a
  17++8FC0 ~              jr z, 1F
  18++8FC0 ~                ld (de), a
  18++8FC0 ~              inc hl, de
  19++8FC0 ~                jr .copyHost
  20++8FC0 ~            1   xor a
  20++8FC0 ~              ld (de), a
  21++8FC0 ~                pop hl
  21++8FC0 ~              ld de, portBuff
  22++8FC0 ~            .copyPort
  23++8FC0 ~                ld a, (hl)
  23++8FC0 ~              and a
  23++8FC0 ~              jr z, 1F
  23++8FC0 ~              and a
  23++8FC0 ~              jr z, 1F
  24++8FC0 ~                ld (de), a
  24++8FC0 ~              inc hl, de
  25++8FC0 ~                jr .copyPort
  26++8FC0 ~            1   ld hl, hostBuff
  26++8FC0 ~              call tcpSendZ
  27++8FC0 ~                ld hl, portBuff
  27++8FC0 ~              call tcpSendZ
  28++8FC0 ~                xor a
  28++8FC0 ~              ld (closed), a
  29++8FC0 ~                ret
  30++8FC0 ~            .error
  31++8FC0 ~                pop hl
  31++8FC0 ~              pop de
  32++8FC0 ~                ret
  33++8FC0 ~
  34++8FC0 ~            continue:
  35++8FC0 ~                EspCmdOkErr "AT+CIPSEND=1"
  36++8FC0 ~                ret c
  37++8FC0 ~            .wait
  38++8FC0 ~                call Uart.read
  38++8FC0 ~              cp '>'
  38++8FC0 ~              jr nz, .wait
  39++8FC0 ~                ld a, 'c'
  39++8FC0 ~              call Uart.write
  40++8FC0 ~                jp checkOkErr
  41++8FC0 ~
  42++8FC0 ~            hostBuff ds 96
  43++8FC0 ~            portBuff ds 7
  44++8FC0 ~                ENDMODULE
  45++8FC0                  ENDIF
# file closed: drivers/proxy.asm
  42+ 8FC0              	include "memory.asm"
# file opened: drivers/memory.asm
   1++8FC0                  module Memory
   2++8FC0              BANKM = #5b5c
   3++8FC0              MEM_PORT = #7ffd
   4++8FC0
   5++8FC0              init:
   6++8FC0 F3               di
   7++8FC1 FD CB 01 A6      res 4, (iy + 1)
   8++8FC5
   9++8FC5 AF               xor a
   9++8FC6 CD CA 8F       call setPage
  10++8FC9 C9               ret
  11++8FCA
  12++8FCA              ; a - page
  13++8FCA              setPage:
  14++8FCA F6 18            or #18
  14++8FCC 32 5C 5B       ld (BANKM), a
  15++8FCF 01 FD 7F         ld bc, MEM_PORT
  15++8FD2 ED 79          out (c), a
  16++8FD4 C9               ret
  17++8FD5
  18++8FD5                  endmodule
# file closed: drivers/memory.asm
  43+ 8FD5              	include "general-sound.asm"
# file opened: drivers/general-sound.asm
   1++8FD5                  ifdef GS
   2++8FD5 ~                macro GS_WaitCommand
   3++8FD5 ~            .wait
   4++8FD5 ~                in a, (GeneralSound.CMD)
   5++8FD5 ~                rrca
   6++8FD5 ~                jr c, .wait
   7++8FD5 ~                endm
   8++8FD5 ~
   9++8FD5 ~                macro GS_WaitData
  10++8FD5 ~            .wait
  11++8FD5 ~                in a, (GeneralSound.CMD)
  12++8FD5 ~                rlca
  13++8FD5 ~                jr c, .wait
  14++8FD5 ~                endm
  15++8FD5 ~
  16++8FD5 ~                macro GS_SendCommand nn
  17++8FD5 ~                ld a, nn
  17++8FD5 ~              out (GeneralSound.CMD), a
  18++8FD5 ~                endm
  19++8FD5 ~
  20++8FD5 ~                module GeneralSound
  21++8FD5 ~            ;; Control ports
  22++8FD5 ~            CMD  = 187
  23++8FD5 ~            DATA = 179
  24++8FD5 ~
  25++8FD5 ~            ;; Commands
  26++8FD5 ~            CMD_WARM_RESET      = #F3
  27++8FD5 ~            CMD_COLD_RESET      = #F4
  28++8FD5 ~            CMD_LOAD_MODULE     = #30
  29++8FD5 ~            CMD_PLAY_MODULE     = #31
  30++8FD5 ~            CMD_STOP_MODULE     = #32
  31++8FD5 ~            CMD_CONTINUE_MODULE = #33
  32++8FD5 ~            CMD_OPEN_STREAM     = #D1
  33++8FD5 ~            CMD_CLOSE_STREAM    = #D2
  34++8FD5 ~
  35++8FD5 ~            ; A - 0 warm reset, other - cold
  36++8FD5 ~            init:
  37++8FD5 ~                and a
  37++8FD5 ~              jr nz, .cold
  38++8FD5 ~                GS_SendCommand CMD_WARM_RESET
  39++8FD5 ~                ret
  40++8FD5 ~            .cold
  41++8FD5 ~                GS_SendCommand CMD_COLD_RESET
  42++8FD5 ~                ret
  43++8FD5 ~
  44++8FD5 ~            ;; Initializes loading module
  45++8FD5 ~            loadModule:
  46++8FD5 ~                GS_SendCommand CMD_LOAD_MODULE
  47++8FD5 ~                GS_WaitCommand
  48++8FD5 ~                GS_SendCommand CMD_OPEN_STREAM
  49++8FD5 ~                GS_WaitCommand
  50++8FD5 ~                ret
  51++8FD5 ~
  52++8FD5 ~            ;; Use it for streaming mod file
  53++8FD5 ~            sendByte:
  54++8FD5 ~                out (DATA), a
  55++8FD5 ~                GS_WaitData
  56++8FD5 ~                ret
  57++8FD5 ~
  58++8FD5 ~            ;; Call it when module was loaded
  59++8FD5 ~            finishLoadingModule:
  60++8FD5 ~                GS_SendCommand CMD_CLOSE_STREAM
  61++8FD5 ~                GS_WaitCommand
  62++8FD5 ~            rewind:
  63++8FD5 ~                ld a, 1
  63++8FD5 ~              out (DATA), a
  64++8FD5 ~                GS_SendCommand CMD_PLAY_MODULE
  65++8FD5 ~                GS_WaitCommand
  66++8FD5 ~                ld a, 1, (state),a
  67++8FD5 ~                ret
  68++8FD5 ~
  69++8FD5 ~            ;; Works like pause too
  70++8FD5 ~            stopModule:
  71++8FD5 ~                xor a
  71++8FD5 ~              ld (state), a
  72++8FD5 ~                GS_SendCommand CMD_STOP_MODULE
  73++8FD5 ~                ret
  74++8FD5 ~
  75++8FD5 ~            continueModule:
  76++8FD5 ~                ld a, 1
  76++8FD5 ~              ld (state), a
  77++8FD5 ~                GS_SendCommand CMD_CONTINUE_MODULE
  78++8FD5 ~                ret
  79++8FD5 ~
  80++8FD5 ~            ; Pauses resumes
  81++8FD5 ~            toggleModule:
  82++8FD5 ~                call Console.waitForKeyUp
  83++8FD5 ~                ld a, (state)
  83++8FD5 ~              and a
  84++8FD5 ~                jr z, continueModule
  85++8FD5 ~                jr stopModule
  86++8FD5 ~
  87++8FD5 ~            toggleDownload:
  88++8FD5 ~                ld a,(GSdownType)
  89++8FD5 ~                xor 1
  90++8FD5 ~                ld (GSdownType),a
  91++8FD5 ~                ret
  92++8FD5 ~
  93++8FD5 ~            GSdownType  db 0
  94++8FD5 ~            state db 0
  95++8FD5 ~                endmodule
  96++8FD5 ~
  97++8FD5                  endif
# file closed: drivers/general-sound.asm
  44+ 8FD5
# file closed: drivers/index.asm
  38  8FD5                  IFNDEF NEDOOS
  39  8FD5                  include "player/vortex-processor.asm"
# file opened: player/vortex-processor.asm
   1+ 8FD5                  MODULE VortexProcessor
   2+ 8FD5              	IFDEF MSX
   3+ 8FD5 ~            play:
   4+ 8FD5 ~                call Console.peekC
   4+ 8FD5 ~              and a
   5+ 8FD5 ~                jr nz, play
   6+ 8FD5 ~
   7+ 8FD5 ~                ld hl, message
   7+ 8FD5 ~              call DialogBox.msgNoWait
   8+ 8FD5 ~
   9+ 8FD5 ~                ld hl, outputBuffer
   9+ 8FD5 ~              call VTPL.INIT
  10+ 8FD5 ~            .loop
  11+ 8FD5 ~                halt
  11+ 8FD5 ~              di
  11+ 8FD5 ~              call VTPL.PLAY
  11+ 8FD5 ~              ei
  12+ 8FD5 ~                call Console.peekC
  12+ 8FD5 ~              and a
  12+ 8FD5 ~              jp nz, .stop
  13+ 8FD5 ~                jr nc, .loop
  14+ 8FD5 ~            .stop
  15+ 8FD5 ~                call VTPL.MUTE
  16+ 8FD5 ~            .wlp
  17+ 8FD5 ~                call Console.peekC
  17+ 8FD5 ~              and a
  18+ 8FD5 ~                jr nz, .wlp
  19+ 8FD5 ~                ret
  20+ 8FD5 ~
  21+ 8FD5 ~            message db "Press key to stop...", 0
  22+ 8FD5 ~                ENDMODULE
  23+ 8FD5 ~                include "msxplayer.asm"
  24+ 8FD5              	ELSE
  25+ 8FD5              play:
  26+ 8FD5 CD BD 69         call Console.waitForKeyUp
  27+ 8FD8
  28+ 8FD8 21 10 90         ld hl, message
  28+ 8FDB CD 8E 69       call DialogBox.msgNoWait
  29+ 8FDE
  30+ 8FDE 21 40 9C         ld hl, outputBuffer
  30+ 8FE1 CD 66 90       call VTPL.INIT
  31+ 8FE4
  32+ 8FE4
  33+ 8FE4 3E 01 32 D9      ld a, 1, (Render.play_next), a
  33+ 8FE8 68
  34+ 8FE9
  35+ 8FE9                  IFDEF GS
  36+ 8FE9 ~                call GeneralSound.stopModule
  37+ 8FE9                  ENDIF
  38+ 8FE9              .loop
  39+ 8FE9 76               halt
  39+ 8FEA F3             di
  39+ 8FEB CD 89 98       call VTPL.PLAY
  39+ 8FEE FB             ei
  40+ 8FEF AF               xor a
  40+ 8FF0 DB FE          in a, (#fe)
  40+ 8FF2 2F             cpl
  40+ 8FF3 E6 1F          and 31
  40+ 8FF5 C2 0A 90       jp nz, .stopKey
  41+ 8FF8 3A 2F 90         ld a, (VTPL.SETUP)
  41+ 8FFB 17             rla
  41+ 8FFC 30 EB          jr nc, .loop
  42+ 8FFE 3E 01 32 D9      ld a, 1, (Render.play_next), a
  42+ 9002 68
  43+ 9003              .stop
  44+ 9003 CD 54 90         call VTPL.MUTE
  45+ 9006
  46+ 9006                  IFDEF AY
  47+ 9006 ~                call restoreAyState
  48+ 9006                  ENDIF
  49+ 9006
  50+ 9006 CD BD 69         call Console.waitForKeyUp
  51+ 9009 C9               ret
  52+ 900A              .stopKey
  53+ 900A AF               xor a
  53+ 900B 32 D9 68       ld (Render.play_next), a
  54+ 900E 18 F3            jr .stop
  55+ 9010
  56+ 9010                  IFDEF AY
  57+ 9010 ~            restoreAyState:
  58+ 9010 ~                ld a, #07
  59+ 9010 ~                ld bc, #fffd
  60+ 9010 ~                out (c), a
  61+ 9010 ~                ld a, #fc
  62+ 9010 ~                ld b, #bf
  63+ 9010 ~                out (c), a ; Enable read mode
  64+ 9010 ~
  65+ 9010 ~                ld a, #0e
  66+ 9010 ~                ld bc, #fffd
  67+ 9010 ~                out (c), a
  68+ 9010 ~                ret
  69+ 9010              	ENDIF
  70+ 9010 50 72 65 73  message db "Press key to stop...", 0
  70+ 9014 73 20 6B 65
  70+ 9018 79 20 74 6F
  70+ 901C 20 73 74 6F
  70+ 9020 70 2E 2E 2E
  70+ 9024 00
  71+ 9025                  ENDMODULE
  72+ 9025                  include "player.asm"
# file opened: player/player.asm
   1++9025              ;Universal PT2'n'PT3 Turbo Sound player for ZX Spectrum
   2++9025              ;(c)2004-2007 S.V.Bulba <vorobey@mail.khstu.ru>
   3++9025              ;Specially for AlCo
   4++9025              ;http://bulba.untergrund.net/ (http://bulba.at.kz/)
   5++9025              	MODULE VTPL
   6++9025              ;Release number
   7++9025              Release EQU "0"
   8++9025              ;Conditional assembly
   9++9025              ;1) Current position counters at (Vars1+0) and (Vars2+0)
  10++9025              CurPosCounter=0
  11++9025              ;2) Allow channels allocation bits at (START+10)
  12++9025              ACBBAC=0
  13++9025              ;3) Allow loop checking and disabling
  14++9025              LoopChecker=1
  15++9025              ;4) Insert official identificator
  16++9025              Id=0
  17++9025              ;5) Set IY for correct return to ZX Basic
  18++9025              Basic=1
  19++9025
  20++9025              ;Features
  21++9025              ;--------
  22++9025              ;-Can be compiled at any address (i.e. no need rounding ORG
  23++9025              ; address).
  24++9025              ;-Variables (VARS) can be located at any address (not only after
  25++9025              ; code block).
  26++9025              ;-INIT subprogram checks PT3-module version and rightly
  27++9025              ; generates both note and volume tables outside of code block
  28++9025              ; (in VARS).
  29++9025              ;-Two portamento (spc. command 3xxx) algorithms (depending of
  30++9025              ; PT3 module version).
  31++9025              ;-New 1.XX and 2.XX special command behaviour (only for PT v3.7
  32++9025              ; and higher).
  33++9025              ;-Any Tempo value are accepted (including Tempo=1 and Tempo=2).
  34++9025              ;-TS modes: 2xPT3, 2xPT2 and PT v3.7 TS standard.
  35++9025              ;-Fully compatible with Ay_Emul PT3 and PT2 players codes.
  36++9025              ;-See also notes at the end of this source code.
  37++9025
  38++9025              ;Limitations
  39++9025              ;-----------
  40++9025              ;-Can run in RAM only (self-modified code is used).
  41++9025              ;-PT2 position list must be end by #FF marker only.
  42++9025
  43++9025              ;Warning!!! PLAY subprogram can crash if no module are loaded
  44++9025              ;into RAM or INIT subprogram was not called before.
  45++9025
  46++9025              ;Call MUTE or INIT one more time to mute sound after stopping
  47++9025              ;playing
  48++9025
  49++9025              ;Test codes (commented)
  50++9025              ;	LD A,32 ;SinglePT3(TS if TSPT3.7),ABC,Looped
  51++9025              ;	LD (START+10),A
  52++9025              ;	LD HL,#8000 ;Mod1
  53++9025              ;	LD DE,#A000 ;Mod2 (optional)
  54++9025              ;	CALL START+3
  55++9025              ;	EI
  56++9025              ;_LP	HALT
  57++9025              ;	CALL START+5
  58++9025              ;	XOR A
  59++9025              ;	IN A,(#FE)
  60++9025              ;	CPL
  61++9025              ;	AND 15
  62++9025              ;	JR Z,_LP
  63++9025              ;	JR START+8
  64++9025
  65++9025              TonA	EQU 0
  66++9025              TonB	EQU 2
  67++9025              TonC	EQU 4
  68++9025              Noise	EQU 6
  69++9025              Mixer	EQU 7
  70++9025              AmplA	EQU 8
  71++9025              AmplB	EQU 9
  72++9025              AmplC	EQU 10
  73++9025              Env	EQU 11
  74++9025              EnvTp	EQU 13
  75++9025
  76++9025              ;Entry and other points
  77++9025              ;START initialize playing of modules at MDLADDR (single module)
  78++9025              ;START+3 initialization with module address in HL and DE (TS)
  79++9025              ;START+5 play one quark
  80++9025              ;START+8 mute
  81++9025              ;START+10 setup and status flags
  82++9025
  83++9025              START:
  84++9025 21 40 9C     	LD HL,outputBuffer ;DE - address of 2nd module for TS
  85++9028 18 3C        	JR INIT
  86++902A C3 89 98     	JP PLAY
  87++902D 18 25        	JR MUTE
  88++902F 00           SETUP	DB 0 ;set bit0, if you want to play without looping
  89++9030              	     ;(optional);
  90++9030              	     ;set bit1 for PT2 and reset for PT3 before
  91++9030              	     ;calling INIT;
  92++9030              	     ;bits2-3: %00-ABC, %01-ACB, %10-BAC (optional);
  93++9030              	     ;bits4-5: %00-no TS, %01-2 modules TS, %10-
  94++9030              	     ;autodetect PT3 TS-format by AlCo (PT 3.7+);
  95++9030              	     ;Remark: old PT3 TS-format by AlCo (PT 3.6) is not
  96++9030              	     ;documented and must be converted to new standard.
  97++9030              	     ;bit6 is set each time, when loop point of 2nd TS
  98++9030              	     ;module is passed (optional).
  99++9030              	     ;bit7 is set each time, when loop point of 1st TS
 100++9030              	     ;or of single module is passed (optional).
 101++9030
 102++9030              ;Identifier
 103++9030              	IF Id
 104++9030 ~            	DB "=UniPT2/PT3/TS-Player r.",Release,"="
 105++9030              	ENDIF
 106++9030
 107++9030              	IF LoopChecker
 108++9030 21 2F 90     CHECKLP	LD HL,SETUP
 109++9033 FD CB 9E 46  	BIT 0,(IY-100+VRS.ModNum)
 110++9037 28 04        	JR Z,CHL1
 111++9039 CB F6        	SET 6,(HL)
 112++903B 18 02        	JR CHL2
 113++903D CB FE        CHL1	SET 7,(HL)
 114++903F CB 46        CHL2	BIT 0,(HL)
 115++9041 C8           	RET Z
 116++9042 E1           	POP HL
 117++9043 FD 34 09     	INC (IY-100+VRS.DelyCnt)
 118++9046 FD 34 BA     	INC (IY-100+VRS.ChanA+CHP.NtSkCn)
 119++9049 AF           	XOR A
 120++904A FD 77 1D     	LD (IY-100+VRS.AYREGS+AmplA),A
 121++904D FD 77 1E     	LD (IY-100+VRS.AYREGS+AmplB),A
 122++9050 FD 77 1F     	LD (IY-100+VRS.AYREGS+AmplC),A
 123++9053 C9           	RET
 124++9054              	ENDIF
 125++9054
 126++9054 AF           MUTE: XOR A
 127++9055 67           	LD H,A
 128++9056 6F           	LD L,A
 129++9057 32 DE 99     	LD (VARS1+VRS.AYREGS+AmplA),A
 130++905A 22 DF 99     	LD (VARS1+VRS.AYREGS+AmplB),HL
 131++905D 32 65 9A     	LD (VARS2+VRS.AYREGS+AmplA),A
 132++9060 22 66 9A     	LD (VARS2+VRS.AYREGS+AmplB),HL
 133++9063 C3 A1 98     	JP ROUT
 134++9066
 135++9066              INIT:
 136++9066              ;HL - AddressOfModule
 137++9066              ;DE - AddresOf2ndModule
 138++9066 D5           	PUSH DE
 139++9067 E5           	PUSH HL
 140++9068 21 5C 99     	LD HL,VARS
 141++906B 36 00        	LD (HL),0
 142++906D 11 5D 99     	LD DE,VARS+1
 143++9070 01 0E 01     	LD BC,VAR0END-VARS-1
 144++9073 ED B0        	LDIR
 145++9075 23           	INC HL
 146++9076 22 BF 99     	LD (VARS1+VRS.AdInPtA),HL ;ptr to zero
 147++9079 22 46 9A     	LD (VARS2+VRS.AdInPtA),HL
 148++907C
 149++907C E1           	POP HL
 150++907D FD 21 C1 99  	LD IY,VARS1+100
 151++9081 3A 2F 90     	LD A,(START+10)
 152++9084 E6 02        	AND 2
 153++9086 C2 0F 91     	JP NZ,I_PT2
 154++9089
 155++9089 CD 5C 92     	CALL INITPT3
 156++908C 21 18 1F     	LD HL,(e_-SamCnv-2)*256+#18
 157++908F 22 2F 96     	LD (SamCnv),HL
 158++9092 3E BA        	LD A,#BA
 159++9094 32 FA 95     	LD (OrnCP),A
 160++9097 32 26 96     	LD (SamCP),A
 161++909A 3E 7B        	LD A,#7B
 162++909C 32 FD 95     	LD (OrnLD),A
 163++909F 32 29 96     	LD (SamLD),A
 164++90A2 3E 87        	LD A,#87
 165++90A4 32 20 96     	LD (SamClc2),A
 166++90A7 E1           	POP HL
 167++90A8              	;Use version and ton table of 1st module
 168++90A8 DD 7E A9     	LD A,(IX+13-100) ;EXTRACT VERSION NUMBER
 169++90AB D6 30        	SUB #30
 170++90AD 38 04        	JR C,L20
 171++90AF FE 0A        	CP 10
 172++90B1 38 02        	JR C,L21
 173++90B3 3E 06        L20	LD A,6
 174++90B5 32 CD 94     L21	LD (Version),A
 175++90B8 F5           	PUSH AF ;VolTable version
 176++90B9 FE 04        	CP 4
 177++90BB DD 7E FF     	LD A,(IX+99-100) ;TONE TABLE NUMBER
 178++90BE 17           	RLA
 179++90BF E6 07        	AND 7
 180++90C1 F5           	PUSH AF ;NoteTable number
 181++90C2
 182++90C2 FD 21 48 9A  	LD IY,VARS2+100
 183++90C6 3A 2F 90     	LD A,(START+10)
 184++90C9 E6 30        	AND 48
 185++90CB 28 37        	JR Z,NOTS
 186++90CD FE 10        	CP 16
 187++90CF 28 27        	JR Z,TwoPT3s
 188++90D1 3A CD 94     	LD A,(Version)
 189++90D4 FE 07        	CP 7
 190++90D6 38 2C        	JR C,NOTS
 191++90D8 DD 7E FE     	LD A,(IX+98-100) ;ALCO TS MARKER
 192++90DB FE 20        	CP #20
 193++90DD 28 25        	JR Z,NOTS
 194++90DF 21 5D 99     	LD HL,VARS1
 195++90E2 11 E4 99     	LD DE,VARS2
 196++90E5 01 87 00     	LD BC,VRS
 197++90E8 ED B0        	LDIR
 198++90EA FD CB 9E CE  	SET 1,(IY-100+VRS.ModNum)
 199++90EE 4F           	LD C,A
 200++90EF 87           	ADD A,A
 201++90F0 81           	ADD A,C
 202++90F1 D6 02        	SUB 2
 203++90F3 32 94 97     	LD (TSSub),A
 204++90F6 18 03        	JR AlCoTS_
 205++90F8 CD 5C 92     TwoPT3s	CALL INITPT3
 206++90FB 3E 01        AlCoTS_	LD A,1
 207++90FD 32 5C 99     	LD (is_ts),A
 208++9100 FD CB 9E C6  	SET 0,(IY-100+VRS.ModNum)
 209++9104
 210++9104 01 19 94     NOTS	LD BC,PT3PD
 211++9107 21 00 00     	LD HL,0
 212++910A 11 24 99     	LD DE,PT3EMPTYORN
 213++910D 18 48        	JR INITCOMMON
 214++910F
 215++910F CD 94 92     I_PT2	CALL INITPT2
 216++9112 21 CB 51     	LD HL,#51CB
 217++9115 22 2F 96     	LD (SamCnv),HL
 218++9118 3E BB        	LD A,#BB
 219++911A 32 FA 95     	LD (OrnCP),A
 220++911D 32 26 96     	LD (SamCP),A
 221++9120 3E 7A        	LD A,#7A
 222++9122 32 FD 95     	LD (OrnLD),A
 223++9125 32 29 96     	LD (SamLD),A
 224++9128 3E 80        	LD A,#80
 225++912A 32 20 96     	LD (SamClc2),A
 226++912D E1           	POP HL
 227++912E 3E 05        	LD A,5
 228++9130 32 CD 94     	LD (Version),A
 229++9133 F5           	PUSH AF
 230++9134 3E 02        	LD A,2
 231++9136 F5           	PUSH AF
 232++9137
 233++9137 3A 2F 90     	LD A,(START+10)
 234++913A E6 30        	AND 48
 235++913C 28 10        	JR Z,NOTS2
 236++913E
 237++913E FD 21 48 9A  	LD IY,VARS2+100
 238++9142 3E 01        	LD A,1
 239++9144 32 5C 99     	LD (is_ts),A
 240++9147 FD CB 9E C6  	SET 0,(IY-100+VRS.ModNum)
 241++914B CD 94 92     	CALL INITPT2
 242++914E
 243++914E 01 53 93     NOTS2	LD BC,PT2PD
 244++9151 21 87 86     	LD HL,#8687
 245++9154 11 7A 9A     	LD DE,PT2EMPTYORN
 246++9157
 247++9157              INITCOMMON
 248++9157
 249++9157              	IF Basic
 250++9157 FD 21 3A 5C  	LD IY,#5C3A
 251++915B              	ENDIF
 252++915B
 253++915B ED 43 04 93  	LD (PTDEC),BC
 254++915F 22 96 97     	LD (PsCalc),HL
 255++9162 D5           	PUSH DE
 256++9163
 257++9163              ;note table data depacker
 258++9163              ;(c) Ivan Roshin
 259++9163 11 27 99     	LD DE,T_PACK
 260++9166 01 CC 9A     	LD BC,T1_+(2*49)-1
 261++9169 1A           TP_0	LD A,(DE)
 262++916A 13           	INC DE
 263++916B FE 1E        	CP 15*2
 264++916D 30 06        	JR NC,TP_1
 265++916F 67           	LD H,A
 266++9170 1A           	LD A,(DE)
 267++9171 6F           	LD L,A
 268++9172 13           	INC DE
 269++9173 18 07        	JR TP_2
 270++9175 D5           TP_1	PUSH DE
 271++9176 16 00        	LD D,0
 272++9178 5F           	LD E,A
 273++9179 19           	ADD HL,DE
 274++917A 19           	ADD HL,DE
 275++917B D1           	POP DE
 276++917C 7C           TP_2	LD A,H
 277++917D 02           	LD (BC),A
 278++917E 0B           	DEC BC
 279++917F 7D           	LD A,L
 280++9180 02           	LD (BC),A
 281++9181 0B           	DEC BC
player.asm(282): warning: value 0x1F0 is truncated to 8bit value: 0xF0
 282++9182 D6 F0        	SUB #F8*2
 283++9184 20 E3        	JR NZ,TP_0
 284++9186
 285++9186 3C           	INC A
 286++9187 32 CA 99     	LD (VARS1+VRS.DelyCnt),A
 287++918A 32 51 9A     	LD (VARS2+VRS.DelyCnt),A
 288++918D 21 01 F0     	LD HL,#F001 ;H - CHP.Volume, L - CHP.NtSkCn
 289++9190 22 7B 99     	LD (VARS1+VRS.ChanA+CHP.NtSkCn),HL
 290++9193 22 98 99     	LD (VARS1+VRS.ChanB+CHP.NtSkCn),HL
 291++9196 22 B5 99     	LD (VARS1+VRS.ChanC+CHP.NtSkCn),HL
 292++9199 22 02 9A     	LD (VARS2+VRS.ChanA+CHP.NtSkCn),HL
 293++919C 22 1F 9A     	LD (VARS2+VRS.ChanB+CHP.NtSkCn),HL
 294++919F 22 3C 9A     	LD (VARS2+VRS.ChanC+CHP.NtSkCn),HL
 295++91A2 E1           	POP HL
 296++91A3 22 6D 99     	LD (VARS1+VRS.ChanA+CHP.OrnPtr),HL
 297++91A6 22 8A 99     	LD (VARS1+VRS.ChanB+CHP.OrnPtr),HL
 298++91A9 22 A7 99     	LD (VARS1+VRS.ChanC+CHP.OrnPtr),HL
 299++91AC 22 F4 99     	LD (VARS2+VRS.ChanA+CHP.OrnPtr),HL
 300++91AF 22 11 9A     	LD (VARS2+VRS.ChanB+CHP.OrnPtr),HL
 301++91B2 22 2E 9A     	LD (VARS2+VRS.ChanC+CHP.OrnPtr),HL
 302++91B5
 303++91B5 F1           	POP AF
 304++91B6
 305++91B6              ;NoteTableCreator (c) Ivan Roshin
 306++91B6              ;A - NoteTableNumber*2+VersionForNoteTable
 307++91B6              ;(xx1b - 3.xx..3.4r, xx0b - 3.4x..3.6x..VTII1.0)
 308++91B6
 309++91B6 21 D4 98     	LD HL,NT_DATA
 310++91B9 16 00        	LD D,0
 311++91BB 87           	ADD A,A
 312++91BC 5F           	LD E,A
 313++91BD 19           	ADD HL,DE
 314++91BE 5E           	LD E,(HL)
 315++91BF 23           	INC HL
 316++91C0 CB 3B        	SRL E
 317++91C2 9F           	SBC A,A
 318++91C3 E6 A7        	AND #A7 ;#00 (NOP) or #A7 (AND A)
 319++91C5 32 ED 91     	LD (L3),A
 320++91C8 EB           	EX DE,HL
 321++91C9 01 6B 9A     	LD BC,T1_
 322++91CC 09           	ADD HL,BC
 323++91CD
 324++91CD 1A           	LD A,(DE)
player.asm(325): warning: value 0x98E4 is truncated to 8bit value: 0xE4
 325++91CE C6 E4        	ADD A,T_
 326++91D0 4F           	LD C,A
 327++91D1 CE 98        	ADC A,T_/256
 328++91D3 91           	SUB C
 329++91D4 47           	LD B,A
 330++91D5 C5           	PUSH BC
 331++91D6 11 5B 9B     	LD DE,NT_
 332++91D9 D5           	PUSH DE
 333++91DA
 334++91DA 06 0C        	LD B,12
 335++91DC C5           L1	PUSH BC
 336++91DD 4E           	LD C,(HL)
 337++91DE 23           	INC HL
 338++91DF E5           	PUSH HL
 339++91E0 46           	LD B,(HL)
 340++91E1
 341++91E1 D5           	PUSH DE
 342++91E2 EB           	EX DE,HL
 343++91E3 11 17 00     	LD DE,23
 344++91E6 DD 26 08     	LD IXH,8
 345++91E9
 346++91E9 CB 38        L2	SRL B
 347++91EB CB 19        	RR C
 348++91ED 19           L3	DB #19	;AND A or NOP
 349++91EE 79           	LD A,C
 350++91EF 8A           	ADC A,D	;=ADC 0
 351++91F0 77           	LD (HL),A
 352++91F1 23           	INC HL
 353++91F2 78           	LD A,B
 354++91F3 8A           	ADC A,D
 355++91F4 77           	LD (HL),A
 356++91F5 19           	ADD HL,DE
 357++91F6 DD 25        	DEC IXH
 358++91F8 20 EF        	JR NZ,L2
 359++91FA
 360++91FA D1           	POP DE
 361++91FB 13           	INC DE
 362++91FC 13           	INC DE
 363++91FD E1           	POP HL
 364++91FE 23           	INC HL
 365++91FF C1           	POP BC
 366++9200 10 DA        	DJNZ L1
 367++9202
 368++9202 E1           	POP HL
 369++9203 D1           	POP DE
 370++9204
 371++9204 7B           	LD A,E
player.asm(372): warning: value 0x98F0 is truncated to 8bit value: 0xF0
 372++9205 FE F0        	CP TCOLD_1
 373++9207 20 05        	JR NZ,CORR_1
 374++9209 3E FD        	LD A,#FD
 375++920B 32 89 9B     	LD (NT_+#2E),A
 376++920E
 377++920E 1A           CORR_1	LD A,(DE)
 378++920F A7           	AND A
 379++9210 28 11        	JR Z,TC_EXIT
 380++9212 1F           	RRA
 381++9213 F5           	PUSH AF
 382++9214 87           	ADD A,A
 383++9215 4F           	LD C,A
 384++9216 09           	ADD HL,BC
 385++9217 F1           	POP AF
 386++9218 30 02        	JR NC,CORR_2
 387++921A 35           	DEC (HL)
 388++921B 35           	DEC (HL)
 389++921C 34           CORR_2	INC (HL)
 390++921D A7           	AND A
 391++921E ED 42        	SBC HL,BC
 392++9220 13           	INC DE
 393++9221 18 EB        	JR CORR_1
 394++9223
 395++9223              TC_EXIT
 396++9223
 397++9223 F1           	POP AF
 398++9224
 399++9224              ;VolTableCreator (c) Ivan Roshin
 400++9224              ;A - VersionForVolumeTable (0..4 - 3.xx..3.4x;
 401++9224              			   ;5.. - 2.x,3.5x..3.6x..VTII1.0)
 402++9224
 403++9224 FE 05        	CP 5
 404++9226 21 11 00     	LD HL,#11
 405++9229 54           	LD D,H
 406++922A 5C           	LD E,H
 407++922B 3E 17        	LD A,#17
 408++922D 30 03        	JR NC,M1
 409++922F 2D           	DEC L
 410++9230 5D           	LD E,L
 411++9231 AF           	XOR A
 412++9232 32 43 92     M1      LD (M2),A
 413++9235
 414++9235 DD 21 6B 9A  	LD IX,VT_+16
 415++9239
 416++9239 0E 0F        	LD C,#F
 417++923B E5           INITV2  PUSH HL
 418++923C
 419++923C 19           	ADD HL,DE
 420++923D EB           	EX DE,HL
 421++923E ED 62        	SBC HL,HL
 422++9240
 423++9240 06 10        	LD B,#10
 424++9242 7D           INITV1  LD A,L
 425++9243 7D           M2      DB #7D
 426++9244 7C           	LD A,H
 427++9245 CE 00        	ADC A,0
 428++9247 DD 77 00     	LD (IX),A
 429++924A DD 23        	INC IX
 430++924C 19           	ADD HL,DE
 431++924D 10 F3        	DJNZ INITV1
 432++924F
 433++924F E1           	POP HL
 434++9250 7B           	LD A,E
 435++9251 FE 77        	CP #77
 436++9253 20 01        	JR NZ,M3
 437++9255 1C           	INC E
 438++9256 0D           M3      DEC C
 439++9257 20 E2        	JR NZ,INITV2
 440++9259
 441++9259 C3 A1 98     	JP ROUT
 442++925C
 443++925C CD CF 92     INITPT3	CALL SETMDAD
 444++925F E5           	PUSH HL
 445++9260 11 64 00     	LD DE,100
 446++9263 19           	ADD HL,DE
 447++9264 7E           	LD A,(HL)
 448++9265 FD 77 08     	LD (IY-100+VRS.Delay),A
 449++9268 E5           	PUSH HL
 450++9269 DD E1        	POP IX
 451++926B 19           	ADD HL,DE
 452++926C CD DD 92     	CALL SETCPPT
 453++926F DD 5E 02     	LD E,(IX+102-100)
 454++9272 23           	INC HL
 455++9273
 456++9273              	IF CurPosCounter
 457++9273 ~            	LD (IY-100+VRS.PosSub),L
 458++9273              	ENDIF
 459++9273
 460++9273 19           	ADD HL,DE
 461++9274 CD E4 92     	CALL SETLPPT
 462++9277 D1           	POP DE
 463++9278 DD 6E 03     	LD L,(IX+103-100)
 464++927B DD 66 04     	LD H,(IX+104-100)
 465++927E 19           	ADD HL,DE
 466++927F CD C8 92     	CALL SETPTPT
 467++9282 21 A9 00     	LD HL,169
 468++9285 19           	ADD HL,DE
 469++9286 CD D6 92     	CALL SETORPT
 470++9289 21 69 00     	LD HL,105
 471++928C 19           	ADD HL,DE
 472++928D
 473++928D FD 75 FA     SETSMPT LD (IY-100+VRS.SamPtrs),L
 474++9290 FD 74 FB     	LD (IY-100+VRS.SamPtrs+1),H
 475++9293 C9           	RET
 476++9294
 477++9294 7E           INITPT2	LD A,(HL)
 478++9295 FD 77 08     	LD (IY-100+VRS.Delay),A
 479++9298 E5           	PUSH HL
 480++9299 E5           	PUSH HL
 481++929A E5           	PUSH HL
 482++929B 23           	INC HL
 483++929C 23           	INC HL
 484++929D 7E           	LD A,(HL)
 485++929E 23           	INC HL
 486++929F CD 8D 92     	CALL SETSMPT
 487++92A2 5E           	LD E,(HL)
 488++92A3 23           	INC HL
 489++92A4 56           	LD D,(HL)
 490++92A5 E1           	POP HL
 491++92A6 A7           	AND A
 492++92A7 ED 52        	SBC HL,DE
 493++92A9 CD CF 92     	CALL SETMDAD
 494++92AC E1           	POP HL
 495++92AD 11 43 00     	LD DE,67
 496++92B0 19           	ADD HL,DE
 497++92B1 CD D6 92     	CALL SETORPT
 498++92B4 1E 20        	LD E,32
 499++92B6 19           	ADD HL,DE
 500++92B7 4E           	LD C,(HL)
 501++92B8 23           	INC HL
 502++92B9 46           	LD B,(HL)
 503++92BA 1E 1E        	LD E,30
 504++92BC 19           	ADD HL,DE
 505++92BD CD DD 92     	CALL SETCPPT
 506++92C0 5F           	LD E,A
 507++92C1 23           	INC HL
 508++92C2
 509++92C2              	IF CurPosCounter
 510++92C2 ~            	LD (IY-100+VRS.PosSub),L
 511++92C2              	ENDIF
 512++92C2
 513++92C2 19           	ADD HL,DE
 514++92C3 CD E4 92     	CALL SETLPPT
 515++92C6 E1           	POP HL
 516++92C7 09           	ADD HL,BC
 517++92C8
 518++92C8 FD 75 FC     SETPTPT	LD (IY-100+VRS.PatsPtr),L
 519++92CB FD 74 FD     	LD (IY-100+VRS.PatsPtr+1),H
 520++92CE C9           	RET
 521++92CF
 522++92CF FD 75 F6     SETMDAD	LD (IY-100+VRS.MODADDR),L
 523++92D2 FD 74 F7     	LD (IY-100+VRS.MODADDR+1),H
 524++92D5 C9           	RET
 525++92D6
 526++92D6 FD 75 F8     SETORPT	LD (IY-100+VRS.OrnPtrs),L
 527++92D9 FD 74 F9     	LD (IY-100+VRS.OrnPtrs+1),H
 528++92DC C9           	RET
 529++92DD
 530++92DD FD 75 04     SETCPPT	LD (IY-100+VRS.CrPsPtr),L
 531++92E0 FD 74 05     	LD (IY-100+VRS.CrPsPtr+1),H
 532++92E3 C9           	RET
 533++92E4
 534++92E4 FD 75 06     SETLPPT	LD (IY-100+VRS.LPosPtr),L
 535++92E7 FD 74 07     	LD (IY-100+VRS.LPosPtr+1),H
 536++92EA C9           	RET
 537++92EB
 538++92EB FD 75 13     SETENBS	LD (IY-100+VRS.EnvBase),L
 539++92EE FD 74 14     	LD (IY-100+VRS.EnvBase+1),H
 540++92F1 C9           	RET
 541++92F2
 542++92F2 FD 75 0C     SETESLD	LD (IY-100+VRS.CurESld),L
 543++92F5 FD 74 0D     	LD (IY-100+VRS.CurESld+1),H
 544++92F8 C9           	RET
 545++92F9
 546++92F9 FD E5        GETIX	PUSH IY
 547++92FB DD E1        	POP IX
 548++92FD DD 19        	ADD IX,DE
 549++92FF C9           	RET
 550++9300
 551++9300 CD F9 92     PTDECOD CALL GETIX
 552++9303              PTDEC	EQU $+1
 553++9303 C3 C3 C3     	JP #C3C3
 554++9306
 555++9306              ;PT2 pattern decoder
 556++9306 CD 9C 95     PD2_SAM	CALL SETSAM
 557++9309 18 4A        	JR PD2_LOOP
 558++930B
 559++930B DD 77 08     PD2_EOff LD (IX-12+CHP.Env_En),A
 560++930E 18 45        	JR PD2_LOOP
 561++9310
 562++9310 DD 36 08 10  PD2_ENV	LD (IX-12+CHP.Env_En),16
 563++9314 FD 77 22     	LD (IY-100+VRS.AYREGS+EnvTp),A
 564++9317 0A           	LD A,(BC)
 565++9318 03           	INC BC
 566++9319 6F           	LD L,A
 567++931A 0A           	LD A,(BC)
 568++931B 03           	INC BC
 569++931C 67           	LD H,A
 570++931D CD EB 92     	CALL SETENBS
 571++9320 18 33        	JR PD2_LOOP
 572++9322
 573++9322 CD 7D 95     PD2_ORN	CALL SETORN
 574++9325 18 2E        	JR PD2_LOOP
 575++9327
 576++9327 3C           PD2_SKIP INC A
 577++9328 DD 77 05     	LD (IX-12+CHP.NNtSkp),A
 578++932B 18 28        	JR PD2_LOOP
 579++932D
 580++932D 0F           PD2_VOL	RRCA
 581++932E 0F           	RRCA
 582++932F 0F           	RRCA
 583++9330 0F           	RRCA
 584++9331 DD 77 10     	LD (IX-12+CHP.Volume),A
 585++9334 18 1F        	JR PD2_LOOP
 586++9336
 587++9336 CD 4D 95     PD2_DEL	CALL C_DELAY
 588++9339 18 1A        	JR PD2_LOOP
 589++933B
 590++933B DD CB 09 D6  PD2_GLIS SET 2,(IX-12+CHP.Flags)
 591++933F 3C           	INC A
 592++9340 DD 77 0A     	LD (IX-12+CHP.TnSlDl),A
 593++9343 DD 77 F9     	LD (IX-12+CHP.TSlCnt),A
 594++9346 0A           	LD A,(BC)
 595++9347 03           	INC BC
 596++9348 DD 77 0B             LD (IX-12+CHP.TSlStp),A
 597++934B 87           	ADD A,A
 598++934C 9F           	SBC A,A
 599++934D DD 77 0C             LD (IX-12+CHP.TSlStp+1),A
 600++9350 37           	SCF
 601++9351 18 01        	JR PD2_LP2
 602++9353
 603++9353 A7           PT2PD	AND A
 604++9354
 605++9354 08           PD2_LP2	EX AF,AF'
 606++9355
 607++9355 0A           PD2_LOOP LD A,(BC)
 608++9356 03           	INC BC
 609++9357 C6 20        	ADD A,#20
 610++9359 28 3F        	JR Z,PD2_REL
 611++935B 38 A9        	JR C,PD2_SAM
 612++935D C6 60        	ADD A,96
 613++935F 38 3E        	JR C,PD2_NOTE
 614++9361 3C           	INC A
 615++9362 28 A7        	JR Z,PD2_EOff
 616++9364 C6 0F        	ADD A,15
 617++9366 CA 7C 94     	JP Z,PD_FIN
 618++9369 38 A5        	JR C,PD2_ENV
 619++936B C6 10        	ADD A,#10
 620++936D 38 B3        	JR C,PD2_ORN
 621++936F C6 40        	ADD A,#40
 622++9371 38 B4        	JR C,PD2_SKIP
 623++9373 C6 10        	ADD A,#10
 624++9375 38 B6        	JR C,PD2_VOL
 625++9377 3C           	INC A
 626++9378 28 BC        	JR Z,PD2_DEL
 627++937A 3C           	INC A
 628++937B 28 BE        	JR Z,PD2_GLIS
 629++937D 3C           	INC A
 630++937E 28 0A        	JR Z,PD2_PORT
 631++9380 3C           	INC A
 632++9381 28 12        	JR Z,PD2_STOP
 633++9383 0A           	LD A,(BC)
 634++9384 03           	INC BC
 635++9385 DD 77 F7     	LD (IX-12+CHP.CrNsSl),A
 636++9388 18 CB        	JR PD2_LOOP
 637++938A
 638++938A DD CB 09 96  PD2_PORT RES 2,(IX-12+CHP.Flags)
 639++938E 0A           	LD A,(BC)
 640++938F 03           	INC BC
 641++9390 03           	INC BC ;ignoring precalc delta to right sound
 642++9391 03           	INC BC
 643++9392 37           	SCF
 644++9393 18 BF        	JR PD2_LP2
 645++9395
 646++9395 DD 77 F9     PD2_STOP LD (IX-12+CHP.TSlCnt),A
 647++9398 18 BB        	JR PD2_LOOP
 648++939A
 649++939A DD 77 09     PD2_REL	LD (IX-12+CHP.Flags),A
 650++939D 18 2C        	JR PD2_EXIT
 651++939F
 652++939F 6F           PD2_NOTE LD L,A
 653++93A0 DD 7E 06     	LD A,(IX-12+CHP.Note)
 654++93A3 32 B6 94     	LD (PrNote+1),A
 655++93A6 DD 75 06     	LD (IX-12+CHP.Note),L
 656++93A9 AF           	XOR A
 657++93AA DD 77 F9     	LD (IX-12+CHP.TSlCnt),A
 658++93AD DD CB 09 C6  	SET 0,(IX-12+CHP.Flags)
 659++93B1 08           	EX AF,AF'
 660++93B2 30 16        	JR NC,NOGLIS2
 661++93B4 DD CB 09 56  	BIT 2,(IX-12+CHP.Flags)
 662++93B8 20 0C        	JR NZ,NOPORT2
 663++93BA 32 DC 94     	LD (LoStep),A
 664++93BD 87           	ADD A,A
 665++93BE 9F           	SBC A,A
 666++93BF 08           	EX AF,AF'
 667++93C0 67           	LD H,A
 668++93C1 6F           	LD L,A
 669++93C2 3C           	INC A
 670++93C3 CD 97 94     	CALL SETPORT
 671++93C6 DD 36 F9 01  NOPORT2	LD (IX-12+CHP.TSlCnt),1
 672++93CA AF           NOGLIS2	XOR A
 673++93CB
 674++93CB
 675++93CB DD 77 F5     PD2_EXIT LD (IX-12+CHP.PsInSm),A
 676++93CE DD 77 F4     	LD (IX-12+CHP.PsInOr),A
 677++93D1 DD 77 FA     	LD (IX-12+CHP.CrTnSl),A
 678++93D4 DD 77 FB     	LD (IX-12+CHP.CrTnSl+1),A
 679++93D7 C3 7C 94     	JP PD_FIN
 680++93DA
 681++93DA              ;PT3 pattern decoder
 682++93DA DD 36 08 00  PD_OrSm	LD (IX-12+CHP.Env_En),0
 683++93DE CD 7D 95     	CALL SETORN
 684++93E1 0A           PD_SAM_	LD A,(BC)
 685++93E2 03           	INC BC
 686++93E3 0F           	RRCA
 687++93E4
 688++93E4 CD 9C 95     PD_SAM	CALL SETSAM
 689++93E7 18 3F        	JR PD_LOOP
 690++93E9
 691++93E9 0F           PD_VOL	RRCA
 692++93EA 0F           	RRCA
 693++93EB 0F           	RRCA
 694++93EC 0F           	RRCA
 695++93ED DD 77 10     	LD (IX-12+CHP.Volume),A
 696++93F0 18 39        	JR PD_LP2
 697++93F2
 698++93F2 DD 77 08     PD_EOff	LD (IX-12+CHP.Env_En),A
 699++93F5 DD 77 F4     	LD (IX-12+CHP.PsInOr),A
 700++93F8 18 31        	JR PD_LP2
 701++93FA
 702++93FA 3D           PD_SorE	DEC A
 703++93FB 20 07        	JR NZ,PD_ENV
 704++93FD 0A           	LD A,(BC)
 705++93FE 03           	INC BC
 706++93FF DD 77 05     	LD (IX-12+CHP.NNtSkp),A
 707++9402 18 27        	JR PD_LP2
 708++9404
 709++9404 CD 62 95     PD_ENV	CALL SETENV
 710++9407 18 22        	JR PD_LP2
 711++9409
 712++9409 CD 7D 95     PD_ORN	CALL SETORN
 713++940C 18 1A        	JR PD_LOOP
 714++940E
 715++940E DD 77 08     PD_ESAM	LD (IX-12+CHP.Env_En),A
 716++9411 DD 77 F4     	LD (IX-12+CHP.PsInOr),A
 717++9414 C4 62 95     	CALL NZ,SETENV
 718++9417 18 C8        	JR PD_SAM_
 719++9419
 720++9419 DD 7E 06     PT3PD	LD A,(IX-12+CHP.Note)
 721++941C 32 B6 94     	LD (PrNote+1),A
 722++941F DD 6E FA     	LD L,(IX-12+CHP.CrTnSl)
 723++9422 DD 66 FB     	LD H,(IX-12+CHP.CrTnSl+1)
 724++9425 22 D3 94     	LD (PrSlide+1),HL
 725++9428
 726++9428 11 10 20     PD_LOOP	LD DE,#2010
 727++942B 0A           PD_LP2	LD A,(BC)
 728++942C 03           	INC BC
 729++942D 83           	ADD A,E
 730++942E 38 AA        	JR C,PD_OrSm
 731++9430 82           	ADD A,D
 732++9431 28 49        	JR Z,PD_FIN
 733++9433 38 AF        	JR C,PD_SAM
 734++9435 83           	ADD A,E
 735++9436 28 25        	JR Z,PD_REL
 736++9438 38 AF        	JR C,PD_VOL
 737++943A 83           	ADD A,E
 738++943B 28 B5        	JR Z,PD_EOff
 739++943D 38 BB        	JR C,PD_SorE
 740++943F C6 60        	ADD A,96
 741++9441 38 20        	JR C,PD_NOTE
 742++9443 83           	ADD A,E
 743++9444 38 C3        	JR C,PD_ORN
 744++9446 82           	ADD A,D
 745++9447 38 0F        	JR C,PD_NOIS
 746++9449 83           	ADD A,E
 747++944A 38 C2        	JR C,PD_ESAM
 748++944C 87           	ADD A,A
 749++944D 5F           	LD E,A
player.asm(750): warning: value 0x174D8 is truncated to 16bit value: 0x74D8
 750++944E 21 D8 74     	LD HL,SPCCOMS+#FF20-#2000
 751++9451 19           	ADD HL,DE
 752++9452 5E           	LD E,(HL)
 753++9453 23           	INC HL
 754++9454 56           	LD D,(HL)
 755++9455 D5           	PUSH DE
 756++9456 18 D0        	JR PD_LOOP
 757++9458
 758++9458 FD 77 10     PD_NOIS	LD (IY-100+VRS.Ns_Base),A
 759++945B 18 CE        	JR PD_LP2
 760++945D
 761++945D DD CB 09 86  PD_REL	RES 0,(IX-12+CHP.Flags)
 762++9461 18 08        	JR PD_RES
 763++9463
 764++9463 DD 77 06     PD_NOTE	LD (IX-12+CHP.Note),A
 765++9466 DD CB 09 C6  	SET 0,(IX-12+CHP.Flags)
 766++946A AF           	XOR A
 767++946B
 768++946B ED 73 7A 94  PD_RES	LD (PDSP_+1),SP
 769++946F DD F9        	LD SP,IX
 770++9471 67           	LD H,A
 771++9472 6F           	LD L,A
 772++9473 E5           	PUSH HL
 773++9474 E5           	PUSH HL
 774++9475 E5           	PUSH HL
 775++9476 E5           	PUSH HL
 776++9477 E5           	PUSH HL
 777++9478 E5           	PUSH HL
 778++9479 31 31 31     PDSP_	LD SP,#3131
 779++947C
 780++947C DD 7E 05     PD_FIN	LD A,(IX-12+CHP.NNtSkp)
 781++947F DD 77 0F     	LD (IX-12+CHP.NtSkCn),A
 782++9482 C9           	RET
 783++9483
 784++9483 0A           C_PORTM LD A,(BC)
 785++9484 03           	INC BC
 786++9485              ;SKIP PRECALCULATED TONE DELTA (BECAUSE
 787++9485              ;CANNOT BE RIGHT AFTER PT3 COMPILATION)
 788++9485 03           	INC BC
 789++9486 03           	INC BC
 790++9487 08           	EX AF,AF'
 791++9488 0A           	LD A,(BC) ;SIGNED TONE STEP
 792++9489 03           	INC BC
 793++948A 32 DC 94     	LD (LoStep),A
 794++948D 0A           	LD A,(BC)
 795++948E 03           	INC BC
 796++948F A7           	AND A
 797++9490 08           	EX AF,AF'
 798++9491 DD 6E FA     	LD L,(IX-12+CHP.CrTnSl)
 799++9494 DD 66 FB     	LD H,(IX-12+CHP.CrTnSl+1)
 800++9497
 801++9497              ;Set portamento variables
 802++9497              ;A - Delay; A' - Hi(Step); ZF' - (A'=0); HL - CrTnSl
 803++9497
 804++9497 DD CB 09 96  SETPORT	RES 2,(IX-12+CHP.Flags)
 805++949B DD 77 0A     	LD (IX-12+CHP.TnSlDl),A
 806++949E DD 77 F9     	LD (IX-12+CHP.TSlCnt),A
 807++94A1 E5           	PUSH HL
 808++94A2 11 5B 9B     	LD DE,NT_
 809++94A5 DD 7E 06     	LD A,(IX-12+CHP.Note)
 810++94A8 DD 77 07     	LD (IX-12+CHP.SlToNt),A
 811++94AB 87           	ADD A,A
 812++94AC 6F           	LD L,A
 813++94AD 26 00        	LD H,0
 814++94AF 19           	ADD HL,DE
 815++94B0 7E           	LD A,(HL)
 816++94B1 23           	INC HL
 817++94B2 66           	LD H,(HL)
 818++94B3 6F           	LD L,A
 819++94B4 E5           	PUSH HL
 820++94B5 3E 3E        PrNote	LD A,#3E
 821++94B7 DD 77 06     	LD (IX-12+CHP.Note),A
 822++94BA 87           	ADD A,A
 823++94BB 6F           	LD L,A
 824++94BC 26 00        	LD H,0
 825++94BE 19           	ADD HL,DE
 826++94BF 5E           	LD E,(HL)
 827++94C0 23           	INC HL
 828++94C1 56           	LD D,(HL)
 829++94C2 E1           	POP HL
 830++94C3 ED 52        	SBC HL,DE
 831++94C5 DD 75 0D     	LD (IX-12+CHP.TnDelt),L
 832++94C8 DD 74 0E     	LD (IX-12+CHP.TnDelt+1),H
 833++94CB D1           	POP DE
 834++94CC              Version EQU $+1
 835++94CC 3E 3E        	LD A,#3E
 836++94CE FE 06        	CP 6
 837++94D0 38 09        	JR C,OLDPRTM ;Old 3xxx for PT v3.5-
 838++94D2 11 11 11     PrSlide	LD DE,#1111
 839++94D5 DD 73 FA     	LD (IX-12+CHP.CrTnSl),E
 840++94D8 DD 72 FB     	LD (IX-12+CHP.CrTnSl+1),D
 841++94DB              LoStep	EQU $+1
 842++94DB 3E 3E        OLDPRTM	LD A,#3E
 843++94DD 08           	EX AF,AF'
 844++94DE 28 01        	JR Z,NOSIG
 845++94E0 EB           	EX DE,HL
 846++94E1 ED 52        NOSIG	SBC HL,DE
 847++94E3 F2 EB 94     	JP P,SET_STP
 848++94E6 2F           	CPL
 849++94E7 08           	EX AF,AF'
 850++94E8 ED 44        	NEG
 851++94EA 08           	EX AF,AF'
 852++94EB DD 77 0C     SET_STP	LD (IX-12+CHP.TSlStp+1),A
 853++94EE 08           	EX AF,AF'
 854++94EF DD 77 0B     	LD (IX-12+CHP.TSlStp),A
 855++94F2 DD 36 FE 00  	LD (IX-12+CHP.COnOff),0
 856++94F6 C9           	RET
 857++94F7
 858++94F7 DD CB 09 D6  C_GLISS	SET 2,(IX-12+CHP.Flags)
 859++94FB 0A           	LD A,(BC)
 860++94FC 03           	INC BC
 861++94FD DD 77 0A     	LD (IX-12+CHP.TnSlDl),A
 862++9500 A7           	AND A
 863++9501 20 07        	JR NZ,GL36
 864++9503 3A CD 94     	LD A,(Version) ;AlCo PT3.7+
 865++9506 FE 07        	CP 7
 866++9508 9F           	SBC A,A
 867++9509 3C           	INC A
 868++950A DD 77 F9     GL36	LD (IX-12+CHP.TSlCnt),A
 869++950D 0A           	LD A,(BC)
 870++950E 03           	INC BC
 871++950F 08           	EX AF,AF'
 872++9510 0A           	LD A,(BC)
 873++9511 03           	INC BC
 874++9512 18 D7        	JR SET_STP
 875++9514
 876++9514 0A           C_SMPOS	LD A,(BC)
 877++9515 03           	INC BC
 878++9516 DD 77 F5     	LD (IX-12+CHP.PsInSm),A
 879++9519 C9           	RET
 880++951A
 881++951A 0A           C_ORPOS	LD A,(BC)
 882++951B 03           	INC BC
 883++951C DD 77 F4     	LD (IX-12+CHP.PsInOr),A
 884++951F C9           	RET
 885++9520
 886++9520 0A           C_VIBRT	LD A,(BC)
 887++9521 03           	INC BC
 888++9522 DD 77 FF     	LD (IX-12+CHP.OnOffD),A
 889++9525 DD 77 FE     	LD (IX-12+CHP.COnOff),A
 890++9528 0A           	LD A,(BC)
 891++9529 03           	INC BC
 892++952A DD 77 00     	LD (IX-12+CHP.OffOnD),A
 893++952D AF           	XOR A
 894++952E DD 77 F9     	LD (IX-12+CHP.TSlCnt),A
 895++9531 DD 77 FA     	LD (IX-12+CHP.CrTnSl),A
 896++9534 DD 77 FB     	LD (IX-12+CHP.CrTnSl+1),A
 897++9537 C9           	RET
 898++9538
 899++9538 0A           C_ENGLS	LD A,(BC)
 900++9539 03           	INC BC
 901++953A FD 77 0E     	LD (IY-100+VRS.Env_Del),A
 902++953D FD 77 0F     	LD (IY-100+VRS.CurEDel),A
 903++9540 0A           	LD A,(BC)
 904++9541 03           	INC BC
 905++9542 6F           	LD L,A
 906++9543 0A           	LD A,(BC)
 907++9544 03           	INC BC
 908++9545 67           	LD H,A
 909++9546 FD 75 0A     	LD (IY-100+VRS.ESldAdd),L
 910++9549 FD 74 0B     	LD (IY-100+VRS.ESldAdd+1),H
 911++954C C9           	RET
 912++954D
 913++954D 0A           C_DELAY	LD A,(BC)
 914++954E 03           	INC BC
 915++954F FD 77 08     	LD (IY-100+VRS.Delay),A
 916++9552 21 E6 99     	LD HL,VARS2+VRS.ModNum ;if AlCo_TS
 917++9555 CB 4E        	BIT 1,(HL)
 918++9557 C8           	RET Z
 919++9558 32 C9 99     	LD (VARS1+VRS.Delay),A
 920++955B 32 CA 99     	LD (VARS1+VRS.DelyCnt),A
 921++955E 32 50 9A     	LD (VARS2+VRS.Delay),A
 922++9561 C9           	RET
 923++9562
 924++9562 DD 73 08     SETENV	LD (IX-12+CHP.Env_En),E
 925++9565 FD 77 22     	LD (IY-100+VRS.AYREGS+EnvTp),A
 926++9568 0A           	LD A,(BC)
 927++9569 03           	INC BC
 928++956A 67           	LD H,A
 929++956B 0A           	LD A,(BC)
 930++956C 03           	INC BC
 931++956D 6F           	LD L,A
 932++956E CD EB 92     	CALL SETENBS
 933++9571 AF           	XOR A
 934++9572 DD 77 F4     	LD (IX-12+CHP.PsInOr),A
 935++9575 FD 77 0F     	LD (IY-100+VRS.CurEDel),A
 936++9578 67           	LD H,A
 937++9579 6F           	LD L,A
 938++957A C3 F2 92     	JP SETESLD
 939++957D
 940++957D 87           SETORN	ADD A,A
 941++957E 5F           	LD E,A
 942++957F 16 00        	LD D,0
 943++9581 DD 72 F4     	LD (IX-12+CHP.PsInOr),D
 944++9584 FD 6E F8     	LD L,(IY-100+VRS.OrnPtrs)
 945++9587 FD 66 F9     	LD H,(IY-100+VRS.OrnPtrs+1)
 946++958A 19           	ADD HL,DE
 947++958B 5E           	LD E,(HL)
 948++958C 23           	INC HL
 949++958D 56           	LD D,(HL)
 950++958E FD 6E F6     	LD L,(IY-100+VRS.MODADDR)
 951++9591 FD 66 F7     	LD H,(IY-100+VRS.MODADDR+1)
 952++9594 19           	ADD HL,DE
 953++9595 DD 75 01     	LD (IX-12+CHP.OrnPtr),L
 954++9598 DD 74 02     	LD (IX-12+CHP.OrnPtr+1),H
 955++959B C9           C_NOP	RET
 956++959C
 957++959C 87           SETSAM	ADD A,A
 958++959D 5F           	LD E,A
 959++959E 16 00        	LD D,0
 960++95A0 FD 6E FA     	LD L,(IY-100+VRS.SamPtrs);
 961++95A3 FD 66 FB     	LD H,(IY-100+VRS.SamPtrs+1);
 962++95A6 19           	ADD HL,DE
 963++95A7 5E           	LD E,(HL)
 964++95A8 23           	INC HL
 965++95A9 56           	LD D,(HL)
 966++95AA FD 6E F6     	LD L,(IY-100+VRS.MODADDR)
 967++95AD FD 66 F7     	LD H,(IY-100+VRS.MODADDR+1)
 968++95B0 19           	ADD HL,DE
 969++95B1 DD 75 03     	LD (IX-12+CHP.SamPtr),L
 970++95B4 DD 74 04     	LD (IX-12+CHP.SamPtr+1),H
 971++95B7 C9           	RET
 972++95B8
 973++95B8              ;ALL 16 ADDRESSES TO PROTECT FROM BROKEN PT3 MODULES
 974++95B8 9B 95        SPCCOMS DW C_NOP
 975++95BA F7 94        	DW C_GLISS
 976++95BC 83 94        	DW C_PORTM
 977++95BE 14 95        	DW C_SMPOS
 978++95C0 1A 95        	DW C_ORPOS
 979++95C2 20 95        	DW C_VIBRT
 980++95C4 9B 95        	DW C_NOP
 981++95C6 9B 95        	DW C_NOP
 982++95C8 38 95        	DW C_ENGLS
 983++95CA 4D 95        	DW C_DELAY
 984++95CC 9B 95        	DW C_NOP
 985++95CE 9B 95        	DW C_NOP
 986++95D0 9B 95        	DW C_NOP
 987++95D2 9B 95        	DW C_NOP
 988++95D4 9B 95        	DW C_NOP
 989++95D6 9B 95        	DW C_NOP
 990++95D8
 991++95D8 CD F9 92     CHREGS	CALL GETIX
 992++95DB AF           	XOR A
 993++95DC 32 18 98     	LD (Ampl),A
 994++95DF DD CB 15 46  	BIT 0,(IX+CHP.Flags)
 995++95E3 E5           	PUSH HL
 996++95E4 CA 2B 97     	JP Z,CH_EXIT
 997++95E7 ED 73 75 96  	LD (CSP_+1),SP
 998++95EB DD 6E 0D     	LD L,(IX+CHP.OrnPtr)
 999++95EE DD 66 0E     	LD H,(IX+CHP.OrnPtr+1)
1000++95F1 F9           	LD SP,HL
1001++95F2 D1           	POP DE
1002++95F3 67           	LD H,A
1003++95F4 DD 7E 00     	LD A,(IX+CHP.PsInOr)
1004++95F7 6F           	LD L,A
1005++95F8 39           	ADD HL,SP
1006++95F9 3C           	INC A
1007++95FA              		;PT2	PT3
1008++95FA 3C           OrnCP	INC A	;CP E	CP D
1009++95FB 38 01        	JR C,CH_ORPS
1010++95FD 01           OrnLD	DB 1	;LD A,D	LD A,E
1011++95FE DD 77 00     CH_ORPS	LD (IX+CHP.PsInOr),A
1012++9601 DD 7E 12     	LD A,(IX+CHP.Note)
1013++9604 86           	ADD A,(HL)
1014++9605 F2 09 96     	JP P,CH_NTP
1015++9608 AF           	XOR A
1016++9609 FE 60        CH_NTP	CP 96
1017++960B 38 02        	JR C,CH_NOK
1018++960D 3E 5F        	LD A,95
1019++960F 87           CH_NOK	ADD A,A
1020++9610 08           	EX AF,AF'
1021++9611 DD 6E 0F     	LD L,(IX+CHP.SamPtr)
1022++9614 DD 66 10     	LD H,(IX+CHP.SamPtr+1)
1023++9617 F9           	LD SP,HL
1024++9618 D1           	POP DE
1025++9619 26 00        	LD H,0
1026++961B DD 7E 01     	LD A,(IX+CHP.PsInSm)
1027++961E 47           	LD B,A
1028++961F 87           	ADD A,A
1029++9620 87           SamClc2	ADD A,A ;or ADD A,B for PT2
1030++9621 6F           	LD L,A
1031++9622 39           	ADD HL,SP
1032++9623 F9           	LD SP,HL
1033++9624 78           	LD A,B
1034++9625 3C           	INC A
1035++9626              		;PT2	PT3
1036++9626 3C           SamCP	INC A	;CP E	CP D
1037++9627 38 01        	JR C,CH_SMPS
1038++9629 01           SamLD	DB 1	;LD A,D	LD A,E
1039++962A DD 77 01     CH_SMPS	LD (IX+CHP.PsInSm),A
1040++962D C1           	POP BC
1041++962E E1           	POP HL
1042++962F
1043++962F              ;Convert PT2 sample to PT3
1044++962F              		;PT2		PT3
1045++962F E1           SamCnv	POP HL  ;BIT 2,C	JR e_
1046++9630 E1           	POP HL
1047++9631 60           	LD H,B
1048++9632 20 06        	JR NZ,$+8
1049++9634 EB           	EX DE,HL
1050++9635 A7           	AND A
1051++9636 ED 62        	SBC HL,HL
1052++9638 ED 52        	SBC HL,DE
1053++963A 51           	LD D,C
1054++963B CB 19        	RR C
1055++963D 9F           	SBC A,A
1056++963E 2F           	CPL
1057++963F E6 3E        	AND #3E
1058++9641 CB 19        	RR C
1059++9643 CB 18        	RR B
1060++9645 A1           	AND C
1061++9646 4F           	LD C,A
1062++9647 78           	LD A,B
1063++9648 1F           	RRA
1064++9649 1F           	RRA
1065++964A CB 1A        	RR D
1066++964C 1F           	RRA
1067++964D E6 9F        	AND #9F
1068++964F 47           	LD B,A
1069++9650
1070++9650 DD 5E 08     e_	LD E,(IX+CHP.TnAcc)
1071++9653 DD 56 09     	LD D,(IX+CHP.TnAcc+1)
1072++9656 19           	ADD HL,DE
1073++9657 CB 70        	BIT 6,B
1074++9659 28 06        	JR Z,CH_NOAC
1075++965B DD 75 08     	LD (IX+CHP.TnAcc),L
1076++965E DD 74 09     	LD (IX+CHP.TnAcc+1),H
1077++9661 EB           CH_NOAC EX DE,HL
1078++9662 08           	EX AF,AF'
player.asm(1079): warning: value 0x9B5B is truncated to 8bit value: 0x5B
1079++9663 C6 5B        	ADD A,NT_
1080++9665 6F           	LD L,A
1081++9666 CE 9B        	ADC A,NT_/256
1082++9668 95           	SUB L
1083++9669 67           	LD H,A
1084++966A F9           	LD SP,HL
1085++966B E1           	POP HL
1086++966C 19           	ADD HL,DE
1087++966D DD 5E 06     	LD E,(IX+CHP.CrTnSl)
1088++9670 DD 56 07     	LD D,(IX+CHP.CrTnSl+1)
1089++9673 19           	ADD HL,DE
1090++9674 31 31 31     CSP_	LD SP,#3131
1091++9677 E3           	EX (SP),HL
1092++9678 AF           	XOR A
1093++9679 DD B6 05     	OR (IX+CHP.TSlCnt)
1094++967C 28 3E        	JR Z,CH_AMP
1095++967E DD 35 05     	DEC (IX+CHP.TSlCnt)
1096++9681 20 39        	JR NZ,CH_AMP
1097++9683 DD 7E 16     	LD A,(IX+CHP.TnSlDl)
1098++9686 DD 77 05     	LD (IX+CHP.TSlCnt),A
1099++9689 DD 6E 17     	LD L,(IX+CHP.TSlStp)
1100++968C DD 66 18     	LD H,(IX+CHP.TSlStp+1)
1101++968F 7C           	LD A,H
1102++9690 19           	ADD HL,DE
1103++9691 DD 75 06     	LD (IX+CHP.CrTnSl),L
1104++9694 DD 74 07     	LD (IX+CHP.CrTnSl+1),H
1105++9697 DD CB 15 56  	BIT 2,(IX+CHP.Flags)
1106++969B 20 1F        	JR NZ,CH_AMP
1107++969D DD 5E 19     	LD E,(IX+CHP.TnDelt)
1108++96A0 DD 56 1A     	LD D,(IX+CHP.TnDelt+1)
1109++96A3 A7           	AND A
1110++96A4 28 01        	JR Z,CH_STPP
1111++96A6 EB           	EX DE,HL
1112++96A7 ED 52        CH_STPP SBC HL,DE
1113++96A9 FA BC 96     	JP M,CH_AMP
1114++96AC DD 7E 13     	LD A,(IX+CHP.SlToNt)
1115++96AF DD 77 12     	LD (IX+CHP.Note),A
1116++96B2 AF           	XOR A
1117++96B3 DD 77 05     	LD (IX+CHP.TSlCnt),A
1118++96B6 DD 77 06     	LD (IX+CHP.CrTnSl),A
1119++96B9 DD 77 07     	LD (IX+CHP.CrTnSl+1),A
1120++96BC DD 7E 02     CH_AMP	LD A,(IX+CHP.CrAmSl)
1121++96BF CB 79        	BIT 7,C
1122++96C1 28 13        	JR Z,CH_NOAM
1123++96C3 CB 71        	BIT 6,C
1124++96C5 28 07        	JR Z,CH_AMIN
1125++96C7 FE 0F        	CP 15
1126++96C9 28 0B        	JR Z,CH_NOAM
1127++96CB 3C           	INC A
1128++96CC 18 05        	JR CH_SVAM
1129++96CE FE F1        CH_AMIN	CP -15
1130++96D0 28 04        	JR Z,CH_NOAM
1131++96D2 3D           	DEC A
1132++96D3 DD 77 02     CH_SVAM	LD (IX+CHP.CrAmSl),A
1133++96D6 6F           CH_NOAM	LD L,A
1134++96D7 78           	LD A,B
1135++96D8 E6 0F        	AND 15
1136++96DA 85           	ADD A,L
1137++96DB F2 DF 96     	JP P,CH_APOS
1138++96DE AF           	XOR A
1139++96DF FE 10        CH_APOS	CP 16
1140++96E1 38 02        	JR C,CH_VOL
1141++96E3 3E 0F        	LD A,15
1142++96E5 DD B6 1C     CH_VOL	OR (IX+CHP.Volume)
player.asm(1143): warning: value 0x9A5B is truncated to 8bit value: 0x5B
1143++96E8 C6 5B        	ADD A,VT_
1144++96EA 6F           	LD L,A
1145++96EB CE 9A        	ADC A,VT_/256
1146++96ED 95           	SUB L
1147++96EE 67           	LD H,A
1148++96EF 7E           	LD A,(HL)
1149++96F0 CB 41        CH_ENV	BIT 0,C
1150++96F2 20 03        	JR NZ,CH_NOEN
1151++96F4 DD B6 14     	OR (IX+CHP.Env_En)
1152++96F7 32 18 98     CH_NOEN	LD (Ampl),A
1153++96FA CB 78        	BIT 7,B
1154++96FC 79           	LD A,C
1155++96FD 28 1A        	JR Z,NO_ENSL
1156++96FF 17           	RLA
1157++9700 17           	RLA
1158++9701 CB 2F        	SRA A
1159++9703 CB 2F        	SRA A
1160++9705 CB 2F        	SRA A
1161++9707 DD 86 04     	ADD A,(IX+CHP.CrEnSl) ;SEE COMMENT BELOW
1162++970A CB 68        	BIT 5,B
1163++970C 28 03        	JR Z,NO_ENAC
1164++970E DD 77 04     	LD (IX+CHP.CrEnSl),A
1165++9711 FD 86 12     NO_ENAC	ADD A,(IY-100+VRS.AddToEn) ;BUG IN PT3 - NEED WORD HERE
1166++9714 FD 77 12     	LD (IY-100+VRS.AddToEn),A
1167++9717 18 0E        	JR CH_MIX
1168++9719 1F           NO_ENSL RRA
1169++971A DD 86 03     	ADD A,(IX+CHP.CrNsSl)
1170++971D FD 77 11     	LD (IY-100+VRS.AddToNs),A
1171++9720 CB 68        	BIT 5,B
1172++9722 28 03        	JR Z,CH_MIX
1173++9724 DD 77 03     	LD (IX+CHP.CrNsSl),A
1174++9727 78           CH_MIX	LD A,B
1175++9728 1F           	RRA
1176++9729 E6 48        	AND #48
1177++972B FD B6 1C     CH_EXIT	OR (IY-100+VRS.AYREGS+Mixer)
1178++972E 0F           	RRCA
1179++972F FD 77 1C     	LD (IY-100+VRS.AYREGS+Mixer),A
1180++9732 E1           	POP HL
1181++9733 AF           	XOR A
1182++9734 DD B6 0A     	OR (IX+CHP.COnOff)
1183++9737 C8           	RET Z
1184++9738 DD 35 0A     	DEC (IX+CHP.COnOff)
1185++973B C0           	RET NZ
1186++973C DD AE 15     	XOR (IX+CHP.Flags)
1187++973F DD 77 15     	LD (IX+CHP.Flags),A
1188++9742 1F           	RRA
1189++9743 DD 7E 0B     	LD A,(IX+CHP.OnOffD)
1190++9746 38 03        	JR C,CH_ONDL
1191++9748 DD 7E 0C     	LD A,(IX+CHP.OffOnD)
1192++974B DD 77 0A     CH_ONDL	LD (IX+CHP.COnOff),A
1193++974E C9           	RET
1194++974F
1195++974F AF           PLAY_	XOR A
1196++9750 FD 77 12     	LD (IY-100+VRS.AddToEn),A
1197++9753 FD 77 1C     	LD (IY-100+VRS.AYREGS+Mixer),A
1198++9756 3D           	DEC A
1199++9757 FD 77 22     	LD (IY-100+VRS.AYREGS+EnvTp),A
1200++975A FD 35 09     	DEC (IY-100+VRS.DelyCnt)
1201++975D C2 05 98     	JP NZ,PL2
1202++9760 FD 35 BA     	DEC (IY-100+VRS.ChanA+CHP.NtSkCn)
1203++9763 20 6C        	JR NZ,PL1B
1204++9765 FD 4E FE     	LD C,(IY-100+VRS.AdInPtA)
1205++9768 FD 46 FF     	LD B,(IY-100+VRS.AdInPtA+1)
1206++976B 0A           	LD A,(BC)
1207++976C A7           	AND A
1208++976D 20 56        	JR NZ,PL1A
1209++976F 57           	LD D,A
1210++9770 FD 77 10     	LD (IY-100+VRS.Ns_Base),A
1211++9773 FD 6E 04     	LD L,(IY-100+VRS.CrPsPtr)
1212++9776 FD 66 05     	LD H,(IY-100+VRS.CrPsPtr+1)
1213++9779 23           	INC HL
1214++977A 7E           	LD A,(HL)
1215++977B 3C           	INC A
1216++977C 20 0B        	JR NZ,PLNLP
1217++977E
1218++977E              	IF LoopChecker
1219++977E CD 30 90     	CALL CHECKLP
1220++9781              	ENDIF
1221++9781
1222++9781 FD 6E 06     	LD L,(IY-100+VRS.LPosPtr)
1223++9784 FD 66 07     	LD H,(IY-100+VRS.LPosPtr+1)
1224++9787 7E           	LD A,(HL)
1225++9788 3C           	INC A
1226++9789 CD DD 92     PLNLP	CALL SETCPPT
1227++978C 3D           	DEC A
1228++978D FD CB 9E 4E  	BIT 1,(IY-100+VRS.ModNum)
1229++9791 28 03        	JR Z,NoAlCo
1230++9793              TSSub	EQU $+1
1231++9793 D6 D6        	SUB #D6
1232++9795 2F           	CPL
1233++9796              NoAlCo
1234++9796              		;PT2		PT3
1235++9796 3D           PsCalc	DEC A	;ADD A,A	NOP
1236++9797 3D           	DEC A	;ADD A,(HL)	NOP
1237++9798 87           	ADD A,A
1238++9799 5F           	LD E,A
1239++979A CB 12        	RL D
1240++979C
1241++979C              	IF CurPosCounter
1242++979C ~            	LD A,L
1243++979C ~            	SUB (IY-100+VRS.PosSub)
1244++979C ~            	LD (IY-100+VRS.CurPos),A
1245++979C              	ENDIF
1246++979C
1247++979C FD 6E FC     	LD L,(IY-100+VRS.PatsPtr)
1248++979F FD 66 FD     	LD H,(IY-100+VRS.PatsPtr+1)
1249++97A2 19           	ADD HL,DE
1250++97A3 FD 5E F6     	LD E,(IY-100+VRS.MODADDR)
1251++97A6 FD 56 F7     	LD D,(IY-100+VRS.MODADDR+1)
1252++97A9 ED 73 C3 97  	LD (PSP_+1),SP
1253++97AD F9           	LD SP,HL
1254++97AE E1           	POP HL
1255++97AF 19           	ADD HL,DE
1256++97B0 44           	LD B,H
1257++97B1 4D           	LD C,L
1258++97B2 E1           	POP HL
1259++97B3 19           	ADD HL,DE
1260++97B4 FD 75 00     	LD (IY-100+VRS.AdInPtB),L
1261++97B7 FD 74 01     	LD (IY-100+VRS.AdInPtB+1),H
1262++97BA E1           	POP HL
1263++97BB 19           	ADD HL,DE
1264++97BC FD 75 02     	LD (IY-100+VRS.AdInPtC),L
1265++97BF FD 74 03     	LD (IY-100+VRS.AdInPtC+1),H
1266++97C2 31 31 31     PSP_	LD SP,#3131
1267++97C5 11 AB FF     PL1A	LD DE,VRS.ChanA+12-100
1268++97C8 CD 00 93     	CALL PTDECOD
1269++97CB FD 71 FE     	LD (IY-100+VRS.AdInPtA),C
1270++97CE FD 70 FF     	LD (IY-100+VRS.AdInPtA+1),B
1271++97D1
1272++97D1 FD 35 D7     PL1B	DEC (IY-100+VRS.ChanB+CHP.NtSkCn)
1273++97D4 20 12        	JR NZ,PL1C
1274++97D6 11 C8 FF     	LD DE,VRS.ChanB+12-100
1275++97D9 FD 4E 00     	LD C,(IY-100+VRS.AdInPtB)
1276++97DC FD 46 01     	LD B,(IY-100+VRS.AdInPtB+1)
1277++97DF CD 00 93     	CALL PTDECOD
1278++97E2 FD 71 00     	LD (IY-100+VRS.AdInPtB),C
1279++97E5 FD 70 01     	LD (IY-100+VRS.AdInPtB+1),B
1280++97E8
1281++97E8 FD 35 F4     PL1C	DEC (IY-100+VRS.ChanC+CHP.NtSkCn)
1282++97EB 20 12        	JR NZ,PL1D
1283++97ED 11 E5 FF     	LD DE,VRS.ChanC+12-100
1284++97F0 FD 4E 02     	LD C,(IY-100+VRS.AdInPtC)
1285++97F3 FD 46 03     	LD B,(IY-100+VRS.AdInPtC+1)
1286++97F6 CD 00 93     	CALL PTDECOD
1287++97F9 FD 71 02     	LD (IY-100+VRS.AdInPtC),C
1288++97FC FD 70 03     	LD (IY-100+VRS.AdInPtC+1),B
1289++97FF
1290++97FF FD 7E 08     PL1D	LD A,(IY-100+VRS.Delay)
1291++9802 FD 77 09     	LD (IY-100+VRS.DelyCnt),A
1292++9805
1293++9805 11 9F FF     PL2	LD DE,VRS.ChanA-100
1294++9808 FD 6E 15     	LD L,(IY-100+VRS.AYREGS+TonA)
1295++980B FD 66 16     	LD H,(IY-100+VRS.AYREGS+TonA+1)
1296++980E CD D8 95     	CALL CHREGS
1297++9811 FD 75 15     	LD (IY-100+VRS.AYREGS+TonA),L
1298++9814 FD 74 16     	LD (IY-100+VRS.AYREGS+TonA+1),H
1299++9817              Ampl	EQU $+1
1300++9817 3E 3E        	LD A,#3E
1301++9819 FD 77 1D     	LD (IY-100+VRS.AYREGS+AmplA),A
1302++981C 11 BC FF     	LD DE,VRS.ChanB-100
1303++981F FD 6E 17     	LD L,(IY-100+VRS.AYREGS+TonB)
1304++9822 FD 66 18     	LD H,(IY-100+VRS.AYREGS+TonB+1)
1305++9825 CD D8 95     	CALL CHREGS
1306++9828 FD 75 17     	LD (IY-100+VRS.AYREGS+TonB),L
1307++982B FD 74 18     	LD (IY-100+VRS.AYREGS+TonB+1),H
1308++982E 3A 18 98     	LD A,(Ampl)
1309++9831 FD 77 1E     	LD (IY-100+VRS.AYREGS+AmplB),A
1310++9834 11 D9 FF     	LD DE,VRS.ChanC-100
1311++9837 FD 6E 19     	LD L,(IY-100+VRS.AYREGS+TonC)
1312++983A FD 66 1A     	LD H,(IY-100+VRS.AYREGS+TonC+1)
1313++983D CD D8 95     	CALL CHREGS
1314++9840 FD 75 19     	LD (IY-100+VRS.AYREGS+TonC),L
1315++9843 FD 74 1A     	LD (IY-100+VRS.AYREGS+TonC+1),H
1316++9846 3A 18 98     	LD A,(Ampl)
1317++9849 FD 77 1F     	LD (IY-100+VRS.AYREGS+AmplC),A
1318++984C
1319++984C FD 7E 10     	LD A,(IY-100+VRS.Ns_Base)
1320++984F FD 86 11     	ADD (IY-100+VRS.AddToNs)
1321++9852 FD 77 1B     	LD (IY-100+VRS.AYREGS+Noise),A
1322++9855
1323++9855 FD 7E 12     	LD A,(IY-100+VRS.AddToEn)
1324++9858 5F           	LD E,A
1325++9859 87           	ADD A,A
1326++985A 9F           	SBC A,A
1327++985B 57           	LD D,A
1328++985C FD 6E 13     	LD L,(IY-100+VRS.EnvBase)
1329++985F FD 66 14     	LD H,(IY-100+VRS.EnvBase+1)
1330++9862 19           	ADD HL,DE
1331++9863 FD 5E 0C     	LD E,(IY-100+VRS.CurESld)
1332++9866 FD 56 0D     	LD D,(IY-100+VRS.CurESld+1)
1333++9869 19           	ADD HL,DE
1334++986A FD 75 20     	LD (IY-100+VRS.AYREGS+Env),L
1335++986D FD 74 21     	LD (IY-100+VRS.AYREGS+Env+1),H
1336++9870
1337++9870 AF           	XOR A
1338++9871 FD B6 0F     	OR (IY-100+VRS.CurEDel)
1339++9874 C8           	RET Z
1340++9875 FD 35 0F     	DEC (IY-100+VRS.CurEDel)
1341++9878 C0           	RET NZ
1342++9879 FD 7E 0E     	LD A,(IY-100+VRS.Env_Del)
1343++987C FD 77 0F     	LD (IY-100+VRS.CurEDel),A
1344++987F FD 6E 0A     	LD L,(IY-100+VRS.ESldAdd)
1345++9882 FD 66 0B     	LD H,(IY-100+VRS.ESldAdd+1)
1346++9885 19           	ADD HL,DE
1347++9886 C3 F2 92     	JP SETESLD
1348++9889
1349++9889 FD 21 C1 99  PLAY    LD IY,VARS1+100
1350++988D CD 4F 97     	CALL PLAY_
1351++9890 3A 5C 99     	LD A,(is_ts)
1352++9893 A7           	AND A
1353++9894 28 07        	JR Z,PL_nts
1354++9896 FD 21 48 9A  	LD IY,VARS2+100
1355++989A CD 4F 97     	CALL PLAY_
1356++989D              PL_nts
1357++989D              	IF Basic
1358++989D FD 21 3A 5C  	LD IY,#5C3A
1359++98A1              	ENDIF
1360++98A1
1361++98A1 01 FD FF     ROUT	LD BC,#FFFD
1362++98A4 3A 5C 99     	LD A,(is_ts)
1363++98A7 A7           	AND A
1364++98A8 28 02        	JR Z,r_nts ;keep old standard
1365++98AA ED 41        	OUT (C),B
1366++98AC 08           r_nts	EX AF,AF'
1367++98AD
1368++98AD              	IF ACBBAC
1369++98AD ~            	LD IX,VARS1+VRS.AYREGS
1370++98AD              	ELSE
1371++98AD 21 D6 99     	LD HL,VARS1+VRS.AYREGS
1372++98B0              	ENDIF
1373++98B0
1374++98B0 CD BC 98     	CALL ROUT_
1375++98B3 08           	EX AF,AF'
1376++98B4 C8           	RET Z
1377++98B5 42           	LD B,D
1378++98B6 2F           	CPL
1379++98B7 ED 79        	OUT (C),A
1380++98B9
1381++98B9              	IF ACBBAC
1382++98B9 ~            	LD IX,VARS2+VRS.AYREGS
1383++98B9              	ELSE
1384++98B9 21 5D 9A     	LD HL,VARS2+VRS.AYREGS
1385++98BC              	ENDIF
1386++98BC
1387++98BC              ROUT_
1388++98BC              	IF ACBBAC
1389++98BC ~            	LD A,(SETUP)
1390++98BC ~            	AND 12
1391++98BC ~            	JR Z,ABC
1392++98BC ~            	ADD A,CHTABLE
1393++98BC ~            	LD E,A
1394++98BC ~            	ADC A,CHTABLE/256
1395++98BC ~            	SUB E
1396++98BC ~            	LD D,A
1397++98BC ~            	LD B,0
1398++98BC ~            	PUSH IX
1399++98BC ~            	POP HL
1400++98BC ~            	LD A,(DE)
1401++98BC ~            	INC DE
1402++98BC ~            	LD C,A
1403++98BC ~            	ADD HL,BC
1404++98BC ~            	LD A,(IX+TonB)
1405++98BC ~            	LD C,(HL)
1406++98BC ~            	LD (IX+TonB),C
1407++98BC ~            	LD (HL),A
1408++98BC ~            	INC HL
1409++98BC ~            	LD A,(IX+TonB+1)
1410++98BC ~            	LD C,(HL)
1411++98BC ~            	LD (IX+TonB+1),C
1412++98BC ~            	LD (HL),A
1413++98BC ~            	LD A,(DE)
1414++98BC ~            	INC DE
1415++98BC ~            	LD C,A
1416++98BC ~            	ADD HL,BC
1417++98BC ~            	LD A,(IX+AmplB)
1418++98BC ~            	LD C,(HL)
1419++98BC ~            	LD (IX+AmplB),C
1420++98BC ~            	LD (HL),A
1421++98BC ~            	LD A,(DE)
1422++98BC ~            	INC DE
1423++98BC ~            	LD (RxCA1),A
1424++98BC ~            	XOR 8
1425++98BC ~            	LD (RxCA2),A
1426++98BC ~            	LD A,(DE)
1427++98BC ~            	AND (IX+Mixer)
1428++98BC ~            	LD E,A
1429++98BC ~            	LD A,(IX+Mixer)
1430++98BC ~            RxCA1	DB #E6
1431++98BC ~            	AND %010010
1432++98BC ~            	OR E
1433++98BC ~            	LD E,A
1434++98BC ~            	LD A,(IX+Mixer)
1435++98BC ~            	AND %010010
1436++98BC ~            RxCA2	OR E
1437++98BC ~            	OR E
1438++98BC ~            	LD (IX+Mixer),A
1439++98BC ~            ABC
1440++98BC              	ENDIF
1441++98BC
1442++98BC AF           	XOR A
1443++98BD 11 BF FF     	LD DE,#FFBF
1444++98C0
1445++98C0              	IF ACBBAC
1446++98C0 ~            	LD BC,#FFFD
1447++98C0 ~            	PUSH IX
1448++98C0 ~            	POP HL
1449++98C0              	ENDIF
1450++98C0
1451++98C0 ED 79        LOUT	OUT (C),A
1452++98C2 43           	LD B,E
1453++98C3 ED A3        	OUTI
1454++98C5 42           	LD B,D
1455++98C6 3C           	INC A
1456++98C7 FE 0D        	CP 13
1457++98C9 20 F5        	JR NZ,LOUT
1458++98CB ED 79        	OUT (C),A
1459++98CD 7E           	LD A,(HL)
1460++98CE A7           	AND A
1461++98CF F8           	RET M
1462++98D0 43           	LD B,E
1463++98D1 ED 79        	OUT (C),A
1464++98D3 C9           	RET
1465++98D4
1466++98D4              	IF ACBBAC
1467++98D4 ~            CHTABLE	EQU $-4
1468++98D4 ~            	DB 4,5,15,%001001,0,7,7,%100100
1469++98D4              	ENDIF
1470++98D4
1471++98D4 64           NT_DATA	DB (T_NEW_0-T1_)*2
1472++98D5 2A           	DB TCNEW_0-T_
1473++98D6 65           	DB (T_OLD_0-T1_)*2+1
1474++98D7 00           	DB TCOLD_0-T_
1475++98D8 01           	DB (T_NEW_1-T1_)*2+1
1476++98D9 0C           	DB TCNEW_1-T_
1477++98DA 01           	DB (T_OLD_1-T1_)*2+1
1478++98DB 0C           	DB TCOLD_1-T_
1479++98DC 94           	DB (T_NEW_2-T1_)*2
1480++98DD 35           	DB TCNEW_2-T_
1481++98DE 30           	DB (T_OLD_2-T1_)*2
1482++98DF 0E           	DB TCOLD_2-T_
1483++98E0 60           	DB (T_NEW_3-T1_)*2
1484++98E1 20           	DB TCNEW_3-T_
1485++98E2 60           	DB (T_OLD_3-T1_)*2
1486++98E3 21           	DB TCOLD_3-T_
1487++98E4
1488++98E4              T_
1489++98E4
1490++98E4 01 05 09 0B  TCOLD_0	DB #00+1,#04+1,#08+1,#0A+1,#0C+1,#0E+1,#12+1,#14+1
1490++98E8 0D 0F 13 15
1491++98EC 19 25 3D 00  	DB #18+1,#24+1,#3C+1,0
1492++98F0 5D 00        TCOLD_1	DB #5C+1,0
1493++98F2 31 37 4D 53  TCOLD_2	DB #30+1,#36+1,#4C+1,#52+1,#5E+1,#70+1,#82,#8C,#9C
1493++98F6 5F 71 82 8C
1493++98FA 9C
1494++98FB 9E A0 A6 A8  	DB #9E,#A0,#A6,#A8,#AA,#AC,#AE,#AE,0
1494++98FF AA AC AE AE
1494++9903 00
1495++9904 57           TCNEW_3	DB #56+1
1496++9905 1F 23 25 29  TCOLD_3	DB #1E+1,#22+1,#24+1,#28+1,#2C+1,#2E+1,#32+1,#BE+1,0
1496++9909 2D 2F 33 BF
1496++990D 00
1497++990E 1D 21 23 27  TCNEW_0	DB #1C+1,#20+1,#22+1,#26+1,#2A+1,#2C+1,#30+1,#54+1
1497++9912 2B 2D 31 55
1498++9916 BD BF 00     	DB #BC+1,#BE+1,0
1499++9919              TCNEW_1 EQU TCOLD_1
1500++9919 1B 21 25 29  TCNEW_2	DB #1A+1,#20+1,#24+1,#28+1,#2A+1,#3A+1,#4C+1,#5E+1
1500++991D 2B 3B 4D 5F
1501++9921 BB BD BF 00  	DB #BA+1,#BC+1,#BE+1,0
1502++9925
1503++9925              PT3EMPTYORN EQU $-1
1504++9925 01 00        	DB 1,0
1505++9927
1506++9927              ;first 12 values of tone tables (packed)
1507++9927
player.asm(1508): warning: value 0xDD8 is truncated to 8bit value: 0xD8
1508++9927 0D D8        T_PACK	DB #06EC*2/256,#06EC*2
1509++9929 69           	DB #0755-#06EC
1510++992A 70           	DB #07C5-#0755
1511++992B 76           	DB #083B-#07C5
1512++992C 7D           	DB #08B8-#083B
1513++992D 85           	DB #093D-#08B8
1514++992E 8D           	DB #09CA-#093D
1515++992F 95           	DB #0A5F-#09CA
1516++9930 9D           	DB #0AFC-#0A5F
1517++9931 A8           	DB #0BA4-#0AFC
1518++9932 B1           	DB #0C55-#0BA4
1519++9933 BB           	DB #0D10-#0C55
player.asm(1520): warning: value 0xCDA is truncated to 8bit value: 0xDA
1520++9934 0C DA        	DB #066D*2/256,#066D*2
1521++9936 62           	DB #06CF-#066D
1522++9937 68           	DB #0737-#06CF
1523++9938 6D           	DB #07A4-#0737
1524++9939 75           	DB #0819-#07A4
1525++993A 7B           	DB #0894-#0819
1526++993B 83           	DB #0917-#0894
1527++993C 8A           	DB #09A1-#0917
1528++993D 92           	DB #0A33-#09A1
1529++993E 9C           	DB #0ACF-#0A33
1530++993F A4           	DB #0B73-#0ACF
1531++9940 AF           	DB #0C22-#0B73
1532++9941 B8           	DB #0CDA-#0C22
player.asm(1533): warning: value 0xE08 is truncated to 8bit value: 0x08
1533++9942 0E 08        	DB #0704*2/256,#0704*2
1534++9944 6A           	DB #076E-#0704
1535++9945 72           	DB #07E0-#076E
1536++9946 78           	DB #0858-#07E0
1537++9947 7E           	DB #08D6-#0858
1538++9948 86           	DB #095C-#08D6
1539++9949 90           	DB #09EC-#095C
1540++994A 96           	DB #0A82-#09EC
1541++994B A0           	DB #0B22-#0A82
1542++994C AA           	DB #0BCC-#0B22
1543++994D B4           	DB #0C80-#0BCC
1544++994E BE           	DB #0D3E-#0C80
player.asm(1545): warning: value 0xFC0 is truncated to 8bit value: 0xC0
1545++994F 0F C0        	DB #07E0*2/256,#07E0*2
1546++9951 78           	DB #0858-#07E0
1547++9952 88           	DB #08E0-#0858
1548++9953 80           	DB #0960-#08E0
1549++9954 90           	DB #09F0-#0960
1550++9955 98           	DB #0A88-#09F0
1551++9956 A0           	DB #0B28-#0A88
1552++9957 B0           	DB #0BD8-#0B28
1553++9958 A8           	DB #0C80-#0BD8
1554++9959 E0           	DB #0D60-#0C80
1555++995A B0           	DB #0E10-#0D60
1556++995B E8           	DB #0EF8-#0E10
1557++995C
1558++995C              ;vars from here can be stripped
1559++995C              ;you can move VARS to any other address
1560++995C
1561++995C              VARS
1562++995C
1563++995C 00           is_ts	DB 0
1564++995D
1565++995D              ;ChannelsVars
1566++995D              	STRUCT	CHP
1567++995D ~            ;reset group
1568++995D ~            PsInOr	DB 0
1569++995D ~            PsInSm	DB 0
1570++995D ~            CrAmSl	DB 0
1571++995D ~            CrNsSl	DB 0
1572++995D ~            CrEnSl	DB 0
1573++995D ~            TSlCnt	DB 0
1574++995D ~            CrTnSl	DW 0
1575++995D ~            TnAcc	DW 0
1576++995D ~            COnOff	DB 0
1577++995D ~            ;reset group
1578++995D ~
1579++995D ~            OnOffD	DB 0
1580++995D ~
1581++995D ~            ;IX for PTDECOD here (+12)
1582++995D ~            OffOnD	DB 0
1583++995D ~            OrnPtr	DW 0
1584++995D ~            SamPtr	DW 0
1585++995D ~            NNtSkp	DB 0
1586++995D ~            Note	DB 0
1587++995D ~            SlToNt	DB 0
1588++995D ~            Env_En	DB 0
1589++995D ~            Flags	DB 0
1590++995D ~             ;Enabled - 0, SimpleGliss - 2
1591++995D ~            TnSlDl	DB 0
1592++995D ~            TSlStp	DW 0
1593++995D ~            TnDelt	DW 0
1594++995D ~            NtSkCn	DB 0
1595++995D ~            Volume	DB 0
1596++995D              	ENDS
1597++995D
1598++995D              	STRUCT	VRS
1599++995D ~
1600++995D ~            ;IF not works in STRUCT in SjASM :(
1601++995D ~            ;	IF CurPosCounter
1602++995D ~            CurPos	DB 0
1603++995D ~            PosSub	DB 0
1604++995D ~            ;	ENDIF
1605++995D ~
1606++995D ~            ModNum	DB 0 ;bit0: ChipNum
1607++995D ~            	     ;bit1: 1-reversed patterns order (AlCo TS)
1608++995D ~
1609++995D ~            ChanA	DS CHP
1610++995D ~            ChanB	DS CHP
1611++995D ~            ChanC	DS CHP
1612++995D ~
1613++995D ~            ;GlobalVars
1614++995D ~            MODADDR	DW 0
1615++995D ~            OrnPtrs	DW 0
1616++995D ~            SamPtrs	DW 0
1617++995D ~            PatsPtr	DW 0
1618++995D ~            AdInPtA	DW 0
1619++995D ~            AdInPtB	DW 0
1620++995D ~            AdInPtC	DW 0
1621++995D ~            CrPsPtr	DW 0
1622++995D ~            LPosPtr	DW 0
1623++995D ~            Delay	DB 0
1624++995D ~            DelyCnt	DB 0
1625++995D ~            ESldAdd	DW 0
1626++995D ~            CurESld	DW 0
1627++995D ~            Env_Del	DB 0
1628++995D ~            CurEDel	DB 0
1629++995D ~            Ns_Base	DB 0
1630++995D ~            AddToNs	DB 0
1631++995D ~            AddToEn	DB 0
1632++995D ~            EnvBase	DW 0
1633++995D ~            AYREGS	DS 14
1634++995D              	ENDS
1635++995D
1636++995D 00 00 00...  VARS1	DS VRS
1637++99E4 00 00 00...  VARS2	DS VRS
1638++9A6B
1639++9A6B              VT_	EQU $-16
1640++9A6B 00 00 00...  	DS 256-16 ;CreatedVolumeTableAddress
1641++9B5B
1642++9B5B              T1_	EQU VT_+16 ;Tone tables data depacked here
1643++9B5B
1644++9B5B              T_OLD_1	EQU T1_
1645++9B5B              T_OLD_2	EQU T_OLD_1+24
1646++9B5B              T_OLD_3	EQU T_OLD_2+24
1647++9B5B              T_OLD_0	EQU T_OLD_3+2
1648++9B5B              T_NEW_0	EQU T_OLD_0
1649++9B5B              T_NEW_1	EQU T_OLD_1
1650++9B5B              T_NEW_2	EQU T_NEW_0+24
1651++9B5B              T_NEW_3	EQU T_OLD_3
1652++9B5B
1653++9B5B              PT2EMPTYORN EQU VT_+31 ;1,0,0 sequence
1654++9B5B
1655++9B5B 00 00 00...  NT_	DS 192 ;CreatedNoteTableAddress
1656++9C1B
1657++9C1B              VAR0END	EQU VT_+16 ;INIT zeroes from VARS to VAR0END-1
1658++9C1B
1659++9C1B              VARSEND EQU $
1660++9C1B
1661++9C1B              MDLADDR EQU outputBuffer
1662++9C1B
1663++9C1B              ;Release 0 steps:
1664++9C1B              ;04/21/2007
1665++9C1B              ;Works start (PTxPlay adaptation); first beta.
1666++9C1B              ;04/22/2007
1667++9C1B              ;Job finished; beta-testing.
1668++9C1B              ;04/23/2007
1669++9C1B              ;PT v3.7 TS mode corrected (after AlCo remarks).
1670++9C1B              ;04/29/2007
1671++9C1B              ;Added 1.XX and 2.XX special commands interpretation for PT3
1672++9C1B              ;modules of v3.7+.
1673++9C1B
1674++9C1B              ;Size (minimal build for ZX Spectrum):
1675++9C1B              ;Code block #908 bytes
1676++9C1B              ;Variables #2BF bytes (can be stripped)
1677++9C1B              ;Total size #908+#2BF=#BC7 (3015) bytes
1678++9C1B              	ENDMODULE
# file closed: player/player.asm
  73+ 9C1B                  ENDIF
# file closed: player/vortex-processor.asm
  40  9C1B                  include "screen/screen.asm"
# file opened: screen/screen.asm
   1+ 9C1B                  module ScreenViewer
   2+ 9C1B              display:
   3+ 9C1B CD BD 69         call Console.waitForKeyUp
   4+ 9C1E 3E 07            ld a, 7
   4+ 9C20 CD CA 8F       call Memory.setPage
   5+ 9C23 21 40 9C 11      ld hl, outputBuffer, de, #c000, bc, 6912
   5+ 9C27 00 C0 01 00
   5+ 9C2B 1B
   5+ 9C2C ED B0          ldir
   6+ 9C2E CD 46 60         call TextMode.disable
   7+ 9C31              .wait
   8+ 9C31 76           	halt
   9+ 9C32 AF               xor a
   9+ 9C33 DB FE          in a, (#fe)
   9+ 9C35 2F             cpl
   9+ 9C36 E6 1F          and 31
   9+ 9C38 28 F7          jr z, .wait
  10+ 9C3A CD 1D 60         call TextMode.cls
  11+ 9C3D C3 00 71         jp History.back
  12+ 9C40
  13+ 9C40                  endmodule
# file closed: screen/screen.asm
  41  9C40              	ELSE
  42  9C40 ~                include "screen/nedoscreen.asm"
  43  9C40 ~                include "player/vortexnedoos.asm"
  44  9C40                  ENDIF
  45  9C40              start:
  46  9C40              	IFNDEF NEDOOS
  47  9C40              outputBuffer:
  48  9C40 F3               di
  49  9C41 AF               xor a
  49  9C42 32 6A 5C       ld (#5c6a), a  ; Thank you, Mario Prato, for feedback
  50  9C45 32 00 5C         ld (#5c00),a
  51  9C48 31 00 60         ld sp, asmOrg
  52  9C4B CD C0 8F         call Memory.init
  53  9C4E AF               xor a
  53  9C4F D3 FE          out (#fe),a
  54  9C51 FB               ei
  55  9C52
  56  9C52 3E 07            ld a, 7
  56  9C54 CD CA 8F       call Memory.setPage
  57  9C57                  ;; Logo
  58  9C57 21 92 9C 06      ld hl, logo, b, Dos.FMODE_READ
  58  9C5B 01
  58  9C5C CD 64 6B       call Dos.fopen
  59  9C5F F5               push af
  60  9C60 21 00 C0 01      ld hl, #c000, bc, 6912
  60  9C64 00 1B
  60  9C66 CD 51 6C       call Dos.fread
  61  9C69 F1               pop af
  62  9C6A CD 3D 6C         call Dos.fclose
  63  9C6D
  64  9C6D 06 32            ld b, 50
  65  9C6F 76           1   halt
  66  9C70 10 FD            djnz 1b
  67  9C72                  ;; End of logo :-)
  68  9C72
  69  9C72                  ELSE
  70  9C72 ~                    ld sp, 0x4000
  71  9C72 ~                    ld c,nos.CMD_SETSYSDRV
  72  9C72 ~                 	ex af,af'
  73  9C72 ~            	    call nos.BDOS
  74  9C72                  ENDIF
  75  9C72
  76  9C72 CD 03 60         call TextMode.init
  77  9C75 21 81 9C     	ld hl, initing
  77  9C78 CD BC 60       call TextMode.printZ
  78  9C7B CD 86 8C       	call Wifi.init
  79  9C7E
  80  9C7E C3 6D 71        jp History.home
  81  9C81
  82  9C81                  IFDEF NEDOOS
  83  9C81 ~            outputBuffer:
  84  9C81              	ENDIF
  85  9C81
  86  9C81 49 6E 69 74  initing db "Initing Wifi...", "\r", 0
  86  9C85 69 6E 67 20
  86  9C89 57 69 66 69
  86  9C8D 2E 2E 2E 0D
  86  9C91 00
  87  9C92 62 72 6F 77  logo    db "browser/logo.scr", 0
  87  9C96 73 65 72 2F
  87  9C9A 6C 6F 67 6F
  87  9C9E 2E 73 63 72
  87  9CA2 00
  88  9CA3 62 72 6F 77  creds   db "browser/auth.pwd", 0
  88  9CA7 73 65 72 2F
  88  9CAB 61 75 74 68
  88  9CAF 2E 70 77 64
  88  9CB3 00
  89  9CB4
  90  9CB4                  display "ENDS: ", $
  91  9CB4                  display "Buff size", #ffff - $
  92  9CB4                  IFDEF NEDOOS
  93  9CB4 ~                    savebin "moon.com", asmOrg, $ - asmOrg
  94  9CB4                  ELSE
  95  9CB4              		IFDEF TRDOS
  96  9CB4              			SAVETRD "MOONR.TRD",|"moon.C",asmOrg, $ - asmOrg
  97  9CB4              		ELSE
  98  9CB4 ~            			savebin "moon.bin", asmOrg, $ - asmOrg
  99  9CB4              	    	ENDIF
 100  9CB4                  ENDIF
 101  9CB4              outputBuffer2:
 102  9CB4 41 54 45 30      db  "ATE0", 0
 102  9CB8 00
 103  9CB9
 104  9CB9                  ELSE
 105  9CB9 ~            ;****************************** MSX ***********************************************
 106  9CB9 ~                output "moonr.com"
 107  9CB9 ~                org 100h
 108  9CB9 ~                jp start
 109  9CB9 ~                include "vdp/vdpdriver.asm"
 110  9CB9 ~                include "utils/index.asm"
 111  9CB9 ~                include "gopher/render/index.asm"
 112  9CB9 ~                include "dos/msxdos.asm"
 113  9CB9 ~                include "gopher/engine/history/index.asm"
 114  9CB9 ~                include "gopher/engine/urlencoder.asm"
 115  9CB9 ~                include "gopher/engine/fetcher.asm"
 116  9CB9 ~                include "gopher/engine/media-processor.asm"
 117  9CB9 ~                include "drivers/unapi/unapi.asm"
 118  9CB9 ~                include "drivers/unapi/tcp.asm"
 119  9CB9 ~                include "gopher/msxgopher.asm"
 120  9CB9 ~                include "screen/msxscreen.asm"
 121  9CB9 ~                include "player/vortex-processor.asm"
 122  9CB9 ~            fontName db "font.bin",0
 123  9CB9 ~            start:
 124  9CB9 ~                ld hl,(0x0006)
 125  9CB9 ~                ld bc,outputBuffer
 126  9CB9 ~                sbc hl,bc
 127  9CB9 ~                ld bc, 0x100
 128  9CB9 ~                sbc hl,bc
 129  9CB9 ~                ld (ramtop),hl
 130  9CB9 ~
 131  9CB9 ~                call TcpIP.init
 131  9CB9 ~              jp nc, noTcpIP ; No TCP/IP - no browser! Anyway you can use "useless tcp/ip driver"
 132  9CB9 ~                ; Loading font
 133  9CB9 ~                ;ld de, fontName, a, FMODE_NO_WRITE : call Dos.fopen
 134  9CB9 ~                ;push bc
 135  9CB9 ~                ;ld de, font, hl, 2048 :call Dos.fread
 136  9CB9 ~                ;pop bc
 137  9CB9 ~                ;call Dos.fclose
 138  9CB9 ~                call TextMode.loadFont
 139  9CB9 ~                call TextMode.init
 140  9CB9 ~                call History.home
 141  9CB9 ~                jp exit
 142  9CB9 ~            noTcpIP:
 143  9CB9 ~                ld hl, .err
 144  9CB9 ~                call Console.putStringZ
 145  9CB9 ~                rst 0
 146  9CB9 ~            .err db 13,10,"No TCP/IP implementation found!",13,10,0
 147  9CB9 ~            ramtop:
 148  9CB9 ~                db 0x00, 0xD0
 149  9CB9 ~            outputBuffer:
 150  9CB9 ~            font:
 151  9CB9 ~                display "ENDS: ", $
 152  9CB9                  ENDIF
# file closed: main.asm
