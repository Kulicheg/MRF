# file opened: main.asm
   1  0000                  DEFINE TCP_BUF_SIZE 1024
   2  0000              ; Generate version string
   3  0000                  LUA ALLPASS
   4  0000 ~                v = tostring(sj.get_define("V"))
   5  0000 ~                maj = string.sub(v, 1,1)
   6  0000 ~                min = string.sub(v, 2,2)
   7  0000 ~                sj.insert_define("VERSION_STRING", "\"" .. maj .. "." .. min .. "\"")
   8  0000 ~
   9  0000 ~                b = tostring(sj.get_define("BLD"))
  10  0000 ~                sj.insert_define("BUILD_STRING", "\"" .. b .. "\"")
  11  0000                  ENDLUA
  12  0000
  13  0000                  IFNDEF MSX
  14  0000                  device	zxspectrum128
  15  0000                  IFDEF NEDOOS
  16  0000 ~            	DEFINE CRLF "\r\n"
  17  0000 ~                    MODULE nos
  18  0000 ~                        include "../_sdk/sysdefs.asm"
  19  0000 ~                    ENDMODULE
  20  0000 ~                    org nos.PROGSTART
  21  0000                      ELSE
  22  0000              	DEFINE CRLF "\r"
  23  0000                      org 24576
  24  6000                  ENDIF
  25  6000              asmOrg:
  26  6000                  align 256
  27  6000 C3 08 95         jp start
  28  6003                  include "vdp/index.asm"
# file opened: vdp/index.asm
   1+ 6003                  IFDEF TIMEX
   2+ 6003 ~                include "timex.asm"
   3+ 6003                  ENDIF
   4+ 6003
   5+ 6003                  IFDEF TIMEX80
   6+ 6003                  include "timex80.asm"
# file opened: vdp/timex80.asm
   1++6003              COLOR=0
   2++6003                  module TextMode
   3++6003              PORT_SELECT = #7c3b
   4++6003              init:
   5++6003 21 C8 61 06      ld hl, font_file, b, Dos.FMODE_READ
   5++6007 01
   6++6008 CD D0 69         call Dos.fopen
   7++600B F5               push af
   8++600C 01 00 08 21      ld bc, 2048, hl, font
   8++6010 00 40
   9++6012 CD BD 6A         call Dos.fread
  10++6015 F1               pop af
  11++6016 CD A9 6A         call Dos.fclose
  12++6019
  13++6019                  IFDEF UNO
  14++6019 ~                ;; Force turbo mode
  15++6019 ~                ld bc, 64571
  15++6019 ~              ld a, #0b
  15++6019 ~              out (c), a
  16++6019 ~                ld bc, 64827
  16++6019 ~              in a, (c)
  16++6019 ~              or #c0
  16++6019 ~              out (c),a
  17++6019                  ENDIF
  18++6019              cls:
  19++6019 3E 07            ld a, 7
  19++601B CD 82 88       call Memory.setPage
  20++601E
  21++601E                  IFDEF UNO
  22++601E ~                ld a, #3E
  22++601E ~              out (#ff), a
  23++601E                  ELSE
  24++601E 01 F7 EF         ld	bc, #EFF7   ;   Scorpio
  25++6021 3E 02            ld a,2
  26++6023 ED 79            out (C), a
  27++6025                  ENDIF
  28++6025
  29++6025 F3               di
  30++6026 21 00 00 54      ld	hl,0, d,h, e,h, b,h, c,b
  30++602A 5C 44 48
  31++602D 39               add	hl,sp
  32++602E 31 00 D8         ld	sp,#c000 + 6144
  33++6031              .loop
  34++6031                  dup 12
  35++6031 D5          >	push	de
  35++6032 D5          >	push	de
  35++6033 D5          >	push	de
  35++6034 D5          >	push	de
  35++6035 D5          >	push	de
  35++6036 D5          >	push	de
  35++6037 D5          >	push	de
  35++6038 D5          >	push	de
  35++6039 D5          >	push	de
  35++603A D5          >	push	de
  35++603B D5          >	push	de
  35++603C D5          >	push	de
  36++603D                  edup
  37++603D
  38++603D 10 F2            djnz	.loop
  39++603F
  40++603F 41               ld	b,c
  41++6040 31 00 F8         ld	sp,#e000 + 6144
  42++6043              .loop2:
  43++6043                  dup 12
  44++6043 D5          >	push	de
  44++6044 D5          >	push	de
  44++6045 D5          >	push	de
  44++6046 D5          >	push	de
  44++6047 D5          >	push	de
  44++6048 D5          >	push	de
  44++6049 D5          >	push	de
  44++604A D5          >	push	de
  44++604B D5          >	push	de
  44++604C D5          >	push	de
  44++604D D5          >	push	de
  44++604E D5          >	push	de
  45++604F                  edup
  46++604F
  47++604F 10 F2            djnz .loop2
  48++6051 F9               ld	sp,hl
  49++6052 21 00 00         ld hl ,0
  49++6055 22 C6 61       ld (coords), hl
  50++6058 AF               xor a
  50++6059 CD 82 88       call Memory.setPage
  51++605C
  52++605C FB               ei
  53++605D C9               ret
  54++605E
  55++605E              ; A - line
  56++605E              usualLine:
  57++605E 57              ld d, a
  58++605F 18 01           jr fill
  59++6061              ; A - line
  60++6061              highlightLine:
  61++6061 57               ld d, a
  62++6062              fill:
  63++6062 1E 00 06 40      ld e, 0, b, 64
  64++6066              .lloop
  65++6066 C5           	push bc
  66++6067 D5           	push de
  67++6068 CD 8D 61     	call findAddr
  68++606B 3E 07            ld a, 7
  68++606D CD 82 88       call Memory.setPage
  69++6070
  70++6070 06 08        	ld b, 8
  71++6072              .cloop
  72++6072 1A           	ld a, (de)
  72++6073 EE FF          xor #ff
  72++6075 12             ld (de), a
  73++6076 14           	inc d
  74++6077 10 F9        	djnz .cloop
  75++6079 D1           	pop de
  76++607A 1C           	inc e
  77++607B C1           	pop bc
  78++607C 10 E8        	djnz .lloop
  79++607E
  80++607E AF               xor a
  80++607F CD 82 88       call Memory.setPage
  81++6082 C9               ret
  82++6083
  83++6083              printZ:
  84++6083 7E               ld a, (hl)
  84++6084 A7             and a
  84++6085 C8             ret z
  85++6086 E5               push hl
  86++6087 CD 8E 60         call putC
  87++608A E1               pop hl
  88++608B 23               inc hl
  89++608C 18 F5            jr printZ
  90++608E
  91++608E
  92++608E              ; A - char
  93++608E              putC:
  94++608E 32 39 61         ld (drawC.char_tmp), a
  95++6091
  96++6091 FE 0D        	cp 13
  97++6093 CA B0 60     	jp z, .cr
  98++6096
  99++6096 ED 5B C6 61      ld de, (coords)
 100++609A 7B               ld a, e
 101++609B FE 55            cp 85
 102++609D D0               ret nc
 103++609E
 104++609E
 105++609E 3E 07            ld a, 7
 106++60A0 CD 82 88         call Memory.setPage
 107++60A3 FD E5            push iy
 108++60A5 CD C7 60         call drawC
 109++60A8 FD E1            pop iy
 110++60AA
 111++60AA 21 C6 61         ld hl, coords
 112++60AD 34               inc (hl)
 113++60AE
 114++60AE 18 12            jr .exit
 115++60B0              .cr
 116++60B0 2A C6 61     	ld hl, (coords)
 117++60B3 24           	inc h
 118++60B4 2E 00 22 C6  	ld l, 0, (coords), hl
 118++60B8 61
 119++60B9 FE 18        	cp 24
 120++60BB D8           	ret c
 121++60BC 21 00 00 22  	ld hl, 0, (coords), hl
 121++60C0 C6 61
 122++60C2              .exit
 123++60C2 AF               xor a
 123++60C3 CD 82 88       call Memory.setPage
 124++60C6 C9           	ret
 125++60C7
 126++60C7              drawC:
 127++60C7 2A C6 61         ld hl, (coords)
 128++60CA 45               ld b, l
 129++60CB CD F6 60         call .calc
 130++60CE 54               ld d, h
 131++60CF 5D               ld e, l
 132++60D0 32 3A 61         ld (.rot_tmp), a
 133++60D3 CD 8D 61         call findAddr
 134++60D6 D5               push de
 135++60D7 CD 2A 61         call .get_char
 136++60DA
 137++60DA E1               pop hl
 138++60DB              .print0
 139++60DB E5 DD E1         ld ix, hl
 140++60DE 7C               ld a, h
 141++60DF CB 6F            bit 5, a
 142++60E1 28 01            jr z, .ok
 143++60E3 2C               inc l
 144++60E4              .ok
 145++60E4 EE 20            xor #20
 145++60E6 67             ld h, a
 146++60E7 E5 FD E1         ld iy, hl
 147++60EA 3A 3A 61         ld a, (.rot_tmp)
 148++60ED CD 19 61         call .rotate_mask
 149++60F0 3A 3A 61         ld a, (.rot_tmp)
 150++60F3 C3 3B 61         jp basic_draw
 151++60F6              .calc
 152++60F6 2E 00              ld l,0
 153++60F8 78                 ld a, b
 153++60F9 A7             and a
 153++60FA C8             ret z
 154++60FB DD 21 00 00        ld ix, 0
 155++60FF 11 06 00           ld de,6
 156++6102 DD 19        1     add ix, de
 157++6104 10 FC              djnz 1b
 158++6106 11 F8 FF           ld de, -8
 159++6109 DD 7C        2     ld a, ixh
 160++610B A7                 and a
 161++610C 20 05              jr nz, 3f
 162++610E DD 7D              ld a, ixl
 163++6110 FE 08              cp 8
 164++6112 D8                 ret c
 165++6113              3
 166++6113 DD 19              add ix, de
 167++6115 2C                 inc l
 168++6116 18 F1              jr 2b
 169++6118 C9                 ret
 170++6119
 171++6119              .rotate_mask
 172++6119 21 FF 03         ld hl, #03ff
 173++611C A7               and a
 173++611D C8             ret z
 174++611E              .rot_loop
 175++611E 08               ex af, af
 176++611F 7D               ld a,l
 177++6120 0F               rrca
 178++6121 CB 1C            rr h
 179++6123 CB 1D            rr l
 180++6125 08               ex af, af
 181++6126 3D               dec a
 182++6127 20 F5            jr nz, .rot_loop
 183++6129 C9               ret
 184++612A              .get_char:
 185++612A 3A 39 61         ld a, (.char_tmp)
 186++612D 6F               ld l, a
 187++612E 26 00            ld h, 0
 188++6130 29               add hl, hl
 189++6131 29               add hl, hl
 190++6132 29               add hl, hl
 191++6133 01 00 40         ld bc, font
 192++6136 09               add hl, bc
 193++6137 EB               ex hl, de
 194++6138 C9               ret
 195++6139 00           .char_tmp db 0
 196++613A 00           .rot_tmp  db 0
 197++613B              ; A - rotation counter
 198++613B              ; DE - font PTR
 199++613B              ; HL - mask
 200++613B              ; IX - left half on screen
 201++613B              ; IY - right half on screen
 202++613B              basic_draw:
 203++613B 32 4D 61         ld (.rot_cnt),a
 204++613E
 205++613E 7D               ld a, l
 206++613F 32 60 61         ld (.mask1), a
 207++6142 7C               ld a, h
 208++6143 32 69 61         ld (.mask2), a
 209++6146 06 08            ld b, 8
 210++6148              .printIt
 211++6148 1A               ld a, (de)
 212++6149 67               ld h, a
 213++614A 2E 00            ld l, 0
 214++614C 3E 00            ld a, 0
 215++614E              .rot_cnt = $ - 1
 216++614E A7               and a
 216++614F 28 0B          jr z, .skiprot
 217++6151              .rot
 218++6151 08               ex af, af
 219++6152 7D               ld a,l
 220++6153 0F               rrca
 221++6154 CB 1C            rr h
 222++6156 CB 1D            rr l
 223++6158 08               ex af, af
 224++6159 3D               dec a
 225++615A 20 F5            jr nz, .rot
 226++615C              .skiprot
 227++615C FD 7E 00         ld a, (iy)
 228++615F E6 0F            and #0f
 229++6161              .mask1 = $ - 1
 230++6161 B5               or l
 231++6162 FD 77 00         ld (iy), a
 232++6165 DD 7E 00         ld a, (ix)
 233++6168 E6 FC            and #fc
 234++616A              .mask2 = $ -1
 235++616A B4               or h
 236++616B DD 77 00         ld (ix), a
 237++616E DD 24            inc ixh
 238++6170 FD 24            inc iyh
 239++6172 13               inc de
 240++6173 10 D3            djnz .printIt
 241++6175 C9               ret
 242++6176
 243++6176
 244++6176              ; H - line
 245++6176              ; A - char
 246++6176              fillLine:
 247++6176 54 1E 00         ld d, h, e, 0
 247++6179 CD 88 61       call gotoXY
 248++617C 06 55            ld b, 85
 249++617E              .loop
 250++617E F5 C5            push af, bc
 251++6180 CD 8E 60         call putC
 252++6183 C1 F1            pop bc, af
 253++6185 10 F7            djnz .loop
 254++6187 C9               ret
 255++6188
 256++6188
 257++6188              gotoXY:
 258++6188 ED 53 C6 61      ld (coords), de
 259++618C C9               ret
 260++618D
 261++618D              ; D - Y
 262++618D              ; E - X
 263++618D              ; OUT: de - coords
 264++618D              findAddr:
 265++618D 7B               ld a, e
 266++618E CB 3F            srl a
 267++6190 5F               ld e,a
 268++6191 06 E0            ld b, #E0
 269++6193 38 02            jr c, .proc
 270++6195 06 C0            ld b, #C0
 271++6197              .proc
 272++6197 7A               LD A,D
 273++6198 E6 07            AND 7
 274++619A 0F               RRCA
 275++619B 0F               RRCA
 276++619C 0F               RRCA
 277++619D B3               OR E
 278++619E 5F               LD E,A
 279++619F 7A               LD A,D
 280++61A0 E6 18            AND 24
 281++61A2 B0               OR b
 282++61A3 57               LD D,A
 283++61A4 C9               ret
 284++61A5
 285++61A5              toggleColor:
 286++61A5 3A BD 61         ld a,(curState)
 287++61A8 FE 07            cp 7
 288++61AA CA B5 61         jp z, sevenEleven
 289++61AD              ;zerroTolerance
 290++61AD 3E 07            ld a,7
 291++61AF 32 BD 61         ld (curState),a
 292++61B2 D3 FE            out (#fe),a
 293++61B4 C9               ret
 294++61B5              sevenEleven:
 295++61B5 3E 00            ld a,0
 296++61B7 32 BD 61         ld (curState),a
 297++61BA D3 FE            out (#fe),a
 298++61BC C9               ret
 299++61BD              curState:
 300++61BD 00               db 0
 301++61BE              disable:
 302++61BE                  IFDEF UNO
 303++61BE ~                xor a
 303++61BE ~              out (#fe), a
 303++61BE ~              out (#ff), a
 304++61BE                  ELSE
 305++61BE 01 F7 EF         ld	bc, #EFF7   ;   Scorpio
 306++61C1 3E 00            ld a,0
 307++61C3 ED 79            out (C), a
 308++61C5                  ENDIF
 309++61C5 C9               ret
 310++61C6
 311++61C6 00 00        coords dw 0
 312++61C8              font equ #4000 ; Using ZX-Spectrum screen as font buffer
 313++61C8 66 6F 6E 74  font_file db "font80.bin", 0
 313++61CC 38 30 2E 62
 313++61D0 69 6E 00
 314++61D3                  endmodule
 315++61D3
 316++61D3              exit:
 317++61D3 01 3B 7C 3E      ld bc, TextMode.PORT_SELECT, a, 1
 317++61D7 01
 318++61D8 ED 79            out (c), a
 319++61DA 04               inc b
 319++61DB AF             xor a
 320++61DC ED 79            out (c), a
 321++61DE C7               rst 0
# file closed: vdp/timex80.asm
   7+ 61DF                  ENDIF
   8+ 61DF
   9+ 61DF                  IFDEF ZXSCR
  10+ 61DF ~                include "zx.asm"
  11+ 61DF                  ENDIF
  12+ 61DF
  13+ 61DF              	IFDEF NEDOOS
  14+ 61DF ~                include "nedotext.asm"
  15+ 61DF                  ENDIF
# file closed: vdp/index.asm
  29  61DF                  include "utils/index.asm"
# file opened: utils/index.asm
   1+ 61DF                  include "atoi.asm"
# file opened: utils/atoi.asm
   1++61DF              ; DE - buffer
   2++61DF              ; HL - output
   3++61DF              atohl:
   4++61DF 21 00 00         ld hl, 0
   5++61E2              .loop
   6++61E2 1A               ld a, (de)
   7++61E3 13               inc de
   8++61E4                  ; Sepparators
   9++61E4 C5 E5            push bc, hl
  10++61E6 01 05 00             ld bc, sepparators_len
  11++61E9 21 01 62             ld hl, sepparators
  12++61EC ED B1                cpir
  13++61EE E1 C1            pop hl, bc
  14++61F0 C8               ret z
  15++61F1
  16++61F1 D6 30            sub '0'
  17++61F3
  18++61F3 C5               push bc
  19++61F4 4D                   ld c, l
  20++61F5 44                   ld b, h
  21++61F6
  22++61F6 29                   add hl, hl
  23++61F7 29                   add hl, hl
  24++61F8 09                   add hl, bc
  25++61F9 29                   add hl, hl
  26++61FA 4F                   ld c, a
  27++61FB 06 00                ld b, 0
  28++61FD 09                   add hl, bc
  29++61FE C1               pop bc
  30++61FF 18 E1            jr .loop
  31++6201
# file closed: utils/atoi.asm
   2+ 6201                  include "constants.asm"
# file opened: utils/constants.asm
   1++6201              TAB = 9
   2++6201              CR = 13
   3++6201              LF = 10
   4++6201              NULL = 0
   5++6201              SPACE = ' '
   6++6201              ESC = 27
   7++6201              BACKSPACE = 8
   8++6201
   9++6201                  IFDEF TIMEX80
  10++6201              MIME_DOWNLOAD 	= #19
  11++6201              MIME_LINK 		= #1A
  12++6201              MIME_TEXT 		= #10
  13++6201              MIME_IMAGE 		= #01
  14++6201              MIME_MUSIC 		= #0e
  15++6201              MIME_INPUT 		= #b3
  16++6201              MIME_MOD 		= #0d
  17++6201
  18++6201              BORDER_TOP = #b2
  19++6201              BORDER_BOTTOM = #b1
  20++6201                  ELSE
  21++6201 ~            	IFDEF MSX
  22++6201 ~            MIME_DOWNLOAD 	= 1
  23++6201 ~            MIME_LINK		= 2
  24++6201 ~            MIME_TEXT 		= 3
  25++6201 ~            MIME_IMAGE 		= 4
  26++6201 ~            MIME_MUSIC 		= 5
  27++6201 ~            MIME_INPUT 		= 6
  28++6201 ~            MIME_MOD      	= 7
  29++6201 ~            BORDER_TOP    = 7
  30++6201 ~            BORDER_BOTTOM = 8
  31++6201 ~            	ELSE
  32++6201 ~            MIME_DOWNLOAD = 1
  33++6201 ~            MIME_LINK     = 2
  34++6201 ~            MIME_TEXT     = 3
  35++6201 ~            MIME_IMAGE    = 6
  36++6201 ~            MIME_MUSIC    = 5
  37++6201 ~            MIME_INPUT    = 4
  38++6201 ~            MIME_MOD      = 7
  39++6201 ~
  40++6201 ~            BORDER_TOP    = 9
  41++6201 ~            BORDER_BOTTOM = 8
  42++6201 ~            	ENDIF
  43++6201 ~
  44++6201 ~
  45++6201 ~
  46++6201 ~
  47++6201              	ENDIF
  48++6201
  49++6201 0D 0A 09 00  sepparators db CR, LF, TAB, NULL, SPACE
  49++6205 20
  50++6206              sepparators_len = $ - sepparators
# file closed: utils/constants.asm
   3+ 6206                  include "strutils.asm"
# file opened: utils/strutils.asm
   1++6206              ; de - pointer
   2++6206              ; hl - count
   3++6206              strlen:
   4++6206 21 00 00         ld hl, 0
   5++6209              .loop
   6++6209 1A               ld a, (de)
   7++620A A7               and a
   7++620B 28 04          jr z, .exit
   8++620D 23               inc hl
   9++620E 13               inc de
  10++620F 18 F8            jr .loop
  11++6211              .exit
  12++6211 C9               ret
  13++6212
  14++6212                  module CompareBuff
  15++6212
  16++6212              ; Pushes A to buffer
  17++6212              push
  18++6212 F5               push af
  19++6213 06 20            ld b, 32
  19++6215 21 5E 62       ld hl, buffer + 1
  19++6218 11 5D 62       ld de, buffer
  20++621B              .loop
  21++621B 7E               ld a, (hl)
  21++621C 12             ld (de), a
  21++621D 23             inc hl
  21++621E 13             inc de
  21++621F 10 FA          djnz .loop
  22++6221 F1               pop af
  23++6222 21 7C 62         ld hl, buffer + 31
  23++6225 77             ld (hl), a
  24++6226 C9               ret
  25++6227
  26++6227              ; HL - Compare string(null terminated)
  27++6227              ; A - 0 NOT Found
  28++6227              ;     1 Found
  29++6227              search:
  30++6227 06 00            ld b, 0
  30++6229 E5             push hl
  31++622A              .loop:
  32++622A 7E               ld a, (hl)
  32++622B 23             inc hl
  32++622C 04             inc b
  32++622D A7             and a
  32++622E C2 2A 62       jp nz, .loop
  33++6231 05               dec b
  33++6232 E1             pop hl
  33++6233 C5             push bc
  33++6234 E5             push hl
  34++6235 E1               pop hl
  35++6236 11 7D 62         ld de, buffer + 32
  36++6239              .sourceLoop
  37++6239 1B               dec de
  37++623A 10 FD          djnz .sourceLoop
  38++623C C1               pop bc
  39++623D              .compare
  40++623D C5               push bc
  40++623E F5             push af
  41++623F 1A               ld a, (de)
  41++6240 47             ld b, a
  42++6241 F1               pop af
  42++6242 7E             ld a, (hl)
  42++6243 B8             cp b
  42++6244 C1             pop bc
  42++6245 3E 00          ld a, 0
  42++6247 C0             ret nz
  43++6248 13               inc de
  43++6249 23             inc hl
  44++624A 10 F1            djnz .compare
  45++624C 3E 01            ld a, 1
  46++624E C9               ret
  47++624F
  48++624F              clear:
  49++624F AF               xor a
  49++6250 21 5D 62       ld hl, buffer
  49++6253 11 5E 62       ld de, buffer + 1
  49++6256 01 20 00       ld bc, 32
  49++6259 77             ld (hl), a
  49++625A ED B0          ldir
  50++625C C9               ret
  51++625D
  52++625D 00 00 00...  buffer ds 32
  53++627D
  54++627D                  endmodule
# file closed: utils/strutils.asm
   4+ 627D                  IFDEF MSX
   5+ 627D ~            	    include "bios.asm"
   6+ 627D                  ENDIF
   7+ 627D                  include "screen.asm"
# file opened: utils/screen.asm
   1++627D              LINE_LIMIT = 63
   2++627D
   3++627D                  IFDEF NEDOOS
   4++627D ~            LINE_LIMIT = 79
   5++627D                  ENDIF
   6++627D
   7++627D                  IFDEF TIMEX80
   8++627D              LINE_LIMIT = 84
   9++627D                  ENDIF
  10++627D
  11++627D                  IFDEF MSX
  12++627D ~            LINE_LIMIT = 79
  13++627D                  ENDIF
  14++627D              ; HL - string pointer
  15++627D              print70Text:
  16++627D 06 54            ld b, LINE_LIMIT
  17++627F              .loop
  18++627F 7E               ld a, (hl)
  19++6280 A7               and a
  19++6281 C8             ret z
  20++6282 FE 0D            cp 13
  20++6284 C8             ret z
  21++6285 FE 0A            cp 10
  21++6287 C8             ret z
  22++6288 C5               push bc
  23++6289 E5               push hl
  24++628A CD 8E 60         call TextMode.putC
  25++628D E1               pop hl
  26++628E 23               inc hl
  27++628F C1               pop bc
  28++6290 05               dec b
  29++6291 78               ld a, b
  29++6292 A7             and a
  29++6293 C8             ret z
  30++6294 C3 7F 62         jp .loop
  31++6297
  32++6297              ; HL - string pointer
  33++6297              print70Goph:
  34++6297 06 54            ld b, LINE_LIMIT
  35++6299              .loop
  36++6299 7E               ld a, (hl)
  36++629A FE 09          cp 09
  36++629C C8             ret z
  37++629D A7               and a
  37++629E C8             ret z
  38++629F C5               push bc
  39++62A0 E5               push hl
  40++62A1 CD 8E 60         call TextMode.putC
  41++62A4 E1               pop hl
  42++62A5 23               inc hl
  43++62A6 C1               pop bc
  44++62A7 05               dec b
  45++62A8 78               ld a, b
  45++62A9 A7             and a
  45++62AA C8             ret z
  46++62AB C3 99 62         jp .loop
# file closed: utils/screen.asm
# file closed: utils/index.asm
  30  62AE                  include "gopher/render/index.asm"
# file opened: gopher/render/index.asm
   1+ 62AE                  MODULE Render
   2+ 62AE              PER_PAGE = 22
   3+ 62AE              CURSOR_OFFSET = 2
   4+ 62AE                  include "row.asm"
# file opened: gopher/render/row.asm
   1++62AE              ; A - row number
   2++62AE              ; HL - pointer to row
   3++62AE              renderRow:
   4++62AE C6 02            add CURSOR_OFFSET
   5++62B0 57               ld d,a
   6++62B1 1E 00            ld e,0
   7++62B3 CD 88 61         call TextMode.gotoXY
   8++62B6 7E               ld a,(hl)
   9++62B7 E5               push hl
  10++62B8 CD C3 62         call getIcon
  11++62BB CD 8E 60         call TextMode.putC
  12++62BE E1               pop hl
  13++62BF 23               inc hl
  14++62C0 C3 97 62         jp print70Goph
  15++62C3
  16++62C3              ; A - gopher id char
  17++62C3              getIcon:
  18++62C3 FE 69            cp 'i'
  18++62C5 CA DF 62       jp z, .info
  19++62C8 FE 39            cp '9'
  19++62CA CA E2 62       jp z, .down
  20++62CD FE 31            cp '1'
  20++62CF CA 48 63       jp z, .page
  21++62D2 FE 30            cp '0'
  21++62D4 CA 4B 63       jp z, .text
  22++62D7 FE 37            cp '7'
  22++62D9 CA 4E 63       jp z, .input
  23++62DC 3E 20            ld a, ' '
  24++62DE C9               ret
  25++62DF              .info
  26++62DF 3E 20            ld a, SPACE
  26++62E1 C9             ret
  27++62E2              .down
  28++62E2 54 5D            ld de, hl
  29++62E4 01 FF 00 3E      ld bc, #ff, a, TAB
  29++62E8 09
  29++62E9 ED B1          cpir
  30++62EB 78               ld a, b
  30++62EC B1             or c
  30++62ED 28 56          jr z, .downExit
  31++62EF D5               push de
  32++62F0              .nameLoop
  33++62F0 7E               ld a, (hl)
  33++62F1 A7             and a
  33++62F2 28 10          jr z, .check
  34++62F4 FE 09            cp TAB
  34++62F6 28 0C          jr z, .check
  35++62F8 FE 0D            cp CR
  35++62FA 28 08          jr z, .check
  36++62FC E5               push hl
  37++62FD CD 12 62         call CompareBuff.push
  38++6300 E1               pop hl
  39++6301 23               inc hl
  40++6302 18 EC            jr .nameLoop
  41++6304              .check
  42++6304 21 5D 63         ld hl, scrExt1
  42++6307 CD 27 62       call CompareBuff.search
  42++630A A7             and a
  42++630B 20 44          jr nz, .image
  43++630D 21 62 63         ld hl, scrExt2
  43++6310 CD 27 62       call CompareBuff.search
  43++6313 A7             and a
  43++6314 20 3B          jr nz, .image
  44++6316 3E 03            ld a, 3
  44++6318 32 F7 88       ld (VTPL.SETUP), a ; 0 bit - looping, 1 bit - pt2 file
  45++631B 21 71 63         ld hl, pt2Ext1
  45++631E CD 27 62       call CompareBuff.search
  45++6321 A7             and a
  45++6322 20 31          jr nz, .music
  46++6324 21 76 63         ld hl, pt2Ext2
  46++6327 CD 27 62       call CompareBuff.search
  46++632A A7             and a
  46++632B 20 28          jr nz, .music
  47++632D 3E 01            ld a, 1
  47++632F 32 F7 88       ld (VTPL.SETUP), a
  48++6332 21 67 63         ld hl, pt3Ext1
  48++6335 CD 27 62       call CompareBuff.search
  48++6338 A7             and a
  48++6339 20 1A          jr nz, .music
  49++633B 21 6C 63         ld hl, pt3Ext2
  49++633E CD 27 62       call CompareBuff.search
  49++6341 A7             and a
  49++6342 20 11          jr nz, .music
  50++6344
  51++6344                  ; General Sound support
  52++6344                  ifdef GS
  53++6344 ~                ld hl, modExt1
  53++6344 ~              call CompareBuff.search
  53++6344 ~              and a
  53++6344 ~              jr nz, .mod
  54++6344 ~                ld hl, modExt2
  54++6344 ~              call CompareBuff.search
  54++6344 ~              and a
  54++6344 ~              jr nz, .mod
  55++6344                  endif
  56++6344
  57++6344              .checkExit
  58++6344 E1               pop hl
  59++6345              .downExit
  60++6345 3E 19            ld a, MIME_DOWNLOAD
  60++6347 C9             ret
  61++6348              .page
  62++6348 3E 1A            ld a, MIME_LINK
  62++634A C9             ret
  63++634B              .text
  64++634B 3E 10            ld a, MIME_TEXT
  64++634D C9             ret
  65++634E              .input
  66++634E 3E B3            ld a, MIME_INPUT
  66++6350 C9             ret
  67++6351              .image
  68++6351 E1               pop hl
  68++6352 3E 01          ld a, MIME_IMAGE
  68++6354 C9             ret
  69++6355              .music
  70++6355 E1               pop hl
  70++6356 3E 0E          ld a, MIME_MUSIC
  70++6358 C9             ret
  71++6359              .mod
  72++6359 E1               pop hl
  72++635A 3E 0D          ld a, MIME_MOD
  72++635C C9             ret
  73++635D
  74++635D 2E 73 63 72  scrExt1 db ".scr", 0
  74++6361 00
  75++6362 2E 53 43 52  scrExt2 db ".SCR", 0
  75++6366 00
  76++6367
  77++6367 2E 70 74 33  pt3Ext1 db ".pt3", 0
  77++636B 00
  78++636C 2E 50 54 33  pt3Ext2 db ".PT3", 0
  78++6370 00
  79++6371 2E 70 74 32  pt2Ext1 db ".pt2", 0
  79++6375 00
  80++6376 2E 50 54 32  pt2Ext2 db ".PT2", 0
  80++637A 00
  81++637B 2E 6D 6F 64  modExt1 db ".mod", 0
  81++637F 00
  82++6380 2E 4D 4F 44  modExt2 db ".MOD", 0
  82++6384 00
# file closed: gopher/render/row.asm
   5+ 6385                  include "buffer.asm"
# file opened: gopher/render/buffer.asm
   1++6385              ; BC - line count
   2++6385              findLine:
   3++6385 21 08 95         ld hl, outputBuffer
   4++6388 78               ld a,b
   5++6389 B1               or c
   6++638A CA B8 63         jp z, .checkEmpty
   7++638D              .preloop
   8++638D 16 0D            ld d,13
   9++638F              .loop
  10++638F 7E               ld a, (hl)
  10++6390 A7             and a
  10++6391 CA BB 63       jp z, .nope
  11++6394 BA               cp d
  11++6395 23             inc hl
  11++6396 CA AE 63       jp z, .checkLF  ;13
  12++6399 FE 0A            cp 10
  12++639B CA A1 63       jp z, .nextCheck     ;10
  13++639E C3 8F 63         jp .loop
  14++63A1              .nextCheck
  15++63A1 A7               and a
  15++63A2 CA BB 63       jp z, .nope
  16++63A5 0B               dec bc
  17++63A6 5F               ld e,a
  18++63A7 78               ld a,b
  19++63A8 B1               or c
  20++63A9 7B               ld a,e
  21++63AA C2 8F 63         jp nz, .loop
  22++63AD C9               ret
  23++63AE              .checkLF
  24++63AE 7E               ld a, (hl)
  25++63AF FE 0A            cp 10
  25++63B1 C2 A1 63       jp nz, .nextCheck    ;10
  26++63B4 23               inc hl
  27++63B5 C3 A1 63         jp  .nextCheck
  28++63B8              .checkEmpty
  29++63B8 7E               ld a, (hl)
  29++63B9 A7             and a
  29++63BA C0             ret nz
  30++63BB              .nope
  31++63BB 21 00 00         ld hl, 0
  31++63BE C9             ret
  32++63BF
# file closed: gopher/render/buffer.asm
   6+ 63BF                  include "ui.asm"
# file opened: gopher/render/ui.asm
   1++63BF                  IFDEF ZXSCR
   2++63BF ~                DEFINE LEFT_TAB "[D]omain:                                  "
   3++63BF                  ENDIF
   4++63BF
   5++63BF                  IFDEF TIMEX     ;UNKNOWM fallback to 64
   6++63BF ~                DEFINE LEFT_TAB "[D]omain:                                  "
   7++63BF                  ENDIF
   8++63BF
   9++63BF                  IFDEF TIMEX80
  10++63BF                  DEFINE LEFT_TAB "[D]omain:                                                      "
  11++63BF                  ENDIF
  12++63BF
  13++63BF                  IFDEF NEDOOS
  14++63BF ~                DEFINE LEFT_TAB "[D]omain:                                                  "
  15++63BF                  ENDIF
  16++63BF
  17++63BF                  IFDEF MSX
  18++63BF ~                DEFINE LEFT_TAB "[D]omain:                                              "
  19++63BF                  ENDIF
  20++63BF              prepareScreen:
  21++63BF CD 19 60         call TextMode.cls
  22++63C2 21 92 64         ld hl, header
  22++63C5 CD 83 60       call TextMode.printZ
  23++63C8 11 0A 00         ld de, #000A
  23++63CB CD 88 61       call TextMode.gotoXY
  24++63CE 21 A0 80         ld hl, hostName
  24++63D1 CD 83 60       call TextMode.printZ
  25++63D4 AF               xor a
  25++63D5 CD 61 60       call TextMode.highlightLine
  26++63D8 C9               ret
  27++63D9
  28++63D9              inputHost:
  29++63D9 CD 29 68         	call Console.waitForKeyUp
  30++63DC              .loop
  31++63DC 11 0A 00         ld de, #000A
  31++63DF CD 88 61       call TextMode.gotoXY
  31++63E2 21 A0 80       ld hl, hostName
  31++63E5 CD 83 60       call TextMode.printZ
  32++63E8 3E B3            ld a, MIME_INPUT
  32++63EA CD 8E 60       call TextMode.putC
  33++63ED 3E 20            ld a, ' '
  33++63EF CD 8E 60       call TextMode.putC
  34++63F2              .wait
  35++63F2 CD 36 68         call Console.getC
  36++63F5 5F               ld e, a
  37++63F6 FE 0C            cp Console.BACKSPACE
  37++63F8 28 17          jr z, .removeChar
  38++63FA FE 0D            cp CR
  38++63FC CA 1F 64       jp z, inputNavigate
  39++63FF FE 20            cp 32
  39++6401 38 EF          jr c, .wait
  40++6403              .putC
  41++6403 AF               xor a
  41++6404 21 A0 80 01    ld hl, hostName, bc, 48
  41++6408 30 00
  41++640A ED B1          cpir
  42++640C 77               ld (hl), a
  42++640D 2B             dec hl
  42++640E 73             ld (hl), e
  43++640F 18 CB            jr .loop
  44++6411              .removeChar
  45++6411 AF               xor a
  46++6412 21 A0 80 01      ld hl, hostName, bc, 48
  46++6416 30 00
  46++6418 ED B1          cpir
  47++641A 2B               dec hl
  47++641B 2B             dec hl
  47++641C 77             ld (hl), a
  48++641D 18 BD            jr .loop
  49++641F
  50++641F              inputNavigate:
  51++641F 21 A0 80 11      ld hl, hostName, de, domain
  51++6423 52 64
  52++6425 7E               ld a,(hl)
  53++6426 A7               and a
  54++6427 CA 17 70         jp z, History.load
  55++642A              .loop
  56++642A 7E               ld a, (hl)
  56++642B A7             and a
  56++642C 28 05          jr z, .complete
  57++642E 12               ld (de), a
  57++642F 23 13          inc hl, de
  58++6431 18 F7            jr .loop
  59++6433              .complete
  60++6433 3E 09            ld a, TAB
  60++6435 12             ld (de), a
  60++6436 13             inc de
  61++6437 3E 37            ld a, '7'
  61++6439 12             ld (de), a
  61++643A 13             inc de
  62++643B 3E 30            ld a, '0'
  62++643D 12             ld (de), a
  62++643E 13             inc de
  63++643F 3E 0D            ld a, CR
  63++6441 12             ld (de), a
  63++6442 13             inc de
  64++6443 3E 0A            ld a, LF
  64++6445 12             ld (de), a
  64++6446 13             inc de
  65++6447 21 4D 64         ld hl, navRow
  65++644A C3 70 70       jp History.navigate
  66++644D
  67++644D 31 20 09 2F  navRow db "1 ", TAB, "/", TAB
  67++6451 09
  68++6452 6E 69 68 69  domain db "nihirash.net"
  68++6456 72 61 73 68
  68++645A 2E 6E 65 74
  69++645E 00 00 00...      ds 64 - ($ - domain)
  70++6492
  71++6492 5B 44 5D 6F  header db "[D]omain:                                                      ", "MRF "
  71++6496 6D 61 69 6E
  71++649A 3A 20 20 20
  71++649E 20 20 20 20
  71++64A2 20 20 20 20
  71++64A6 20 20 20 20
  71++64AA 20 20 20 20
  71++64AE 20 20 20 20
  71++64B2 20 20 20 20
  71++64B6 20 20 20 20
  71++64BA 20 20 20 20
  71++64BE 20 20 20 20
  71++64C2 20 20 20 20
  71++64C6 20 20 20 20
  71++64CA 20 20 20 20
  71++64CE 20 20 20 4D
  71++64D2 52 46 20
  72++64D5 31 2E 37            db "1.7"
  73++64D8 2E                  db "."
  74++64D9 39                  db "9"
  75++64DA              	IFDEF MSX
  76++64DA ~                   db " [MSX UNAPI]",13, 0
  77++64DA              	ENDIF
  78++64DA
  79++64DA                  IFDEF MB03
  80++64DA ~                   db " [MB03+]",13, 0
  81++64DA                     ENDIF
  82++64DA
  83++64DA                  IFDEF UNO
  84++64DA ~                   db " [UNO UART]",13, 0
  85++64DA                  ENDIF
  86++64DA
  87++64DA                  IFDEF AY
  88++64DA ~                   db " [AYWIFI]",13, 0
  89++64DA              	ENDIF
  90++64DA
  91++64DA                  IFDEF ZW
  92++64DA 20 5B 5A 58         db " [ZXWiFi]",13, 0
  92++64DE 57 69 46 69
  92++64E2 5D 0D 00
  93++64E5                  ENDIF
  94++64E5
  95++64E5                   IFDEF NEDOOSATM
  96++64E5 ~                   db " [ATM UART]",13, 0
  97++64E5                  ENDIF
  98++64E5
  99++64E5                  IFDEF NEDOOSEVO
 100++64E5 ~                   db " [EVO UART]",13, 0
 101++64E5                  ENDIF
 102++64E5
 103++64E5                  IFDEF UNOUART
 104++64E5 ~                   db " [UNO UART]",13, 0
 105++64E5                  ENDIF
 106++64E5
 107++64E5                  IFDEF NEDOOS
 108++64E5 ~            	IFNDEF NEDOOSATM
 109++64E5 ~            	IFNDEF NEDOOSEVO
 110++64E5 ~                   db "  [nedoNET]",13, 0
 111++64E5 ~
 112++64E5 ~                ENDIF
 113++64E5 ~            	ENDIF
 114++64E5              	ENDIF
 115++64E5
# file closed: gopher/render/ui.asm
   7+ 64E5                  include "gopher-page.asm"
# file opened: gopher/render/gopher-page.asm
   1++64E5              renderGopherScreen:
   2++64E5 CD BF 63         call Render.prepareScreen
   3++64E8 06 16            ld b, PER_PAGE
   4++64EA 3E FF            ld a, 255
   5++64EC 32 94 88         ld (oldminutes), a
   6++64EF              .loop
   7++64EF C5               push bc
   8++64F0 3E 16            ld a, PER_PAGE
   9++64F2 90               sub b
  10++64F3 47               ld b,a
  11++64F4 5F               ld e,a
  12++64F5
  13++64F5 48                   ld c,b
  14++64F6 06 00                ld b,0
  15++64F8
  16++64F8 2A 8E 73             ld hl, (page_offset)
  17++64FB 09                   add hl,bc
  18++64FC 44 4D                ld bc,hl
  19++64FE D5                   push de
  20++64FF CD 85 63         call Render.findLine
  21++6502 D1               pop de
  22++6503
  23++6503 7C               ld a, h
  24++6504 B5               or l
  25++6505 28 04            jr z, .exit
  26++6507 7B               ld a, e
  27++6508 CD AE 62         call renderRow
  28++650B              .exit
  29++650B C1               pop bc
  30++650C 10 E1            djnz .loop
  31++650E CD 0E 66         call showCursor
  32++6511 C9               ret
  33++6512
  34++6512              checkBorder:
  35++6512 3A 8C 73         ld a, (cursor_position)
  35++6515 FE FF          cp #ff
  35++6517 CA 32 66       jp z, pageUp
  36++651A 3A 8C 73         ld a, (cursor_position)
  36++651D FE 16          cp PER_PAGE
  36++651F CA 65 66       jp z, pageDn
  37++6522 CD 0E 66         call showCursor
  38++6525 C3 28 65         jp workLoop
  39++6528
  40++6528              workLoop:
  41++6528 3A 45 67         ld a, (play_next)
  41++652B A7             and a
  41++652C C2 C3 65       jp nz, navigate
  42++652F
  43++652F                  dup 4
  44++652F 76          >    halt
  44++6530 76          >    halt
  44++6531 76          >    halt
  44++6532 76          >    halt
  45++6533                  edup
  46++6533              .nothing
  47++6533
  48++6533 76               halt
  49++6534 CD 8D 88         call printRTC
  50++6537
  51++6537 CD 47 68         call Console.peekC
  52++653A A7               and a
  52++653B CA 33 65       jp z, .nothing
  53++653E
  54++653E FE 31            cp '1'
  54++6540 CA 00 70       jp z, History.back
  55++6543 FE 32            cp '2'
  55++6545 CA C3 65       jp z, navigate
  56++6548 FE 33            cp '3'
  56++654A CA 1E 66       jp z, cursorDown
  57++654D FE 34            cp '4'
  57++654F CA 28 66       jp z, cursorUp
  58++6552 FE 35            cp '5'
  58++6554 CA 32 66       jp z, pageUp
  59++6557 FE 38            cp '8'
  59++6559 CA 65 66       jp z, pageDn
  60++655C FE 36            cp '6'
  60++655E CA 1E 66       jp z, cursorDown
  61++6561 FE 37            cp '7'
  61++6563 CA 28 66       jp z, cursorUp
  62++6566
  63++6566 FE 0A            cp Console.KEY_DN
  63++6568 CA 1E 66       jp z, cursorDown
  64++656B FE 61            cp 'a'
  64++656D CA 1E 66       jp z, cursorDown
  65++6570 FE 0B            cp Console.KEY_UP
  65++6572 CA 28 66       jp z, cursorUp
  66++6575 FE 71            cp 'q'
  66++6577 CA 28 66       jp z, cursorUp
  67++657A FE 08            cp Console.KEY_LT
  67++657C CA 32 66       jp z, pageUp
  68++657F FE 6F            cp 'o'
  68++6581 CA 32 66       jp z, pageUp
  69++6584 FE 09            cp Console.KEY_RT
  69++6586 CA 65 66       jp z, pageDn
  70++6589 FE 70            cp 'p'
  70++658B CA 65 66       jp z, pageDn
  71++658E
  72++658E FE 68            cp 'h'
  72++6590 CA 6D 70       jp z, History.home
  73++6593 FE 48            cp 'H'
  73++6595 CA 6D 70       jp z, History.home
  74++6598
  75++6598 FE 62            cp 'b'
  75++659A CA 00 70       jp z, History.back
  76++659D FE 42            cp 'B'
  76++659F CA 00 70       jp z, History.back
  77++65A2 FE 0C            cp Console.BACKSPACE
  77++65A4 CA 00 70       jp z, History.back
  78++65A7
  79++65A7 FE 64            cp 'd'
  79++65A9 CA D9 63       jp z, inputHost
  80++65AC FE 44            cp 'D'
  80++65AE CA D9 63       jp z, inputHost
  81++65B1
  82++65B1 FE 0D            cp CR
  82++65B3 CA C3 65       jp z, navigate
  83++65B6
  84++65B6                  IFDEF MSX
  85++65B6 ~                	cp ESC
  85++65B6 ~              jp z, exit
  86++65B6                  ENDIF
  87++65B6
  88++65B6                  IFDEF GS
  89++65B6 ~                cp 'M'
  89++65B6 ~              call z, GeneralSound.toggleModule
  90++65B6 ~                cp 'm'
  90++65B6 ~              call z, GeneralSound.toggleModule
  91++65B6 ~                cp 'g'
  91++65B6 ~              call z, GeneralSound.toggleDownload
  92++65B6 ~                cp 'G'
  92++65B6 ~              call z, GeneralSound.toggleDownload
  93++65B6                  ENDIF
  94++65B6
  95++65B6                  IFDEF TIMEX80
  96++65B6 FE 54            cp 'T'
  96++65B8 CC A5 61       call z, TextMode.toggleColor
  97++65BB FE 74            cp 't'
  97++65BD CC A5 61       call z, TextMode.toggleColor
  98++65C0                  ENDIF
  99++65C0
 100++65C0 C3 28 65         jp workLoop
 101++65C3
 102++65C3              navigate:
 103++65C3 CD 29 68         call Console.waitForKeyUp
 104++65C6 AF               xor a
 104++65C7 32 45 67       ld (play_next), a
 105++65CA CD 16 66         call hideCursor
 106++65CD ED 4B 8E 73      ld bc, (page_offset)
 107++65D1 2A 8C 73         ld hl, (cursor_position)
 108++65D4 09               add hl,bc
 109++65D5 44               ld b, h ;HHHHH
 110++65D6 4D               ld c, l ;LLLLL
 111++65D7 D5               push de
 112++65D8 CD 85 63         call Render.findLine
 113++65DB D1               pop de
 114++65DC 7E               ld a, (hl)
 115++65DD FE 31            cp '1'
 115++65DF CA F7 65       jp z, .load
 116++65E2 FE 30            cp '0'
 116++65E4 CA F7 65       jp z, .load
 117++65E7 FE 39            cp '9'
 117++65E9 CA F7 65       jp z, .load
 118++65EC FE 37            cp '7'
 118++65EE CA FF 65       jp z, .input
 119++65F1 CD 0E 66         call showCursor
 120++65F4 C3 28 65         jp workLoop
 121++65F7              .load
 122++65F7 E5               push hl
 123++65F8 CD C3 62         call getIcon
 124++65FB E1               pop hl
 125++65FC C3 70 70         jp History.navigate
 126++65FF              .input
 127++65FF E5               push hl
 128++6600 CD 46 67         call DialogBox.inputBox
 129++6603 E1               pop hl
 130++6604 3A A1 67         ld a, (DialogBox.inputBuffer)
 130++6607 A7             and a
 130++6608 CA 17 70       jp z, History.load
 131++660B C3 F7 65         jp .load
 132++660E
 133++660E              showCursor:
 134++660E 3A 8C 73         ld a, (cursor_position)
 134++6611 C6 02          add CURSOR_OFFSET
 135++6613 C3 61 60         jp TextMode.highlightLine
 136++6616
 137++6616              hideCursor:
 138++6616 3A 8C 73         ld a, (cursor_position)
 138++6619 C6 02          add CURSOR_OFFSET
 139++661B C3 5E 60         jp TextMode.usualLine
 140++661E
 141++661E              cursorDown:
 142++661E CD 16 66         call hideCursor
 143++6621 21 8C 73         ld hl, cursor_position
 144++6624 34               inc (hl)
 145++6625 C3 12 65         jp checkBorder
 146++6628
 147++6628              cursorUp:
 148++6628 CD 16 66         call hideCursor
 149++662B 21 8C 73         ld hl, cursor_position
 150++662E 35               dec (hl)
 151++662F C3 12 65         jp checkBorder
 152++6632
 153++6632              pageUp:
 154++6632 3A 8E 73         ld a, (page_offset)
 154++6635 FE 00          cp 0
 154++6637 C2 45 66       jp nz, .pageUp2
 155++663A 3A 8F 73         ld a, (page_offset + 1)
 155++663D FE 00          cp 0
 155++663F C2 45 66       jp nz, .pageUp2
 156++6642 C3 5B 66         jp .skip
 157++6645              .pageUp2:
 158++6645 3E 15            ld a, PER_PAGE - 1
 158++6647 32 8C 73       ld (cursor_position), a
 159++664A 2A 8E 73         ld hl, (page_offset)
 160++664D 11 16 00         ld de,PER_PAGE
 161++6650 ED 52            sbc hl,de
 162++6652 22 8E 73         ld (page_offset), hl
 163++6655              .exit
 164++6655 CD E5 64         call renderGopherScreen
 165++6658 C3 28 65         jp workLoop
 166++665B              .skip
 167++665B AF               xor a
 167++665C 32 8C 73       ld (cursor_position), a
 167++665F CD E5 64       call renderGopherScreen
 167++6662 C3 28 65       jp workLoop
 168++6665
 169++6665              pageDn:
 170++6665 AF                xor a
 170++6666 32 8C 73       ld (cursor_position), a
 171++6669 2A 8E 73         ld hl,(page_offset)
 172++666C 11 16 00         ld de,PER_PAGE
 173++666F 19               add hl,de
 174++6670 22 8E 73         ld (page_offset), hl
 175++6673 C3 55 66         jp pageUp.exit
 176++6676
 177++6676
 178++6676
# file closed: gopher/render/gopher-page.asm
   8+ 6676                  include "plaintext.asm"
# file opened: gopher/render/plaintext.asm
   1++6676              renderPlainTextScreen:
   2++6676 CD BF 63         call prepareScreen
   3++6679 06 16            ld b, PER_PAGE
   4++667B 3E FF            ld a, 255
   5++667D 32 94 88         ld (oldminutes), a
   6++6680              .loop
   7++6680 C5               push bc
   8++6681 3E 16            ld a, PER_PAGE
   9++6683 90               sub b
  10++6684 47               ld b,a
  11++6685 5F               ld e,a
  12++6686 48               ld c,b
  13++6687 06 00            ld b,0
  14++6689 2A 8E 73         ld hl, (page_offset)
  15++668C 09               add hl,bc
  16++668D 44 4D            ld bc,hl
  17++668F D5               push de
  18++6690 CD 85 63         call Render.findLine
  19++6693 D1               pop de
  20++6694 7C               ld a, h
  20++6695 B5             or l
  20++6696 CA A9 66       jp z, .exit
  21++6699 7B               ld a, e
  22++669A C6 02            add CURSOR_OFFSET
  22++669C 57 1E 01       ld d, a, e, 1
  22++669F CD 88 61       call TextMode.gotoXY
  23++66A2 CD 7D 62         call print70Text
  24++66A5 C1               pop bc
  25++66A6 10 D8            djnz .loop
  26++66A8 C9               ret
  27++66A9              .exit
  28++66A9 C1               pop bc
  29++66AA C9               ret
  30++66AB
  31++66AB              plainTextLoop:
  32++66AB CD 8D 88         call printRTC
  33++66AE CD 36 68         call Console.getC
  34++66B1
  35++66B1 FE 31            cp '1'
  35++66B3 CA 00 70       jp z, History.back
  36++66B6 FE 32            cp '2'
  36++66B8 CA C3 65       jp z, navigate
  37++66BB FE 35            cp '5'
  37++66BD CA 23 67       jp z, textUp
  38++66C0 FE 38            cp '8'
  38++66C2 CA 13 67       jp z, textDown
  39++66C5 FE 08            cp Console.KEY_LT
  39++66C7 CA 23 67       jp z, textUp
  40++66CA FE 09            cp Console.KEY_RT
  40++66CC CA 13 67       jp z, textDown
  41++66CF
  42++66CF FE 0A            cp Console.KEY_DN
  42++66D1 CA 13 67       jp z, textDown
  43++66D4 FE 61            cp 'a'
  43++66D6 CA 13 67       jp z, textDown
  44++66D9
  45++66D9 FE 0B            cp Console.KEY_UP
  45++66DB CA 23 67       jp z, textUp
  46++66DE FE 71            cp 'q'
  46++66E0 CA 23 67       jp z, textUp
  47++66E3
  48++66E3 FE 68            cp 'h'
  48++66E5 CA 6D 70       jp z, History.home
  49++66E8 FE 48            cp 'H'
  49++66EA CA 6D 70       jp z, History.home
  50++66ED
  51++66ED FE 62            cp 'b'
  51++66EF CA 00 70       jp z, History.back
  52++66F2 FE 42            cp 'B'
  52++66F4 CA 00 70       jp z, History.back
  53++66F7
  54++66F7 FE 64            cp 'd'
  54++66F9 CA D9 63       jp z, inputHost
  55++66FC FE 44            cp 'D'
  55++66FE CA D9 63       jp z, inputHost
  56++6701
  57++6701 FE 0C            cp Console.BACKSPACE
  57++6703 CA 00 70       jp z, History.back
  58++6706
  59++6706                  IFDEF MSX
  60++6706 ~                	cp ESC
  60++6706 ~              jp z, exit
  61++6706                  ENDIF
  62++6706
  63++6706                  IFDEF GS
  64++6706 ~                cp 'M'
  64++6706 ~              call z, GeneralSound.toggleModule
  65++6706 ~                cp 'm'
  65++6706 ~              call z, GeneralSound.toggleModule
  66++6706                  ENDIF
  67++6706
  68++6706                  IFDEF TIMEX80
  69++6706 FE 54            cp 'T'
  69++6708 CC A5 61       call z, TextMode.toggleColor
  70++670B FE 74            cp 't'
  70++670D CC A5 61       call z, TextMode.toggleColor
  71++6710                  ENDIF
  72++6710
  73++6710 C3 AB 66         jp plainTextLoop
  74++6713
  75++6713
  76++6713              textDown:
  77++6713 2A 8E 73         ld hl,(page_offset)
  78++6716 11 16 00         ld de,PER_PAGE
  79++6719 19               add hl,de
  80++671A 22 8E 73         ld (page_offset), hl
  81++671D CD 76 66         call renderPlainTextScreen
  82++6720 C3 AB 66         jp plainTextLoop
  83++6723
  84++6723              textUp:
  85++6723 3A 8E 73         ld a, (page_offset)
  85++6726 FE 00          cp 0
  85++6728 20 0A          jr nz, .textUp2
  86++672A 3A 8F 73         ld a, (page_offset + 1)
  86++672D FE 00          cp 0
  86++672F 20 03          jr nz, .textUp2
  87++6731 C3 AB 66         jp plainTextLoop
  88++6734
  89++6734              .textUp2:
  90++6734 2A 8E 73         ld hl,(page_offset)
  91++6737 11 16 00         ld de,PER_PAGE
  92++673A ED 52            sbc hl,de
  93++673C 22 8E 73         ld (page_offset), hl
  94++673F CD 76 66         call renderPlainTextScreen
  95++6742 C3 AB 66         jp plainTextLoop
  96++6745
# file closed: gopher/render/plaintext.asm
   9+ 6745
  10+ 6745 00           play_next       db  0
  11+ 6746              position        EQU historyBlock.position
  12+ 6746              cursor_position EQU position + 2
  13+ 6746              page_offset     EQU position + 4
  14+ 6746
  15+ 6746                  ENDMODULE
  16+ 6746
  17+ 6746                  include "dialogbox.asm"
# file opened: gopher/render/dialogbox.asm
   1++6746                  module DialogBox
   2++6746
   3++6746              inputBox:
   4++6746 AF               xor a
   4++6747 32 A1 67       ld (inputBuffer), a
   5++674A              .noclear
   6++674A CD 02 68         call drawBox
   7++674D              .loop
   8++674D 11 05 0B         ld de, #0B05
   8++6750 CD 88 61       call TextMode.gotoXY
   9++6753 21 A1 67         ld hl, inputBuffer
   9++6756 CD 83 60       call TextMode.printZ
  10++6759 3E B3            ld a, MIME_INPUT
  10++675B CD 8E 60       call TextMode.putC
  10++675E 3E 20          ld a, ' '
  10++6760 CD 8E 60       call TextMode.putC
  11++6763              .checkkey
  12++6763 CD 36 68         call Console.getC
  13++6766 FE 0C            cp Console.BACKSPACE
  13++6768 28 16          jr z, .removeChar
  14++676A FE 0D        	cp CR
  14++676C C8             ret z
  15++676D FE 20            cp SPACE
  15++676F 38 F2          jr c, .checkkey
  16++6771              .putC
  17++6771 5F               ld e, a
  18++6772 AF               xor a
  18++6773 21 A1 67 01    ld hl, inputBuffer, bc, #ff
  18++6777 FF 00
  18++6779 ED B1          cpir
  19++677B 77               ld (hl), a
  19++677C 2B             dec hl
  19++677D 73             ld (hl), e
  20++677E 18 CD            jr .loop
  21++6780              .removeChar
  22++6780 AF               xor a
  23++6781 21 A1 67 01      ld hl, inputBuffer, bc, #ff
  23++6785 FF 00
  23++6787 ED B1          cpir
  24++6789 E5               push hl
  25++678A 11 A2 67             ld de, inputBuffer + 1
  26++678D B7                   or a
  26++678E ED 52          sbc hl, de
  27++6790 7C                   ld a, h
  27++6791 B5             or l
  28++6792 E1               pop hl
  29++6793 28 B8            jr z, .loop
  30++6795 AF               xor a
  31++6796 2B               dec hl
  31++6797 2B             dec hl
  31++6798 77             ld (hl), a
  32++6799 18 B2            jr .loop
  33++679B
  34++679B              	IFNDEF MSX
  35++679B              delayinput:
  36++679B 06 32           ld b, 50
  37++679D              .loop2
  38++679D 76               halt
  39++679E 10 FD            djnz .loop2
  40++67A0 C9               ret
  41++67A1              namedownload
  42++67A1                  IFDEF NEDOOS
  43++67A1 ~            		db "..",92,"downloads",92
  44++67A1                  ENDIF
  45++67A1                  ENDIF
  46++67A1 00 00 00...  inputBuffer ds 80
  47++67F1
  48++67F1              msgBox:
  49++67F1 CD FA 67         call msgNoWait
  50++67F4 06 96            ld b, 150
  51++67F6              .loop
  52++67F6 76               halt
  53++67F7 10 FD            djnz .loop
  54++67F9 C9               ret
  55++67FA
  56++67FA              msgNoWait:
  57++67FA E5               push hl
  58++67FB CD 02 68         call drawBox
  59++67FE E1               pop hl
  60++67FF C3 83 60         jp TextMode.printZ
  61++6802
  62++6802              drawBox:
  63++6802 26 0A 3E B2      ld h, #0a, a, BORDER_TOP
  64++6806 CD 76 61         call TextMode.fillLine
  65++6809 26 0B 3E 20      ld h, #0b, a, ' '
  66++680D CD 76 61         call TextMode.fillLine
  67++6810 26 0C 3E B1      ld h, #0c, a, BORDER_BOTTOM
  68++6814 CD 76 61         call TextMode.fillLine
  69++6817 3E 0A            ld a, #0a
  70++6819 CD 61 60         call TextMode.highlightLine
  71++681C 3E 0C            ld a, #0c
  72++681E CD 61 60         call TextMode.highlightLine
  73++6821 11 03 0B         ld de,#0B03
  74++6824 CD 88 61         call TextMode.gotoXY
  75++6827 C9               ret
  76++6828                  endmodule
  77++6828
# file closed: gopher/render/dialogbox.asm
# file closed: gopher/render/index.asm
  31  6828                  include "dos/index.asm"
# file opened: dos/index.asm
   1+ 6828              	IFDEF NEDOOS
   2+ 6828 ~            	    include "nedoconsole.asm"
   3+ 6828 ~            		include "nedoos.asm"
   4+ 6828              	ENDIF
   5+ 6828
   6+ 6828              	IFDEF TRDOS
   7+ 6828                  	include "console.asm"
# file opened: dos/console.asm
   1++6828                  module Console
   2++6828              KEY_UP = 11
   3++6828              KEY_DN = 10
   4++6828              KEY_LT = 8
   5++6828              KEY_RT = 9
   6++6828              BACKSPACE = 12
   7++6828 00           keyCode db 0
   8++6829
   9++6829              BASIC_KEY = #5C08
  10++6829
  11++6829              waitForKeyUp:
  12++6829 76           	halt
  13++682A AF              xor a
  13++682B DB FE          in a, (#fe)
  13++682D 2F             cpl
  13++682E E6 1F          and 31
  13++6830 20 F7          jr nz, waitForKeyUp
  14++6832 32 08 5C        ld (BASIC_KEY), a
  15++6835 C9              ret
  16++6836
  17++6836              getC:
  18++6836 AF              xor a
  19++6837 32 08 5C        ld (BASIC_KEY),a
  20++683A              getC2:
  21++683A 3A 08 5C        ld a,(BASIC_KEY)
  22++683D A7              and a
  22++683E 28 FA          jr z, getC2
  23++6840 47              ld b,a
  24++6841 AF              xor a
  24++6842 32 08 5C       ld (BASIC_KEY), a
  25++6845 78              ld a, b
  26++6846 C9              ret
  27++6847
  28++6847              peekC:
  29++6847 AF               xor a
  29++6848 32 08 5C       ld (BASIC_KEY),a
  30++684B CD 4F 68         call inkey
  31++684E C9               ret
  32++684F
  33++684F              inkey:
  34++684F 11 00 00        ld de,0
  35++6852 01 FE FE        ld bc,$fefe
  36++6855 ED 78           in a,(c)
  37++6857 F6 E1           or $e1
  38++6859 FE FF           cp $ff
  39++685B 20 57           jr nz, .keyhitA
  40++685D
  41++685D 1E 05           ld e,5
  42++685F 06 FD           ld b,$fd
  43++6861 ED 78           in a,(c)
  44++6863 F6 E0           or $e0
  45++6865 FE FF           cp $ff
  46++6867 20 4B           jr nz, .keyhitA
  47++6869
  48++6869 1E 0A           ld e,10
  49++686B 06 FB           ld b,$fb
  50++686D ED 78           in a,(c)
  51++686F F6 E0           or $e0
  52++6871 FE FF           cp $ff
  53++6873 20 3F           jr nz, .keyhitA
  54++6875
  55++6875 1E 0F           ld e,15
  56++6877 06 F7           ld b,$f7
  57++6879 ED 78           in a,(c)
  58++687B F6 E0           or $e0
  59++687D FE FF           cp $ff
  60++687F 20 33           jr nz, .keyhitA
  61++6881
  62++6881 1E 14           ld e,20
  63++6883 06 EF           ld b,$ef
  64++6885 ED 78           in a,(c)
  65++6887 F6 E0           or $e0
  66++6889 FE FF           cp $ff
  67++688B 20 27           jr nz, .keyhitA
  68++688D
  69++688D 1E 19           ld e,25
  70++688F 06 DF           ld b,$df
  71++6891 ED 78           in a,(c)
  72++6893 F6 E0           or $e0
  73++6895 FE FF           cp $ff
  74++6897 20 1B           jr nz, .keyhitA
  75++6899
  76++6899 1E 1E           ld e,30
  77++689B 06 BF           ld b,$bf
  78++689D ED 78           in a,(c)
  79++689F F6 E0           or $e0
  80++68A1 FE FF           cp $ff
  81++68A3 20 0F           jr nz, .keyhitA
  82++68A5
  83++68A5 1E 23           ld e,35
  84++68A7 06 7F           ld b,$7f
  85++68A9 ED 78           in a,(c)
  86++68AB F6 E2           or $e2
  87++68AD FE FF           cp $ff
  88++68AF 4F              ld c,a
  89++68B0 20 19           jr nz, .keyhitB
  90++68B2
  91++68B2              .nokey
  92++68B2 AF              xor a
  93++68B3 C9              ret
  94++68B4
  95++68B4              .keyhitA
  96++68B4
  97++68B4 4F              ld c,a
  98++68B5
  99++68B5 78              ld a,b
 100++68B6 2F              cpl
 101++68B7 F6 81           or $81
 102++68B9 DB FE           in a,($fe)
 103++68BB F6 E0           or $e0
 104++68BD FE FF           cp $ff
 105++68BF 20 F1           jr nz, .nokey
 106++68C1
 107++68C1 3E 7F           ld a,$7f
 108++68C3 DB FE           in a,($fe)
 109++68C5 F6 E2           or $e2
 110++68C7 FE FF           cp $ff
 111++68C9 20 E7           jr nz, .nokey
 112++68CB
 113++68CB              .keyhitB
 114++68CB
 115++68CB 06 00           ld b,0
 116++68CD 21 14 68        ld hl,.rowtbl-$e0
 117++68D0 09              add hl,bc
 118++68D1 7E              ld a,(hl)
 119++68D2 FE 05           cp 5
 120++68D4 30 DC           jr nc, .nokey
 121++68D6 83              add a,e
 122++68D7 5F              ld e,a
 123++68D8
 124++68D8 21 14 69        ld hl,.table
 125++68DB 19              add hl,de
 126++68DC
 127++68DC 3E FE           ld a,$fe
 128++68DE DB FE           in a,($fe)
 129++68E0 E6 01           and $01
 130++68E2 20 03           jr nz, .nocaps
 131++68E4 1E 28           ld e,40
 132++68E6 19              add hl,de
 133++68E7
 134++68E7              .nocaps
 135++68E7
 136++68E7 3E 7F           ld a,$7f
 137++68E9 DB FE           in a,($fe)
 138++68EB E6 02           and $02
 139++68ED 20 03           jr nz, .nosym
 140++68EF 1E 50           ld e,80
 141++68F1 19              add hl,de
 142++68F2
 143++68F2              .nosym
 144++68F2
 145++68F2 7E              ld a,(hl)
 146++68F3 C9              ret
 147++68F4
 148++68F4              .rowtbl
 149++68F4 FF FF FF FF     defb 255,255,255,255,255,255,255
 149++68F8 FF FF FF
 150++68FB FF FF FF FF     defb 255,255,255,255,255,255,255,255
 150++68FF FF FF FF FF
 151++6903 04 FF FF FF     defb 4,255,255,255,255,255,255
 151++6907 FF FF FF
 152++690A FF 03 FF FF     defb 255,3,255,255,255,2,255,1
 152++690E FF 02 FF 01
 153++6912 00 FF           defb 0,255
 154++6914
 155++6914              .table
 156++6914 00 7A 78 63     db 0,'z','x','c','v'      ; CAPS SHIFT, Z, X, C, V
 156++6918 76
 157++6919 61 73 64 66     db 'a','s','d','f','g'      ; A, S, D, F, G
 157++691D 67
 158++691E 71 77 65 72     db 'q','w','e','r','t'      ; Q, W, E, R, T
 158++6922 74
 159++6923 31 32 33 34     db '1','2','3','4','5'      ; 1, 2, 3, 4, 5
 159++6927 35
 160++6928 30 39 38 37     db '0','9','8','7','6'      ; 0, 9, 8, 7, 6
 160++692C 36
 161++692D 70 6F 69 75     db 'p','o','i','u','y'      ; P, O, I, U, Y
 161++6931 79
 162++6932 0D 6C 6B 6A     db 13,'l','k','j','h'       ; ENTER, L, K, J, H
 162++6936 68
 163++6937 20 00 6D 6E     db ' ',0,'m','n','b'      ; SPACE, SYM SHIFT, M, N, B
 163++693B 62
 164++693C
 165++693C                 ; the following are CAPS SHIFTed
 166++693C
 167++693C 00 5A 58 43     db 0,'Z','X','C','V'      ; CAPS SHIFT, Z, X, C, V
 167++6940 56
 168++6941 41 53 44 46     db 'A','S','D','F','G'      ; A, S, D, F, G
 168++6945 47
 169++6946 51 57 45 52     db 'Q','W','E','R','T'      ; Q, W, E, R, T
 169++694A 54
 170++694B 07 06 80 81     db 7,6,128,129,8            ; 1, 2, 3, 4, 5
 170++694F 08
 171++6950 0C 00 09 0B     db 12,0,9,11,10             ; 0, 9, 8, 7, 6
 171++6954 0A
 172++6955 50 4F 49 55     db 'P','O','I','U','Y'      ; P, O, I, U, Y
 172++6959 59
 173++695A 0D 4C 4B 4A     db 13,'L','K','J','H'       ; ENTER, L, K, J, H
 173++695E 48
 174++695F 20 00 4D 4E     db ' ',0,'M','N','B'      ; SPACE, SYM SHIFT, M, N, B
 174++6963 42
 175++6964
 176++6964                 ; the following are SYM SHIFTed
 177++6964
 178++6964 00 3A 60 3F     db 0,':',96,'?','/'       ; CAPS SHIFT, Z, X, C, V
 178++6968 2F
 179++6969 7E 7C 5C 7B     db '~','|',92,'{','}'       ; A, S, D, F, G
 179++696D 7D
 180++696E 83 84 85 3C     db 131,132,133,'<','>'      ; Q, W, E, R, T
 180++6972 3E
 181++6973 21 40 23 24     db '!','@','#','$','%'      ; 1, 2, 3, 4, 5
 181++6977 25
 182++6978 5F 29 28 27     db '_',')','(',39,'&'       ; 0, 9, 8, 7, 6
 182++697C 26
 183++697D 22 3B 82 5D     db 34,';',130,']','['       ; P, O, I, U, Y
 183++6981 5B
 184++6982 0D 3D 2B 2D     db 13,'=','+','-','^'       ; ENTER, L, K, J, H
 184++6986 5E
 185++6987 20 00 2E 2C     db ' ',0,'.',',','*'      ; SPACE, SYM SHIFT, M, N, B
 185++698B 2A
 186++698C
 187++698C                 ; the following are CAPS SHIFTed and SYM SHIFTed ("CTRL" key)
 188++698C
 189++698C 00 1A 18 03     db 0,26,24,3,22           ; CAPS SHIFT, Z, X, C, V
 189++6990 16
 190++6991 01 13 04 06     db 1,19,4,6,7               ; A, S, D, F, G
 190++6995 07
 191++6996 11 17 05 12     db 17,23,5,18,20            ; Q, W, E, R, T
 191++699A 14
 192++699B 1B 1C 1D 1E     db 27,28,29,30,31           ; 1, 2, 3, 4, 5
 192++699F 1F
 193++69A0 7F 00 86 60     db 127,0,134,'`',135      ; 0, 9, 8, 7, 6
 193++69A4 87
 194++69A5 10 0F 09 15     db 16,15,9,21,25            ; P, O, I, U, Y
 194++69A9 19
 195++69AA 0D 0C 0B 0A     db 13,12,11,10,8            ; ENTER, L, K, J, H
 195++69AE 08
 196++69AF 20 00 0D 0E     db ' ',0,13,14,2          ; SPACE, SYM SHIFT, M, N, B
 196++69B3 02
 197++69B4
 198++69B4                  endmodule
# file closed: dos/console.asm
   8+ 69B4              		include "trdos.asm"
# file opened: dos/trdos.asm
   1++69B4              ;trdos driver (izzx)
   2++69B4                  MODULE Dos
   3++69B4              ; API methods
   4++69B4              ESX_GETSETDRV = #89
   5++69B4              ESX_FOPEN = #9A
   6++69B4              ESX_FCLOSE = #9B
   7++69B4              ESX_FSYNC = #9C
   8++69B4              ESX_FREAD = #9D
   9++69B4              ESX_FWRITE = #9E
  10++69B4
  11++69B4              ; File modes
  12++69B4              FMODE_READ = #01
  13++69B4              FMODE_WRITE = #06
  14++69B4              FMODE_CREATE = #0E
  15++69B4
  16++69B4                  ; MACRO esxCall func
  17++69B4                  ; rst #8 : db func
  18++69B4                  ; ENDM
  19++69B4
  20++69B4              ;id = 0 файл не открыт
  21++69B4              ;id = 1 файл для чтения
  22++69B4              ;id = 2 файл для записи
  23++69B4              ;id = 3 файл для записи тип TRD
  24++69B4              ;id = 4 файл для записи тип SCL
  25++69B4
  26++69B4              ; HL - filename in ASCIIZ
  27++69B4              loadBuffer:
  28++69B4 06 01            ld b, Dos.FMODE_READ
  28++69B6 CD D0 69       call Dos.fopen
  29++69B9 F5               push af
  30++69BA 21 08 95 01          ld hl, outputBuffer, bc, #ffff - outputBuffer
  30++69BE F7 6A
  30++69C0 CD BD 6A       call Dos.fread
  31++69C3 21 08 95             ld hl, outputBuffer
  31++69C6 09             add hl, bc
  31++69C7 AF             xor a
  31++69C8 77             ld (hl), a
  31++69C9 23             inc hl
  31++69CA 77             ld (hl), a
  32++69CB F1               pop af
  33++69CC CD A9 6A         call Dos.fclose
  34++69CF C9               ret
  35++69D0
  36++69D0
  37++69D0              ; Returns:
  38++69D0              ;  A - current drive
  39++69D0              ; getDefaultDrive: ;нигде не используется
  40++69D0                  ; ld a, 0 : esxCall ESX_GETSETDRV
  41++69D0                  ; ret
  42++69D0
  43++69D0
  44++69D0
  45++69D0              ; Opens file on default drive
  46++69D0              ; B - File mode
  47++69D0              ; HL - File name
  48++69D0              ; Returns:
  49++69D0              ;  A - file stream id
  50++69D0              fopen:
  51++69D0                  ; push bc : push hl
  52++69D0                  ; call getDefaultDrive
  53++69D0                  ; pop ix : pop bc
  54++69D0                  ; esxCall ESX_FOPEN
  55++69D0                  ; ret
  56++69D0 78           	ld a,b
  57++69D1 FE 01        	cp FMODE_READ ;если режим открытие файла
  58++69D3 28 06        	jr z,fopen_r
  59++69D5 FE 0E        	cp FMODE_CREATE
  60++69D7 28 39        	jr z,fopen_c ;если режим создание файла
  61++69D9 18 34        	jr fopen_err ;иначе выход
  62++69DB
  63++69DB              fopen_r	;открытие существующего файла на чтение (id=1)
  64++69DB CD 40 6E     			call format_name ;
  65++69DE 0E 13        			ld      c,#13 ;move file info to syst var
  66++69E0 CD 13 3D                 call    #3d13
  67++69E3 0E 0A                    ld      c,#0a ;find file
  68++69E5 CD 13 3D                 call    #3d13
  69++69E8 79                       ld      a,c
  70++69E9 FE FF        			cp 		#ff
  71++69EB 28 22        			jr 		z,fopen_err ;если не нашли файла
  72++69ED 0E 08                    ld      c,#08 ;read file title
  73++69EF CD 13 3D                 call    #3d13
  74++69F2                          ;ld      hl,loadadr ;куда
  75++69F2 ED 5B EB 5C              ld      de,(#5ceb) ;начало файла сектор дорожка
  76++69F6 ED 53 EC 6E              ld      (f_r_cur_trk),de
  77++69FA
  78++69FA 3A EA 5C                 ld      a,(#5cea)
  79++69FD 32 EE 6E                 ld      (f_r_len_sec),a ;длина в секторах
  80++6A00                          ;or      a
  81++6A00                          ;ret     z    ;выход если пустой
  82++6A00
  83++6A00 ED 5B E8 5C  			ld de,(#5CE8) ; длина файла или программной части для BASIC
  84++6A04 ED 53 EF 6E  			ld      (f_r_len),de
  85++6A08
  86++6A08                          ; ld      de,(fcurtrk) ;текущие сектор дорожка
  87++6A08                          ; ld      (#5cf4),de ;восстановим
  88++6A08 AF           			xor a
  89++6A09 3E 01        			ld 		a,1
  90++6A0B 32 F1 6E     			ld (f_r_flag),a ;флаг что файл для чтения открыт
  91++6A0E              			;id канала будет 1
  92++6A0E C9           	ret
  93++6A0F
  94++6A0F              fopen_err
  95++6A0F AF           	xor a ;если никакой файл не открыли, то id = 0
  96++6A10 37           	scf ;флаг ошибки
  97++6A11 C9           	ret
  98++6A12
  99++6A12
 100++6A12              fopen_c	;создание нового файла (id=2-4)
 101++6A12 CD 40 6E     	call format_name ;
 102++6A15              	;выясним, не образ ли это для разворачивания
 103++6A15 21 CF 6E         ld hl, trdExt1
 103++6A18 CD 27 62       call CompareBuff.search
 103++6A1B A7             and a
 103++6A1C 20 1D          jr nz, fopen_c_trd
 104++6A1E 21 D4 6E         ld hl, trdExt2
 104++6A21 CD 27 62       call CompareBuff.search
 104++6A24 A7             and a
 104++6A25 20 14          jr nz, fopen_c_trd
 105++6A27 21 D9 6E     	ld hl, sclExt1
 105++6A2A CD 27 62       call CompareBuff.search
 105++6A2D A7             and a
 105++6A2E 20 3A          jr nz, fopen_c_scl
 106++6A30 21 DE 6E         ld hl, sclExt2
 106++6A33 CD 27 62       call CompareBuff.search
 106++6A36 A7             and a
 106++6A37 20 31          jr nz, fopen_c_scl
 107++6A39
 108++6A39
 109++6A39              fopen_c_2	;создание произвольного файла
 110++6A39 18 D4        	jr 		fopen_err ;пока отключено
 111++6A3B
 112++6A3B              	; ld      c,#13 ;move file info to syst var
 113++6A3B                  ; call    #3d13
 114++6A3B              	; ld de,256 ;запишем пока 1 сектор
 115++6A3B              	; ld hl,#4000 ;возьмём случайные данные из экрана
 116++6A3B                  ; ld      c,#0b ;запись файла CODE
 117++6A3B                  ; call    #3d13
 118++6A3B                  ; ld      a,c
 119++6A3B              	; cp 		#ff
 120++6A3B              	; jr 		z,fopen_err ;если ошибка
 121++6A3B
 122++6A3B                  ; ld      de,(#5ceb) ;начало файла сектор дорожка
 123++6A3B                  ; ld      (f_w_cur_trk),de
 124++6A3B                  ; ld      a,(#5cea)
 125++6A3B                  ; ld      (f_w_len_sec),a ;длина в секторах
 126++6A3B              	; xor a ;id канала будет 2
 127++6A3B              	; ld a,2
 128++6A3B              	; ld (f_w_flag),a ;флаг что файл для записи открыт
 129++6A3B              	; ret
 130++6A3B
 131++6A3B
 132++6A3B
 133++6A3B
 134++6A3B
 135++6A3B              fopen_c_trd	;открытие файла для разворачивания образа trd (id=3)
 136++6A3B 3A 19 5D     	ld a,(#5D19) ;номер дисковода по умолчанию
 137++6A3E C6 41        	add a,"A"
 138++6A40 32 B5 6E     	ld (write_ima_d),a ;подставим букву в запросе
 139++6A43 21 A0 6E         ld hl, write_ima
 140++6A46 CD F1 67         call DialogBox.msgBox ;предуреждение
 141++6A49              WAITKEY_trd
 142++6A49 3A 04 5C     	ld 		a,(23556)
 143++6A4C FE FF        	cp 255
 144++6A4E 28 F9        	JR Z,WAITKEY_trd	;ждём любую клавишу
 145++6A50
 146++6A50 11 00 00     	ld      de,0 ;начало сектор дорожка
 147++6A53 ED 53 F4 5C      ld      (#5cf4),de
 148++6A57 AF           	xor a
 149++6A58 32 01 6F     	ld (sec_shift),a ;переменная
 150++6A5B 21 00 00     	ld hl,0
 151++6A5E 22 F6 6E     	ld (f_w_len+0),hl
 152++6A61 22 F8 6E     	ld (f_w_len+2),hl
 153++6A64 3E 03        	ld a,3 ;id канала
 154++6A66 32 F5 6E     	ld (f_w_flag),a ;флаг что trd для записи открыт
 155++6A69 C9           	ret
 156++6A6A
 157++6A6A
 158++6A6A
 159++6A6A
 160++6A6A              fopen_c_scl	;открытие файла для разворачивания образа scl (id=4)
 161++6A6A 3A 19 5D     	ld a,(#5D19) ;номер дисковода по умолчанию
 162++6A6D C6 41        	add a,"A"
 163++6A6F 32 B5 6E     	ld (write_ima_d),a ;подставим букву в запросе
 164++6A72 21 A0 6E         ld hl, write_ima
 165++6A75 CD F1 67         call DialogBox.msgBox ;предуреждение
 166++6A78              WAITKEY_scl
 167++6A78 3A 04 5C     	ld 		a,(23556)
 168++6A7B FE FF        	cp 255
 169++6A7D 28 F9        	JR Z,WAITKEY_scl	;ждём любую клавишу
 170++6A7F
 171++6A7F 11 00 00     	ld      de,0 ;начало сектор дорожка
 172++6A82 ED 53 F4 5C      ld      (#5cf4),de
 173++6A86
 174++6A86 21 00 48     	ld hl,cat_buf ;очистить место для каталога дискеты
 175++6A89 11 01 48     	ld de,cat_buf+1
 176++6A8C 36 00        	ld (hl),0
 177++6A8E 01 FF 08     	ld bc,9*256-1
 178++6A91 ED B0        	ldir
 179++6A93
 180++6A93 CD B5 6C     	call scl_parse ;запуск цикла сборки образа
 181++6A96
 182++6A96 AF           	xor a
 183++6A97 32 01 6F     	ld (sec_shift),a ;переменная
 184++6A9A              	;ld (scl_que),a
 185++6A9A 21 00 00     	ld hl,0
 186++6A9D 22 F6 6E     	ld (f_w_len+0),hl
 187++6AA0 22 F8 6E     	ld (f_w_len+2),hl
 188++6AA3 3E 04        	ld a,4 ;id канала
 189++6AA5 32 F5 6E     	ld (f_w_flag),a ;флаг что scl для записи открыт
 190++6AA8 C9           	ret
 191++6AA9
 192++6AA9
 193++6AA9
 194++6AA9              ; A - file stream id
 195++6AA9              fclose:
 196++6AA9                  ;esxCall ESX_FCLOSE
 197++6AA9              	; push af
 198++6AA9              ; WAITKEY2	XOR A:IN A,(#FE):CPL:AND #1F:JR Z,WAITKEY2
 199++6AA9              	; pop af
 200++6AA9 FE 04        	cp 4 ;если scl
 201++6AAB 20 08        	jr nz,fclose2
 202++6AAD 21 00 51     	ld hl,sec_buf ;
 203++6AB0 06 01        	ld b,1
 204++6AB2 CD 94 6C     	call scl_write_buf ;допишем остаток scl, если есть
 205++6AB5
 206++6AB5              fclose2
 207++6AB5 AF           	xor a ;как бы закрываем все файлы
 208++6AB6 32 F1 6E     	ld (f_r_flag),a
 209++6AB9 32 F5 6E     	ld (f_w_flag),a
 210++6ABC C9               ret
 211++6ABD
 212++6ABD
 213++6ABD
 214++6ABD
 215++6ABD              ; A - file stream id
 216++6ABD              ; BC - length
 217++6ABD              ; HL - buffer
 218++6ABD              ; Returns
 219++6ABD              ;  BC - length(how much was actually read)
 220++6ABD              fread: ;(id=1)
 221++6ABD                  ; push hl : pop ix
 222++6ABD                  ; esxCall ESX_FREAD
 223++6ABD              	; push af
 224++6ABD              	; ld a,4
 225++6ABD              	; out (254),a
 226++6ABD              ; WAITKEY	XOR A:IN A,(#FE):CPL:AND #1F:JR Z,WAITKEY
 227++6ABD              	; xor a
 228++6ABD              	; out (254),a
 229++6ABD              	; pop af
 230++6ABD
 231++6ABD FE 01        	cp 1 ;id = 1?
 232++6ABF 20 06        	jr nz,fread_no_chek ;выход если номер потока не = 1
 233++6AC1 3A F1 6E     	ld a,(f_r_flag)
 234++6AC4 B7           	or a
 235++6AC5 20 06        	jr nz,fread_chek ;файл уже открыт?
 236++6AC7              fread_no_chek ;выход с ошибкой
 237++6AC7 AF           	xor a
 238++6AC8 37           	scf ;флаг ошибки
 239++6AC9 01 00 00     	ld bc,0 ;ничего мы не считали
 240++6ACC C9           	ret
 241++6ACD
 242++6ACD              fread_chek
 243++6ACD ED 4B ED 6E  	ld bc,(f_r_len_sec-1) ;загружаем файл целиком, не смотря на то, сколько байт было запрошено
 244++6AD1 0E 05            ld      c,5 ;read читаем целыми секторами
 245++6AD3 ED 5B EC 6E  	ld de,(f_r_cur_trk)
 246++6AD7 CD 13 3D         call    #3d13
 247++6ADA ED 4B EF 6E  	ld bc,(f_r_len) ;возвратим сколько считали байт (длину файла)
 248++6ADE AF           	xor a ;флаги сбросим
 249++6ADF C9               ret
 250++6AE0
 251++6AE0              ; A - file stream id
 252++6AE0              ; BC - length
 253++6AE0              ; HL - buffer
 254++6AE0              ; Returns:
 255++6AE0              ;   BC - actually written bytes
 256++6AE0              fwrite: ;
 257++6AE0                  ; push hl : pop ix
 258++6AE0                  ; esxCall ESX_FWRITE
 259++6AE0
 260++6AE0              	; push af
 261++6AE0              	; ld a,2
 262++6AE0              	; out (254),a
 263++6AE0              ; WAITKEY1	XOR A:IN A,(#FE):CPL:AND #1F:JR Z,WAITKEY1
 264++6AE0              	; xor a
 265++6AE0              	; out (254),a
 266++6AE0              	; pop af
 267++6AE0
 268++6AE0 FE 02        	cp 2 ;id = 2?
 269++6AE2 28 0F        	jr z,fwrite_chek ;проверка id потока
 270++6AE4 FE 03        	cp 3 ;id = 3?
 271++6AE6 28 0D        	jr z,fwrite_chek_trd ;проверка id потока
 272++6AE8 FE 04        	cp 4 ;id = 4?
 273++6AEA CA CF 6B     	jp z,fwrite_chek_scl ;проверка id потока
 274++6AED
 275++6AED
 276++6AED              fwrite_no_chek ;выход с ошибкой
 277++6AED AF           	xor a
 278++6AEE 37           	scf ;флаг ошибки
 279++6AEF 01 00 00     	ld bc,0 ;ничего мы не записали
 280++6AF2 C9           	ret
 281++6AF3
 282++6AF3              fwrite_chek ;запись произвольного типа файла
 283++6AF3 18 F8        	jr fwrite_no_chek ;пока отключено
 284++6AF5              	; ld a,(f_w_flag)
 285++6AF5              	; or a
 286++6AF5              	; jr z,fwrite_no_chek ;файл уже открыт?
 287++6AF5              	; ld (temp_bc),bc
 288++6AF5              	; ;ld bc,(f_r_len_sec-1) ;
 289++6AF5                  ; ld      c,6 ;пишем целыми секторами
 290++6AF5              	; ld de,(f_w_cur_trk)
 291++6AF5                  ; call    #3d13
 292++6AF5              	; ld bc,(temp_bc) ;возвратим, что сколько запрашивали, столько и считали байт
 293++6AF5              	; xor a ;флаги сбросим
 294++6AF5                  ; ret
 295++6AF5
 296++6AF5
 297++6AF5
 298++6AF5
 299++6AF5
 300++6AF5              fwrite_chek_trd ;запись trd файла (разворачивание образа)
 301++6AF5              	; ld a,2
 302++6AF5              	; out (254),a
 303++6AF5              ; WAITKEY_t	XOR A:IN A,(#FE):CPL:AND #1F:JR Z,WAITKEY_t
 304++6AF5              	; xor a
 305++6AF5              	; out (254),a
 306++6AF5 3A F5 6E     	ld a,(f_w_flag)
 307++6AF8 B7           	or a
 308++6AF9 28 F2        	jr z,fwrite_no_chek ;файл уже открыт?
 309++6AFB ED 43 FB 6E  	ld (temp_bc),bc ;длина
 310++6AFF 22 FD 6E     	ld (temp_hl),hl ;адрес данных
 311++6B02 78           	ld a,b
 312++6B03 B1           	or c
 313++6B04 28 E7        	jr z,fwrite_no_chek ; если длина 0, то выход
 314++6B06
 315++6B06              	; ld a,b
 316++6B06              	; or a
 317++6B06              	; jr nz,testt1
 318++6B06              	; nop
 319++6B06
 320++6B06              ; testt1
 321++6B06
 322++6B06 AF           	xor a
 323++6B07 32 03 6F     	ld (sec_part),a ;обнулить переменные
 324++6B0A 32 02 6F     	ld (sec_shift2),a
 325++6B0D 32 03 6F     	ld (sec_shift2+1),a
 326++6B10 32 04 6F     	ld (sec_shift_flag),a
 327++6B13 32 FA 6E     	ld (write_end_flag),a ;
 328++6B16
 329++6B16
 330++6B16 3A 01 6F     	ld a,(sec_shift)
 331++6B19 B7           	or a
 332++6B1A 28 43        	jr z,fwrite_trd3 ;если смещения нет, то первую часть пропустим
 333++6B1C
 334++6B1C
 335++6B1C 4F           	ld c,a
 336++6B1D 06 00        	ld b,0
 337++6B1F 2A FB 6E     	ld hl,(temp_bc) ;проверка заполнится ли целый сектор
 338++6B22 09           	add hl,bc
 339++6B23
 340++6B23 3E 01        	ld a,1
 341++6B25 32 FA 6E     	ld (write_end_flag),a ;флаг что не нужно дописывать остаток
 342++6B28
 343++6B28 7C           	ld a,h
 344++6B29 B7           	or a
 345++6B2A 20 05        	jr nz,fwrite_trd4
 346++6B2C 3E 01        	ld a,1
 347++6B2E 32 04 6F     	ld (sec_shift_flag),a ;флаг что не заполнен сектор
 348++6B31
 349++6B31              fwrite_trd4
 350++6B31 21 00 51     	ld hl,sec_buf ;буфер последнего сектора
 351++6B34 09           	add hl,bc ;на этой точке остановились
 352++6B35 EB           	ex de,hl
 353++6B36 2A FD 6E     	ld hl,(temp_hl) ;присоединим начало данных в конец предыдущих
 354++6B39              	; ld a,c
 355++6B39              	; or a
 356++6B39              	; jr nz,fwrite_trd2
 357++6B39              	; inc b ;коррекция
 358++6B39              ; fwrite_trd2
 359++6B39              	; ld c,a
 360++6B39 AF           	xor a
 361++6B3A 91           	sub c
 362++6B3B 4F           	ld c,a ;сколько осталось перенести до заполнения сектора
 363++6B3C ED 43 02 6F  	ld (sec_shift2),bc ;сохраним сколько добавили байт
 364++6B40 ED B0        	ldir
 365++6B42
 366++6B42 3A 04 6F     	ld a,(sec_shift_flag)
 367++6B45 B7           	or a
 368++6B46 20 17        	jr nz,fwrite_trd3 ;если сектор ещё не заполнен писать не будем
 369++6B48
 370++6B48 21 00 51     	ld hl,sec_buf
 371++6B4B ED 5B F4 5C  	ld de,(#5cf4)
 372++6B4F              	;ld (f_w_cur_trk),de	;запомним позицию
 373++6B4F 01 06 01         ld      bc,#0106 ;пишем 1 сектор из буфера
 374++6B52 CD 13 3D         call    #3d13
 375++6B55 79           	ld a,c
 376++6B56 FE FF        	cp 255
 377++6B58 CA ED 6A     	jp z,fwrite_no_chek ;выход если ошибка
 378++6B5B
 379++6B5B AF           	xor a
 380++6B5C 32 FA 6E     	ld (write_end_flag),a ;флаг что нужно дописывать остаток
 381++6B5F              	; ld de,(f_w_cur_trk) ;если сектор ещё не заполнен, останемся на старой позиции
 382++6B5F              	; ld (#5cf4),de
 383++6B5F              	; ld b,1 ;на сектор вперёд
 384++6B5F              	; ld de,(f_w_cur_trk)
 385++6B5F              	; call calc_next_pos
 386++6B5F              	; ld (f_w_cur_trk),de
 387++6B5F
 388++6B5F              fwrite_trd3
 389++6B5F 2A FD 6E     	ld hl,(temp_hl) ;запишем остаток данных
 390++6B62              	;ld a,(sec_shift)
 391++6B62              	;ld c,a
 392++6B62              	;ld b,0
 393++6B62 ED 4B 02 6F  	ld bc,(sec_shift2)
 394++6B66 09           	add hl,bc ;с этой точки пишем
 395++6B67 22 FF 6E     	ld (temp_hl2),hl ;сохраним начало записи второго сектора
 396++6B6A
 397++6B6A 2A FB 6E     	ld hl,(temp_bc) ;вычисление на чём остановимся в этот раз
 398++6B6D A7           	and a
 399++6B6E ED 42        	sbc hl,bc ;вычтем то, что добавили к первому сектору
 400++6B70 4D           	ld c,l
 401++6B71 44           	ld b,h
 402++6B72 30 02        	jr nc,fwrite_trd5
 403++6B74 06 00        	ld b,0 ;коррекция если вышел минус
 404++6B76              fwrite_trd5
 405++6B76 2A FD 6E     	ld hl,(temp_hl)
 406++6B79 09           	add hl,bc
 407++6B7A
 408++6B7A 11 08 95     	ld de,outputBuffer
 409++6B7D A7           	and a
 410++6B7E ED 52        	sbc hl,de
 411++6B80
 412++6B80 7D           	ld a,l
 413++6B81 32 01 6F     	ld (sec_shift),a ;смещение на следующий раз
 414++6B84              	;ld hl,(temp_hl)
 415++6B84
 416++6B84
 417++6B84              	; or a
 418++6B84              	; jr z,fwrite_trd1
 419++6B84              	; inc b  ;коррекция количества секторов
 420++6B84
 421++6B84 78           	ld a,b ;нужна проверка на количество секторов!!!
 422++6B85 32 03 6F     	ld (sec_part),a ;запомним сколько секторов во второй части
 423++6B88
 424++6B88              	;ld a,b
 425++6B88 B7           	or a
 426++6B89 28 16        	jr z,fwrite_trd1 ;если размер данных меньше сектора, то пропустим запись
 427++6B8B
 428++6B8B 2A FF 6E     	ld hl,(temp_hl2)
 429++6B8E              	;push bc
 430++6B8E ED 5B F4 5C  	ld de,(#5cf4)
 431++6B92 0E 06            ld      c,6 ;пишем целыми секторами
 432++6B94 CD 13 3D         call    #3d13
 433++6B97 79           	ld a,c
 434++6B98              	;pop bc
 435++6B98 FE FF        	cp 255
 436++6B9A CA ED 6A     	jp z,fwrite_no_chek ;выход если ошибка
 437++6B9D              	; ld de,(f_w_cur_trk)
 438++6B9D              	; call calc_next_pos
 439++6B9D              	; ld (f_w_cur_trk),de
 440++6B9D
 441++6B9D AF           	xor a
 442++6B9E 32 FA 6E     	ld (write_end_flag),a ;флаг что нужно дописывать остаток
 443++6BA1
 444++6BA1              fwrite_trd1
 445++6BA1 3A FA 6E     	ld a,(write_end_flag) ;нужно записывать остаток?
 446++6BA4 B7           	or a
 447++6BA5 20 12        	jr nz,fwrite_trd_ex ;не нужно
 448++6BA7
 449++6BA7 2A FF 6E     	ld hl,(temp_hl2) ;сохраним незаписанный остаток
 450++6BAA 3A 03 6F     	ld a,(sec_part)
 451++6BAD 47           	ld b,a
 452++6BAE 0E 00        	ld c,0
 453++6BB0 09           	add hl,bc
 454++6BB1 11 00 51     	ld de,sec_buf
 455++6BB4 01 00 01     	ld bc,256
 456++6BB7 ED B0        	ldir
 457++6BB9              ;fwrite_trd2
 458++6BB9
 459++6BB9
 460++6BB9              fwrite_trd_ex
 461++6BB9 ED 4B FB 6E  	ld bc,(temp_bc) ;возвратим, что сколько запрашивали, столько и записали байт
 462++6BBD              	;посчитаем общую длину записанного
 463++6BBD 2A F6 6E     	ld hl,(f_w_len)
 464++6BC0 09           	add hl,bc
 465++6BC1 22 F6 6E     	ld (f_w_len),hl
 466++6BC4 30 07        	jr nc,fwrite_trd_ex1
 467++6BC6 2A F8 6E     	ld hl,(f_w_len+2)
 468++6BC9 23           	inc hl
 469++6BCA 22 F8 6E     	ld (f_w_len+2),hl
 470++6BCD
 471++6BCD              fwrite_trd_ex1
 472++6BCD AF           	xor a ;флаги сбросим
 473++6BCE C9               ret
 474++6BCF
 475++6BCF
 476++6BCF
 477++6BCF
 478++6BCF
 479++6BCF              ;------------------scl----------------------
 480++6BCF              fwrite_chek_scl ;запись scl файла (разворачивание образа)
 481++6BCF              	; ld a,2
 482++6BCF              	; out (254),a
 483++6BCF              ; WAITKEY_t	XOR A:IN A,(#FE):CPL:AND #1F:JR Z,WAITKEY_t
 484++6BCF              	; xor a
 485++6BCF              	; out (254),a
 486++6BCF 3A F5 6E     	ld a,(f_w_flag)
 487++6BD2 B7           	or a
 488++6BD3 CA ED 6A     	jp z,fwrite_no_chek ;файл уже открыт?
 489++6BD6 ED 43 FB 6E  	ld (temp_bc),bc ;длина
 490++6BDA 22 FD 6E     	ld (temp_hl),hl ;адрес данных
 491++6BDD 78           	ld a,b
 492++6BDE B1           	or c
 493++6BDF CA ED 6A     	jp z,fwrite_no_chek ; если длина 0, то выход
 494++6BE2
 495++6BE2              	; ld a,b
 496++6BE2              	; or a
 497++6BE2              	; jr nz,testt1
 498++6BE2              	; nop
 499++6BE2
 500++6BE2              ; testt1
 501++6BE2
 502++6BE2 AF           	xor a
 503++6BE3 32 03 6F     	ld (sec_part),a ;обнулить переменные
 504++6BE6 32 02 6F     	ld (sec_shift2),a
 505++6BE9 32 03 6F     	ld (sec_shift2+1),a
 506++6BEC 32 04 6F     	ld (sec_shift_flag),a
 507++6BEF 32 FA 6E     	ld (write_end_flag),a ;
 508++6BF2
 509++6BF2
 510++6BF2 3A 01 6F     	ld a,(sec_shift)
 511++6BF5 B7           	or a
 512++6BF6 28 38        	jr z,fwrite_scl3 ;если смещения нет, то первую часть пропустим
 513++6BF8
 514++6BF8
 515++6BF8 4F           	ld c,a
 516++6BF9 06 00        	ld b,0
 517++6BFB 2A FB 6E     	ld hl,(temp_bc) ;проверка заполнится ли целый сектор
 518++6BFE 09           	add hl,bc
 519++6BFF
 520++6BFF 3E 01        	ld a,1
 521++6C01 32 FA 6E     	ld (write_end_flag),a ;флаг что не нужно дописывать остаток
 522++6C04
 523++6C04 7C           	ld a,h
 524++6C05 B7           	or a
 525++6C06 20 05        	jr nz,fwrite_scl4
 526++6C08 3E 01        	ld a,1
 527++6C0A 32 04 6F     	ld (sec_shift_flag),a ;флаг что не заполнен сектор
 528++6C0D
 529++6C0D              fwrite_scl4
 530++6C0D 21 00 51     	ld hl,sec_buf ;буфер последнего сектора
 531++6C10 09           	add hl,bc ;на этой точке остановились
 532++6C11 EB           	ex de,hl
 533++6C12 2A FD 6E     	ld hl,(temp_hl) ;присоединим начало данных в конец предыдущих
 534++6C15              	; ld a,c
 535++6C15              	; or a
 536++6C15              	; jr nz,fwrite_scl2
 537++6C15              	; inc b ;коррекция
 538++6C15              ; fwrite_scl2
 539++6C15              	; ld c,a
 540++6C15 AF           	xor a
 541++6C16 91           	sub c
 542++6C17 4F           	ld c,a ;сколько осталось перенести до заполнения сектора
 543++6C18 ED 43 02 6F  	ld (sec_shift2),bc ;сохраним сколько добавили байт
 544++6C1C ED B0        	ldir
 545++6C1E
 546++6C1E 3A 04 6F     	ld a,(sec_shift_flag)
 547++6C21 B7           	or a
 548++6C22 20 0C        	jr nz,fwrite_scl3 ;если сектор ещё не заполнен писать не будем
 549++6C24
 550++6C24 21 00 51     	ld hl,sec_buf
 551++6C27              	;ld de,(#5cf4)
 552++6C27              	;ld (f_w_cur_trk),de	;запомним позицию
 553++6C27 06 01            ld      b,#01 ;пишем 1 сектор из буфера
 554++6C29 CD 94 6C         call    scl_write_buf
 555++6C2C              	; ld a,c
 556++6C2C              	; cp 255
 557++6C2C              	; jp z,fwrite_no_chek ;выход если ошибка
 558++6C2C
 559++6C2C AF           	xor a
 560++6C2D 32 FA 6E     	ld (write_end_flag),a ;флаг что нужно дописывать остаток
 561++6C30              	; ld de,(f_w_cur_trk) ;если сектор ещё не заполнен, останемся на старой позиции
 562++6C30              	; ld (#5cf4),de
 563++6C30              	; ld b,1 ;на сектор вперёд
 564++6C30              	; ld de,(f_w_cur_trk)
 565++6C30              	; call calc_next_pos
 566++6C30              	; ld (f_w_cur_trk),de
 567++6C30
 568++6C30              fwrite_scl3
 569++6C30 2A FD 6E     	ld hl,(temp_hl) ;запишем остаток данных
 570++6C33              	;ld a,(sec_shift)
 571++6C33              	;ld c,a
 572++6C33              	;ld b,0
 573++6C33 ED 4B 02 6F  	ld bc,(sec_shift2)
 574++6C37 09           	add hl,bc ;с этой точки пишем
 575++6C38 22 FF 6E     	ld (temp_hl2),hl ;сохраним начало записи второго сектора
 576++6C3B
 577++6C3B 2A FB 6E     	ld hl,(temp_bc) ;вычисление на чём остановимся в этот раз
 578++6C3E A7           	and a
 579++6C3F ED 42        	sbc hl,bc ;вычтем то, что добавили к первому сектору
 580++6C41 4D           	ld c,l
 581++6C42 44           	ld b,h
 582++6C43 30 02        	jr nc,fwrite_scl5
 583++6C45 06 00        	ld b,0 ;коррекция если вышел минус
 584++6C47              fwrite_scl5
 585++6C47 2A FD 6E     	ld hl,(temp_hl)
 586++6C4A 09           	add hl,bc
 587++6C4B
 588++6C4B 11 08 95     	ld de,outputBuffer
 589++6C4E A7           	and a
 590++6C4F ED 52        	sbc hl,de
 591++6C51
 592++6C51 7D           	ld a,l
 593++6C52 32 01 6F     	ld (sec_shift),a ;смещение на следующий раз
 594++6C55              	;ld hl,(temp_hl)
 595++6C55
 596++6C55
 597++6C55              	; or a
 598++6C55              	; jr z,fwrite_scl1
 599++6C55              	; inc b  ;коррекция количества секторов
 600++6C55
 601++6C55 78           	ld a,b ;нужна проверка на количество секторов!!!
 602++6C56 32 03 6F     	ld (sec_part),a ;запомним сколько секторов во второй части
 603++6C59
 604++6C59              	;ld a,b
 605++6C59 B7           	or a
 606++6C5A 28 0A        	jr z,fwrite_scl1 ;если размер данных меньше сектора, то пропустим запись
 607++6C5C
 608++6C5C 2A FF 6E     	ld hl,(temp_hl2)
 609++6C5F              	;push bc
 610++6C5F              	;ld de,(#5cf4)
 611++6C5F                  ;ld      c,6 ;пишем целыми секторами
 612++6C5F CD 94 6C         call    scl_write_buf
 613++6C62              	;ld a,c
 614++6C62              	;pop bc
 615++6C62              	; cp 255
 616++6C62              	; jp z,fwrite_no_chek ;выход если ошибка
 617++6C62              	; ld de,(f_w_cur_trk)
 618++6C62              	; call calc_next_pos
 619++6C62              	; ld (f_w_cur_trk),de
 620++6C62
 621++6C62 AF           	xor a
 622++6C63 32 FA 6E     	ld (write_end_flag),a ;флаг что нужно дописывать остаток
 623++6C66
 624++6C66              fwrite_scl1
 625++6C66 3A FA 6E     	ld a,(write_end_flag) ;нужно записывать остаток?
 626++6C69 B7           	or a
 627++6C6A 20 12        	jr nz,fwrite_scl_ex ;не нужно
 628++6C6C
 629++6C6C 2A FF 6E     	ld hl,(temp_hl2) ;сохраним незаписанный остаток
 630++6C6F 3A 03 6F     	ld a,(sec_part)
 631++6C72 47           	ld b,a
 632++6C73 0E 00        	ld c,0
 633++6C75 09           	add hl,bc
 634++6C76 11 00 51     	ld de,sec_buf
 635++6C79 01 00 01     	ld bc,256
 636++6C7C ED B0        	ldir
 637++6C7E              ;fwrite_scl2
 638++6C7E
 639++6C7E
 640++6C7E              fwrite_scl_ex
 641++6C7E ED 4B FB 6E  	ld bc,(temp_bc) ;возвратим, что сколько запрашивали, столько и записали байт
 642++6C82              	;посчитаем общую длину записанного
 643++6C82 2A F6 6E     	ld hl,(f_w_len)
 644++6C85 09           	add hl,bc
 645++6C86 22 F6 6E     	ld (f_w_len),hl
 646++6C89 30 07        	jr nc,fwrite_scl_ex1
 647++6C8B 2A F8 6E     	ld hl,(f_w_len+2)
 648++6C8E 23           	inc hl
 649++6C8F 22 F8 6E     	ld (f_w_len+2),hl
 650++6C92
 651++6C92              fwrite_scl_ex1
 652++6C92 AF           	xor a ;флаги сбросим
 653++6C93 C9               ret
 654++6C94
 655++6C94
 656++6C94
 657++6C94
 658++6C94
 659++6C94
 660++6C94              scl_write_buf ;заполнение промежуточного буфера
 661++6C94 C5           	push bc ;сколько пакетов указано в b
 662++6C95 11 00 53     	ld de,scl_buf ;перенесём сектор во временный буфер
 663++6C98 01 00 01     	ld bc,256
 664++6C9B ED B0        	ldir
 665++6C9D 22 25 6F     	ld (scl_temp_hl2),hl ;сохраним адрес данных
 666++6CA0 3A 0D 6F     	ld a,(scl_que) ;проверим флаг что нужны данные
 667++6CA3 B7           	or a
 668++6CA4 28 08        	jr z,scl_write_buf_ret ;не будем вызывать парсер если не нужны
 669++6CA6 21 AE 6C     	ld hl,scl_write_buf_ret ;адрес возврата
 670++6CA9 E5           	push hl
 671++6CAA 2A 1F 6F     	ld hl,(scl_parse_ret_adr) ;адрес для продолжения основного цикла сборки
 672++6CAD E9           	jp (hl) ;отдадим пакет 256 байт парсеру
 673++6CAE              scl_write_buf_ret
 674++6CAE 2A 25 6F     	ld hl,(scl_temp_hl2)
 675++6CB1 C1           	pop bc
 676++6CB2 10 E0        	djnz scl_write_buf
 677++6CB4
 678++6CB4 C9           	ret
 679++6CB5
 680++6CB5
 681++6CB5
 682++6CB5              scl_parse ;разбор образа scl в trd, основной цикл
 683++6CB5              	;получить первый сектор
 684++6CB5              ;запрос порции данных по 256 байт
 685++6CB5 22 23 6F     	ld (scl_temp_hl),hl
 686++6CB8 ED 53 27 6F  	ld (scl_temp_de),de
 687++6CBC ED 43 29 6F  	ld (scl_temp_bc),bc
 688++6CC0 3E 01        	ld a,1
 689++6CC2 32 0D 6F     	ld (scl_que),a ;включим флаг что нужны данные
 690++6CC5 21 CC 6C     	ld hl,scl_parse_ret ;сохраним адрес возврата
 691++6CC8 22 1F 6F     	ld (scl_parse_ret_adr),hl
 692++6CCB C9           	ret ;вернёмся для ожидания данных
 693++6CCC              scl_parse_ret
 694++6CCC AF           	xor a
 695++6CCD 32 0D 6F     	ld (scl_que),a
 696++6CD0 2A 23 6F     	ld hl,(scl_temp_hl)
 697++6CD3 ED 5B 27 6F  	ld de,(scl_temp_de)
 698++6CD7 ED 4B 29 6F  	ld bc,(scl_temp_bc)
 699++6CDB
 700++6CDB 11 00 53     	ld de,scl_buf ;проверка метки образа
 701++6CDE 21 05 6F     	ld hl,scl_sign
 702++6CE1 06 08        	ld b,8
 703++6CE3              scl_parse_chk
 704++6CE3 1A           	ld a,(de)
 705++6CE4 BE           	cp (hl)
 706++6CE5 20 06        	jr nz,scl_parse_chk_no
 707++6CE7 23           	inc hl
 708++6CE8 13           	inc de
 709++6CE9 10 F8        	djnz scl_parse_chk
 710++6CEB 18 10        	jr scl_parse_chk_ok
 711++6CED              scl_parse_chk_no ;если не совпало, значит плохой образ
 712++6CED 21 0E 6F         ld hl, scl_err
 713++6CF0 CD F1 67         call DialogBox.msgBox ;предуреждение
 714++6CF3 AF           	xor a
 715++6CF4 32 0D 6F     	ld (scl_que),a ;выключим флаг что нужны данные
 716++6CF7 3E 04        	ld a,4 ;закроем файл
 717++6CF9 CD A9 6A     	call fclose
 718++6CFC C9           	ret
 719++6CFD              scl_parse_chk_ok ;сигнатура правильная
 720++6CFD
 721++6CFD              ;формирование каталога
 722++6CFD 3A 08 53     	ld a,(scl_buf+8)
 723++6D00 32 22 6F     	ld (scl_files),a ;всего файлов
 724++6D03 32 21 6F     	ld (scl_cat_cycl),a ;цикл
 725++6D06 21 09 53     	ld hl,scl_buf+9 ;адрес первого заголовка
 726++6D09 11 00 48     	ld de,cat_buf ;адрес формируемого каталога trd
 727++6D0C              scl_parse_cat2
 728++6D0C 06 0E        	ld b,14 ;14 байт одна запись
 729++6D0E              scl_parse_cat
 730++6D0E 7E           	ld a,(hl)
 731++6D0F 12           	ld (de),a
 732++6D10 13           	inc de
 733++6D11 2C           	inc l ;адрес увеличиваем только в пределах младшего регистра
 734++6D12 20 26        	jr nz,scl_parse_cat1
 735++6D14              	;тут пора запросить следующий сектор
 736++6D14              ;запрос порции данных по 256 байт
 737++6D14 22 23 6F     	ld (scl_temp_hl),hl
 738++6D17 ED 53 27 6F  	ld (scl_temp_de),de
 739++6D1B ED 43 29 6F  	ld (scl_temp_bc),bc
 740++6D1F 3E 01        	ld a,1
 741++6D21 32 0D 6F     	ld (scl_que),a ;включим флаг что нужны данные
 742++6D24 21 2B 6D     	ld hl,scl_parse_ret1 ;сохраним адрес возврата
 743++6D27 22 1F 6F     	ld (scl_parse_ret_adr),hl
 744++6D2A C9           	ret ;вернёмся для ожидания данных
 745++6D2B              scl_parse_ret1
 746++6D2B AF           	xor a
 747++6D2C 32 0D 6F     	ld (scl_que),a
 748++6D2F 2A 23 6F     	ld hl,(scl_temp_hl)
 749++6D32 ED 5B 27 6F  	ld de,(scl_temp_de)
 750++6D36 ED 4B 29 6F  	ld bc,(scl_temp_bc)
 751++6D3A
 752++6D3A              scl_parse_cat1
 753++6D3A 10 D2        	djnz scl_parse_cat
 754++6D3C 13           	inc de
 755++6D3D 13           	inc de
 756++6D3E 3A 21 6F     	ld a,(scl_cat_cycl)
 757++6D41 3D           	dec a
 758++6D42 32 21 6F     	ld (scl_cat_cycl),a
 759++6D45 20 C5        	jr nz,scl_parse_cat2
 760++6D47
 761++6D47 22 23 6F     	ld (scl_temp_hl),hl ;запомнить где остановились
 762++6D4A
 763++6D4A              ;подсчёт секторов и дорожек
 764++6D4A DD E5        	push ix
 765++6D4C 3A 22 6F     	ld a,(scl_files)
 766++6D4F 11 00 01     	ld de,#0100 ;данные с первой дорожки
 767++6D52 DD 21 00 48  	ld ix,cat_buf
 768++6D56 DD 73 0E     	ld (ix+14),e
 769++6D59 DD 72 0F     	ld (ix+15),d
 770++6D5C 21 00 00     	ld hl,0 ;общее количество секторов
 771++6D5F              scl_cacl
 772++6D5F 32 21 6F     	ld (scl_cat_cycl),a ;цикл
 773++6D62 DD 7E 0D     	ld a,(ix+13) ;длина файла в секторах
 774++6D65 4F           	ld c,a
 775++6D66 06 00        	ld b,0
 776++6D68 09           	add hl,bc ;секторов
 777++6D69
 778++6D69 01 10 00     	ld bc,16
 779++6D6C DD 09        	add ix,bc
 780++6D6E 47           	ld b,a
 781++6D6F CD 94 6E     	call calc_next_pos
 782++6D72 3A 21 6F     	ld a,(scl_cat_cycl)
 783++6D75 FE 01        	cp 1
 784++6D77 28 06        	jr z,scl_cacl2 ;в последний раз пропусим
 785++6D79 DD 73 0E     	ld (ix+14),e
 786++6D7C DD 72 0F     	ld (ix+15),d
 787++6D7F              scl_cacl2
 788++6D7F 3D           	dec a
 789++6D80 20 DD        	jr nz,scl_cacl
 790++6D82              	;теперь узнаем первый свободный сектор
 791++6D82 DD 7E 0D     	ld a,(ix+13) ;длина файла в секторах
 792++6D85 4F           	ld c,a
 793++6D86 06 00        	ld b,0
 794++6D88 09           	add hl,bc
 795++6D89              	; ld b,a
 796++6D89              	; call calc_next_pos
 797++6D89 ED 53 E1 50  	ld (cat_buf+8*256+#e1),de ;Первый свободный сектор и дорожка на дискете
 798++6D8D 11 F0 09     	ld de,16*159
 799++6D90 EB           	ex de,hl
 800++6D91 A7           	and a
 801++6D92 ED 52        	sbc hl,de
 802++6D94 22 E5 50     	ld (cat_buf+8*256+#e5),hl ;Число свободных секторов на диске
 803++6D97 DD E1        	pop ix
 804++6D99
 805++6D99
 806++6D99
 807++6D99              ;запись содержимого файлов
 808++6D99 3A 22 6F     	ld a,(scl_files) ;всего файлов
 809++6D9C 32 21 6F     	ld (scl_cat_cycl),a ;цикл
 810++6D9F 21 0D 48     	ld hl,cat_buf+13 ;адрес размер секторов файла
 811++6DA2 22 2B 6F     	ld (cat_cur_adr),hl
 812++6DA5
 813++6DA5 21 00 01     	ld hl,#0100 ;начиная с первой дорожки
 814++6DA8 22 F4 5C     	ld (#5cf4),hl
 815++6DAB              scl_parse_file2
 816++6DAB 2A 23 6F     	ld hl,(scl_temp_hl) ;адрес данных
 817++6DAE ED 5B 2B 6F  	ld de,(cat_cur_adr) ;адрес сектор дорожка файла
 818++6DB2              	;dec de
 819++6DB2 1A           	ld a,(de) ;количество секторов, цикл
 820++6DB3 4F           	ld c,a
 821++6DB4              scl_parse_file3
 822++6DB4 11 00 55     	ld de,scl_buf2 ;адрес ещё одного буфера
 823++6DB7 06 00        	ld b,0 ;256 байт один сектор, цикл
 824++6DB9              scl_parse_file
 825++6DB9 7E           	ld a,(hl)
 826++6DBA 12           	ld (de),a
 827++6DBB 13           	inc de
 828++6DBC 2C           	inc l ;адрес увеличиваем только в пределах младшего регистра
 829++6DBD 20 26        	jr nz,scl_parse_file1
 830++6DBF              	;тут пора запросить следующий сектор
 831++6DBF              ;запрос порции данных по 256 байт
 832++6DBF 22 23 6F     	ld (scl_temp_hl),hl
 833++6DC2 ED 53 27 6F  	ld (scl_temp_de),de
 834++6DC6 ED 43 29 6F  	ld (scl_temp_bc),bc
 835++6DCA 3E 01        	ld a,1
 836++6DCC 32 0D 6F     	ld (scl_que),a ;включим флаг что нужны данные
 837++6DCF 21 D6 6D     	ld hl,scl_parse_ret2 ;сохраним адрес возврата
 838++6DD2 22 1F 6F     	ld (scl_parse_ret_adr),hl
 839++6DD5 C9           	ret ;вернёмся для ожидания данных
 840++6DD6              scl_parse_ret2
 841++6DD6 AF           	xor a
 842++6DD7 32 0D 6F     	ld (scl_que),a
 843++6DDA 2A 23 6F     	ld hl,(scl_temp_hl)
 844++6DDD ED 5B 27 6F  	ld de,(scl_temp_de)
 845++6DE1 ED 4B 29 6F  	ld bc,(scl_temp_bc)
 846++6DE5
 847++6DE5              scl_parse_file1
 848++6DE5 10 D2        	djnz scl_parse_file
 849++6DE7 22 23 6F     	ld (scl_temp_hl),hl
 850++6DEA ED 43 29 6F  	ld (scl_temp_bc),bc
 851++6DEE
 852++6DEE 21 00 55     	ld hl,scl_buf2 ;;запишем один сектор
 853++6DF1 ED 5B F4 5C  	ld  de,(#5cf4)
 854++6DF5 01 06 01         ld      bc,#0106 ;
 855++6DF8 CD 13 3D         call    #3d13
 856++6DFB              	; ld a,c
 857++6DFB              	; cp 255
 858++6DFB              	; jp z,fwrite_no_chek ;выход если ошибка
 859++6DFB 2A 23 6F     	ld hl,(scl_temp_hl)
 860++6DFE ED 4B 29 6F  	ld bc,(scl_temp_bc)
 861++6E02
 862++6E02 0D           	dec c
 863++6E03 20 AF        	jr nz,scl_parse_file3
 864++6E05
 865++6E05 2A 2B 6F     	ld hl,(cat_cur_adr) ;адрес сектор дорожка файла
 866++6E08              	; ld e,(hl)
 867++6E08              	; inc hl
 868++6E08              	; ld d,(hl)
 869++6E08 01 10 00     	ld bc,16
 870++6E0B 09           	add hl,bc ;на следующий файл
 871++6E0C 22 2B 6F     	ld (cat_cur_adr),hl
 872++6E0F
 873++6E0F
 874++6E0F 3A 21 6F     	ld a,(scl_cat_cycl)
 875++6E12 3D           	dec a
 876++6E13 32 21 6F     	ld (scl_cat_cycl),a
 877++6E16 20 93        	jr nz,scl_parse_file2	;на следующий файл
 878++6E18
 879++6E18
 880++6E18
 881++6E18              ;формирование системного сектора №9 (8)
 882++6E18              	;
 883++6E18              	;ld (cat_buf+8*256+#e1),a ;// #E1 Первый свободный сектор на дискете
 884++6E18              	;
 885++6E18              	;ld (cat_buf+8*256+#e2),a ;// #E2 Первый свободный трек
 886++6E18 3E 16        	ld a,#16
 887++6E1A 32 E3 50     	ld (cat_buf+8*256+#e3),a ;// #E3 16 80 дорожек, 2 стороны
 888++6E1D 3A 22 6F     	ld a,(scl_files)
 889++6E20 32 E4 50     	ld (cat_buf+8*256+#e4),a ;// #E4 Общее количество файлов записанных на диск
 890++6E23              	;
 891++6E23              	;ld (cat_buf+8*256+#e5),a ;// #Е5,Е6 Число свободных секторов на диске
 892++6E23              	;ld (cat_buf+8*256+#e6),a
 893++6E23 3E 10        	ld a,#10
 894++6E25 32 E7 50     	ld (cat_buf+8*256+#e7),a ;// #E7 Код  #10,определяющий принадлежность к TR-DOS
 895++6E28
 896++6E28 21 E3 6E     	ld hl,f_name ;запишем имя диска, взяв для этого имя файла
 897++6E2B 11 F5 50     	ld de,cat_buf+8*256+#f5 ;// #F5-#FC Имя диска в ASCII формате
 898++6E2E 01 08 00     	ld bc,8
 899++6E31 ED B0        	ldir
 900++6E33
 901++6E33 21 00 48     	ld hl,cat_buf ;запишем каталог на диск
 902++6E36 11 00 00     	ld de,0
 903++6E39 01 06 09         ld      bc,#0906 ;
 904++6E3C CD 13 3D         call    #3d13
 905++6E3F              	; ld a,c
 906++6E3F              	; cp 255
 907++6E3F              	; jp z,fwrite_no_chek ;выход если ошибка
 908++6E3F C9           	ret
 909++6E40
 910++6E40
 911++6E40              ;-----------scl end --------------------
 912++6E40
 913++6E40
 914++6E40
 915++6E40
 916++6E40
 917++6E40
 918++6E40
 919++6E40
 920++6E40
 921++6E40
 922++6E40              ; A - file stream id
 923++6E40              ; fsync:
 924++6E40              ;     esxCall ESX_FSYNC
 925++6E40                  ; ret
 926++6E40
 927++6E40
 928++6E40              ; HL - name (name.ext)
 929++6E40              ; Returns:
 930++6E40              ; HL - name (name    e)
 931++6E40              format_name ;подгоняет имя файла под стандарт trdos (8+1)
 932++6E40
 933++6E40              	;сначала попробуем убрать из пути подпапку, если она есть
 934++6E40 22 FD 6E     	ld (temp_hl),hl ;сохраним адрес исходного имени
 935++6E43 06 00        	ld b,#00 ;не больше 255 символов
 936++6E45              format_name5
 937++6E45 7E           	ld a,(hl)
 938++6E46 FE 2F        	cp "/" ;если есть подпапка
 939++6E48 28 0D        	jr z,format_name_path_yep
 940++6E4A 7E           	ld a,(hl)
 941++6E4B FE 2E        	cp "." ;если ещё не дошли до расширения
 942++6E4D 20 05        	jr nz,format_name6
 943++6E4F 2A FD 6E     	ld hl,(temp_hl) ;если дошли до расширения, то путей нет, вернёмся на начало имени
 944++6E52 18 04        	jr format_name_7 ;на выход
 945++6E54              format_name6
 946++6E54 23           	inc hl
 947++6E55 10 EE        	djnz format_name5
 948++6E57
 949++6E57              format_name_path_yep ;нашли
 950++6E57 23           	inc hl ;пропустим знак "/"
 951++6E58
 952++6E58              format_name_7
 953++6E58
 954++6E58
 955++6E58 E5           	push hl ;очистим место для нового имени
 956++6E59 21 E3 6E     	ld hl,f_name
 957++6E5C 11 E4 6E     	ld de,f_name+1
 958++6E5F 36 20        	ld (hl)," "
 959++6E61 01 08 00     	ld bc,8
 960++6E64 ED B0        	ldir
 961++6E66 E1           	pop hl
 962++6E67
 963++6E67 01 FF 09     	ld bc,#09ff ;длина имени 9 символов
 964++6E6A 11 E3 6E     	ld de,f_name ;куда
 965++6E6D              format_name2
 966++6E6D 7E           	ld a,(hl)
 967++6E6E FE 2E        	cp "."
 968++6E70 20 08        	jr nz,format_name1
 969++6E72 23           	inc hl
 970++6E73 7E           	ld a,(hl)
 971++6E74 32 EB 6E     	ld (f_name+8),a ; и в конце первую букву расширения
 972++6E77 EB           	ex de,hl ;сохраним адрес исходного расширения
 973++6E78 18 16        	jr format_name_e
 974++6E7A              format_name1
 975++6E7A ED A0        	ldi
 976++6E7C 10 EF        	djnz format_name2
 977++6E7E
 978++6E7E              	;если имя длинное, пропустим лишнее до расширения
 979++6E7E 06 00        	ld b,#00 ;не больше 255 символов
 980++6E80              format_name3
 981++6E80 7E           	ld a,(hl)
 982++6E81 FE 2E        	cp "."
 983++6E83 20 08        	jr nz,format_name4
 984++6E85 23           	inc hl
 985++6E86 7E           	ld a,(hl)
 986++6E87 32 EB 6E     	ld (f_name+8),a ; и в конце первую букву расширения
 987++6E8A EB           	ex de,hl ;сохраним адрес исходного расширения
 988++6E8B 18 03        	jr format_name_e
 989++6E8D              format_name4
 990++6E8D 23           	inc hl
 991++6E8E 10 F0        	djnz format_name3
 992++6E90
 993++6E90              format_name_e ;выход
 994++6E90 21 E3 6E     	ld hl,f_name ;вернём результат
 995++6E93 C9           	ret
 996++6E94
 997++6E94              ; DE - trk/sec
 998++6E94              ; B - sectors step
 999++6E94              ; Returns:
1000++6E94              ; DE - trk/sec
1001++6E94              calc_next_pos		;вперёд на N секторов
1002++6E94              			;ld b,4
1003++6E94              			;ld  de,(#5ceb)
1004++6E94              calc_next_pos2
1005++6E94 1C           			inc e
1006++6E95 7B           			ld a,e
1007++6E96 FE 10        			cp 16
1008++6E98 38 03        			jr c,calc_next_pos1
1009++6E9A 14           			inc d
1010++6E9B 1E 00        			ld e,0
1011++6E9D              calc_next_pos1
1012++6E9D              			;ld (#5ceb),de
1013++6E9D 10 F5        			djnz calc_next_pos2
1014++6E9F C9           			ret
1015++6EA0
1016++6EA0
1017++6EA0              ;testt db "123.trd"
1018++6EA0 49 6E 73 65  write_ima db "Insert disk to drive "
1018++6EA4 72 74 20 64
1018++6EA8 69 73 6B 20
1018++6EAC 74 6F 20 64
1018++6EB0 72 69 76 65
1018++6EB4 20
1019++6EB5 41 2E 20     write_ima_d db "A. "
1020++6EB8 41 6C 6C 20  		db "All data will be lost!",0
1020++6EBC 64 61 74 61
1020++6EC0 20 77 69 6C
1020++6EC4 6C 20 62 65
1020++6EC8 20 6C 6F 73
1020++6ECC 74 21 00
1021++6ECF
1022++6ECF 2E 74 72 64  trdExt1 db ".trd", 0
1022++6ED3 00
1023++6ED4 2E 54 52 44  trdExt2 db ".TRD", 0
1023++6ED8 00
1024++6ED9
1025++6ED9 2E 73 63 6C  sclExt1 db ".scl", 0
1025++6EDD 00
1026++6EDE 2E 53 43 4C  sclExt2 db ".SCL", 0
1026++6EE2 00
1027++6EE3
1028++6EE3 00 00 00...  f_name ds 9 ;имя файла
1029++6EEC 00 00        f_r_cur_trk dw 	 0 ;текущие сектор-дорожка файла на чтение
1030++6EEE 00           f_r_len_sec db 0 ;длина файла на чтение в секторах
1031++6EEF 00 00        f_r_len dw 0;длина файла в байтах
1032++6EF1 00           f_r_flag db 0 ;флаг что открыт файл на чтение
1033++6EF2
1034++6EF2 00 00        f_w_cur_trk dw 	 0 ;текущие сектор-дорожка файла на запись
1035++6EF4 00           f_w_len_sec db 0 ;длина файла на запись в секторах
1036++6EF5 00           f_w_flag db 0 ;флаг что открыт файл на запись
1037++6EF6 00 00 00 00  f_w_len ds 4 ;длина записанных данных
1038++6EFA 00           write_end_flag db 0 ;флаг что нужно записать остаток
1039++6EFB
1040++6EFB 00 00        temp_bc dw 0 ;хранение регистра
1041++6EFD 00 00        temp_hl dw 0 ;хранение регистра
1042++6EFF 00 00        temp_hl2 dw 0 ;хранение регистра
1043++6F01
1044++6F01 00           sec_shift db 0 ;указатель на каком байте остановлена запись
1045++6F02 00           sec_shift2 db 0 ;указатель на каком байте остановлена запись (остаток)
1046++6F03 00           sec_part db 0 ;сколько секторов во второй порции для записи
1047++6F04 00           sec_shift_flag db 0 ;флаг что буфер сектора не заполнен
1048++6F05
1049++6F05              ;секция scl
1050++6F05 53 49 4E 43  scl_sign db "SINCLAIR" ;метка
1050++6F09 4C 41 49 52
1051++6F0D 00           scl_que db 0 ;флаг запроса порции данных
1052++6F0E 53 43 4C 20  scl_err db "SCL image error!",0
1052++6F12 69 6D 61 67
1052++6F16 65 20 65 72
1052++6F1A 72 6F 72 21
1052++6F1E 00
1053++6F1F 00 00        scl_parse_ret_adr dw 0; адрес возврата в цикл
1054++6F21 00           scl_cat_cycl db 0 ;переменная цикла
1055++6F22 00           scl_files db 0 ;всего файлов
1056++6F23 00 00        scl_temp_hl dw 0;;хранение регистра
1057++6F25 00 00        scl_temp_hl2 dw 0;
1058++6F27 00 00        scl_temp_de dw 0;
1059++6F29 00 00        scl_temp_bc dw 0;
1060++6F2B 00 00        cat_cur_adr dw 0;
1061++6F2D              ;scl end
1062++6F2D 00 00 00...  	align 256 ;временно
1063++7000              	;по адресу #4000 шрифт
1064++7000              cat_buf equ #4800 ;буфер для кататога диска 9*256
1065++7000              sec_buf equ cat_buf + 9*256 ;буфер сектора для записи 256
1066++7000              scl_buf equ sec_buf + 512 ;промежуточный буфер 256
1067++7000              scl_buf2 equ scl_buf + 512 ;промежуточный буфер 256
1068++7000
1069++7000                  ENDMODULE
# file closed: dos/trdos.asm
   9+ 7000              	ENDIF
  10+ 7000
  11+ 7000              	IFDEF ESXDOS
  12+ 7000 ~               		include "console.asm"
  13+ 7000 ~               		include "esxdos.asm"
  14+ 7000              	ENDIF
  15+ 7000
  16+ 7000              	IFDEF P3DOS
  17+ 7000 ~               		include "console.asm"
  18+ 7000 ~               		include "p3dos.asm"
  19+ 7000              	ENDIF
  20+ 7000
# file closed: dos/index.asm
  32  7000                  include "gopher/engine/history/index.asm"
# file opened: gopher/engine/history/index.asm
   1+ 7000                  include "controler.asm"
# file opened: gopher/engine/history/controler.asm
   1++7000                  module History
   2++7000              back:
   3++7000 3A 43 71         ld a, (depth)
   3++7003 FE 01          cp 1
   3++7005 CA 17 70       jp z, load
   4++7008 21 92 73 11      ld hl, historyBlock + HistoryRecord, de, historyBlock, bc, (total - 1) * HistoryRecord
   4++700C 44 71 01 38
   4++7010 09
   4++7011 ED B0          ldir ; Move history up
   5++7013 21 43 71         ld hl, depth
   5++7016 35             dec (hl)
   6++7017              ; Loads current resource
   7++7017              load:
   8++7017 21 34 70         ld hl, .msg
   8++701A CD FA 67       call DialogBox.msgNoWait
   9++701D AF               xor a
   9++701E 21 08 95 11    ld hl, outputBuffer, de, outputBuffer + 1
   9++7022 09 95
  10++7024              	IFDEF MSX
  11++7024 ~                	ld bc, (ramtop)
  12++7024 ~                	dec bc
  13++7024              	ELSE
  14++7024 01 F6 6A         	ld bc, #ffff - outputBuffer - 1
  15++7027              	ENDIF
  16++7027
  17++7027 77               ld (hl), a
  18++7028 ED B0            ldir
  19++702A
  20++702A 3A 44 71         ld a, (historyBlock.isFile)
  20++702D A7             and a
  20++702E C2 2D 81       jp nz, Fetcher.fetchFromFS
  21++7031 C3 E0 80         jp Fetcher.fetchFromNet
  22++7034
  23++7034 20 20 20 20  .msg db "    Loading resource! Please wait! It will be here soon!", 0
  23++7038 4C 6F 61 64
  23++703C 69 6E 67 20
  23++7040 72 65 73 6F
  23++7044 75 72 63 65
  23++7048 21 20 50 6C
  23++704C 65 61 73 65
  23++7050 20 77 61 69
  23++7054 74 21 20 49
  23++7058 74 20 77 69
  23++705C 6C 6C 20 62
  23++7060 65 20 68 65
  23++7064 72 65 20 73
  23++7068 6F 6F 6E 21
  23++706C 00
  24++706D
  25++706D              home:
  26++706D 21 21 71         ld hl, homePage
  27++7070              ; HL - gopher row
  28++7070              navigate:
  29++7070 54 5D            ld de, hl
  30++7072 CD 59 7F         call UrlEncoder.isValidGopherRow
  31++7075 30 A0            jr nc, load ; Not valid - reload last
  32++7077 62 6B            ld hl, de
  33++7079 E5               push hl
  34++707A
  35++707A E5               push hl
  36++707B 21 C9 7C 11      ld hl, HistoryEnd - HistoryRecord, de, HistoryEnd, bc,  HistoryRecord * total
  36++707F 17 7F 01 86
  36++7083 0B
  36++7084 ED B8          lddr
  37++7086
  38++7086 ED 5B 8A 73      ld de, (Render.position), (historyBlock.position + HistoryRecord), de
  38++708A ED 53 D8 75
  39++708E                  ; Clean up struct
  40++708E AF               xor a
  40++708F 21 44 71 11    ld hl, historyBlock, de, historyBlock + 1, bc, historyBlockSize - 1, (hl), a
  40++7093 45 71 01 4D
  40++7097 02 77
  40++7099 ED B0          ldir
  41++709B E1               pop hl
  42++709C
  43++709C                  ; Fill record
  44++709C 54 5D            ld de, hl
  45++709E CD 18 7F         call UrlEncoder.isFile
  46++70A1 EB               ex hl, de
  47++70A2 11 44 71         ld de, historyBlock
  48++70A5 12               ld (de), a
  48++70A6 13             inc de
  49++70A7 7E               ld a, (hl)
  49++70A8 E5 D5          push hl, de
  49++70AA CD C3 62       call Render.getIcon
  49++70AD D1 E1          pop de, hl
  50++70AF 12               ld (de), a
  50++70B0 13             inc de
  51++70B1 3E 09            ld a, 9
  52++70B3
  53++70B3                  IFDEF MSX
  54++70B3 ~                	ld bc, #ff
  55++70B3                  ELSE
  56++70B3 01 FF 0F         	ld bc, #fff
  57++70B6                  ENDIF
  58++70B6
  59++70B6 ED B1            cpir
  60++70B8              .locatorCopy
  61++70B8 7E               ld a, (hl)
  61++70B9 FE 09          cp 9
  61++70BB 28 05          jr z, 1f
  62++70BD 12               ld (de), a
  62++70BE 23 13          inc hl, de
  63++70C0 18 F6            jr .locatorCopy
  64++70C2              1
  65++70C2 23               inc hl
  65++70C3 AF             xor a
  65++70C4 12             ld (de), a
  66++70C5 11 45 72         ld de, historyBlock.host
  67++70C8              .hostCopy
  68++70C8 7E               ld a, (hl)
  68++70C9 FE 09          cp 9
  68++70CB 28 05          jr z, 1f
  69++70CD 12               ld (de), a
  69++70CE 23 13          inc hl, de
  70++70D0 18 F6            jr .hostCopy
  71++70D2              1
  72++70D2 23               inc hl
  72++70D3 AF             xor a
  72++70D4 12             ld (de), a
  73++70D5 11 85 72         ld de, historyBlock.port
  74++70D8              .portCopy
  75++70D8 7E               ld a, (hl)
  76++70D9 FE 09            cp 9
  76++70DB 28 11          jr z, 1f
  77++70DD FE 0D            cp 13
  77++70DF 28 0D          jr z, 1f
  78++70E1 FE 0A            cp 10
  78++70E3 28 09          jr z, 1f
  79++70E5 FE 00            cp 0
  79++70E7 28 05          jr z, 1f
  80++70E9 12               ld (de), a
  80++70EA 23 13          inc hl, de
  81++70EC 18 EA            jr .portCopy
  82++70EE AF           1   xor a
  82++70EF 12             ld (de), a
  83++70F0 21 A1 67 11      ld hl, DialogBox.inputBuffer, de, historyBlock.search, bc, #ff
  83++70F4 8B 72 01 FF
  83++70F8 00
  83++70F9 ED B0          ldir
  84++70FB 11 00 00 ED      ld de, 0, (historyBlock.position), de
  84++70FF 53 8A 73
  85++7102 E1               pop hl
  86++7103 3A 43 71         ld a, (depth)
  86++7106 FE 05          cp total
  86++7108 30 04          jr nc, 1f
  87++710A 3C               inc a
  87++710B 32 43 71       ld (depth), a
  88++710E              1
  89++710E 3A 45 71         ld a,(historyBlock.mediaType)
  89++7111 FE 19          cp MIME_DOWNLOAD
  89++7113 CA C8 81       jp z, Gopher.download
  90++7116
  91++7116                  ifdef GS
  92++7116 ~                ld a,(historyBlock.mediaType)
  93++7116 ~                cp MIME_MOD
  94++7116 ~                jp nz,load
  95++7116 ~                ld a,(GeneralSound.GSdownType)
  96++7116 ~                xor 1
  97++7116 ~                jp z, downMod2file
  98++7116 ~
  99++7116 ~            downMod2GS
 100++7116 ~                jp Gopher.loadMod
 101++7116 ~            downMod2file
 102++7116 ~                jp Gopher.download
 103++7116                  else
 104++7116 3A 45 71         ld a,(historyBlock.mediaType)
 104++7119 FE 0D          cp MIME_MOD
 104++711B CA C8 81       jp z, Gopher.download
 105++711E                  endif
 106++711E
 107++711E C3 17 70         jp load
 108++7121
 109++7121              homePage:
 110++7121              	IFDEF MSX
 111++7121 ~                	db "1Home", TAB, "index.gph"
 112++7121 ~                	db TAB, "file", TAB, "70", CR, LF, 0
 113++7121                  ELSE
 114++7121 31 48 6F 6D      	db "1Home", TAB, "browser/index.gph"
 114++7125 65 09 62 72
 114++7129 6F 77 73 65
 114++712D 72 2F 69 6E
 114++7131 64 65 78 2E
 114++7135 67 70 68
 115++7138 09 66 69 6C      	db TAB, "file", TAB, "70", CR, LF, 0
 115++713C 65 09 37 30
 115++7140 0D 0A 00
 116++7143                  ENDIF
 117++7143                  endmodule
# file closed: gopher/engine/history/controler.asm
   2+ 7143                  include "model.asm"
# file opened: gopher/engine/history/model.asm
   1++7143              total   equ 5
   2++7143 00           depth   db 0
   3++7144
   4++7144              historyBlock:
   5++7144 00           .isFile    db  0
   6++7145 00           .mediaType db  0
   7++7146 00 00 00...  .locator   ds  #ff
   8++7245 00 00 00...  .host      ds  64
   9++7285 00 00 00...  .port      ds  6
  10++728B 00 00 00...  .search    ds  #ff
  11++738A 00 00        .position  dw  #0000    ;position
  12++738C
  13++738C 00 00 00 00      db 0,0,0,0,0,0  ;cursor_position page_offset
  13++7390 00 00
  14++7392
  15++7392              historyBlockSize = $ - historyBlock
  16++7392
  17++7392              HistoryRecord EQU $ - historyBlock
  18++7392                  dup total
  19++7392 00 00 00... >    ds HistoryRecord
  19++75E0 00 00 00... >    ds HistoryRecord
  19++782E 00 00 00... >    ds HistoryRecord
  19++7A7C 00 00 00... >    ds HistoryRecord
  19++7CCA 00 00 00... >    ds HistoryRecord
  20++7F18                  edup
  21++7F18              HistoryEnd equ $ - 1
  22++7F18
# file closed: gopher/engine/history/model.asm
# file closed: gopher/engine/history/index.asm
  33  7F18                  include "gopher/engine/urlencoder.asm"
# file opened: gopher/engine/urlencoder.asm
   1+ 7F18                  MODULE UrlEncoder
   2+ 7F18              ; HL - pointer to line in gopher page
   3+ 7F18              ; C - flag set when it's file
   4+ 7F18              isFile:
   5+ 7F18              .findServerLoop
   6+ 7F18 7E               ld a, (hl)
   6+ 7F19 A7             and a
   6+ 7F1A 28 3B          jr z, .notFile
   6+ 7F1C 23             inc hl
   7+ 7F1D FE 0D            cp 13
   7+ 7F1F 28 36          jr z, .notFile
   8+ 7F21 FE 09            cp 9
   8+ 7F23 28 02          jr z, .skipPath
   9+ 7F25 18 F1            jr .findServerLoop
  10+ 7F27              .skipPath
  11+ 7F27 7E               ld a, (hl)
  11+ 7F28 A7             and a
  11+ 7F29 28 2C          jr z, .notFile
  11+ 7F2B 23             inc hl
  12+ 7F2C FE 0D            cp 13
  12+ 7F2E 28 27          jr z, .notFile
  13+ 7F30 FE 09            cp 9
  13+ 7F32 28 02          jr z, .compareServer
  14+ 7F34 18 F1            jr .skipPath
  15+ 7F36              .compareServer
  16+ 7F36 7E               ld a, (hl)
  16+ 7F37 FE 66          cp "f"
  16+ 7F39 20 1C          jr nz, .notFile
  16+ 7F3B 23             inc hl
  17+ 7F3C 7E               ld a, (hl)
  17+ 7F3D FE 69          cp "i"
  17+ 7F3F 20 16          jr nz, .notFile
  17+ 7F41 23             inc hl
  18+ 7F42 7E               ld a, (hl)
  18+ 7F43 FE 6C          cp "l"
  18+ 7F45 20 10          jr nz, .notFile
  18+ 7F47 23             inc hl
  19+ 7F48 7E               ld a, (hl)
  19+ 7F49 FE 65          cp "e"
  19+ 7F4B 20 0A          jr nz, .notFile
  19+ 7F4D 23             inc hl
  20+ 7F4E 7E               ld a, (hl)
  20+ 7F4F FE 09          cp 9
  20+ 7F51 20 04          jr nz, .notFile
  20+ 7F53 23             inc hl
  21+ 7F54 3E 01            ld a, 1
  22+ 7F56 C9               ret
  23+ 7F57              .notFile
  24+ 7F57 AF               xor a
  25+ 7F58 C9               ret
  26+ 7F59
  27+ 7F59              ; Is enough fields to encode
  28+ 7F59              ; HL - pointer to line in gopher page
  29+ 7F59              ; C - flag set when there is enough fields
  30+ 7F59              isValidGopherRow:
  31+ 7F59 7E               ld a, (hl)
  31+ 7F5A A7             and a
  31+ 7F5B 28 FA          jr z, isFile.notFile
  31+ 7F5D 23             inc hl
  32+ 7F5E FE 0D            cp 13
  32+ 7F60 28 F5          jr z, isFile.notFile
  33+ 7F62 FE 09            cp 9
  33+ 7F64 28 02          jr z, .skipPath
  34+ 7F66 18 F1            jr isValidGopherRow
  35+ 7F68              .skipPath
  36+ 7F68 7E               ld a, (hl)
  36+ 7F69 A7             and a
  36+ 7F6A 28 EB          jr z, isFile.notFile
  36+ 7F6C 23             inc hl
  37+ 7F6D FE 0D            cp 13
  37+ 7F6F 28 E6          jr z, isFile.notFile
  38+ 7F71 FE 09            cp 9
  38+ 7F73 28 02          jr z, .skipHost
  39+ 7F75 18 F1            jr .skipPath
  40+ 7F77              .skipHost
  41+ 7F77 7E               ld a, (hl)
  41+ 7F78 A7             and a
  41+ 7F79 28 DC          jr z, isFile.notFile
  41+ 7F7B 23             inc hl
  42+ 7F7C FE 0D            cp 13
  42+ 7F7E 28 D7          jr z, isFile.notFile
  43+ 7F80 FE 09            cp 9
  43+ 7F82 28 02           jr z, .isValid
  44+ 7F84 18 F1            jr .skipHost
  45+ 7F86              .isValid:
  46+ 7F86 37               scf
  47+ 7F87 C9               ret
  48+ 7F88
  49+ 7F88              extractPath:
  50+ 7F88 21 46 71 11      ld hl, historyBlock.locator, de, nameBuffer, bc, #ff
  50+ 7F8C A0 7F 01 FF
  50+ 7F90 00
  50+ 7F91 ED B0          ldir
  51+ 7F93 C9               ret
  52+ 7F94
  53+ 7F94              extractHostName:
  54+ 7F94 21 45 72 11      ld hl, historyBlock.host, de, hostName, bc, 64
  54+ 7F98 A0 80 01 40
  54+ 7F9C 00
  54+ 7F9D ED B0          ldir
  55+ 7F9F C9               ret
  56+ 7FA0
  57+ 7FA0                  ENDMODULE
  58+ 7FA0
  59+ 7FA0 00 00 00...  nameBuffer ds #ff, 0
  60+ 809F
  61+ 809F 00                    db 0
  62+ 80A0 00 00 00...  hostName ds 64
# file closed: gopher/engine/urlencoder.asm
  34  80E0                  include "gopher/engine/fetcher.asm"
# file opened: gopher/engine/fetcher.asm
   1+ 80E0                  MODULE Fetcher
   2+ 80E0
   3+ 80E0              fetchFromNet:
   4+ 80E0
   5+ 80E0              	IFDEF MSX
   6+ 80E0 ~                	call Gopher.makeRequest
   6+ 80E0 ~              jr nz, .error
   7+ 80E0                  ELSE
   8+ 80E0 CD 9D 81         	call Gopher.makeRequest
   8+ 80E3 38 06          jr c, .error
   9+ 80E5                  ENDIF
  10+ 80E5
  11+ 80E5 CD B5 81         call Gopher.loadBuffer
  12+ 80E8 C3 39 81         jp MediaProcessor.processResource
  13+ 80EB              .error
  14+ 80EB 21 F4 80         ld hl, .err
  14+ 80EE CD F1 67       call DialogBox.msgBox
  15+ 80F1 C3 00 70         jp History.back
  16+ 80F4
  17+ 80F4 44 6F 63 75  .err db "Document fetch error! Check your connection or hostname!", 0
  17+ 80F8 6D 65 6E 74
  17+ 80FC 20 66 65 74
  17+ 8100 63 68 20 65
  17+ 8104 72 72 6F 72
  17+ 8108 21 20 43 68
  17+ 810C 65 63 6B 20
  17+ 8110 79 6F 75 72
  17+ 8114 20 63 6F 6E
  17+ 8118 6E 65 63 74
  17+ 811C 69 6F 6E 20
  17+ 8120 6F 72 20 68
  17+ 8124 6F 73 74 6E
  17+ 8128 61 6D 65 21
  17+ 812C 00
  18+ 812D
  19+ 812D
  20+ 812D              fetchFromFS:
  21+ 812D CD 88 7F         call UrlEncoder.extractPath
  22+ 8130              loadFile
  23+ 8130              	IFDEF MSX
  24+ 8130 ~                ld de, nameBuffer, a, FMODE_NO_WRITE
  25+ 8130 ~                call Dos.fopen
  26+ 8130 ~                ld a, b, (.fp), a
  27+ 8130 ~                ld de, outputBuffer, hl, (ramtop)
  28+ 8130 ~                call Dos.fread
  29+ 8130 ~                ld a, (.fp), b, a
  30+ 8130 ~                call Dos.fclose
  31+ 8130 ~                jp MediaProcessor.processResource
  32+ 8130 ~            .fp db 0
  33+ 8130              	ELSE
  34+ 8130 21 A0 7F         ld hl, nameBuffer
  35+ 8133 CD B4 69         call Dos.loadBuffer
  36+ 8136 C3 39 81         jp MediaProcessor.processResource
  37+ 8139              	ENDIF
  38+ 8139                  ENDMODULE
# file closed: gopher/engine/fetcher.asm
  35  8139                  include "gopher/engine/media-processor.asm"
# file opened: gopher/engine/media-processor.asm
   1+ 8139                  MODULE MediaProcessor
   2+ 8139              processResource:
   3+ 8139 CD 94 7F         call UrlEncoder.extractHostName
   4+ 813C 3A 45 71         ld a, (historyBlock.mediaType)
   5+ 813F FE 0E            cp MIME_MUSIC
   5+ 8141 28 13          jr z, processPT
   6+ 8143 FE 1A            cp MIME_LINK
   6+ 8145 28 15          jr z, processPage
   7+ 8147 FE B3            cp MIME_INPUT
   7+ 8149 28 11          jr z, processPage
   8+ 814B FE 01            cp MIME_IMAGE
   8+ 814D CA E3 94       jp z, ScreenViewer.display
   9+ 8150              	ifdef GS
  10+ 8150 ~                cp MIME_MOD
  10+ 8150 ~              jr z, processMOD
  11+ 8150              	endif
  12+ 8150              ; Fallback to plain text
  13+ 8150              processText:
  14+ 8150 CD 76 66         call Render.renderPlainTextScreen
  15+ 8153 C3 AB 66         jp   Render.plainTextLoop
  16+ 8156
  17+ 8156              processPT:
  18+ 8156 CD 95 88         call VortexProcessor.play
  19+ 8159 C3 00 70         jp History.back
  20+ 815C
  21+ 815C                  ifdef GS
  22+ 815C ~            processMOD:
  23+ 815C ~                call ModProcessor.play
  24+ 815C ~                jp History.back
  25+ 815C              	endif
  26+ 815C
  27+ 815C              processPage:
  28+ 815C 3A 45 67         ld a, (Render.play_next)
  28+ 815F A7             and a
  28+ 8160 20 06          jr nz, .playNext
  29+ 8162 CD E5 64         call Render.renderGopherScreen
  30+ 8165 C3 28 65         jp   Render.workLoop
  31+ 8168              .playNext
  32+ 8168 21 8C 73         ld hl, Render.cursor_position
  33+ 816B 34               inc (hl)
  34+ 816C CD E5 64         call Render.renderGopherScreen
  35+ 816F C3 12 65         jp Render.checkBorder
  36+ 8172                  ENDMODULE
# file closed: gopher/engine/media-processor.asm
  36  8172                  include "gopher/gopher.asm"
# file opened: gopher/gopher.asm
   1+ 8172                  module Gopher
   2+ 8172              ; HL - gopher row
   3+ 8172              extractRequest:
   4+ 8172 21 46 71         ld hl, historyBlock.locator
   5+ 8175 11 C5 82         ld de, requestbuffer
   6+ 8178              .loop
   7+ 8178 7E               ld a, (hl)
   8+ 8179 12               ld (de), a
   9+ 817A 23               inc hl
  10+ 817B 13               inc de
  11+ 817C FE 00            cp 0
  12+ 817E 28 02            jr z, .search
  13+ 8180 18 F6            jr .loop
  14+ 8182              .search
  15+ 8182 1B               dec de
  16+ 8183 3A 45 71         ld a, (historyBlock.mediaType)
  17+ 8186 FE B3            cp MIME_INPUT
  18+ 8188 20 10            jr nz, .exit
  19+ 818A 21 8B 72         ld hl, historyBlock.search
  20+ 818D 3E 09            ld a, TAB
  21+ 818F 12               ld (de), a
  22+ 8190 13               inc de
  23+ 8191              .searchCopy
  24+ 8191 7E               ld a, (hl)
  25+ 8192 A7               and a
  25+ 8193 28 05          jr z, .exit
  26+ 8195 12               ld (de), a
  27+ 8196 23               inc hl
  27+ 8197 13             inc de
  28+ 8198 18 F7            jr .searchCopy
  29+ 819A              .exit
  30+ 819A AF               xor a
  31+ 819B 12               ld (de), a
  32+ 819C C9               ret
  33+ 819D
  34+ 819D
  35+ 819D              makeRequest:
  36+ 819D CD 72 81         call extractRequest
  37+ 81A0
  38+ 81A0 21 45 72         ld hl, historyBlock.host
  39+ 81A3 11 85 72         ld de, historyBlock.port
  40+ 81A6 CD 6B 86         call Wifi.openTCP
  41+ 81A9 D8               ret c
  42+ 81AA
  43+ 81AA 21 C5 82         ld hl, requestbuffer
  44+ 81AD CD 5C 87         call Wifi.tcpSendZ
  45+ 81B0 AF               xor a
  45+ 81B1 32 3D 85       ld (Wifi.closed), a
  46+ 81B4 C9               ret
  47+ 81B5
  48+ 81B5
  49+ 81B5              loadBuffer:
  50+ 81B5 21 08 95         ld hl, outputBuffer
  51+ 81B8 22 3B 85         ld (Wifi.buffer_pointer), hl
  52+ 81BB              .loop
  53+ 81BB CD AC 87         call Wifi.getPacket
  54+ 81BE 3A 3D 85         ld a, (Wifi.closed)
  54+ 81C1 A7             and a
  54+ 81C2 C0             ret nz
  55+ 81C3 CD C9 86         call Wifi.continue
  56+ 81C6 18 F3            jr .loop
  57+ 81C8
  58+ 81C8                  ifdef GS
  59+ 81C8 ~            loadMod:
  60+ 81C8 ~                xor a
  60+ 81C8 ~              call GeneralSound.init
  61+ 81C8 ~                ld hl, .progress
  61+ 81C8 ~              call DialogBox.msgNoWait
  62+ 81C8 ~                call makeRequest
  62+ 81C8 ~              jp c, Fetcher.fetchFromNet.error
  63+ 81C8 ~                call GeneralSound.loadModule
  64+ 81C8 ~            .loop
  65+ 81C8 ~                ld hl, outputBuffer, (Wifi.buffer_pointer), hl
  66+ 81C8 ~                call Wifi.getPacket
  67+ 81C8 ~                ld a, (Wifi.closed)
  67+ 81C8 ~              and a
  67+ 81C8 ~              jr nz, .exit
  68+ 81C8 ~                ld hl, outputBuffer, bc, (Wifi.bytes_avail)
  69+ 81C8 ~            .loadLoop
  70+ 81C8 ~                ld a, b
  70+ 81C8 ~              or c
  70+ 81C8 ~              and a
  70+ 81C8 ~              jr z, .nextFrame
  71+ 81C8 ~                ld a, (hl)
  71+ 81C8 ~              call GeneralSound.sendByte
  72+ 81C8 ~                dec bc
  73+ 81C8 ~                inc hl
  74+ 81C8 ~                jr .loadLoop
  75+ 81C8 ~            .nextFrame
  76+ 81C8 ~                call pulsing
  77+ 81C8 ~                call Wifi.continue
  78+ 81C8 ~                jr .loop
  79+ 81C8 ~            .exit
  80+ 81C8 ~                call GeneralSound.finishLoadingModule
  81+ 81C8 ~                ;jp History.back
  82+ 81C8 ~            	jp MediaProcessor.processResource
  83+ 81C8 ~            .progress db "MOD downloading directly to GS!", 0
  84+ 81C8                  endif
  85+ 81C8
  86+ 81C8              download:
  87+ 81C8 11 46 71         ld de, historyBlock.locator
  88+ 81CB 62 6B            ld hl, de
  89+ 81CD              .findFileName
  90+ 81CD 1A               ld a, (de)
  90+ 81CE 13             inc de
  91+ 81CF FE 2F            cp '/'
  91+ 81D1 20 02          jr nz, .skip
  92+ 81D3 62 6B            ld hl, de
  93+ 81D5              .skip
  94+ 81D5 A7               and a
  94+ 81D6 20 F5          jr nz, .findFileName
  95+ 81D8              .copy
  96+ 81D8                  ;; HL - filename pointer
  97+ 81D8 11 A1 67         ld de, DialogBox.inputBuffer
  98+ 81DB              .copyFileName
  99+ 81DB 7E               ld a, (hl)
  99+ 81DC A7             and a
  99+ 81DD 28 05          jr z, .finishCopy
 100+ 81DF
 101+ 81DF 12               ld (de), a
 101+ 81E0 23 13          inc hl, de
 102+ 81E2 18 F7            jr .copyFileName
 103+ 81E4              .finishCopy
 104+ 81E4 12               ld (de), a
 105+ 81E5 CD 4A 67         call DialogBox.inputBox.noclear
 106+ 81E8 3A A1 67         ld a, (DialogBox.namedownload)
 106+ 81EB A7             and a
 106+ 81EC CA 00 70       jp z, History.back
 107+ 81EF
 108+ 81EF CD 9D 81         call makeRequest
 108+ 81F2 DA EB 80       jp c, Fetcher.fetchFromNet.error
 109+ 81F5
 110+ 81F5 06 0E 21 A1      ld b, Dos.FMODE_CREATE, hl, DialogBox.namedownload
 110+ 81F9 67
 111+ 81FA CD D0 69         call Dos.fopen
 112+ 81FD 32 9E 82         ld (.fp), a
 113+ 8200
 114+ 8200 21 79 82         ld hl, .progress
 114+ 8203 CD FA 67       call DialogBox.msgNoWait
 115+ 8206              .loop
 116+ 8206 21 08 95 22      ld hl, outputBuffer, (Wifi.buffer_pointer), hl
 116+ 820A 3B 85
 117+ 820C CD AC 87         call Wifi.getPacket
 118+ 820F 3A 3D 85         ld a, (Wifi.closed)
 118+ 8212 A7             and a
 118+ 8213 20 15          jr nz, .exit
 119+ 8215
 120+ 8215 3A 9E 82 21      ld a, (.fp), hl, outputBuffer, bc, (Wifi.bytes_avail)
 120+ 8219 08 95 ED 4B
 120+ 821D 39 85
 121+ 821F CD E0 6A         call Dos.fwrite
 122+ 8222 CD A1 82         call pulsing
 123+ 8225 CD C9 86         call Wifi.continue
 124+ 8228 18 DC            jr .loop
 125+ 822A              .exit
 126+ 822A 3A 9E 82         ld a, (.fp)
 127+ 822D CD A9 6A         call Dos.fclose
 128+ 8230 C3 00 70         jp History.back
 129+ 8233              .error
 130+ 8233 3A 9E 82         ld a, (.fp)
 131+ 8236 CD A9 6A         call Dos.fclose
 132+ 8239 21 42 82         ld hl, .err
 133+ 823C CD F1 67         call DialogBox.msgBox
 134+ 823F C3 00 70         jp History.back
 135+ 8242
 136+ 8242 4F 70 65 72  .err db "Operation failed! Sorry! Check filename or disk space!",0
 136+ 8246 61 74 69 6F
 136+ 824A 6E 20 66 61
 136+ 824E 69 6C 65 64
 136+ 8252 21 20 53 6F
 136+ 8256 72 72 79 21
 136+ 825A 20 43 68 65
 136+ 825E 63 6B 20 66
 136+ 8262 69 6C 65 6E
 136+ 8266 61 6D 65 20
 136+ 826A 6F 72 20 64
 136+ 826E 69 73 6B 20
 136+ 8272 73 70 61 63
 136+ 8276 65 21 00
 137+ 8279 44 6F 77 6E  .progress db "Downloading in progress! Wait a bit!", 0
 137+ 827D 6C 6F 61 64
 137+ 8281 69 6E 67 20
 137+ 8285 69 6E 20 70
 137+ 8289 72 6F 67 72
 137+ 828D 65 73 73 21
 137+ 8291 20 57 61 69
 137+ 8295 74 20 61 20
 137+ 8299 62 69 74 21
 137+ 829D 00
 138+ 829E 00           .fp db 0
 139+ 829F 00           socket db 0
 140+ 82A0 20           pulsator db " "
 141+ 82A1              pulsing
 142+ 82A1 11 01 0B         ld de, #0B01
 142+ 82A4 CD 88 61       call TextMode.gotoXY
 143+ 82A7 3A A0 82         ld a, (pulsator)
 144+ 82AA FE 2A            cp '*'
 145+ 82AC CA BA 82         jp z, printasterix
 146+ 82AF 3E 2A            ld a, '*'
 147+ 82B1 32 A0 82         ld (pulsator),a
 148+ 82B4 3E 20            ld a,' '
 149+ 82B6 CD 8E 60         call TextMode.putC
 150+ 82B9 C9               ret
 151+ 82BA              printasterix
 152+ 82BA 3E 20            ld a, ' '
 153+ 82BC 32 A0 82         ld (pulsator),a
 154+ 82BF 3E 2A            ld a,'*'
 155+ 82C1 CD 8E 60         call TextMode.putC
 156+ 82C4 C9               ret
 157+ 82C5
 158+ 82C5 00 00 00...  requestbuffer ds #1ff
 159+ 84C4                  endmodule
 160+ 84C4
# file closed: gopher/gopher.asm
  37  84C4                  include "drivers/index.asm"
# file opened: drivers/index.asm
   1+ 84C4                  IFDEF UNO
   2+ 84C4 ~                	include "uno-uart.asm"
   3+ 84C4                  ENDIF
   4+ 84C4
   5+ 84C4                  IFDEF UNOUART
   6+ 84C4 ~                	include "uno-uart.asm"
   7+ 84C4                  ENDIF
   8+ 84C4
   9+ 84C4                  IFDEF MB03
  10+ 84C4 ~                	include "mb03-uart.asm"
  11+ 84C4                  ENDIF
  12+ 84C4
  13+ 84C4                  IFDEF AY
  14+ 84C4 ~                	include "ay-uart.asm"
  15+ 84C4                  ENDIF
  16+ 84C4
  17+ 84C4                  IFDEF ZW
  18+ 84C4                  	include "zx-wifi.asm"
# file opened: drivers/zx-wifi.asm
   1++84C4              ; This driver works with 16c550 uart that's support AFE
   2++84C4                  module Uart
   3++84C4              ; Make init shorter and readable:-)
   4++84C4                  macro outp port, value
   5++84C4 ~            	ld b, port
   6++84C4 ~            	ld c, #EF
   7++84C4 ~                ld a, value
   8++84C4 ~                out (c), a
   9++84C4                  endm
  10++84C4
  11++84C4              ; Internal port constants
  12++84C4              RBR_THR = #F8
  13++84C4              IER     = RBR_THR + 1
  14++84C4              IIR_FCR = RBR_THR + 2
  15++84C4              LCR     = RBR_THR + 3
  16++84C4              MCR     = RBR_THR + 4
  17++84C4              LSR     = RBR_THR + 5
  18++84C4              MSR     = RBR_THR + 6
  19++84C4              SR      = RBR_THR + 7
  20++84C4
  21++84C4
  22++84C4              init:
  23++84C4                  IFDEF GZ
  24++84C4                  outp MCR,     #0d  // Assert RTS
  24++84C4 06 FC       >	ld b, MCR
  24++84C6 0E EF       >	ld c, #EF
  24++84C8 3E 0D       >    ld a, #0d
  24++84CA ED 79       >    out (c), a
  25++84CC                  outp IIR_FCR, #87  // Enable fifo 8 level, and clear it
  25++84CC 06 FA       >	ld b, IIR_FCR
  25++84CE 0E EF       >	ld c, #EF
  25++84D0 3E 87       >    ld a, #87
  25++84D2 ED 79       >    out (c), a
  26++84D4                  outp LCR,     #83  // 8n1, DLAB=1
  26++84D4 06 FB       >	ld b, LCR
  26++84D6 0E EF       >	ld c, #EF
  26++84D8 3E 83       >    ld a, #83
  26++84DA ED 79       >    out (c), a
  27++84DC                  outp RBR_THR, 12  //(divider 12)
  27++84DC 06 F8       >	ld b, RBR_THR
  27++84DE 0E EF       >	ld c, #EF
  27++84E0 3E 0C       >    ld a, 12
  27++84E2 ED 79       >    out (c), a
  28++84E4                  outp IER,     #00  // (divider 0). Divider is 16 bit, so we get (#0002 divider)
  28++84E4 06 F9       >	ld b, IER
  28++84E6 0E EF       >	ld c, #EF
  28++84E8 3E 00       >    ld a, #00
  28++84EA ED 79       >    out (c), a
  29++84EC
  30++84EC                  outp LCR,     #03 // 8n1, DLAB=0
  30++84EC 06 FB       >	ld b, LCR
  30++84EE 0E EF       >	ld c, #EF
  30++84F0 3E 03       >    ld a, #03
  30++84F2 ED 79       >    out (c), a
  31++84F4                  outp IER,     #00 // Disable int
  31++84F4 06 F9       >	ld b, IER
  31++84F6 0E EF       >	ld c, #EF
  31++84F8 3E 00       >    ld a, #00
  31++84FA ED 79       >    out (c), a
  32++84FC                  outp MCR,     #2f // Enable AFE
  32++84FC 06 FC       >	ld b, MCR
  32++84FE 0E EF       >	ld c, #EF
  32++8500 3E 2F       >    ld a, #2f
  32++8502 ED 79       >    out (c), a
  33++8504 C9               ret
  34++8505                  ELSE
  35++8505 ~                outp MCR,     #0d  // Assert RTS
  36++8505 ~                outp IIR_FCR, #87  // Enable fifo 8 level, and clear it
  37++8505 ~                outp LCR,     #83  // 8n1, DLAB=1
  38++8505 ~                outp RBR_THR, 1  // 115200 (divider 1)
  39++8505 ~                outp IER,     #00  // (divider 0). Divider is 16 bit, so we get (#0002 divider)
  40++8505 ~
  41++8505 ~                outp LCR,     #03 // 8n1, DLAB=0
  42++8505 ~                outp IER,     #00 // Disable int
  43++8505 ~                outp MCR,     #2f // Enable AFE
  44++8505 ~                ret
  45++8505                  ENDIF
  46++8505              retry_rec_count_max equ 50 ;ждать 1 байт максимум столько прерываний
  47++8505
  48++8505              ; Flag C <- Data available
  49++8505              ; isAvailable:
  50++8505                  ; ld a, LSR
  51++8505                  ; in a, (#EF)
  52++8505                  ; rrca
  53++8505                  ; ret
  54++8505
  55++8505              ; Non-blocking read
  56++8505              ; Flag C <- is byte was readen
  57++8505              ; A <- byte
  58++8505              ; read1:
  59++8505                  ; ld a, LSR
  60++8505                  ; in a, (#EF)
  61++8505                  ; rrca
  62++8505                  ; ret nc
  63++8505                  ; ld a, RBR_THR
  64++8505                  ; in a, (#EF)
  65++8505                  ; scf
  66++8505                  ; ret
  67++8505
  68++8505              ; Tries read byte with timeout
  69++8505              ; Flag C <- is byte read
  70++8505              ; A <- byte
  71++8505              read:
  72++8505 AF           	xor a ;4
  73++8506 32 78 5C     	ld (#5C78),a ;обнулить счётчик ожидания ;13
  74++8509              .wait
  75++8509 3E FD            ld a, LSR
  76++850B DB EF            in a, (#EF)
  77++850D 0F               rrca
  78++850E 30 05        	jr nc, .readW
  79++8510 3E F8            ld a, RBR_THR
  80++8512 DB EF            in a, (#EF)
  81++8514 C9           	ret
  82++8515              .readW
  83++8515 3A 78 5C     	ld a,(#5C78)
  84++8518 FE 32        	cp retry_rec_count_max
  85++851A 38 ED        	jr c, .wait ;ещё попытка
  86++851C AF           	xor a ;выключим флаг переноса если время вышло
  87++851D C9           	ret
  88++851E
  89++851E
  90++851E
  91++851E
  92++851E              ; Blocking read
  93++851E              ; A <- Byte
  94++851E              ; readB:
  95++851E                  ; ld a, LSR
  96++851E                  ; in a, (#EF)
  97++851E                  ; rrca
  98++851E                  ; jr nc, readB
  99++851E              	; ld a, RBR_THR
 100++851E                  ; in a, (#EF)
 101++851E                  ; ret
 102++851E
 103++851E              ; A -> byte to send
 104++851E              write:
 105++851E F5               push af
 106++851F              .wait
 107++851F 3E FD        	ld a, LSR
 108++8521 DB EF            in a, (#EF)
 109++8523 E6 20            and #20
 110++8525 28 F8            jr z, .wait
 111++8527 F1               pop af
 112++8528 06 F8        	ld b, RBR_THR
 113++852A 0E EF        	ld c, #EF
 114++852C ED 79            out (c), a
 115++852E C9               ret
 116++852F
 117++852F                  endmodule
# file closed: drivers/zx-wifi.asm
  19+ 852F                  ENDIF
  20+ 852F
  21+ 852F              	include "utils.asm"
# file opened: drivers/utils.asm
   1++852F              ;;; Macroses!!!!
   2++852F                  MACRO EspSend Text
   3++852F ~                ld hl, .txtB
   4++852F ~                ld e, (.txtE - .txtB)
   5++852F ~                call espSend
   6++852F ~                jr .txtE
   7++852F ~            .txtB
   8++852F ~                db Text
   9++852F ~            .txtE
  10++852F                  ENDM
  11++852F
  12++852F                  MACRO EspCmd Text
  13++852F ~                ld hl, .txtB
  14++852F ~                ld e, (.txtE - .txtB)
  15++852F ~                call espSend
  16++852F ~                jr .txtE
  17++852F ~            .txtB
  18++852F ~                db Text
  19++852F ~                db 13, 10
  20++852F ~            .txtE
  21++852F                  ENDM
  22++852F
  23++852F                  MACRO EspCmdOkErr text
  24++852F ~                EspCmd text
  25++852F ~                call checkOkErr
  26++852F                  ENDM
  27++852F
  28++852F              ; IN DE - string pointer
  29++852F              ; OUT HL - string len
  30++852F              strLen:
  31++852F 21 00 00         ld hl, 0
  32++8532              .loop
  33++8532 1A               ld a, (de)
  33++8533 A7             and a
  33++8534 C8             ret z
  34++8535 13 23            inc de, hl
  35++8537 18 F9            jr .loop
# file closed: drivers/utils.asm
  22+ 8539
  23+ 8539              	IFDEF NEDOOSATM
  24+ 8539 ~            		include "atm-uart.asm"
  25+ 8539              	ENDIF
  26+ 8539
  27+ 8539              	IFDEF NEDOOSEVO
  28+ 8539 ~            		include "evo-uart.asm"
  29+ 8539                     	ENDIF
  30+ 8539
  31+ 8539              	IFDEF NEDONET
  32+ 8539 ~            		include "nedowifi.asm"
  33+ 8539              	ELSE
  34+ 8539              		include "wifi.asm"
# file opened: drivers/wifi.asm
   1++8539                  MODULE Wifi
   2++8539 00 00        bytes_avail dw 0
   3++853B 00 00        buffer_pointer dw 0
   4++853D 01           closed db 1
   5++853E              ; Initialize Wifi chip to work
   6++853E              init:
   7++853E
   8++853E 21 30 86         ld hl, .uartIniting
   8++8541 CD 83 60       call TextMode.printZ
   9++8544 CD C4 84         call Uart.init
  10++8547 21 41 86         ld hl, .chipIniting
  10++854A CD 83 60       call TextMode.printZ
  11++854D
  12++854D                  EspCmdOkErr "ATE0"
  12++854D             >    EspCmd "ATE0"
  12++854D 21 57 85    >    ld hl, .txtB
  12++8550 1E 06       >    ld e, (.txtE - .txtB)
  12++8552 CD 3F 87    >    call espSend
  12++8555 18 06       >    jr .txtE
  12++8557             >.txtB
  12++8557 41 54 45 30 >    db "ATE0"
  12++855B 0D 0A       >    db 13, 10
  12++855D             >.txtE
  12++855D CD CA 86    >    call checkOkErr
  13++8560 DA 10 86         jp c, .initError
  14++8563
  15++8563                  IFDEF AUTH
  16++8563 21 6B 95 06      ld hl, creds, b, Dos.FMODE_READ
  16++8567 01
  16++8568 CD D0 69       call Dos.fopen
  17++856B F5               push af
  18++856C 21 7C 95 01      ld hl,outputBuffer2, bc, 255
  18++8570 FF 00
  18++8572 CD BD 6A       call Dos.fread
  19++8575 F1               pop af
  20++8576 CD A9 6A         call Dos.fclose
  21++8579
  22++8579 21 59 86         ld hl, .doneInit1
  22++857C CD 83 60       call TextMode.printZ
  23++857F                  ;ld hl, outputBuffer2 : call TextMode.printZ
  24++857F
  25++857F 21 7C 95         ld hl,outputBuffer2
  26++8582 CD 49 87         call espSendT
  27++8585 3E 0D            ld a, 13
  27++8587 CD 1E 85       call Uart.write
  28++858A 3E 0A            ld a, 10
  28++858C CD 1E 85       call Uart.write
  29++858F CD CA 86         call checkOkErr
  30++8592 DA 10 86         jp c, .initError
  31++8595                  ENDIF
  32++8595
  33++8595                 	EspCmdOkErr "AT+CIPSERVER=0"
  33++8595             >    EspCmd "AT+CIPSERVER=0"
  33++8595 21 9F 85    >    ld hl, .txtB
  33++8598 1E 10       >    ld e, (.txtE - .txtB)
  33++859A CD 3F 87    >    call espSend
  33++859D 18 10       >    jr .txtE
  33++859F             >.txtB
  33++859F 41 54 2B 43 >    db "AT+CIPSERVER=0"
  33++85A3 49 50 53 45 >
  33++85A7 52 56 45 52 >
  33++85AB 3D 30       >
  33++85AD 0D 0A       >    db 13, 10
  33++85AF             >.txtE
  33++85AF CD CA 86    >    call checkOkErr
  34++85B2                  EspCmdOkErr "AT+CIPCLOSE" ; Close if there some connection was. Don't care about result
  34++85B2             >    EspCmd "AT+CIPCLOSE"
  34++85B2 21 BC 85    >    ld hl, .txtB
  34++85B5 1E 0D       >    ld e, (.txtE - .txtB)
  34++85B7 CD 3F 87    >    call espSend
  34++85BA 18 0D       >    jr .txtE
  34++85BC             >.txtB
  34++85BC 41 54 2B 43 >    db "AT+CIPCLOSE"
  34++85C0 49 50 43 4C >
  34++85C4 4F 53 45    >
  34++85C7 0D 0A       >    db 13, 10
  34++85C9             >.txtE
  34++85C9 CD CA 86    >    call checkOkErr
  35++85CC                  EspCmdOkErr "AT+CIPMUX=0" ; Single connection mode
  35++85CC             >    EspCmd "AT+CIPMUX=0"
  35++85CC 21 D6 85    >    ld hl, .txtB
  35++85CF 1E 0D       >    ld e, (.txtE - .txtB)
  35++85D1 CD 3F 87    >    call espSend
  35++85D4 18 0D       >    jr .txtE
  35++85D6             >.txtB
  35++85D6 41 54 2B 43 >    db "AT+CIPMUX=0"
  35++85DA 49 50 4D 55 >
  35++85DE 58 3D 30    >
  35++85E1 0D 0A       >    db 13, 10
  35++85E3             >.txtE
  35++85E3 CD CA 86    >    call checkOkErr
  36++85E6 DA 10 86         jp c, .initError
  37++85E9
  38++85E9                  EspCmdOkErr "AT+CIPDINFO=0" ; Disable additional info
  38++85E9             >    EspCmd "AT+CIPDINFO=0"
  38++85E9 21 F3 85    >    ld hl, .txtB
  38++85EC 1E 0F       >    ld e, (.txtE - .txtB)
  38++85EE CD 3F 87    >    call espSend
  38++85F1 18 0F       >    jr .txtE
  38++85F3             >.txtB
  38++85F3 41 54 2B 43 >    db "AT+CIPDINFO=0"
  38++85F7 49 50 44 49 >
  38++85FB 4E 46 4F 3D >
  38++85FF 30          >
  38++8600 0D 0A       >    db 13, 10
  38++8602             >.txtE
  38++8602 CD CA 86    >    call checkOkErr
  39++8605 DA 10 86         jp c, .initError
  40++8608
  41++8608 21 52 86         ld hl, .doneInit
  41++860B CD 83 60       call TextMode.printZ
  42++860E
  43++860E B7               or a
  44++860F C9               ret
  45++8610              .initError
  46++8610 21 18 86         ld hl, .errMsg
  46++8613 CD F1 67       call DialogBox.msgBox
  47++8616 37               scf
  48++8617 C9               ret
  49++8618 57 69 46 69  .errMsg      db "WiFi chip init failed!", "\r", 0
  49++861C 20 63 68 69
  49++8620 70 20 69 6E
  49++8624 69 74 20 66
  49++8628 61 69 6C 65
  49++862C 64 21 0D 00
  50++8630 55 61 72 74  .uartIniting db "Uart initing...", "\r", 0
  50++8634 20 69 6E 69
  50++8638 74 69 6E 67
  50++863C 2E 2E 2E 0D
  50++8640 00
  51++8641 43 68 69 70  .chipIniting db "Chip initing...", "\r", 0
  51++8645 20 69 6E 69
  51++8649 74 69 6E 67
  51++864D 2E 2E 2E 0D
  51++8651 00
  52++8652 44 6F 6E 65  .doneInit    db "Done!","\r", 0
  52++8656 21 0D 00
  53++8659 43 6F 6E 6E  .doneInit1   db "Connecting to AP","\r", 0
  53++865D 65 63 74 69
  53++8661 6E 67 20 74
  53++8665 6F 20 41 50
  53++8669 0D 00
  54++866B                  IFNDEF PROXY
  55++866B              ; HL - host pointer in gopher row
  56++866B              ; DE - port pointer in gopher row
  57++866B              openTCP:
  58++866B D5               push de
  59++866C E5               push hl
  60++866D                  EspCmdOkErr "AT+CIPCLOSE" ; Don't care about result. Just close if it didn't happens before
  60++866D             >    EspCmd "AT+CIPCLOSE"
  60++866D 21 77 86    >    ld hl, .txtB
  60++8670 1E 0D       >    ld e, (.txtE - .txtB)
  60++8672 CD 3F 87    >    call espSend
  60++8675 18 0D       >    jr .txtE
  60++8677             >.txtB
  60++8677 41 54 2B 43 >    db "AT+CIPCLOSE"
  60++867B 49 50 43 4C >
  60++867F 4F 53 45    >
  60++8682 0D 0A       >    db 13, 10
  60++8684             >.txtE
  60++8684 CD CA 86    >    call checkOkErr
  61++8687                  EspSend 'AT+CIPSTART="TCP","'
  61++8687 21 91 86    >    ld hl, .txtB
  61++868A 1E 13       >    ld e, (.txtE - .txtB)
  61++868C CD 3F 87    >    call espSend
  61++868F 18 13       >    jr .txtE
  61++8691             >.txtB
  61++8691 41 54 2B 43 >    db 'AT+CIPSTART="TCP","'
  61++8695 49 50 53 54 >
  61++8699 41 52 54 3D >
  61++869D 22 54 43 50 >
  61++86A1 22 2C 22    >
  61++86A4             >.txtE
  62++86A4 E1               pop hl
  63++86A5 CD 49 87         call espSendT
  64++86A8                  EspSend '",'
  64++86A8 21 B2 86    >    ld hl, .txtB
  64++86AB 1E 02       >    ld e, (.txtE - .txtB)
  64++86AD CD 3F 87    >    call espSend
  64++86B0 18 02       >    jr .txtE
  64++86B2             >.txtB
  64++86B2 22 2C       >    db '",'
  64++86B4             >.txtE
  65++86B4 E1               pop hl
  66++86B5 CD 49 87         call espSendT
  67++86B8 3E 0D            ld a, 13
  67++86BA CD 1E 85       call Uart.write
  68++86BD 3E 0A            ld a, 10
  68++86BF CD 1E 85       call Uart.write
  69++86C2 AF               xor a
  69++86C3 32 3D 85       ld (closed), a
  70++86C6 C3 CA 86         jp checkOkErr
  71++86C9
  72++86C9              continue:
  73++86C9 C9               ret
  74++86CA                  ENDIF
  75++86CA
  76++86CA
  77++86CA
  78++86CA              checkOkErr:
  79++86CA CD 05 85         call Uart.read
  80++86CD FE 4F            cp 'O'
  80++86CF CA DF 86       jp z, .okStart ; OK
  81++86D2 FE 45            cp 'E'
  81++86D4 CA F4 86       jp z, .errStart ; ERROR
  82++86D7 FE 46            cp 'F'
  82++86D9 CA 19 87       jp z, .failStart ; FAIL
  83++86DC C3 CA 86         jp checkOkErr
  84++86DF              .okStart
  85++86DF CD 05 85         call Uart.read
  85++86E2 FE 4B          cp 'K'
  85++86E4 C2 CA 86       jp nz, checkOkErr
  86++86E7 CD 05 85         call Uart.read
  86++86EA FE 0D          cp 13
  86++86EC C2 CA 86       jp nz, checkOkErr
  87++86EF CD 36 87         call .flushToLF
  88++86F2 B7               or a
  89++86F3 C9               ret
  90++86F4              .errStart
  91++86F4 CD 05 85         call Uart.read
  91++86F7 FE 52          cp 'R'
  91++86F9 C2 CA 86       jp nz, checkOkErr
  92++86FC CD 05 85         call Uart.read
  92++86FF FE 52          cp 'R'
  92++8701 C2 CA 86       jp nz, checkOkErr
  93++8704 CD 05 85         call Uart.read
  93++8707 FE 4F          cp 'O'
  93++8709 C2 CA 86       jp nz, checkOkErr
  94++870C CD 05 85         call Uart.read
  94++870F FE 52          cp 'R'
  94++8711 C2 CA 86       jp nz, checkOkErr
  95++8714 CD 36 87         call .flushToLF
  96++8717 37               scf
  97++8718 C9               ret
  98++8719              .failStart
  99++8719 CD 05 85         call Uart.read
  99++871C FE 41          cp 'A'
  99++871E C2 CA 86       jp nz, checkOkErr
 100++8721 CD 05 85         call Uart.read
 100++8724 FE 49          cp 'I'
 100++8726 C2 CA 86       jp nz, checkOkErr
 101++8729 CD 05 85         call Uart.read
 101++872C FE 4C          cp 'L'
 101++872E C2 CA 86       jp nz, checkOkErr
 102++8731 CD 36 87         call .flushToLF
 103++8734 37               scf
 104++8735 C9               ret
 105++8736              .flushToLF
 106++8736 CD 05 85         call Uart.read
 107++8739 FE 0A            cp 10
 107++873B C2 36 87       jp nz, .flushToLF
 108++873E C9               ret
 109++873F
 110++873F              ; Send buffer to UART
 111++873F              ; HL - buff
 112++873F              ; E - count
 113++873F              espSend:
 114++873F 7E               ld a, (hl)
 114++8740 CD 1E 85       call Uart.write
 115++8743 23               inc hl
 116++8744 1D               dec e
 117++8745 C2 3F 87         jp nz, espSend
 118++8748 C9               ret
 119++8749
 120++8749              ; HL - string that ends with one of the terminator(CR/LF/TAB/NULL)
 121++8749              espSendT:
 122++8749 7E               ld a, (hl)
 123++874A
 124++874A A7               and a
 124++874B C8             ret z
 125++874C FE 09            cp 9
 125++874E C8             ret z
 126++874F FE 0D            cp 13
 126++8751 C8             ret z
 127++8752 FE 0A            cp 10
 127++8754 C8             ret z
 128++8755
 129++8755 CD 1E 85         call Uart.write
 130++8758 23               inc hl
 131++8759 C3 49 87         jp espSendT
 132++875C
 133++875C              ; HL - stringZ to send
 134++875C              ; Adds CR LF
 135++875C              tcpSendZ:
 136++875C E5               push hl
 137++875D                  EspSend "AT+CIPSEND="
 137++875D 21 67 87    >    ld hl, .txtB
 137++8760 1E 0B       >    ld e, (.txtE - .txtB)
 137++8762 CD 3F 87    >    call espSend
 137++8765 18 0B       >    jr .txtE
 137++8767             >.txtB
 137++8767 41 54 2B 43 >    db "AT+CIPSEND="
 137++876B 49 50 53 45 >
 137++876F 4E 44 3D    >
 137++8772             >.txtE
 138++8772 D1               pop de
 138++8773 D5             push de
 139++8774 CD 2F 85         call strLen
 140++8777 23               inc hl
 140++8778 23             inc hl ; +CRLF
 141++8779 CD 47 88         call hlToNumEsp
 142++877C 3E 0D            ld a, 13
 142++877E CD 1E 85       call Uart.write
 143++8781 3E 0A            ld a, 10
 143++8783 CD 1E 85       call Uart.write
 144++8786 CD CA 86         call checkOkErr
 144++8789 D8             ret c
 145++878A              .wait
 146++878A CD 05 85         call Uart.read
 146++878D FE 3E          cp '>'
 146++878F C2 8A 87       jp nz, .wait
 147++8792 E1               pop hl
 148++8793              .loop
 149++8793 7E               ld a, (hl)
 149++8794 A7             and a
 149++8795 CA 9F 87       jp z, .exit
 150++8798 CD 1E 85         call Uart.write
 151++879B 23               inc hl
 152++879C C3 93 87         jp .loop
 153++879F              .exit
 154++879F 3E 0D            ld a, 13
 154++87A1 CD 1E 85       call Uart.write
 155++87A4 3E 0A            ld a, 10
 155++87A6 CD 1E 85       call Uart.write
 156++87A9 C3 CA 86         jp checkOkErr
 157++87AC
 158++87AC              getPacket:
 159++87AC CD 05 85         call Uart.read
 160++87AF FE 2B            cp '+'
 160++87B1 CA E2 87       jp z, .ipdBegun    ; "+IPD," packet
 161++87B4 FE 4F            cp 'O'
 161++87B6 CA BC 87       jp z, .closedBegun ; It enough to check "OSED\n" :-)
 162++87B9 C3 AC 87         jp getPacket
 163++87BC              .closedBegun
 164++87BC CD 05 85         call Uart.read
 164++87BF FE 53          cp 'S'
 164++87C1 C2 AC 87       jp nz, getPacket
 165++87C4 CD 05 85         call Uart.read
 165++87C7 FE 45          cp 'E'
 165++87C9 C2 AC 87       jp nz, getPacket
 166++87CC CD 05 85         call Uart.read
 166++87CF FE 44          cp 'D'
 166++87D1 C2 AC 87       jp nz, getPacket
 167++87D4 CD 05 85         call Uart.read
 167++87D7 FE 0D          cp 13
 167++87D9 C2 AC 87       jp nz, getPacket
 168++87DC 3E 01 32 3D      ld a, 1, (closed), a
 168++87E0 85
 169++87E1 C9               ret
 170++87E2              .ipdBegun
 171++87E2 CD 05 85         call Uart.read
 171++87E5 FE 49          cp 'I'
 171++87E7 C2 AC 87       jp nz, getPacket
 172++87EA CD 05 85         call Uart.read
 172++87ED FE 50          cp 'P'
 172++87EF C2 AC 87       jp nz, getPacket
 173++87F2 CD 05 85         call Uart.read
 173++87F5 FE 44          cp 'D'
 173++87F7 C2 AC 87       jp nz, getPacket
 174++87FA CD 05 85         call Uart.read ; Comma
 175++87FD CD 2D 88         call .count_ipd_lenght
 175++8800 22 39 85       ld (bytes_avail), hl
 176++8803 44 4D            ld bc, hl
 177++8805 2A 3B 85         ld hl, (buffer_pointer)
 178++8808              .readp
 179++8808 7C               ld a, h
 179++8809 FE FE          cp #fe
 179++880B D2 21 88       jp nc, .skipbuff
 180++880E C5 E5            push bc, hl
 181++8810 CD 05 85         call Uart.read
 182++8813 E1 C1            pop hl, bc
 183++8815 77               ld (hl), a
 184++8816 0B               dec bc
 184++8817 23             inc hl
 185++8818 78               ld a, b
 185++8819 B1             or c
 185++881A C2 08 88       jp nz, .readp
 186++881D 22 3B 85         ld (buffer_pointer), hl
 187++8820 C9               ret
 188++8821              .skipbuff
 189++8821 C5               push bc
 190++8822 CD 05 85         call Uart.read
 191++8825 C1               pop bc
 192++8826 0B               dec bc
 192++8827 78             ld a, b
 192++8828 B1             or c
 192++8829 C2 21 88       jp nz, .skipbuff
 193++882C C9               ret
 194++882D              .count_ipd_lenght
 195++882D 21 00 00     		ld hl,0			; count lenght
 196++8830 E5           .cil1	push  hl
 197++8831 CD 05 85             call Uart.read
 198++8834 E1                   pop hl
 199++8835 FE 3A        		cp ':'
 199++8837 C8             ret z
 200++8838 D6 30        		sub 0x30
 200++883A 4D             ld c,l
 200++883B 44             ld b,h
 200++883C 29             add hl,hl
 200++883D 29             add hl,hl
 200++883E 09             add hl,bc
 200++883F 29             add hl,hl
 200++8840 4F             ld c,a
 200++8841 06 00          ld b,0
 200++8843 09             add hl,bc
 201++8844 C3 30 88     		jp .cil1
 202++8847
 203++8847              ; Based on: https://wikiti.brandonw.net/index.php?title=Z80_Routines:Other:DispHL
 204++8847              ; HL - number
 205++8847              ; It will be written to UART
 206++8847              hlToNumEsp:
 207++8847 01 F0 D8     	ld	bc,-10000
 208++884A CD 60 88     	call	.n1
 209++884D 01 18 FC     	ld	bc,-1000
 210++8850 CD 60 88     	call	.n1
 211++8853 01 9C FF     	ld	bc,-100
 212++8856 CD 60 88     	call	.n1
 213++8859 0E F6        	ld	c,-10
 214++885B CD 60 88     	call	.n1
 215++885E 0E FF        	ld	c,-1
 216++8860 3E 2F        .n1	ld	a,'0'-1
 217++8862 3C           .n2	inc	a
 218++8863 09           	add	hl,bc
 219++8864 DA 62 88     	jp	c, .n2
 220++8867 ED 42        	sbc	hl,bc
 221++8869 C5               push bc
 222++886A CD 1E 85     	call Uart.write
 223++886D C1               pop bc
 224++886E C9               ret
 225++886F              flushToLF1
 226++886F CD 05 85         call Uart.read
 227++8872 FE 0A            cp 10
 227++8874 C2 6F 88       jp nz, flushToLF1
 228++8877 C9               ret
 229++8878                  ENDMODULE
# file closed: drivers/wifi.asm
  35+ 8878              	ENDIF
  36+ 8878
  37+ 8878                  IFDEF SMUCRTC
  38+ 8878 ~                include "smuc-rtc.asm"
  39+ 8878                  ENDIF
  40+ 8878
  41+ 8878                  IFDEF NOSRTC
  42+ 8878 ~                include "nos-rtc.asm"
  43+ 8878                  ENDIF
  44+ 8878
  45+ 8878
  46+ 8878              	include "proxy.asm"
# file opened: drivers/proxy.asm
   1++8878                  IFDEF PROXY
   2++8878 ~                MODULE Wifi
   3++8878 ~            ; Same singature as wifi.openTCP
   4++8878 ~            ; HL - host pointer in gopher row
   5++8878 ~            ; DE - port pointer in gopher row
   6++8878 ~            openTCP:
   7++8878 ~                push de
   8++8878 ~                push hl
   9++8878 ~
  10++8878 ~                xor a
  10++8878 ~              ld hl, hostBuff, de, hostBuff + 1, bc, 102, (hl), a
  10++8878 ~              ldir
  11++8878 ~
  12++8878 ~                EspCmdOkErr "AT+CIPCLOSE"
  13++8878 ~                EspCmdOkErr 'AT+CIPSTART="TCP","138.68.76.243",6912' // Replace here for yourown proxy. If you wish
  14++8878 ~                jr c, .error
  15++8878 ~                pop hl
  15++8878 ~              ld de, hostBuff
  16++8878 ~            .copyHost
  17++8878 ~                ld a, (hl)
  17++8878 ~              and a
  17++8878 ~              jr z, 1F
  17++8878 ~              and a
  17++8878 ~              jr z, 1F
  18++8878 ~                ld (de), a
  18++8878 ~              inc hl, de
  19++8878 ~                jr .copyHost
  20++8878 ~            1   xor a
  20++8878 ~              ld (de), a
  21++8878 ~                pop hl
  21++8878 ~              ld de, portBuff
  22++8878 ~            .copyPort
  23++8878 ~                ld a, (hl)
  23++8878 ~              and a
  23++8878 ~              jr z, 1F
  23++8878 ~              and a
  23++8878 ~              jr z, 1F
  24++8878 ~                ld (de), a
  24++8878 ~              inc hl, de
  25++8878 ~                jr .copyPort
  26++8878 ~            1   ld hl, hostBuff
  26++8878 ~              call tcpSendZ
  27++8878 ~                ld hl, portBuff
  27++8878 ~              call tcpSendZ
  28++8878 ~                xor a
  28++8878 ~              ld (closed), a
  29++8878 ~                ret
  30++8878 ~            .error
  31++8878 ~                pop hl
  31++8878 ~              pop de
  32++8878 ~                ret
  33++8878 ~
  34++8878 ~            continue:
  35++8878 ~                EspCmdOkErr "AT+CIPSEND=1"
  36++8878 ~                ret c
  37++8878 ~            .wait
  38++8878 ~                call Uart.read
  38++8878 ~              cp '>'
  38++8878 ~              jr nz, .wait
  39++8878 ~                ld a, 'c'
  39++8878 ~              call Uart.write
  40++8878 ~                jp checkOkErr
  41++8878 ~
  42++8878 ~            hostBuff ds 96
  43++8878 ~            portBuff ds 7
  44++8878 ~                ENDMODULE
  45++8878                  ENDIF
# file closed: drivers/proxy.asm
  47+ 8878              	include "memory.asm"
# file opened: drivers/memory.asm
   1++8878                  module Memory
   2++8878              BANKM = #5b5c
   3++8878              MEM_PORT = #7ffd
   4++8878
   5++8878              init:
   6++8878 F3               di
   7++8879 FD CB 01 A6      res 4, (iy + 1)
   8++887D
   9++887D AF               xor a
   9++887E CD 82 88       call setPage
  10++8881 C9               ret
  11++8882
  12++8882              ; a - page
  13++8882              setPage:
  14++8882 F6 18            or #18
  14++8884 32 5C 5B       ld (BANKM), a
  15++8887 01 FD 7F         ld bc, MEM_PORT
  15++888A ED 79          out (c), a
  16++888C C9               ret
  17++888D
  18++888D                  endmodule
# file closed: drivers/memory.asm
  48+ 888D              	include "general-sound.asm"
# file opened: drivers/general-sound.asm
   1++888D                  ifdef GS
   2++888D ~                macro GS_WaitCommand
   3++888D ~            .wait
   4++888D ~                in a, (GeneralSound.CMD)
   5++888D ~                rrca
   6++888D ~                jr c, .wait
   7++888D ~                endm
   8++888D ~
   9++888D ~                macro GS_WaitData
  10++888D ~            .wait
  11++888D ~                in a, (GeneralSound.CMD)
  12++888D ~                rlca
  13++888D ~                jr c, .wait
  14++888D ~                endm
  15++888D ~
  16++888D ~                macro GS_SendCommand nn
  17++888D ~                ld a, nn
  17++888D ~              out (GeneralSound.CMD), a
  18++888D ~                endm
  19++888D ~
  20++888D ~                module GeneralSound
  21++888D ~            ;; Control ports
  22++888D ~            CMD  = 187
  23++888D ~            DATA = 179
  24++888D ~
  25++888D ~            ;; Commands
  26++888D ~            CMD_WARM_RESET      = #F3
  27++888D ~            CMD_COLD_RESET      = #F4
  28++888D ~            CMD_LOAD_MODULE     = #30
  29++888D ~            CMD_PLAY_MODULE     = #31
  30++888D ~            CMD_STOP_MODULE     = #32
  31++888D ~            CMD_CONTINUE_MODULE = #33
  32++888D ~            CMD_OPEN_STREAM     = #D1
  33++888D ~            CMD_CLOSE_STREAM    = #D2
  34++888D ~
  35++888D ~            ; A - 0 warm reset, other - cold
  36++888D ~            init:
  37++888D ~                and a
  37++888D ~              jr nz, .cold
  38++888D ~                GS_SendCommand CMD_WARM_RESET
  39++888D ~                ret
  40++888D ~            .cold
  41++888D ~                GS_SendCommand CMD_COLD_RESET
  42++888D ~                ret
  43++888D ~
  44++888D ~            ;; Initializes loading module
  45++888D ~            loadModule:
  46++888D ~                GS_SendCommand CMD_LOAD_MODULE
  47++888D ~                GS_WaitCommand
  48++888D ~                GS_SendCommand CMD_OPEN_STREAM
  49++888D ~                GS_WaitCommand
  50++888D ~                ret
  51++888D ~
  52++888D ~            ;; Use it for streaming mod file
  53++888D ~            sendByte:
  54++888D ~                out (DATA), a
  55++888D ~                GS_WaitData
  56++888D ~                ret
  57++888D ~
  58++888D ~            ;; Call it when module was loaded
  59++888D ~            finishLoadingModule:
  60++888D ~                GS_SendCommand CMD_CLOSE_STREAM
  61++888D ~                GS_WaitCommand
  62++888D ~            rewind:
  63++888D ~                ld a, 1
  63++888D ~              out (DATA), a
  64++888D ~                GS_SendCommand CMD_PLAY_MODULE
  65++888D ~                GS_WaitCommand
  66++888D ~                ld a, 1, (state),a
  67++888D ~                ret
  68++888D ~
  69++888D ~            ;; Works like pause too
  70++888D ~            stopModule:
  71++888D ~                xor a
  71++888D ~              ld (state), a
  72++888D ~                GS_SendCommand CMD_STOP_MODULE
  73++888D ~                ret
  74++888D ~
  75++888D ~            continueModule:
  76++888D ~                ld a, 1
  76++888D ~              ld (state), a
  77++888D ~                GS_SendCommand CMD_CONTINUE_MODULE
  78++888D ~                ret
  79++888D ~
  80++888D ~            ; Pauses resumes
  81++888D ~            toggleModule:
  82++888D ~                call Console.waitForKeyUp
  83++888D ~                ld a, (state)
  83++888D ~              and a
  84++888D ~                jr z, continueModule
  85++888D ~                jr stopModule
  86++888D ~
  87++888D ~            toggleDownload:
  88++888D ~                ld a,(GSdownType)
  89++888D ~                xor 1
  90++888D ~                ld (GSdownType),a
  91++888D ~                ret
  92++888D ~
  93++888D ~            GSdownType  db 0
  94++888D ~            state db 0
  95++888D ~                endmodule
  96++888D ~
  97++888D                  endif
# file closed: drivers/general-sound.asm
  49+ 888D
# file closed: drivers/index.asm
  38  888D                  include "screen/rtc.asm"
# file opened: screen/rtc.asm
   1+ 888D              printRTC
   2+ 888D              	ifdef SMUCRTC
   3+ 888D ~            	;печать текущего времени
   4+ 888D ~            	call Clock.readTime
   5+ 888D ~            	jr nc,read_time_ok
   6+ 888D ~            	; ld hl,mes_no_RTC
   7+ 888D ~            	; call print_mes
   8+ 888D ~            	; scf
   9+ 888D ~            	ret ;выход
  10+ 888D ~            read_time_ok
  11+ 888D ~            	push bc
  12+ 888D ~            	ld l,e ;часы
  13+ 888D ~            	ld h,0
  14+ 888D ~            	call toDecimal
  15+ 888D ~            	ld de,00 ;координаты
  16+ 888D ~            	call TextMode.gotoXY
  17+ 888D ~            	ld hl,decimalS+3
  18+ 888D ~            	call TextMode.printZ
  19+ 888D ~            	ld a,":"
  20+ 888D ~            	call TextMode.putC
  21+ 888D ~            	pop bc
  22+ 888D ~            	ld l,b ;минуты
  23+ 888D ~            	ld h,0
  24+ 888D ~            	call toDecimal
  25+ 888D ~            	ld hl,decimalS+3
  26+ 888D ~            	call TextMode.printZ
  27+ 888D ~            	; ld a,":"
  28+ 888D ~            	; call TextMode.putC
  29+ 888D ~            	; ld l,c ;секунды
  30+ 888D ~            	; ld h,0
  31+ 888D ~            	; call toDecimal
  32+ 888D ~            	; ld hl,decimalS+3
  33+ 888D ~            	; call TextMode.printZ
  34+ 888D ~            	; or a ;нет ошибки
  35+ 888D ~            	ret
  36+ 888D ~
  37+ 888D ~
  38+ 888D ~            toDecimal		;конвертирует 2 байта в 5 десятичных цифр
  39+ 888D ~            				;на входе в HL число
  40+ 888D ~            			ld de,10000 ;десятки тысяч
  41+ 888D ~            			ld a,255
  42+ 888D ~            toDecimal10k
  43+ 888D ~            			and a
  44+ 888D ~            			sbc hl,de
  45+ 888D ~            			inc a
  46+ 888D ~            			jr nc,toDecimal10k
  47+ 888D ~            			add hl,de
  48+ 888D ~            			add a,48
  49+ 888D ~            			ld (decimalS),a
  50+ 888D ~            			ld de,1000 ;тысячи
  51+ 888D ~            			ld a,255
  52+ 888D ~            toDecimal1k
  53+ 888D ~            			and a
  54+ 888D ~            			sbc hl,de
  55+ 888D ~            			inc a
  56+ 888D ~            			jr nc,toDecimal1k
  57+ 888D ~            			add hl,de
  58+ 888D ~            			add a,48
  59+ 888D ~            			ld (decimalS+1),a
  60+ 888D ~            			ld de,100 ;сотни
  61+ 888D ~            			ld a,255
  62+ 888D ~            toDecimal01k
  63+ 888D ~            			and a
  64+ 888D ~            			sbc hl,de
  65+ 888D ~            			inc a
  66+ 888D ~            			jr nc,toDecimal01k
  67+ 888D ~            			add hl,de
  68+ 888D ~            			add a,48
  69+ 888D ~            			ld (decimalS+2),a
  70+ 888D ~            			ld de,10 ;десятки
  71+ 888D ~            			ld a,255
  72+ 888D ~            toDecimal001k
  73+ 888D ~            			and a
  74+ 888D ~            			sbc hl,de
  75+ 888D ~            			inc a
  76+ 888D ~            			jr nc,toDecimal001k
  77+ 888D ~            			add hl,de
  78+ 888D ~            			add a,48
  79+ 888D ~            			ld (decimalS+3),a
  80+ 888D ~            			ld de,1 ;единицы
  81+ 888D ~            			ld a,255
  82+ 888D ~            toDecimal0001k
  83+ 888D ~            			and a
  84+ 888D ~            			sbc hl,de
  85+ 888D ~            			inc a
  86+ 888D ~            			jr nc,toDecimal0001k
  87+ 888D ~            			add hl,de
  88+ 888D ~            			add a,48
  89+ 888D ~            			ld (decimalS+4),a
  90+ 888D ~            			ret
  91+ 888D ~
  92+ 888D              	ENDIF
  93+ 888D
  94+ 888D              	IFDEF NOSRTC
  95+ 888D ~            	call Clock.readTime	;bc=date, hl=time
  96+ 888D ~
  97+ 888D ~            	push hl
  98+ 888D ~            	pop de
  99+ 888D ~            	ld a,e
 100+ 888D ~                add a,a
 101+ 888D ~                and 63	;seconds
 102+ 888D ~            	ld (seconds),a
 103+ 888D ~
 104+ 888D ~            	ld a,d
 105+ 888D ~                rra
 106+ 888D ~                rra
 107+ 888D ~                rra
 108+ 888D ~                and 31 		;hours
 109+ 888D ~            	ld (hours),a
 110+ 888D ~
 111+ 888D ~                ex de,hl
 112+ 888D ~                add hl,hl
 113+ 888D ~                add hl,hl
 114+ 888D ~                add hl,hl
 115+ 888D ~                ex de,hl
 116+ 888D ~                ld a,d
 117+ 888D ~                and 63       ;minutes
 118+ 888D ~             	ld (minutes),a
 119+ 888D ~
 120+ 888D ~            ;        ld a,h
 121+ 888D ~            ;        srl a
 122+ 888D ~            ;        ;sub 20
 123+ 888D ~            ;        ld b,0x93		;year
 124+ 888D ~            ;        call send2ve
 125+ 888D ~            ;
 126+ 888D ~            ;        ld a,l
 127+ 888D ~            ;        and 31
 128+ 888D ~            ;        ld b,0x13		;day
 129+ 888D ~            ;        call send2ve
 130+ 888D ~            ;
 131+ 888D ~            ;        add hl,hl
 132+ 888D ~            ;        add hl,hl
 133+ 888D ~            ;        add hl,hl
 134+ 888D ~            ;        ld a,h
 135+ 888D ~            ;        and 15
 136+ 888D ~            ;        ld b,0x53	        ;month
 137+ 888D ~            ;        call send2ve
 138+ 888D ~            	ld a, (oldminutes)
 139+ 888D ~            	ld d,a
 140+ 888D ~            	ld a, (minutes)
 141+ 888D ~            	cp d
 142+ 888D ~            	ret z
 143+ 888D ~            	ld (oldminutes), a
 144+ 888D ~
 145+ 888D ~            	ld d,1 ;координаты
 146+ 888D ~            	ld e,73
 147+ 888D ~            	call TextMode.gotoXY
 148+ 888D ~            	ld a,'['
 149+ 888D ~            	call TextMode.putC
 150+ 888D ~            	ld h,0
 151+ 888D ~            	ld a,(hours) ;часы
 152+ 888D ~            	ld l,a
 153+ 888D ~            	call toDecimal
 154+ 888D ~            	ld hl,decimalS+3
 155+ 888D ~            	call TextMode.printZ
 156+ 888D ~            	ld a,':'
 157+ 888D ~            	call TextMode.putC
 158+ 888D ~            	ld h,0
 159+ 888D ~            	ld a,(minutes) ;минуты
 160+ 888D ~            	ld l,a
 161+ 888D ~            	call toDecimal
 162+ 888D ~            	ld hl,decimalS+3
 163+ 888D ~            	call TextMode.printZ
 164+ 888D ~            	;ld a,':'
 165+ 888D ~            	;call TextMode.putC
 166+ 888D ~            	;ld h,0
 167+ 888D ~            	;ld a,(seconds) ;секунды
 168+ 888D ~            	;ld l,a
 169+ 888D ~            	;call toDecimal
 170+ 888D ~            	;ld hl,decimalS+3
 171+ 888D ~            	;call TextMode.printZ
 172+ 888D ~            	ld a,']'
 173+ 888D ~            	call TextMode.putC
 174+ 888D ~            	ret
 175+ 888D ~
 176+ 888D ~            toDecimal		;конвертирует 2 байта в 5 десятичных цифр
 177+ 888D ~            				;на входе в HL число
 178+ 888D ~            			ld de,10000 ;десятки тысяч
 179+ 888D ~            			ld a,255
 180+ 888D ~            toDecimal10k
 181+ 888D ~            			and a
 182+ 888D ~            			sbc hl,de
 183+ 888D ~            			inc a
 184+ 888D ~            			jr nc,toDecimal10k
 185+ 888D ~            			add hl,de
 186+ 888D ~            			add a,48
 187+ 888D ~            			ld (decimalS),a
 188+ 888D ~            			ld de,1000 ;тысячи
 189+ 888D ~            			ld a,255
 190+ 888D ~            toDecimal1k
 191+ 888D ~            			and a
 192+ 888D ~            			sbc hl,de
 193+ 888D ~            			inc a
 194+ 888D ~            			jr nc,toDecimal1k
 195+ 888D ~            			add hl,de
 196+ 888D ~            			add a,48
 197+ 888D ~            			ld (decimalS+1),a
 198+ 888D ~            			ld de,100 ;сотни
 199+ 888D ~            			ld a,255
 200+ 888D ~            toDecimal01k
 201+ 888D ~            			and a
 202+ 888D ~            			sbc hl,de
 203+ 888D ~            			inc a
 204+ 888D ~            			jr nc,toDecimal01k
 205+ 888D ~            			add hl,de
 206+ 888D ~            			add a,48
 207+ 888D ~            			ld (decimalS+2),a
 208+ 888D ~            			ld de,10 ;десятки
 209+ 888D ~            			ld a,255
 210+ 888D ~            toDecimal001k
 211+ 888D ~            			and a
 212+ 888D ~            			sbc hl,de
 213+ 888D ~            			inc a
 214+ 888D ~            			jr nc,toDecimal001k
 215+ 888D ~            			add hl,de
 216+ 888D ~            			add a,48
 217+ 888D ~            			ld (decimalS+3),a
 218+ 888D ~            			ld de,1 ;единицы
 219+ 888D ~            			ld a,255
 220+ 888D ~            toDecimal0001k
 221+ 888D ~            			and a
 222+ 888D ~            			sbc hl,de
 223+ 888D ~            			inc a
 224+ 888D ~            			jr nc,toDecimal0001k
 225+ 888D ~            			add hl,de
 226+ 888D ~            			add a,48
 227+ 888D ~            			ld (decimalS+4),a
 228+ 888D ~            			ret
 229+ 888D ~            hours
 230+ 888D ~            	db 0
 231+ 888D ~            minutes
 232+ 888D ~            	db 0
 233+ 888D ~            seconds
 234+ 888D ~            	db 0
 235+ 888D              	ENDIF
 236+ 888D
 237+ 888D              	IFDEF MSX
 238+ 888D              	ENDIF
 239+ 888D
 240+ 888D C9           	ret
 241+ 888E 00 00 00...  decimalS	ds 6 ;десятичные цифры
 242+ 8894
 243+ 8894              oldminutes
 244+ 8894 FF           	db 255
 245+ 8895
 246+ 8895
 247+ 8895
# file closed: screen/rtc.asm
  39  8895                  IFNDEF NEDOOS
  40  8895                  include "player/vortex-processor.asm"
# file opened: player/vortex-processor.asm
   1+ 8895                  MODULE VortexProcessor
   2+ 8895              	IFDEF MSX
   3+ 8895 ~            play:
   4+ 8895 ~                call Console.peekC
   4+ 8895 ~              and a
   5+ 8895 ~                jr nz, play
   6+ 8895 ~
   7+ 8895 ~                ld hl, message
   7+ 8895 ~              call DialogBox.msgNoWait
   8+ 8895 ~
   9+ 8895 ~                ld hl, outputBuffer
   9+ 8895 ~              call VTPL.INIT
  10+ 8895 ~            .loop
  11+ 8895 ~                halt
  11+ 8895 ~              di
  11+ 8895 ~              call VTPL.PLAY
  11+ 8895 ~              ei
  12+ 8895 ~                call Console.peekC
  12+ 8895 ~              and a
  12+ 8895 ~              jp nz, .stop
  13+ 8895 ~                jr nc, .loop
  14+ 8895 ~            .stop
  15+ 8895 ~                call VTPL.MUTE
  16+ 8895 ~            .wlp
  17+ 8895 ~                call Console.peekC
  17+ 8895 ~              and a
  18+ 8895 ~                jr nz, .wlp
  19+ 8895 ~                ret
  20+ 8895 ~
  21+ 8895 ~            message db "Press key to stop...", 0
  22+ 8895 ~                ENDMODULE
  23+ 8895 ~                include "msxplayer.asm"
  24+ 8895              	ELSE
  25+ 8895              play:
  26+ 8895 3E FF            ld a, 255
  27+ 8897 32 94 88         ld (oldminutes), a
  28+ 889A
  29+ 889A CD 29 68         call Console.waitForKeyUp
  30+ 889D
  31+ 889D 21 D8 88         ld hl, message
  31+ 88A0 CD FA 67       call DialogBox.msgNoWait
  32+ 88A3
  33+ 88A3 21 08 95         ld hl, outputBuffer
  33+ 88A6 CD 2E 89       call VTPL.INIT
  34+ 88A9
  35+ 88A9
  36+ 88A9 3E 01 32 45      ld a, 1, (Render.play_next), a
  36+ 88AD 67
  37+ 88AE
  38+ 88AE                  IFDEF GS
  39+ 88AE ~                call GeneralSound.stopModule
  40+ 88AE                  ENDIF
  41+ 88AE              .loop
  42+ 88AE 76               halt
  42+ 88AF F3             di
  42+ 88B0 CD 51 91       call VTPL.PLAY
  42+ 88B3 FB             ei
  43+ 88B4 AF               xor a
  43+ 88B5 DB FE          in a, (#fe)
  43+ 88B7 2F             cpl
  43+ 88B8 E6 1F          and 31
  43+ 88BA C2 D2 88       jp nz, .stopKey
  44+ 88BD CD 8D 88         call printRTC
  45+ 88C0 3A F7 88         ld a, (VTPL.SETUP)
  45+ 88C3 17             rla
  45+ 88C4 30 E8          jr nc, .loop
  46+ 88C6 3E 01 32 45      ld a, 1, (Render.play_next), a
  46+ 88CA 67
  47+ 88CB              .stop
  48+ 88CB CD 1C 89         call VTPL.MUTE
  49+ 88CE
  50+ 88CE                  IFDEF AY
  51+ 88CE ~                call restoreAyState
  52+ 88CE                  ENDIF
  53+ 88CE
  54+ 88CE CD 29 68         call Console.waitForKeyUp
  55+ 88D1 C9               ret
  56+ 88D2              .stopKey
  57+ 88D2 AF               xor a
  57+ 88D3 32 45 67       ld (Render.play_next), a
  58+ 88D6 18 F3            jr .stop
  59+ 88D8
  60+ 88D8                  IFDEF AY
  61+ 88D8 ~            restoreAyState:
  62+ 88D8 ~                ld a, #07
  63+ 88D8 ~                ld bc, #fffd
  64+ 88D8 ~                out (c), a
  65+ 88D8 ~                ld a, #fc
  66+ 88D8 ~                ld b, #bf
  67+ 88D8 ~                out (c), a ; Enable read mode
  68+ 88D8 ~
  69+ 88D8 ~                ld a, #0e
  70+ 88D8 ~                ld bc, #fffd
  71+ 88D8 ~                out (c), a
  72+ 88D8 ~                ret
  73+ 88D8              	ENDIF
  74+ 88D8 50 72 65 73  message db "Press key to stop...", 0
  74+ 88DC 73 20 6B 65
  74+ 88E0 79 20 74 6F
  74+ 88E4 20 73 74 6F
  74+ 88E8 70 2E 2E 2E
  74+ 88EC 00
  75+ 88ED                  ENDMODULE
  76+ 88ED                  include "player.asm"
# file opened: player/player.asm
   1++88ED              ;Universal PT2'n'PT3 Turbo Sound player for ZX Spectrum
   2++88ED              ;(c)2004-2007 S.V.Bulba <vorobey@mail.khstu.ru>
   3++88ED              ;Specially for AlCo
   4++88ED              ;http://bulba.untergrund.net/ (http://bulba.at.kz/)
   5++88ED              	MODULE VTPL
   6++88ED              ;Release number
   7++88ED              Release EQU "0"
   8++88ED              ;Conditional assembly
   9++88ED              ;1) Current position counters at (Vars1+0) and (Vars2+0)
  10++88ED              CurPosCounter=0
  11++88ED              ;2) Allow channels allocation bits at (START+10)
  12++88ED              ACBBAC=0
  13++88ED              ;3) Allow loop checking and disabling
  14++88ED              LoopChecker=1
  15++88ED              ;4) Insert official identificator
  16++88ED              Id=0
  17++88ED              ;5) Set IY for correct return to ZX Basic
  18++88ED              Basic=1
  19++88ED
  20++88ED              ;Features
  21++88ED              ;--------
  22++88ED              ;-Can be compiled at any address (i.e. no need rounding ORG
  23++88ED              ; address).
  24++88ED              ;-Variables (VARS) can be located at any address (not only after
  25++88ED              ; code block).
  26++88ED              ;-INIT subprogram checks PT3-module version and rightly
  27++88ED              ; generates both note and volume tables outside of code block
  28++88ED              ; (in VARS).
  29++88ED              ;-Two portamento (spc. command 3xxx) algorithms (depending of
  30++88ED              ; PT3 module version).
  31++88ED              ;-New 1.XX and 2.XX special command behaviour (only for PT v3.7
  32++88ED              ; and higher).
  33++88ED              ;-Any Tempo value are accepted (including Tempo=1 and Tempo=2).
  34++88ED              ;-TS modes: 2xPT3, 2xPT2 and PT v3.7 TS standard.
  35++88ED              ;-Fully compatible with Ay_Emul PT3 and PT2 players codes.
  36++88ED              ;-See also notes at the end of this source code.
  37++88ED
  38++88ED              ;Limitations
  39++88ED              ;-----------
  40++88ED              ;-Can run in RAM only (self-modified code is used).
  41++88ED              ;-PT2 position list must be end by #FF marker only.
  42++88ED
  43++88ED              ;Warning!!! PLAY subprogram can crash if no module are loaded
  44++88ED              ;into RAM or INIT subprogram was not called before.
  45++88ED
  46++88ED              ;Call MUTE or INIT one more time to mute sound after stopping
  47++88ED              ;playing
  48++88ED
  49++88ED              ;Test codes (commented)
  50++88ED              ;	LD A,32 ;SinglePT3(TS if TSPT3.7),ABC,Looped
  51++88ED              ;	LD (START+10),A
  52++88ED              ;	LD HL,#8000 ;Mod1
  53++88ED              ;	LD DE,#A000 ;Mod2 (optional)
  54++88ED              ;	CALL START+3
  55++88ED              ;	EI
  56++88ED              ;_LP	HALT
  57++88ED              ;	CALL START+5
  58++88ED              ;	XOR A
  59++88ED              ;	IN A,(#FE)
  60++88ED              ;	CPL
  61++88ED              ;	AND 15
  62++88ED              ;	JR Z,_LP
  63++88ED              ;	JR START+8
  64++88ED
  65++88ED              TonA	EQU 0
  66++88ED              TonB	EQU 2
  67++88ED              TonC	EQU 4
  68++88ED              Noise	EQU 6
  69++88ED              Mixer	EQU 7
  70++88ED              AmplA	EQU 8
  71++88ED              AmplB	EQU 9
  72++88ED              AmplC	EQU 10
  73++88ED              Env	EQU 11
  74++88ED              EnvTp	EQU 13
  75++88ED
  76++88ED              ;Entry and other points
  77++88ED              ;START initialize playing of modules at MDLADDR (single module)
  78++88ED              ;START+3 initialization with module address in HL and DE (TS)
  79++88ED              ;START+5 play one quark
  80++88ED              ;START+8 mute
  81++88ED              ;START+10 setup and status flags
  82++88ED
  83++88ED              START:
  84++88ED 21 08 95     	LD HL,outputBuffer ;DE - address of 2nd module for TS
  85++88F0 18 3C        	JR INIT
  86++88F2 C3 51 91     	JP PLAY
  87++88F5 18 25        	JR MUTE
  88++88F7 00           SETUP	DB 0 ;set bit0, if you want to play without looping
  89++88F8              	     ;(optional);
  90++88F8              	     ;set bit1 for PT2 and reset for PT3 before
  91++88F8              	     ;calling INIT;
  92++88F8              	     ;bits2-3: %00-ABC, %01-ACB, %10-BAC (optional);
  93++88F8              	     ;bits4-5: %00-no TS, %01-2 modules TS, %10-
  94++88F8              	     ;autodetect PT3 TS-format by AlCo (PT 3.7+);
  95++88F8              	     ;Remark: old PT3 TS-format by AlCo (PT 3.6) is not
  96++88F8              	     ;documented and must be converted to new standard.
  97++88F8              	     ;bit6 is set each time, when loop point of 2nd TS
  98++88F8              	     ;module is passed (optional).
  99++88F8              	     ;bit7 is set each time, when loop point of 1st TS
 100++88F8              	     ;or of single module is passed (optional).
 101++88F8
 102++88F8              ;Identifier
 103++88F8              	IF Id
 104++88F8 ~            	DB "=UniPT2/PT3/TS-Player r.",Release,"="
 105++88F8              	ENDIF
 106++88F8
 107++88F8              	IF LoopChecker
 108++88F8 21 F7 88     CHECKLP	LD HL,SETUP
 109++88FB FD CB 9E 46  	BIT 0,(IY-100+VRS.ModNum)
 110++88FF 28 04        	JR Z,CHL1
 111++8901 CB F6        	SET 6,(HL)
 112++8903 18 02        	JR CHL2
 113++8905 CB FE        CHL1	SET 7,(HL)
 114++8907 CB 46        CHL2	BIT 0,(HL)
 115++8909 C8           	RET Z
 116++890A E1           	POP HL
 117++890B FD 34 09     	INC (IY-100+VRS.DelyCnt)
 118++890E FD 34 BA     	INC (IY-100+VRS.ChanA+CHP.NtSkCn)
 119++8911 AF           	XOR A
 120++8912 FD 77 1D     	LD (IY-100+VRS.AYREGS+AmplA),A
 121++8915 FD 77 1E     	LD (IY-100+VRS.AYREGS+AmplB),A
 122++8918 FD 77 1F     	LD (IY-100+VRS.AYREGS+AmplC),A
 123++891B C9           	RET
 124++891C              	ENDIF
 125++891C
 126++891C AF           MUTE: XOR A
 127++891D 67           	LD H,A
 128++891E 6F           	LD L,A
 129++891F 32 A6 92     	LD (VARS1+VRS.AYREGS+AmplA),A
 130++8922 22 A7 92     	LD (VARS1+VRS.AYREGS+AmplB),HL
 131++8925 32 2D 93     	LD (VARS2+VRS.AYREGS+AmplA),A
 132++8928 22 2E 93     	LD (VARS2+VRS.AYREGS+AmplB),HL
 133++892B C3 69 91     	JP ROUT
 134++892E
 135++892E              INIT:
 136++892E              ;HL - AddressOfModule
 137++892E              ;DE - AddresOf2ndModule
 138++892E D5           	PUSH DE
 139++892F E5           	PUSH HL
 140++8930 21 24 92     	LD HL,VARS
 141++8933 36 00        	LD (HL),0
 142++8935 11 25 92     	LD DE,VARS+1
 143++8938 01 0E 01     	LD BC,VAR0END-VARS-1
 144++893B ED B0        	LDIR
 145++893D 23           	INC HL
 146++893E 22 87 92     	LD (VARS1+VRS.AdInPtA),HL ;ptr to zero
 147++8941 22 0E 93     	LD (VARS2+VRS.AdInPtA),HL
 148++8944
 149++8944 E1           	POP HL
 150++8945 FD 21 89 92  	LD IY,VARS1+100
 151++8949 3A F7 88     	LD A,(START+10)
 152++894C E6 02        	AND 2
 153++894E C2 D7 89     	JP NZ,I_PT2
 154++8951
 155++8951 CD 24 8B     	CALL INITPT3
 156++8954 21 18 1F     	LD HL,(e_-SamCnv-2)*256+#18
 157++8957 22 F7 8E     	LD (SamCnv),HL
 158++895A 3E BA        	LD A,#BA
 159++895C 32 C2 8E     	LD (OrnCP),A
 160++895F 32 EE 8E     	LD (SamCP),A
 161++8962 3E 7B        	LD A,#7B
 162++8964 32 C5 8E     	LD (OrnLD),A
 163++8967 32 F1 8E     	LD (SamLD),A
 164++896A 3E 87        	LD A,#87
 165++896C 32 E8 8E     	LD (SamClc2),A
 166++896F E1           	POP HL
 167++8970              	;Use version and ton table of 1st module
 168++8970 DD 7E A9     	LD A,(IX+13-100) ;EXTRACT VERSION NUMBER
 169++8973 D6 30        	SUB #30
 170++8975 38 04        	JR C,L20
 171++8977 FE 0A        	CP 10
 172++8979 38 02        	JR C,L21
 173++897B 3E 06        L20	LD A,6
 174++897D 32 95 8D     L21	LD (Version),A
 175++8980 F5           	PUSH AF ;VolTable version
 176++8981 FE 04        	CP 4
 177++8983 DD 7E FF     	LD A,(IX+99-100) ;TONE TABLE NUMBER
 178++8986 17           	RLA
 179++8987 E6 07        	AND 7
 180++8989 F5           	PUSH AF ;NoteTable number
 181++898A
 182++898A FD 21 10 93  	LD IY,VARS2+100
 183++898E 3A F7 88     	LD A,(START+10)
 184++8991 E6 30        	AND 48
 185++8993 28 37        	JR Z,NOTS
 186++8995 FE 10        	CP 16
 187++8997 28 27        	JR Z,TwoPT3s
 188++8999 3A 95 8D     	LD A,(Version)
 189++899C FE 07        	CP 7
 190++899E 38 2C        	JR C,NOTS
 191++89A0 DD 7E FE     	LD A,(IX+98-100) ;ALCO TS MARKER
 192++89A3 FE 20        	CP #20
 193++89A5 28 25        	JR Z,NOTS
 194++89A7 21 25 92     	LD HL,VARS1
 195++89AA 11 AC 92     	LD DE,VARS2
 196++89AD 01 87 00     	LD BC,VRS
 197++89B0 ED B0        	LDIR
 198++89B2 FD CB 9E CE  	SET 1,(IY-100+VRS.ModNum)
 199++89B6 4F           	LD C,A
 200++89B7 87           	ADD A,A
 201++89B8 81           	ADD A,C
 202++89B9 D6 02        	SUB 2
 203++89BB 32 5C 90     	LD (TSSub),A
 204++89BE 18 03        	JR AlCoTS_
 205++89C0 CD 24 8B     TwoPT3s	CALL INITPT3
 206++89C3 3E 01        AlCoTS_	LD A,1
 207++89C5 32 24 92     	LD (is_ts),A
 208++89C8 FD CB 9E C6  	SET 0,(IY-100+VRS.ModNum)
 209++89CC
 210++89CC 01 E1 8C     NOTS	LD BC,PT3PD
 211++89CF 21 00 00     	LD HL,0
 212++89D2 11 EC 91     	LD DE,PT3EMPTYORN
 213++89D5 18 48        	JR INITCOMMON
 214++89D7
 215++89D7 CD 5C 8B     I_PT2	CALL INITPT2
 216++89DA 21 CB 51     	LD HL,#51CB
 217++89DD 22 F7 8E     	LD (SamCnv),HL
 218++89E0 3E BB        	LD A,#BB
 219++89E2 32 C2 8E     	LD (OrnCP),A
 220++89E5 32 EE 8E     	LD (SamCP),A
 221++89E8 3E 7A        	LD A,#7A
 222++89EA 32 C5 8E     	LD (OrnLD),A
 223++89ED 32 F1 8E     	LD (SamLD),A
 224++89F0 3E 80        	LD A,#80
 225++89F2 32 E8 8E     	LD (SamClc2),A
 226++89F5 E1           	POP HL
 227++89F6 3E 05        	LD A,5
 228++89F8 32 95 8D     	LD (Version),A
 229++89FB F5           	PUSH AF
 230++89FC 3E 02        	LD A,2
 231++89FE F5           	PUSH AF
 232++89FF
 233++89FF 3A F7 88     	LD A,(START+10)
 234++8A02 E6 30        	AND 48
 235++8A04 28 10        	JR Z,NOTS2
 236++8A06
 237++8A06 FD 21 10 93  	LD IY,VARS2+100
 238++8A0A 3E 01        	LD A,1
 239++8A0C 32 24 92     	LD (is_ts),A
 240++8A0F FD CB 9E C6  	SET 0,(IY-100+VRS.ModNum)
 241++8A13 CD 5C 8B     	CALL INITPT2
 242++8A16
 243++8A16 01 1B 8C     NOTS2	LD BC,PT2PD
 244++8A19 21 87 86     	LD HL,#8687
 245++8A1C 11 42 93     	LD DE,PT2EMPTYORN
 246++8A1F
 247++8A1F              INITCOMMON
 248++8A1F
 249++8A1F              	IF Basic
 250++8A1F FD 21 3A 5C  	LD IY,#5C3A
 251++8A23              	ENDIF
 252++8A23
 253++8A23 ED 43 CC 8B  	LD (PTDEC),BC
 254++8A27 22 5E 90     	LD (PsCalc),HL
 255++8A2A D5           	PUSH DE
 256++8A2B
 257++8A2B              ;note table data depacker
 258++8A2B              ;(c) Ivan Roshin
 259++8A2B 11 EF 91     	LD DE,T_PACK
 260++8A2E 01 94 93     	LD BC,T1_+(2*49)-1
 261++8A31 1A           TP_0	LD A,(DE)
 262++8A32 13           	INC DE
 263++8A33 FE 1E        	CP 15*2
 264++8A35 30 06        	JR NC,TP_1
 265++8A37 67           	LD H,A
 266++8A38 1A           	LD A,(DE)
 267++8A39 6F           	LD L,A
 268++8A3A 13           	INC DE
 269++8A3B 18 07        	JR TP_2
 270++8A3D D5           TP_1	PUSH DE
 271++8A3E 16 00        	LD D,0
 272++8A40 5F           	LD E,A
 273++8A41 19           	ADD HL,DE
 274++8A42 19           	ADD HL,DE
 275++8A43 D1           	POP DE
 276++8A44 7C           TP_2	LD A,H
 277++8A45 02           	LD (BC),A
 278++8A46 0B           	DEC BC
 279++8A47 7D           	LD A,L
 280++8A48 02           	LD (BC),A
 281++8A49 0B           	DEC BC
player.asm(282): warning: value 0x1F0 is truncated to 8bit value: 0xF0
 282++8A4A D6 F0        	SUB #F8*2
 283++8A4C 20 E3        	JR NZ,TP_0
 284++8A4E
 285++8A4E 3C           	INC A
 286++8A4F 32 92 92     	LD (VARS1+VRS.DelyCnt),A
 287++8A52 32 19 93     	LD (VARS2+VRS.DelyCnt),A
 288++8A55 21 01 F0     	LD HL,#F001 ;H - CHP.Volume, L - CHP.NtSkCn
 289++8A58 22 43 92     	LD (VARS1+VRS.ChanA+CHP.NtSkCn),HL
 290++8A5B 22 60 92     	LD (VARS1+VRS.ChanB+CHP.NtSkCn),HL
 291++8A5E 22 7D 92     	LD (VARS1+VRS.ChanC+CHP.NtSkCn),HL
 292++8A61 22 CA 92     	LD (VARS2+VRS.ChanA+CHP.NtSkCn),HL
 293++8A64 22 E7 92     	LD (VARS2+VRS.ChanB+CHP.NtSkCn),HL
 294++8A67 22 04 93     	LD (VARS2+VRS.ChanC+CHP.NtSkCn),HL
 295++8A6A E1           	POP HL
 296++8A6B 22 35 92     	LD (VARS1+VRS.ChanA+CHP.OrnPtr),HL
 297++8A6E 22 52 92     	LD (VARS1+VRS.ChanB+CHP.OrnPtr),HL
 298++8A71 22 6F 92     	LD (VARS1+VRS.ChanC+CHP.OrnPtr),HL
 299++8A74 22 BC 92     	LD (VARS2+VRS.ChanA+CHP.OrnPtr),HL
 300++8A77 22 D9 92     	LD (VARS2+VRS.ChanB+CHP.OrnPtr),HL
 301++8A7A 22 F6 92     	LD (VARS2+VRS.ChanC+CHP.OrnPtr),HL
 302++8A7D
 303++8A7D F1           	POP AF
 304++8A7E
 305++8A7E              ;NoteTableCreator (c) Ivan Roshin
 306++8A7E              ;A - NoteTableNumber*2+VersionForNoteTable
 307++8A7E              ;(xx1b - 3.xx..3.4r, xx0b - 3.4x..3.6x..VTII1.0)
 308++8A7E
 309++8A7E 21 9C 91     	LD HL,NT_DATA
 310++8A81 16 00        	LD D,0
 311++8A83 87           	ADD A,A
 312++8A84 5F           	LD E,A
 313++8A85 19           	ADD HL,DE
 314++8A86 5E           	LD E,(HL)
 315++8A87 23           	INC HL
 316++8A88 CB 3B        	SRL E
 317++8A8A 9F           	SBC A,A
 318++8A8B E6 A7        	AND #A7 ;#00 (NOP) or #A7 (AND A)
 319++8A8D 32 B5 8A     	LD (L3),A
 320++8A90 EB           	EX DE,HL
 321++8A91 01 33 93     	LD BC,T1_
 322++8A94 09           	ADD HL,BC
 323++8A95
 324++8A95 1A           	LD A,(DE)
player.asm(325): warning: value 0x91AC is truncated to 8bit value: 0xAC
 325++8A96 C6 AC        	ADD A,T_
 326++8A98 4F           	LD C,A
 327++8A99 CE 91        	ADC A,T_/256
 328++8A9B 91           	SUB C
 329++8A9C 47           	LD B,A
 330++8A9D C5           	PUSH BC
 331++8A9E 11 23 94     	LD DE,NT_
 332++8AA1 D5           	PUSH DE
 333++8AA2
 334++8AA2 06 0C        	LD B,12
 335++8AA4 C5           L1	PUSH BC
 336++8AA5 4E           	LD C,(HL)
 337++8AA6 23           	INC HL
 338++8AA7 E5           	PUSH HL
 339++8AA8 46           	LD B,(HL)
 340++8AA9
 341++8AA9 D5           	PUSH DE
 342++8AAA EB           	EX DE,HL
 343++8AAB 11 17 00     	LD DE,23
 344++8AAE DD 26 08     	LD IXH,8
 345++8AB1
 346++8AB1 CB 38        L2	SRL B
 347++8AB3 CB 19        	RR C
 348++8AB5 19           L3	DB #19	;AND A or NOP
 349++8AB6 79           	LD A,C
 350++8AB7 8A           	ADC A,D	;=ADC 0
 351++8AB8 77           	LD (HL),A
 352++8AB9 23           	INC HL
 353++8ABA 78           	LD A,B
 354++8ABB 8A           	ADC A,D
 355++8ABC 77           	LD (HL),A
 356++8ABD 19           	ADD HL,DE
 357++8ABE DD 25        	DEC IXH
 358++8AC0 20 EF        	JR NZ,L2
 359++8AC2
 360++8AC2 D1           	POP DE
 361++8AC3 13           	INC DE
 362++8AC4 13           	INC DE
 363++8AC5 E1           	POP HL
 364++8AC6 23           	INC HL
 365++8AC7 C1           	POP BC
 366++8AC8 10 DA        	DJNZ L1
 367++8ACA
 368++8ACA E1           	POP HL
 369++8ACB D1           	POP DE
 370++8ACC
 371++8ACC 7B           	LD A,E
player.asm(372): warning: value 0x91B8 is truncated to 8bit value: 0xB8
 372++8ACD FE B8        	CP TCOLD_1
 373++8ACF 20 05        	JR NZ,CORR_1
 374++8AD1 3E FD        	LD A,#FD
 375++8AD3 32 51 94     	LD (NT_+#2E),A
 376++8AD6
 377++8AD6 1A           CORR_1	LD A,(DE)
 378++8AD7 A7           	AND A
 379++8AD8 28 11        	JR Z,TC_EXIT
 380++8ADA 1F           	RRA
 381++8ADB F5           	PUSH AF
 382++8ADC 87           	ADD A,A
 383++8ADD 4F           	LD C,A
 384++8ADE 09           	ADD HL,BC
 385++8ADF F1           	POP AF
 386++8AE0 30 02        	JR NC,CORR_2
 387++8AE2 35           	DEC (HL)
 388++8AE3 35           	DEC (HL)
 389++8AE4 34           CORR_2	INC (HL)
 390++8AE5 A7           	AND A
 391++8AE6 ED 42        	SBC HL,BC
 392++8AE8 13           	INC DE
 393++8AE9 18 EB        	JR CORR_1
 394++8AEB
 395++8AEB              TC_EXIT
 396++8AEB
 397++8AEB F1           	POP AF
 398++8AEC
 399++8AEC              ;VolTableCreator (c) Ivan Roshin
 400++8AEC              ;A - VersionForVolumeTable (0..4 - 3.xx..3.4x;
 401++8AEC              			   ;5.. - 2.x,3.5x..3.6x..VTII1.0)
 402++8AEC
 403++8AEC FE 05        	CP 5
 404++8AEE 21 11 00     	LD HL,#11
 405++8AF1 54           	LD D,H
 406++8AF2 5C           	LD E,H
 407++8AF3 3E 17        	LD A,#17
 408++8AF5 30 03        	JR NC,M1
 409++8AF7 2D           	DEC L
 410++8AF8 5D           	LD E,L
 411++8AF9 AF           	XOR A
 412++8AFA 32 0B 8B     M1      LD (M2),A
 413++8AFD
 414++8AFD DD 21 33 93  	LD IX,VT_+16
 415++8B01
 416++8B01 0E 0F        	LD C,#F
 417++8B03 E5           INITV2  PUSH HL
 418++8B04
 419++8B04 19           	ADD HL,DE
 420++8B05 EB           	EX DE,HL
 421++8B06 ED 62        	SBC HL,HL
 422++8B08
 423++8B08 06 10        	LD B,#10
 424++8B0A 7D           INITV1  LD A,L
 425++8B0B 7D           M2      DB #7D
 426++8B0C 7C           	LD A,H
 427++8B0D CE 00        	ADC A,0
 428++8B0F DD 77 00     	LD (IX),A
 429++8B12 DD 23        	INC IX
 430++8B14 19           	ADD HL,DE
 431++8B15 10 F3        	DJNZ INITV1
 432++8B17
 433++8B17 E1           	POP HL
 434++8B18 7B           	LD A,E
 435++8B19 FE 77        	CP #77
 436++8B1B 20 01        	JR NZ,M3
 437++8B1D 1C           	INC E
 438++8B1E 0D           M3      DEC C
 439++8B1F 20 E2        	JR NZ,INITV2
 440++8B21
 441++8B21 C3 69 91     	JP ROUT
 442++8B24
 443++8B24 CD 97 8B     INITPT3	CALL SETMDAD
 444++8B27 E5           	PUSH HL
 445++8B28 11 64 00     	LD DE,100
 446++8B2B 19           	ADD HL,DE
 447++8B2C 7E           	LD A,(HL)
 448++8B2D FD 77 08     	LD (IY-100+VRS.Delay),A
 449++8B30 E5           	PUSH HL
 450++8B31 DD E1        	POP IX
 451++8B33 19           	ADD HL,DE
 452++8B34 CD A5 8B     	CALL SETCPPT
 453++8B37 DD 5E 02     	LD E,(IX+102-100)
 454++8B3A 23           	INC HL
 455++8B3B
 456++8B3B              	IF CurPosCounter
 457++8B3B ~            	LD (IY-100+VRS.PosSub),L
 458++8B3B              	ENDIF
 459++8B3B
 460++8B3B 19           	ADD HL,DE
 461++8B3C CD AC 8B     	CALL SETLPPT
 462++8B3F D1           	POP DE
 463++8B40 DD 6E 03     	LD L,(IX+103-100)
 464++8B43 DD 66 04     	LD H,(IX+104-100)
 465++8B46 19           	ADD HL,DE
 466++8B47 CD 90 8B     	CALL SETPTPT
 467++8B4A 21 A9 00     	LD HL,169
 468++8B4D 19           	ADD HL,DE
 469++8B4E CD 9E 8B     	CALL SETORPT
 470++8B51 21 69 00     	LD HL,105
 471++8B54 19           	ADD HL,DE
 472++8B55
 473++8B55 FD 75 FA     SETSMPT LD (IY-100+VRS.SamPtrs),L
 474++8B58 FD 74 FB     	LD (IY-100+VRS.SamPtrs+1),H
 475++8B5B C9           	RET
 476++8B5C
 477++8B5C 7E           INITPT2	LD A,(HL)
 478++8B5D FD 77 08     	LD (IY-100+VRS.Delay),A
 479++8B60 E5           	PUSH HL
 480++8B61 E5           	PUSH HL
 481++8B62 E5           	PUSH HL
 482++8B63 23           	INC HL
 483++8B64 23           	INC HL
 484++8B65 7E           	LD A,(HL)
 485++8B66 23           	INC HL
 486++8B67 CD 55 8B     	CALL SETSMPT
 487++8B6A 5E           	LD E,(HL)
 488++8B6B 23           	INC HL
 489++8B6C 56           	LD D,(HL)
 490++8B6D E1           	POP HL
 491++8B6E A7           	AND A
 492++8B6F ED 52        	SBC HL,DE
 493++8B71 CD 97 8B     	CALL SETMDAD
 494++8B74 E1           	POP HL
 495++8B75 11 43 00     	LD DE,67
 496++8B78 19           	ADD HL,DE
 497++8B79 CD 9E 8B     	CALL SETORPT
 498++8B7C 1E 20        	LD E,32
 499++8B7E 19           	ADD HL,DE
 500++8B7F 4E           	LD C,(HL)
 501++8B80 23           	INC HL
 502++8B81 46           	LD B,(HL)
 503++8B82 1E 1E        	LD E,30
 504++8B84 19           	ADD HL,DE
 505++8B85 CD A5 8B     	CALL SETCPPT
 506++8B88 5F           	LD E,A
 507++8B89 23           	INC HL
 508++8B8A
 509++8B8A              	IF CurPosCounter
 510++8B8A ~            	LD (IY-100+VRS.PosSub),L
 511++8B8A              	ENDIF
 512++8B8A
 513++8B8A 19           	ADD HL,DE
 514++8B8B CD AC 8B     	CALL SETLPPT
 515++8B8E E1           	POP HL
 516++8B8F 09           	ADD HL,BC
 517++8B90
 518++8B90 FD 75 FC     SETPTPT	LD (IY-100+VRS.PatsPtr),L
 519++8B93 FD 74 FD     	LD (IY-100+VRS.PatsPtr+1),H
 520++8B96 C9           	RET
 521++8B97
 522++8B97 FD 75 F6     SETMDAD	LD (IY-100+VRS.MODADDR),L
 523++8B9A FD 74 F7     	LD (IY-100+VRS.MODADDR+1),H
 524++8B9D C9           	RET
 525++8B9E
 526++8B9E FD 75 F8     SETORPT	LD (IY-100+VRS.OrnPtrs),L
 527++8BA1 FD 74 F9     	LD (IY-100+VRS.OrnPtrs+1),H
 528++8BA4 C9           	RET
 529++8BA5
 530++8BA5 FD 75 04     SETCPPT	LD (IY-100+VRS.CrPsPtr),L
 531++8BA8 FD 74 05     	LD (IY-100+VRS.CrPsPtr+1),H
 532++8BAB C9           	RET
 533++8BAC
 534++8BAC FD 75 06     SETLPPT	LD (IY-100+VRS.LPosPtr),L
 535++8BAF FD 74 07     	LD (IY-100+VRS.LPosPtr+1),H
 536++8BB2 C9           	RET
 537++8BB3
 538++8BB3 FD 75 13     SETENBS	LD (IY-100+VRS.EnvBase),L
 539++8BB6 FD 74 14     	LD (IY-100+VRS.EnvBase+1),H
 540++8BB9 C9           	RET
 541++8BBA
 542++8BBA FD 75 0C     SETESLD	LD (IY-100+VRS.CurESld),L
 543++8BBD FD 74 0D     	LD (IY-100+VRS.CurESld+1),H
 544++8BC0 C9           	RET
 545++8BC1
 546++8BC1 FD E5        GETIX	PUSH IY
 547++8BC3 DD E1        	POP IX
 548++8BC5 DD 19        	ADD IX,DE
 549++8BC7 C9           	RET
 550++8BC8
 551++8BC8 CD C1 8B     PTDECOD CALL GETIX
 552++8BCB              PTDEC	EQU $+1
 553++8BCB C3 C3 C3     	JP #C3C3
 554++8BCE
 555++8BCE              ;PT2 pattern decoder
 556++8BCE CD 64 8E     PD2_SAM	CALL SETSAM
 557++8BD1 18 4A        	JR PD2_LOOP
 558++8BD3
 559++8BD3 DD 77 08     PD2_EOff LD (IX-12+CHP.Env_En),A
 560++8BD6 18 45        	JR PD2_LOOP
 561++8BD8
 562++8BD8 DD 36 08 10  PD2_ENV	LD (IX-12+CHP.Env_En),16
 563++8BDC FD 77 22     	LD (IY-100+VRS.AYREGS+EnvTp),A
 564++8BDF 0A           	LD A,(BC)
 565++8BE0 03           	INC BC
 566++8BE1 6F           	LD L,A
 567++8BE2 0A           	LD A,(BC)
 568++8BE3 03           	INC BC
 569++8BE4 67           	LD H,A
 570++8BE5 CD B3 8B     	CALL SETENBS
 571++8BE8 18 33        	JR PD2_LOOP
 572++8BEA
 573++8BEA CD 45 8E     PD2_ORN	CALL SETORN
 574++8BED 18 2E        	JR PD2_LOOP
 575++8BEF
 576++8BEF 3C           PD2_SKIP INC A
 577++8BF0 DD 77 05     	LD (IX-12+CHP.NNtSkp),A
 578++8BF3 18 28        	JR PD2_LOOP
 579++8BF5
 580++8BF5 0F           PD2_VOL	RRCA
 581++8BF6 0F           	RRCA
 582++8BF7 0F           	RRCA
 583++8BF8 0F           	RRCA
 584++8BF9 DD 77 10     	LD (IX-12+CHP.Volume),A
 585++8BFC 18 1F        	JR PD2_LOOP
 586++8BFE
 587++8BFE CD 15 8E     PD2_DEL	CALL C_DELAY
 588++8C01 18 1A        	JR PD2_LOOP
 589++8C03
 590++8C03 DD CB 09 D6  PD2_GLIS SET 2,(IX-12+CHP.Flags)
 591++8C07 3C           	INC A
 592++8C08 DD 77 0A     	LD (IX-12+CHP.TnSlDl),A
 593++8C0B DD 77 F9     	LD (IX-12+CHP.TSlCnt),A
 594++8C0E 0A           	LD A,(BC)
 595++8C0F 03           	INC BC
 596++8C10 DD 77 0B             LD (IX-12+CHP.TSlStp),A
 597++8C13 87           	ADD A,A
 598++8C14 9F           	SBC A,A
 599++8C15 DD 77 0C             LD (IX-12+CHP.TSlStp+1),A
 600++8C18 37           	SCF
 601++8C19 18 01        	JR PD2_LP2
 602++8C1B
 603++8C1B A7           PT2PD	AND A
 604++8C1C
 605++8C1C 08           PD2_LP2	EX AF,AF'
 606++8C1D
 607++8C1D 0A           PD2_LOOP LD A,(BC)
 608++8C1E 03           	INC BC
 609++8C1F C6 20        	ADD A,#20
 610++8C21 28 3F        	JR Z,PD2_REL
 611++8C23 38 A9        	JR C,PD2_SAM
 612++8C25 C6 60        	ADD A,96
 613++8C27 38 3E        	JR C,PD2_NOTE
 614++8C29 3C           	INC A
 615++8C2A 28 A7        	JR Z,PD2_EOff
 616++8C2C C6 0F        	ADD A,15
 617++8C2E CA 44 8D     	JP Z,PD_FIN
 618++8C31 38 A5        	JR C,PD2_ENV
 619++8C33 C6 10        	ADD A,#10
 620++8C35 38 B3        	JR C,PD2_ORN
 621++8C37 C6 40        	ADD A,#40
 622++8C39 38 B4        	JR C,PD2_SKIP
 623++8C3B C6 10        	ADD A,#10
 624++8C3D 38 B6        	JR C,PD2_VOL
 625++8C3F 3C           	INC A
 626++8C40 28 BC        	JR Z,PD2_DEL
 627++8C42 3C           	INC A
 628++8C43 28 BE        	JR Z,PD2_GLIS
 629++8C45 3C           	INC A
 630++8C46 28 0A        	JR Z,PD2_PORT
 631++8C48 3C           	INC A
 632++8C49 28 12        	JR Z,PD2_STOP
 633++8C4B 0A           	LD A,(BC)
 634++8C4C 03           	INC BC
 635++8C4D DD 77 F7     	LD (IX-12+CHP.CrNsSl),A
 636++8C50 18 CB        	JR PD2_LOOP
 637++8C52
 638++8C52 DD CB 09 96  PD2_PORT RES 2,(IX-12+CHP.Flags)
 639++8C56 0A           	LD A,(BC)
 640++8C57 03           	INC BC
 641++8C58 03           	INC BC ;ignoring precalc delta to right sound
 642++8C59 03           	INC BC
 643++8C5A 37           	SCF
 644++8C5B 18 BF        	JR PD2_LP2
 645++8C5D
 646++8C5D DD 77 F9     PD2_STOP LD (IX-12+CHP.TSlCnt),A
 647++8C60 18 BB        	JR PD2_LOOP
 648++8C62
 649++8C62 DD 77 09     PD2_REL	LD (IX-12+CHP.Flags),A
 650++8C65 18 2C        	JR PD2_EXIT
 651++8C67
 652++8C67 6F           PD2_NOTE LD L,A
 653++8C68 DD 7E 06     	LD A,(IX-12+CHP.Note)
 654++8C6B 32 7E 8D     	LD (PrNote+1),A
 655++8C6E DD 75 06     	LD (IX-12+CHP.Note),L
 656++8C71 AF           	XOR A
 657++8C72 DD 77 F9     	LD (IX-12+CHP.TSlCnt),A
 658++8C75 DD CB 09 C6  	SET 0,(IX-12+CHP.Flags)
 659++8C79 08           	EX AF,AF'
 660++8C7A 30 16        	JR NC,NOGLIS2
 661++8C7C DD CB 09 56  	BIT 2,(IX-12+CHP.Flags)
 662++8C80 20 0C        	JR NZ,NOPORT2
 663++8C82 32 A4 8D     	LD (LoStep),A
 664++8C85 87           	ADD A,A
 665++8C86 9F           	SBC A,A
 666++8C87 08           	EX AF,AF'
 667++8C88 67           	LD H,A
 668++8C89 6F           	LD L,A
 669++8C8A 3C           	INC A
 670++8C8B CD 5F 8D     	CALL SETPORT
 671++8C8E DD 36 F9 01  NOPORT2	LD (IX-12+CHP.TSlCnt),1
 672++8C92 AF           NOGLIS2	XOR A
 673++8C93
 674++8C93
 675++8C93 DD 77 F5     PD2_EXIT LD (IX-12+CHP.PsInSm),A
 676++8C96 DD 77 F4     	LD (IX-12+CHP.PsInOr),A
 677++8C99 DD 77 FA     	LD (IX-12+CHP.CrTnSl),A
 678++8C9C DD 77 FB     	LD (IX-12+CHP.CrTnSl+1),A
 679++8C9F C3 44 8D     	JP PD_FIN
 680++8CA2
 681++8CA2              ;PT3 pattern decoder
 682++8CA2 DD 36 08 00  PD_OrSm	LD (IX-12+CHP.Env_En),0
 683++8CA6 CD 45 8E     	CALL SETORN
 684++8CA9 0A           PD_SAM_	LD A,(BC)
 685++8CAA 03           	INC BC
 686++8CAB 0F           	RRCA
 687++8CAC
 688++8CAC CD 64 8E     PD_SAM	CALL SETSAM
 689++8CAF 18 3F        	JR PD_LOOP
 690++8CB1
 691++8CB1 0F           PD_VOL	RRCA
 692++8CB2 0F           	RRCA
 693++8CB3 0F           	RRCA
 694++8CB4 0F           	RRCA
 695++8CB5 DD 77 10     	LD (IX-12+CHP.Volume),A
 696++8CB8 18 39        	JR PD_LP2
 697++8CBA
 698++8CBA DD 77 08     PD_EOff	LD (IX-12+CHP.Env_En),A
 699++8CBD DD 77 F4     	LD (IX-12+CHP.PsInOr),A
 700++8CC0 18 31        	JR PD_LP2
 701++8CC2
 702++8CC2 3D           PD_SorE	DEC A
 703++8CC3 20 07        	JR NZ,PD_ENV
 704++8CC5 0A           	LD A,(BC)
 705++8CC6 03           	INC BC
 706++8CC7 DD 77 05     	LD (IX-12+CHP.NNtSkp),A
 707++8CCA 18 27        	JR PD_LP2
 708++8CCC
 709++8CCC CD 2A 8E     PD_ENV	CALL SETENV
 710++8CCF 18 22        	JR PD_LP2
 711++8CD1
 712++8CD1 CD 45 8E     PD_ORN	CALL SETORN
 713++8CD4 18 1A        	JR PD_LOOP
 714++8CD6
 715++8CD6 DD 77 08     PD_ESAM	LD (IX-12+CHP.Env_En),A
 716++8CD9 DD 77 F4     	LD (IX-12+CHP.PsInOr),A
 717++8CDC C4 2A 8E     	CALL NZ,SETENV
 718++8CDF 18 C8        	JR PD_SAM_
 719++8CE1
 720++8CE1 DD 7E 06     PT3PD	LD A,(IX-12+CHP.Note)
 721++8CE4 32 7E 8D     	LD (PrNote+1),A
 722++8CE7 DD 6E FA     	LD L,(IX-12+CHP.CrTnSl)
 723++8CEA DD 66 FB     	LD H,(IX-12+CHP.CrTnSl+1)
 724++8CED 22 9B 8D     	LD (PrSlide+1),HL
 725++8CF0
 726++8CF0 11 10 20     PD_LOOP	LD DE,#2010
 727++8CF3 0A           PD_LP2	LD A,(BC)
 728++8CF4 03           	INC BC
 729++8CF5 83           	ADD A,E
 730++8CF6 38 AA        	JR C,PD_OrSm
 731++8CF8 82           	ADD A,D
 732++8CF9 28 49        	JR Z,PD_FIN
 733++8CFB 38 AF        	JR C,PD_SAM
 734++8CFD 83           	ADD A,E
 735++8CFE 28 25        	JR Z,PD_REL
 736++8D00 38 AF        	JR C,PD_VOL
 737++8D02 83           	ADD A,E
 738++8D03 28 B5        	JR Z,PD_EOff
 739++8D05 38 BB        	JR C,PD_SorE
 740++8D07 C6 60        	ADD A,96
 741++8D09 38 20        	JR C,PD_NOTE
 742++8D0B 83           	ADD A,E
 743++8D0C 38 C3        	JR C,PD_ORN
 744++8D0E 82           	ADD A,D
 745++8D0F 38 0F        	JR C,PD_NOIS
 746++8D11 83           	ADD A,E
 747++8D12 38 C2        	JR C,PD_ESAM
 748++8D14 87           	ADD A,A
 749++8D15 5F           	LD E,A
player.asm(750): warning: value 0x16DA0 is truncated to 16bit value: 0x6DA0
 750++8D16 21 A0 6D     	LD HL,SPCCOMS+#FF20-#2000
 751++8D19 19           	ADD HL,DE
 752++8D1A 5E           	LD E,(HL)
 753++8D1B 23           	INC HL
 754++8D1C 56           	LD D,(HL)
 755++8D1D D5           	PUSH DE
 756++8D1E 18 D0        	JR PD_LOOP
 757++8D20
 758++8D20 FD 77 10     PD_NOIS	LD (IY-100+VRS.Ns_Base),A
 759++8D23 18 CE        	JR PD_LP2
 760++8D25
 761++8D25 DD CB 09 86  PD_REL	RES 0,(IX-12+CHP.Flags)
 762++8D29 18 08        	JR PD_RES
 763++8D2B
 764++8D2B DD 77 06     PD_NOTE	LD (IX-12+CHP.Note),A
 765++8D2E DD CB 09 C6  	SET 0,(IX-12+CHP.Flags)
 766++8D32 AF           	XOR A
 767++8D33
 768++8D33 ED 73 42 8D  PD_RES	LD (PDSP_+1),SP
 769++8D37 DD F9        	LD SP,IX
 770++8D39 67           	LD H,A
 771++8D3A 6F           	LD L,A
 772++8D3B E5           	PUSH HL
 773++8D3C E5           	PUSH HL
 774++8D3D E5           	PUSH HL
 775++8D3E E5           	PUSH HL
 776++8D3F E5           	PUSH HL
 777++8D40 E5           	PUSH HL
 778++8D41 31 31 31     PDSP_	LD SP,#3131
 779++8D44
 780++8D44 DD 7E 05     PD_FIN	LD A,(IX-12+CHP.NNtSkp)
 781++8D47 DD 77 0F     	LD (IX-12+CHP.NtSkCn),A
 782++8D4A C9           	RET
 783++8D4B
 784++8D4B 0A           C_PORTM LD A,(BC)
 785++8D4C 03           	INC BC
 786++8D4D              ;SKIP PRECALCULATED TONE DELTA (BECAUSE
 787++8D4D              ;CANNOT BE RIGHT AFTER PT3 COMPILATION)
 788++8D4D 03           	INC BC
 789++8D4E 03           	INC BC
 790++8D4F 08           	EX AF,AF'
 791++8D50 0A           	LD A,(BC) ;SIGNED TONE STEP
 792++8D51 03           	INC BC
 793++8D52 32 A4 8D     	LD (LoStep),A
 794++8D55 0A           	LD A,(BC)
 795++8D56 03           	INC BC
 796++8D57 A7           	AND A
 797++8D58 08           	EX AF,AF'
 798++8D59 DD 6E FA     	LD L,(IX-12+CHP.CrTnSl)
 799++8D5C DD 66 FB     	LD H,(IX-12+CHP.CrTnSl+1)
 800++8D5F
 801++8D5F              ;Set portamento variables
 802++8D5F              ;A - Delay; A' - Hi(Step); ZF' - (A'=0); HL - CrTnSl
 803++8D5F
 804++8D5F DD CB 09 96  SETPORT	RES 2,(IX-12+CHP.Flags)
 805++8D63 DD 77 0A     	LD (IX-12+CHP.TnSlDl),A
 806++8D66 DD 77 F9     	LD (IX-12+CHP.TSlCnt),A
 807++8D69 E5           	PUSH HL
 808++8D6A 11 23 94     	LD DE,NT_
 809++8D6D DD 7E 06     	LD A,(IX-12+CHP.Note)
 810++8D70 DD 77 07     	LD (IX-12+CHP.SlToNt),A
 811++8D73 87           	ADD A,A
 812++8D74 6F           	LD L,A
 813++8D75 26 00        	LD H,0
 814++8D77 19           	ADD HL,DE
 815++8D78 7E           	LD A,(HL)
 816++8D79 23           	INC HL
 817++8D7A 66           	LD H,(HL)
 818++8D7B 6F           	LD L,A
 819++8D7C E5           	PUSH HL
 820++8D7D 3E 3E        PrNote	LD A,#3E
 821++8D7F DD 77 06     	LD (IX-12+CHP.Note),A
 822++8D82 87           	ADD A,A
 823++8D83 6F           	LD L,A
 824++8D84 26 00        	LD H,0
 825++8D86 19           	ADD HL,DE
 826++8D87 5E           	LD E,(HL)
 827++8D88 23           	INC HL
 828++8D89 56           	LD D,(HL)
 829++8D8A E1           	POP HL
 830++8D8B ED 52        	SBC HL,DE
 831++8D8D DD 75 0D     	LD (IX-12+CHP.TnDelt),L
 832++8D90 DD 74 0E     	LD (IX-12+CHP.TnDelt+1),H
 833++8D93 D1           	POP DE
 834++8D94              Version EQU $+1
 835++8D94 3E 3E        	LD A,#3E
 836++8D96 FE 06        	CP 6
 837++8D98 38 09        	JR C,OLDPRTM ;Old 3xxx for PT v3.5-
 838++8D9A 11 11 11     PrSlide	LD DE,#1111
 839++8D9D DD 73 FA     	LD (IX-12+CHP.CrTnSl),E
 840++8DA0 DD 72 FB     	LD (IX-12+CHP.CrTnSl+1),D
 841++8DA3              LoStep	EQU $+1
 842++8DA3 3E 3E        OLDPRTM	LD A,#3E
 843++8DA5 08           	EX AF,AF'
 844++8DA6 28 01        	JR Z,NOSIG
 845++8DA8 EB           	EX DE,HL
 846++8DA9 ED 52        NOSIG	SBC HL,DE
 847++8DAB F2 B3 8D     	JP P,SET_STP
 848++8DAE 2F           	CPL
 849++8DAF 08           	EX AF,AF'
 850++8DB0 ED 44        	NEG
 851++8DB2 08           	EX AF,AF'
 852++8DB3 DD 77 0C     SET_STP	LD (IX-12+CHP.TSlStp+1),A
 853++8DB6 08           	EX AF,AF'
 854++8DB7 DD 77 0B     	LD (IX-12+CHP.TSlStp),A
 855++8DBA DD 36 FE 00  	LD (IX-12+CHP.COnOff),0
 856++8DBE C9           	RET
 857++8DBF
 858++8DBF DD CB 09 D6  C_GLISS	SET 2,(IX-12+CHP.Flags)
 859++8DC3 0A           	LD A,(BC)
 860++8DC4 03           	INC BC
 861++8DC5 DD 77 0A     	LD (IX-12+CHP.TnSlDl),A
 862++8DC8 A7           	AND A
 863++8DC9 20 07        	JR NZ,GL36
 864++8DCB 3A 95 8D     	LD A,(Version) ;AlCo PT3.7+
 865++8DCE FE 07        	CP 7
 866++8DD0 9F           	SBC A,A
 867++8DD1 3C           	INC A
 868++8DD2 DD 77 F9     GL36	LD (IX-12+CHP.TSlCnt),A
 869++8DD5 0A           	LD A,(BC)
 870++8DD6 03           	INC BC
 871++8DD7 08           	EX AF,AF'
 872++8DD8 0A           	LD A,(BC)
 873++8DD9 03           	INC BC
 874++8DDA 18 D7        	JR SET_STP
 875++8DDC
 876++8DDC 0A           C_SMPOS	LD A,(BC)
 877++8DDD 03           	INC BC
 878++8DDE DD 77 F5     	LD (IX-12+CHP.PsInSm),A
 879++8DE1 C9           	RET
 880++8DE2
 881++8DE2 0A           C_ORPOS	LD A,(BC)
 882++8DE3 03           	INC BC
 883++8DE4 DD 77 F4     	LD (IX-12+CHP.PsInOr),A
 884++8DE7 C9           	RET
 885++8DE8
 886++8DE8 0A           C_VIBRT	LD A,(BC)
 887++8DE9 03           	INC BC
 888++8DEA DD 77 FF     	LD (IX-12+CHP.OnOffD),A
 889++8DED DD 77 FE     	LD (IX-12+CHP.COnOff),A
 890++8DF0 0A           	LD A,(BC)
 891++8DF1 03           	INC BC
 892++8DF2 DD 77 00     	LD (IX-12+CHP.OffOnD),A
 893++8DF5 AF           	XOR A
 894++8DF6 DD 77 F9     	LD (IX-12+CHP.TSlCnt),A
 895++8DF9 DD 77 FA     	LD (IX-12+CHP.CrTnSl),A
 896++8DFC DD 77 FB     	LD (IX-12+CHP.CrTnSl+1),A
 897++8DFF C9           	RET
 898++8E00
 899++8E00 0A           C_ENGLS	LD A,(BC)
 900++8E01 03           	INC BC
 901++8E02 FD 77 0E     	LD (IY-100+VRS.Env_Del),A
 902++8E05 FD 77 0F     	LD (IY-100+VRS.CurEDel),A
 903++8E08 0A           	LD A,(BC)
 904++8E09 03           	INC BC
 905++8E0A 6F           	LD L,A
 906++8E0B 0A           	LD A,(BC)
 907++8E0C 03           	INC BC
 908++8E0D 67           	LD H,A
 909++8E0E FD 75 0A     	LD (IY-100+VRS.ESldAdd),L
 910++8E11 FD 74 0B     	LD (IY-100+VRS.ESldAdd+1),H
 911++8E14 C9           	RET
 912++8E15
 913++8E15 0A           C_DELAY	LD A,(BC)
 914++8E16 03           	INC BC
 915++8E17 FD 77 08     	LD (IY-100+VRS.Delay),A
 916++8E1A 21 AE 92     	LD HL,VARS2+VRS.ModNum ;if AlCo_TS
 917++8E1D CB 4E        	BIT 1,(HL)
 918++8E1F C8           	RET Z
 919++8E20 32 91 92     	LD (VARS1+VRS.Delay),A
 920++8E23 32 92 92     	LD (VARS1+VRS.DelyCnt),A
 921++8E26 32 18 93     	LD (VARS2+VRS.Delay),A
 922++8E29 C9           	RET
 923++8E2A
 924++8E2A DD 73 08     SETENV	LD (IX-12+CHP.Env_En),E
 925++8E2D FD 77 22     	LD (IY-100+VRS.AYREGS+EnvTp),A
 926++8E30 0A           	LD A,(BC)
 927++8E31 03           	INC BC
 928++8E32 67           	LD H,A
 929++8E33 0A           	LD A,(BC)
 930++8E34 03           	INC BC
 931++8E35 6F           	LD L,A
 932++8E36 CD B3 8B     	CALL SETENBS
 933++8E39 AF           	XOR A
 934++8E3A DD 77 F4     	LD (IX-12+CHP.PsInOr),A
 935++8E3D FD 77 0F     	LD (IY-100+VRS.CurEDel),A
 936++8E40 67           	LD H,A
 937++8E41 6F           	LD L,A
 938++8E42 C3 BA 8B     	JP SETESLD
 939++8E45
 940++8E45 87           SETORN	ADD A,A
 941++8E46 5F           	LD E,A
 942++8E47 16 00        	LD D,0
 943++8E49 DD 72 F4     	LD (IX-12+CHP.PsInOr),D
 944++8E4C FD 6E F8     	LD L,(IY-100+VRS.OrnPtrs)
 945++8E4F FD 66 F9     	LD H,(IY-100+VRS.OrnPtrs+1)
 946++8E52 19           	ADD HL,DE
 947++8E53 5E           	LD E,(HL)
 948++8E54 23           	INC HL
 949++8E55 56           	LD D,(HL)
 950++8E56 FD 6E F6     	LD L,(IY-100+VRS.MODADDR)
 951++8E59 FD 66 F7     	LD H,(IY-100+VRS.MODADDR+1)
 952++8E5C 19           	ADD HL,DE
 953++8E5D DD 75 01     	LD (IX-12+CHP.OrnPtr),L
 954++8E60 DD 74 02     	LD (IX-12+CHP.OrnPtr+1),H
 955++8E63 C9           C_NOP	RET
 956++8E64
 957++8E64 87           SETSAM	ADD A,A
 958++8E65 5F           	LD E,A
 959++8E66 16 00        	LD D,0
 960++8E68 FD 6E FA     	LD L,(IY-100+VRS.SamPtrs);
 961++8E6B FD 66 FB     	LD H,(IY-100+VRS.SamPtrs+1);
 962++8E6E 19           	ADD HL,DE
 963++8E6F 5E           	LD E,(HL)
 964++8E70 23           	INC HL
 965++8E71 56           	LD D,(HL)
 966++8E72 FD 6E F6     	LD L,(IY-100+VRS.MODADDR)
 967++8E75 FD 66 F7     	LD H,(IY-100+VRS.MODADDR+1)
 968++8E78 19           	ADD HL,DE
 969++8E79 DD 75 03     	LD (IX-12+CHP.SamPtr),L
 970++8E7C DD 74 04     	LD (IX-12+CHP.SamPtr+1),H
 971++8E7F C9           	RET
 972++8E80
 973++8E80              ;ALL 16 ADDRESSES TO PROTECT FROM BROKEN PT3 MODULES
 974++8E80 63 8E        SPCCOMS DW C_NOP
 975++8E82 BF 8D        	DW C_GLISS
 976++8E84 4B 8D        	DW C_PORTM
 977++8E86 DC 8D        	DW C_SMPOS
 978++8E88 E2 8D        	DW C_ORPOS
 979++8E8A E8 8D        	DW C_VIBRT
 980++8E8C 63 8E        	DW C_NOP
 981++8E8E 63 8E        	DW C_NOP
 982++8E90 00 8E        	DW C_ENGLS
 983++8E92 15 8E        	DW C_DELAY
 984++8E94 63 8E        	DW C_NOP
 985++8E96 63 8E        	DW C_NOP
 986++8E98 63 8E        	DW C_NOP
 987++8E9A 63 8E        	DW C_NOP
 988++8E9C 63 8E        	DW C_NOP
 989++8E9E 63 8E        	DW C_NOP
 990++8EA0
 991++8EA0 CD C1 8B     CHREGS	CALL GETIX
 992++8EA3 AF           	XOR A
 993++8EA4 32 E0 90     	LD (Ampl),A
 994++8EA7 DD CB 15 46  	BIT 0,(IX+CHP.Flags)
 995++8EAB E5           	PUSH HL
 996++8EAC CA F3 8F     	JP Z,CH_EXIT
 997++8EAF ED 73 3D 8F  	LD (CSP_+1),SP
 998++8EB3 DD 6E 0D     	LD L,(IX+CHP.OrnPtr)
 999++8EB6 DD 66 0E     	LD H,(IX+CHP.OrnPtr+1)
1000++8EB9 F9           	LD SP,HL
1001++8EBA D1           	POP DE
1002++8EBB 67           	LD H,A
1003++8EBC DD 7E 00     	LD A,(IX+CHP.PsInOr)
1004++8EBF 6F           	LD L,A
1005++8EC0 39           	ADD HL,SP
1006++8EC1 3C           	INC A
1007++8EC2              		;PT2	PT3
1008++8EC2 3C           OrnCP	INC A	;CP E	CP D
1009++8EC3 38 01        	JR C,CH_ORPS
1010++8EC5 01           OrnLD	DB 1	;LD A,D	LD A,E
1011++8EC6 DD 77 00     CH_ORPS	LD (IX+CHP.PsInOr),A
1012++8EC9 DD 7E 12     	LD A,(IX+CHP.Note)
1013++8ECC 86           	ADD A,(HL)
1014++8ECD F2 D1 8E     	JP P,CH_NTP
1015++8ED0 AF           	XOR A
1016++8ED1 FE 60        CH_NTP	CP 96
1017++8ED3 38 02        	JR C,CH_NOK
1018++8ED5 3E 5F        	LD A,95
1019++8ED7 87           CH_NOK	ADD A,A
1020++8ED8 08           	EX AF,AF'
1021++8ED9 DD 6E 0F     	LD L,(IX+CHP.SamPtr)
1022++8EDC DD 66 10     	LD H,(IX+CHP.SamPtr+1)
1023++8EDF F9           	LD SP,HL
1024++8EE0 D1           	POP DE
1025++8EE1 26 00        	LD H,0
1026++8EE3 DD 7E 01     	LD A,(IX+CHP.PsInSm)
1027++8EE6 47           	LD B,A
1028++8EE7 87           	ADD A,A
1029++8EE8 87           SamClc2	ADD A,A ;or ADD A,B for PT2
1030++8EE9 6F           	LD L,A
1031++8EEA 39           	ADD HL,SP
1032++8EEB F9           	LD SP,HL
1033++8EEC 78           	LD A,B
1034++8EED 3C           	INC A
1035++8EEE              		;PT2	PT3
1036++8EEE 3C           SamCP	INC A	;CP E	CP D
1037++8EEF 38 01        	JR C,CH_SMPS
1038++8EF1 01           SamLD	DB 1	;LD A,D	LD A,E
1039++8EF2 DD 77 01     CH_SMPS	LD (IX+CHP.PsInSm),A
1040++8EF5 C1           	POP BC
1041++8EF6 E1           	POP HL
1042++8EF7
1043++8EF7              ;Convert PT2 sample to PT3
1044++8EF7              		;PT2		PT3
1045++8EF7 E1           SamCnv	POP HL  ;BIT 2,C	JR e_
1046++8EF8 E1           	POP HL
1047++8EF9 60           	LD H,B
1048++8EFA 20 06        	JR NZ,$+8
1049++8EFC EB           	EX DE,HL
1050++8EFD A7           	AND A
1051++8EFE ED 62        	SBC HL,HL
1052++8F00 ED 52        	SBC HL,DE
1053++8F02 51           	LD D,C
1054++8F03 CB 19        	RR C
1055++8F05 9F           	SBC A,A
1056++8F06 2F           	CPL
1057++8F07 E6 3E        	AND #3E
1058++8F09 CB 19        	RR C
1059++8F0B CB 18        	RR B
1060++8F0D A1           	AND C
1061++8F0E 4F           	LD C,A
1062++8F0F 78           	LD A,B
1063++8F10 1F           	RRA
1064++8F11 1F           	RRA
1065++8F12 CB 1A        	RR D
1066++8F14 1F           	RRA
1067++8F15 E6 9F        	AND #9F
1068++8F17 47           	LD B,A
1069++8F18
1070++8F18 DD 5E 08     e_	LD E,(IX+CHP.TnAcc)
1071++8F1B DD 56 09     	LD D,(IX+CHP.TnAcc+1)
1072++8F1E 19           	ADD HL,DE
1073++8F1F CB 70        	BIT 6,B
1074++8F21 28 06        	JR Z,CH_NOAC
1075++8F23 DD 75 08     	LD (IX+CHP.TnAcc),L
1076++8F26 DD 74 09     	LD (IX+CHP.TnAcc+1),H
1077++8F29 EB           CH_NOAC EX DE,HL
1078++8F2A 08           	EX AF,AF'
player.asm(1079): warning: value 0x9423 is truncated to 8bit value: 0x23
1079++8F2B C6 23        	ADD A,NT_
1080++8F2D 6F           	LD L,A
1081++8F2E CE 94        	ADC A,NT_/256
1082++8F30 95           	SUB L
1083++8F31 67           	LD H,A
1084++8F32 F9           	LD SP,HL
1085++8F33 E1           	POP HL
1086++8F34 19           	ADD HL,DE
1087++8F35 DD 5E 06     	LD E,(IX+CHP.CrTnSl)
1088++8F38 DD 56 07     	LD D,(IX+CHP.CrTnSl+1)
1089++8F3B 19           	ADD HL,DE
1090++8F3C 31 31 31     CSP_	LD SP,#3131
1091++8F3F E3           	EX (SP),HL
1092++8F40 AF           	XOR A
1093++8F41 DD B6 05     	OR (IX+CHP.TSlCnt)
1094++8F44 28 3E        	JR Z,CH_AMP
1095++8F46 DD 35 05     	DEC (IX+CHP.TSlCnt)
1096++8F49 20 39        	JR NZ,CH_AMP
1097++8F4B DD 7E 16     	LD A,(IX+CHP.TnSlDl)
1098++8F4E DD 77 05     	LD (IX+CHP.TSlCnt),A
1099++8F51 DD 6E 17     	LD L,(IX+CHP.TSlStp)
1100++8F54 DD 66 18     	LD H,(IX+CHP.TSlStp+1)
1101++8F57 7C           	LD A,H
1102++8F58 19           	ADD HL,DE
1103++8F59 DD 75 06     	LD (IX+CHP.CrTnSl),L
1104++8F5C DD 74 07     	LD (IX+CHP.CrTnSl+1),H
1105++8F5F DD CB 15 56  	BIT 2,(IX+CHP.Flags)
1106++8F63 20 1F        	JR NZ,CH_AMP
1107++8F65 DD 5E 19     	LD E,(IX+CHP.TnDelt)
1108++8F68 DD 56 1A     	LD D,(IX+CHP.TnDelt+1)
1109++8F6B A7           	AND A
1110++8F6C 28 01        	JR Z,CH_STPP
1111++8F6E EB           	EX DE,HL
1112++8F6F ED 52        CH_STPP SBC HL,DE
1113++8F71 FA 84 8F     	JP M,CH_AMP
1114++8F74 DD 7E 13     	LD A,(IX+CHP.SlToNt)
1115++8F77 DD 77 12     	LD (IX+CHP.Note),A
1116++8F7A AF           	XOR A
1117++8F7B DD 77 05     	LD (IX+CHP.TSlCnt),A
1118++8F7E DD 77 06     	LD (IX+CHP.CrTnSl),A
1119++8F81 DD 77 07     	LD (IX+CHP.CrTnSl+1),A
1120++8F84 DD 7E 02     CH_AMP	LD A,(IX+CHP.CrAmSl)
1121++8F87 CB 79        	BIT 7,C
1122++8F89 28 13        	JR Z,CH_NOAM
1123++8F8B CB 71        	BIT 6,C
1124++8F8D 28 07        	JR Z,CH_AMIN
1125++8F8F FE 0F        	CP 15
1126++8F91 28 0B        	JR Z,CH_NOAM
1127++8F93 3C           	INC A
1128++8F94 18 05        	JR CH_SVAM
1129++8F96 FE F1        CH_AMIN	CP -15
1130++8F98 28 04        	JR Z,CH_NOAM
1131++8F9A 3D           	DEC A
1132++8F9B DD 77 02     CH_SVAM	LD (IX+CHP.CrAmSl),A
1133++8F9E 6F           CH_NOAM	LD L,A
1134++8F9F 78           	LD A,B
1135++8FA0 E6 0F        	AND 15
1136++8FA2 85           	ADD A,L
1137++8FA3 F2 A7 8F     	JP P,CH_APOS
1138++8FA6 AF           	XOR A
1139++8FA7 FE 10        CH_APOS	CP 16
1140++8FA9 38 02        	JR C,CH_VOL
1141++8FAB 3E 0F        	LD A,15
1142++8FAD DD B6 1C     CH_VOL	OR (IX+CHP.Volume)
player.asm(1143): warning: value 0x9323 is truncated to 8bit value: 0x23
1143++8FB0 C6 23        	ADD A,VT_
1144++8FB2 6F           	LD L,A
1145++8FB3 CE 93        	ADC A,VT_/256
1146++8FB5 95           	SUB L
1147++8FB6 67           	LD H,A
1148++8FB7 7E           	LD A,(HL)
1149++8FB8 CB 41        CH_ENV	BIT 0,C
1150++8FBA 20 03        	JR NZ,CH_NOEN
1151++8FBC DD B6 14     	OR (IX+CHP.Env_En)
1152++8FBF 32 E0 90     CH_NOEN	LD (Ampl),A
1153++8FC2 CB 78        	BIT 7,B
1154++8FC4 79           	LD A,C
1155++8FC5 28 1A        	JR Z,NO_ENSL
1156++8FC7 17           	RLA
1157++8FC8 17           	RLA
1158++8FC9 CB 2F        	SRA A
1159++8FCB CB 2F        	SRA A
1160++8FCD CB 2F        	SRA A
1161++8FCF DD 86 04     	ADD A,(IX+CHP.CrEnSl) ;SEE COMMENT BELOW
1162++8FD2 CB 68        	BIT 5,B
1163++8FD4 28 03        	JR Z,NO_ENAC
1164++8FD6 DD 77 04     	LD (IX+CHP.CrEnSl),A
1165++8FD9 FD 86 12     NO_ENAC	ADD A,(IY-100+VRS.AddToEn) ;BUG IN PT3 - NEED WORD HERE
1166++8FDC FD 77 12     	LD (IY-100+VRS.AddToEn),A
1167++8FDF 18 0E        	JR CH_MIX
1168++8FE1 1F           NO_ENSL RRA
1169++8FE2 DD 86 03     	ADD A,(IX+CHP.CrNsSl)
1170++8FE5 FD 77 11     	LD (IY-100+VRS.AddToNs),A
1171++8FE8 CB 68        	BIT 5,B
1172++8FEA 28 03        	JR Z,CH_MIX
1173++8FEC DD 77 03     	LD (IX+CHP.CrNsSl),A
1174++8FEF 78           CH_MIX	LD A,B
1175++8FF0 1F           	RRA
1176++8FF1 E6 48        	AND #48
1177++8FF3 FD B6 1C     CH_EXIT	OR (IY-100+VRS.AYREGS+Mixer)
1178++8FF6 0F           	RRCA
1179++8FF7 FD 77 1C     	LD (IY-100+VRS.AYREGS+Mixer),A
1180++8FFA E1           	POP HL
1181++8FFB AF           	XOR A
1182++8FFC DD B6 0A     	OR (IX+CHP.COnOff)
1183++8FFF C8           	RET Z
1184++9000 DD 35 0A     	DEC (IX+CHP.COnOff)
1185++9003 C0           	RET NZ
1186++9004 DD AE 15     	XOR (IX+CHP.Flags)
1187++9007 DD 77 15     	LD (IX+CHP.Flags),A
1188++900A 1F           	RRA
1189++900B DD 7E 0B     	LD A,(IX+CHP.OnOffD)
1190++900E 38 03        	JR C,CH_ONDL
1191++9010 DD 7E 0C     	LD A,(IX+CHP.OffOnD)
1192++9013 DD 77 0A     CH_ONDL	LD (IX+CHP.COnOff),A
1193++9016 C9           	RET
1194++9017
1195++9017 AF           PLAY_	XOR A
1196++9018 FD 77 12     	LD (IY-100+VRS.AddToEn),A
1197++901B FD 77 1C     	LD (IY-100+VRS.AYREGS+Mixer),A
1198++901E 3D           	DEC A
1199++901F FD 77 22     	LD (IY-100+VRS.AYREGS+EnvTp),A
1200++9022 FD 35 09     	DEC (IY-100+VRS.DelyCnt)
1201++9025 C2 CD 90     	JP NZ,PL2
1202++9028 FD 35 BA     	DEC (IY-100+VRS.ChanA+CHP.NtSkCn)
1203++902B 20 6C        	JR NZ,PL1B
1204++902D FD 4E FE     	LD C,(IY-100+VRS.AdInPtA)
1205++9030 FD 46 FF     	LD B,(IY-100+VRS.AdInPtA+1)
1206++9033 0A           	LD A,(BC)
1207++9034 A7           	AND A
1208++9035 20 56        	JR NZ,PL1A
1209++9037 57           	LD D,A
1210++9038 FD 77 10     	LD (IY-100+VRS.Ns_Base),A
1211++903B FD 6E 04     	LD L,(IY-100+VRS.CrPsPtr)
1212++903E FD 66 05     	LD H,(IY-100+VRS.CrPsPtr+1)
1213++9041 23           	INC HL
1214++9042 7E           	LD A,(HL)
1215++9043 3C           	INC A
1216++9044 20 0B        	JR NZ,PLNLP
1217++9046
1218++9046              	IF LoopChecker
1219++9046 CD F8 88     	CALL CHECKLP
1220++9049              	ENDIF
1221++9049
1222++9049 FD 6E 06     	LD L,(IY-100+VRS.LPosPtr)
1223++904C FD 66 07     	LD H,(IY-100+VRS.LPosPtr+1)
1224++904F 7E           	LD A,(HL)
1225++9050 3C           	INC A
1226++9051 CD A5 8B     PLNLP	CALL SETCPPT
1227++9054 3D           	DEC A
1228++9055 FD CB 9E 4E  	BIT 1,(IY-100+VRS.ModNum)
1229++9059 28 03        	JR Z,NoAlCo
1230++905B              TSSub	EQU $+1
1231++905B D6 D6        	SUB #D6
1232++905D 2F           	CPL
1233++905E              NoAlCo
1234++905E              		;PT2		PT3
1235++905E 3D           PsCalc	DEC A	;ADD A,A	NOP
1236++905F 3D           	DEC A	;ADD A,(HL)	NOP
1237++9060 87           	ADD A,A
1238++9061 5F           	LD E,A
1239++9062 CB 12        	RL D
1240++9064
1241++9064              	IF CurPosCounter
1242++9064 ~            	LD A,L
1243++9064 ~            	SUB (IY-100+VRS.PosSub)
1244++9064 ~            	LD (IY-100+VRS.CurPos),A
1245++9064              	ENDIF
1246++9064
1247++9064 FD 6E FC     	LD L,(IY-100+VRS.PatsPtr)
1248++9067 FD 66 FD     	LD H,(IY-100+VRS.PatsPtr+1)
1249++906A 19           	ADD HL,DE
1250++906B FD 5E F6     	LD E,(IY-100+VRS.MODADDR)
1251++906E FD 56 F7     	LD D,(IY-100+VRS.MODADDR+1)
1252++9071 ED 73 8B 90  	LD (PSP_+1),SP
1253++9075 F9           	LD SP,HL
1254++9076 E1           	POP HL
1255++9077 19           	ADD HL,DE
1256++9078 44           	LD B,H
1257++9079 4D           	LD C,L
1258++907A E1           	POP HL
1259++907B 19           	ADD HL,DE
1260++907C FD 75 00     	LD (IY-100+VRS.AdInPtB),L
1261++907F FD 74 01     	LD (IY-100+VRS.AdInPtB+1),H
1262++9082 E1           	POP HL
1263++9083 19           	ADD HL,DE
1264++9084 FD 75 02     	LD (IY-100+VRS.AdInPtC),L
1265++9087 FD 74 03     	LD (IY-100+VRS.AdInPtC+1),H
1266++908A 31 31 31     PSP_	LD SP,#3131
1267++908D 11 AB FF     PL1A	LD DE,VRS.ChanA+12-100
1268++9090 CD C8 8B     	CALL PTDECOD
1269++9093 FD 71 FE     	LD (IY-100+VRS.AdInPtA),C
1270++9096 FD 70 FF     	LD (IY-100+VRS.AdInPtA+1),B
1271++9099
1272++9099 FD 35 D7     PL1B	DEC (IY-100+VRS.ChanB+CHP.NtSkCn)
1273++909C 20 12        	JR NZ,PL1C
1274++909E 11 C8 FF     	LD DE,VRS.ChanB+12-100
1275++90A1 FD 4E 00     	LD C,(IY-100+VRS.AdInPtB)
1276++90A4 FD 46 01     	LD B,(IY-100+VRS.AdInPtB+1)
1277++90A7 CD C8 8B     	CALL PTDECOD
1278++90AA FD 71 00     	LD (IY-100+VRS.AdInPtB),C
1279++90AD FD 70 01     	LD (IY-100+VRS.AdInPtB+1),B
1280++90B0
1281++90B0 FD 35 F4     PL1C	DEC (IY-100+VRS.ChanC+CHP.NtSkCn)
1282++90B3 20 12        	JR NZ,PL1D
1283++90B5 11 E5 FF     	LD DE,VRS.ChanC+12-100
1284++90B8 FD 4E 02     	LD C,(IY-100+VRS.AdInPtC)
1285++90BB FD 46 03     	LD B,(IY-100+VRS.AdInPtC+1)
1286++90BE CD C8 8B     	CALL PTDECOD
1287++90C1 FD 71 02     	LD (IY-100+VRS.AdInPtC),C
1288++90C4 FD 70 03     	LD (IY-100+VRS.AdInPtC+1),B
1289++90C7
1290++90C7 FD 7E 08     PL1D	LD A,(IY-100+VRS.Delay)
1291++90CA FD 77 09     	LD (IY-100+VRS.DelyCnt),A
1292++90CD
1293++90CD 11 9F FF     PL2	LD DE,VRS.ChanA-100
1294++90D0 FD 6E 15     	LD L,(IY-100+VRS.AYREGS+TonA)
1295++90D3 FD 66 16     	LD H,(IY-100+VRS.AYREGS+TonA+1)
1296++90D6 CD A0 8E     	CALL CHREGS
1297++90D9 FD 75 15     	LD (IY-100+VRS.AYREGS+TonA),L
1298++90DC FD 74 16     	LD (IY-100+VRS.AYREGS+TonA+1),H
1299++90DF              Ampl	EQU $+1
1300++90DF 3E 3E        	LD A,#3E
1301++90E1 FD 77 1D     	LD (IY-100+VRS.AYREGS+AmplA),A
1302++90E4 11 BC FF     	LD DE,VRS.ChanB-100
1303++90E7 FD 6E 17     	LD L,(IY-100+VRS.AYREGS+TonB)
1304++90EA FD 66 18     	LD H,(IY-100+VRS.AYREGS+TonB+1)
1305++90ED CD A0 8E     	CALL CHREGS
1306++90F0 FD 75 17     	LD (IY-100+VRS.AYREGS+TonB),L
1307++90F3 FD 74 18     	LD (IY-100+VRS.AYREGS+TonB+1),H
1308++90F6 3A E0 90     	LD A,(Ampl)
1309++90F9 FD 77 1E     	LD (IY-100+VRS.AYREGS+AmplB),A
1310++90FC 11 D9 FF     	LD DE,VRS.ChanC-100
1311++90FF FD 6E 19     	LD L,(IY-100+VRS.AYREGS+TonC)
1312++9102 FD 66 1A     	LD H,(IY-100+VRS.AYREGS+TonC+1)
1313++9105 CD A0 8E     	CALL CHREGS
1314++9108 FD 75 19     	LD (IY-100+VRS.AYREGS+TonC),L
1315++910B FD 74 1A     	LD (IY-100+VRS.AYREGS+TonC+1),H
1316++910E 3A E0 90     	LD A,(Ampl)
1317++9111 FD 77 1F     	LD (IY-100+VRS.AYREGS+AmplC),A
1318++9114
1319++9114 FD 7E 10     	LD A,(IY-100+VRS.Ns_Base)
1320++9117 FD 86 11     	ADD (IY-100+VRS.AddToNs)
1321++911A FD 77 1B     	LD (IY-100+VRS.AYREGS+Noise),A
1322++911D
1323++911D FD 7E 12     	LD A,(IY-100+VRS.AddToEn)
1324++9120 5F           	LD E,A
1325++9121 87           	ADD A,A
1326++9122 9F           	SBC A,A
1327++9123 57           	LD D,A
1328++9124 FD 6E 13     	LD L,(IY-100+VRS.EnvBase)
1329++9127 FD 66 14     	LD H,(IY-100+VRS.EnvBase+1)
1330++912A 19           	ADD HL,DE
1331++912B FD 5E 0C     	LD E,(IY-100+VRS.CurESld)
1332++912E FD 56 0D     	LD D,(IY-100+VRS.CurESld+1)
1333++9131 19           	ADD HL,DE
1334++9132 FD 75 20     	LD (IY-100+VRS.AYREGS+Env),L
1335++9135 FD 74 21     	LD (IY-100+VRS.AYREGS+Env+1),H
1336++9138
1337++9138 AF           	XOR A
1338++9139 FD B6 0F     	OR (IY-100+VRS.CurEDel)
1339++913C C8           	RET Z
1340++913D FD 35 0F     	DEC (IY-100+VRS.CurEDel)
1341++9140 C0           	RET NZ
1342++9141 FD 7E 0E     	LD A,(IY-100+VRS.Env_Del)
1343++9144 FD 77 0F     	LD (IY-100+VRS.CurEDel),A
1344++9147 FD 6E 0A     	LD L,(IY-100+VRS.ESldAdd)
1345++914A FD 66 0B     	LD H,(IY-100+VRS.ESldAdd+1)
1346++914D 19           	ADD HL,DE
1347++914E C3 BA 8B     	JP SETESLD
1348++9151
1349++9151 FD 21 89 92  PLAY    LD IY,VARS1+100
1350++9155 CD 17 90     	CALL PLAY_
1351++9158 3A 24 92     	LD A,(is_ts)
1352++915B A7           	AND A
1353++915C 28 07        	JR Z,PL_nts
1354++915E FD 21 10 93  	LD IY,VARS2+100
1355++9162 CD 17 90     	CALL PLAY_
1356++9165              PL_nts
1357++9165              	IF Basic
1358++9165 FD 21 3A 5C  	LD IY,#5C3A
1359++9169              	ENDIF
1360++9169
1361++9169 01 FD FF     ROUT	LD BC,#FFFD
1362++916C 3A 24 92     	LD A,(is_ts)
1363++916F A7           	AND A
1364++9170 28 02        	JR Z,r_nts ;keep old standard
1365++9172 ED 41        	OUT (C),B
1366++9174 08           r_nts	EX AF,AF'
1367++9175
1368++9175              	IF ACBBAC
1369++9175 ~            	LD IX,VARS1+VRS.AYREGS
1370++9175              	ELSE
1371++9175 21 9E 92     	LD HL,VARS1+VRS.AYREGS
1372++9178              	ENDIF
1373++9178
1374++9178 CD 84 91     	CALL ROUT_
1375++917B 08           	EX AF,AF'
1376++917C C8           	RET Z
1377++917D 42           	LD B,D
1378++917E 2F           	CPL
1379++917F ED 79        	OUT (C),A
1380++9181
1381++9181              	IF ACBBAC
1382++9181 ~            	LD IX,VARS2+VRS.AYREGS
1383++9181              	ELSE
1384++9181 21 25 93     	LD HL,VARS2+VRS.AYREGS
1385++9184              	ENDIF
1386++9184
1387++9184              ROUT_
1388++9184              	IF ACBBAC
1389++9184 ~            	LD A,(SETUP)
1390++9184 ~            	AND 12
1391++9184 ~            	JR Z,ABC
1392++9184 ~            	ADD A,CHTABLE
1393++9184 ~            	LD E,A
1394++9184 ~            	ADC A,CHTABLE/256
1395++9184 ~            	SUB E
1396++9184 ~            	LD D,A
1397++9184 ~            	LD B,0
1398++9184 ~            	PUSH IX
1399++9184 ~            	POP HL
1400++9184 ~            	LD A,(DE)
1401++9184 ~            	INC DE
1402++9184 ~            	LD C,A
1403++9184 ~            	ADD HL,BC
1404++9184 ~            	LD A,(IX+TonB)
1405++9184 ~            	LD C,(HL)
1406++9184 ~            	LD (IX+TonB),C
1407++9184 ~            	LD (HL),A
1408++9184 ~            	INC HL
1409++9184 ~            	LD A,(IX+TonB+1)
1410++9184 ~            	LD C,(HL)
1411++9184 ~            	LD (IX+TonB+1),C
1412++9184 ~            	LD (HL),A
1413++9184 ~            	LD A,(DE)
1414++9184 ~            	INC DE
1415++9184 ~            	LD C,A
1416++9184 ~            	ADD HL,BC
1417++9184 ~            	LD A,(IX+AmplB)
1418++9184 ~            	LD C,(HL)
1419++9184 ~            	LD (IX+AmplB),C
1420++9184 ~            	LD (HL),A
1421++9184 ~            	LD A,(DE)
1422++9184 ~            	INC DE
1423++9184 ~            	LD (RxCA1),A
1424++9184 ~            	XOR 8
1425++9184 ~            	LD (RxCA2),A
1426++9184 ~            	LD A,(DE)
1427++9184 ~            	AND (IX+Mixer)
1428++9184 ~            	LD E,A
1429++9184 ~            	LD A,(IX+Mixer)
1430++9184 ~            RxCA1	DB #E6
1431++9184 ~            	AND %010010
1432++9184 ~            	OR E
1433++9184 ~            	LD E,A
1434++9184 ~            	LD A,(IX+Mixer)
1435++9184 ~            	AND %010010
1436++9184 ~            RxCA2	OR E
1437++9184 ~            	OR E
1438++9184 ~            	LD (IX+Mixer),A
1439++9184 ~            ABC
1440++9184              	ENDIF
1441++9184
1442++9184 AF           	XOR A
1443++9185 11 BF FF     	LD DE,#FFBF
1444++9188
1445++9188              	IF ACBBAC
1446++9188 ~            	LD BC,#FFFD
1447++9188 ~            	PUSH IX
1448++9188 ~            	POP HL
1449++9188              	ENDIF
1450++9188
1451++9188 ED 79        LOUT	OUT (C),A
1452++918A 43           	LD B,E
1453++918B ED A3        	OUTI
1454++918D 42           	LD B,D
1455++918E 3C           	INC A
1456++918F FE 0D        	CP 13
1457++9191 20 F5        	JR NZ,LOUT
1458++9193 ED 79        	OUT (C),A
1459++9195 7E           	LD A,(HL)
1460++9196 A7           	AND A
1461++9197 F8           	RET M
1462++9198 43           	LD B,E
1463++9199 ED 79        	OUT (C),A
1464++919B C9           	RET
1465++919C
1466++919C              	IF ACBBAC
1467++919C ~            CHTABLE	EQU $-4
1468++919C ~            	DB 4,5,15,%001001,0,7,7,%100100
1469++919C              	ENDIF
1470++919C
1471++919C 64           NT_DATA	DB (T_NEW_0-T1_)*2
1472++919D 2A           	DB TCNEW_0-T_
1473++919E 65           	DB (T_OLD_0-T1_)*2+1
1474++919F 00           	DB TCOLD_0-T_
1475++91A0 01           	DB (T_NEW_1-T1_)*2+1
1476++91A1 0C           	DB TCNEW_1-T_
1477++91A2 01           	DB (T_OLD_1-T1_)*2+1
1478++91A3 0C           	DB TCOLD_1-T_
1479++91A4 94           	DB (T_NEW_2-T1_)*2
1480++91A5 35           	DB TCNEW_2-T_
1481++91A6 30           	DB (T_OLD_2-T1_)*2
1482++91A7 0E           	DB TCOLD_2-T_
1483++91A8 60           	DB (T_NEW_3-T1_)*2
1484++91A9 20           	DB TCNEW_3-T_
1485++91AA 60           	DB (T_OLD_3-T1_)*2
1486++91AB 21           	DB TCOLD_3-T_
1487++91AC
1488++91AC              T_
1489++91AC
1490++91AC 01 05 09 0B  TCOLD_0	DB #00+1,#04+1,#08+1,#0A+1,#0C+1,#0E+1,#12+1,#14+1
1490++91B0 0D 0F 13 15
1491++91B4 19 25 3D 00  	DB #18+1,#24+1,#3C+1,0
1492++91B8 5D 00        TCOLD_1	DB #5C+1,0
1493++91BA 31 37 4D 53  TCOLD_2	DB #30+1,#36+1,#4C+1,#52+1,#5E+1,#70+1,#82,#8C,#9C
1493++91BE 5F 71 82 8C
1493++91C2 9C
1494++91C3 9E A0 A6 A8  	DB #9E,#A0,#A6,#A8,#AA,#AC,#AE,#AE,0
1494++91C7 AA AC AE AE
1494++91CB 00
1495++91CC 57           TCNEW_3	DB #56+1
1496++91CD 1F 23 25 29  TCOLD_3	DB #1E+1,#22+1,#24+1,#28+1,#2C+1,#2E+1,#32+1,#BE+1,0
1496++91D1 2D 2F 33 BF
1496++91D5 00
1497++91D6 1D 21 23 27  TCNEW_0	DB #1C+1,#20+1,#22+1,#26+1,#2A+1,#2C+1,#30+1,#54+1
1497++91DA 2B 2D 31 55
1498++91DE BD BF 00     	DB #BC+1,#BE+1,0
1499++91E1              TCNEW_1 EQU TCOLD_1
1500++91E1 1B 21 25 29  TCNEW_2	DB #1A+1,#20+1,#24+1,#28+1,#2A+1,#3A+1,#4C+1,#5E+1
1500++91E5 2B 3B 4D 5F
1501++91E9 BB BD BF 00  	DB #BA+1,#BC+1,#BE+1,0
1502++91ED
1503++91ED              PT3EMPTYORN EQU $-1
1504++91ED 01 00        	DB 1,0
1505++91EF
1506++91EF              ;first 12 values of tone tables (packed)
1507++91EF
player.asm(1508): warning: value 0xDD8 is truncated to 8bit value: 0xD8
1508++91EF 0D D8        T_PACK	DB #06EC*2/256,#06EC*2
1509++91F1 69           	DB #0755-#06EC
1510++91F2 70           	DB #07C5-#0755
1511++91F3 76           	DB #083B-#07C5
1512++91F4 7D           	DB #08B8-#083B
1513++91F5 85           	DB #093D-#08B8
1514++91F6 8D           	DB #09CA-#093D
1515++91F7 95           	DB #0A5F-#09CA
1516++91F8 9D           	DB #0AFC-#0A5F
1517++91F9 A8           	DB #0BA4-#0AFC
1518++91FA B1           	DB #0C55-#0BA4
1519++91FB BB           	DB #0D10-#0C55
player.asm(1520): warning: value 0xCDA is truncated to 8bit value: 0xDA
1520++91FC 0C DA        	DB #066D*2/256,#066D*2
1521++91FE 62           	DB #06CF-#066D
1522++91FF 68           	DB #0737-#06CF
1523++9200 6D           	DB #07A4-#0737
1524++9201 75           	DB #0819-#07A4
1525++9202 7B           	DB #0894-#0819
1526++9203 83           	DB #0917-#0894
1527++9204 8A           	DB #09A1-#0917
1528++9205 92           	DB #0A33-#09A1
1529++9206 9C           	DB #0ACF-#0A33
1530++9207 A4           	DB #0B73-#0ACF
1531++9208 AF           	DB #0C22-#0B73
1532++9209 B8           	DB #0CDA-#0C22
player.asm(1533): warning: value 0xE08 is truncated to 8bit value: 0x08
1533++920A 0E 08        	DB #0704*2/256,#0704*2
1534++920C 6A           	DB #076E-#0704
1535++920D 72           	DB #07E0-#076E
1536++920E 78           	DB #0858-#07E0
1537++920F 7E           	DB #08D6-#0858
1538++9210 86           	DB #095C-#08D6
1539++9211 90           	DB #09EC-#095C
1540++9212 96           	DB #0A82-#09EC
1541++9213 A0           	DB #0B22-#0A82
1542++9214 AA           	DB #0BCC-#0B22
1543++9215 B4           	DB #0C80-#0BCC
1544++9216 BE           	DB #0D3E-#0C80
player.asm(1545): warning: value 0xFC0 is truncated to 8bit value: 0xC0
1545++9217 0F C0        	DB #07E0*2/256,#07E0*2
1546++9219 78           	DB #0858-#07E0
1547++921A 88           	DB #08E0-#0858
1548++921B 80           	DB #0960-#08E0
1549++921C 90           	DB #09F0-#0960
1550++921D 98           	DB #0A88-#09F0
1551++921E A0           	DB #0B28-#0A88
1552++921F B0           	DB #0BD8-#0B28
1553++9220 A8           	DB #0C80-#0BD8
1554++9221 E0           	DB #0D60-#0C80
1555++9222 B0           	DB #0E10-#0D60
1556++9223 E8           	DB #0EF8-#0E10
1557++9224
1558++9224              ;vars from here can be stripped
1559++9224              ;you can move VARS to any other address
1560++9224
1561++9224              VARS
1562++9224
1563++9224 00           is_ts	DB 0
1564++9225
1565++9225              ;ChannelsVars
1566++9225              	STRUCT	CHP
1567++9225 ~            ;reset group
1568++9225 ~            PsInOr	DB 0
1569++9225 ~            PsInSm	DB 0
1570++9225 ~            CrAmSl	DB 0
1571++9225 ~            CrNsSl	DB 0
1572++9225 ~            CrEnSl	DB 0
1573++9225 ~            TSlCnt	DB 0
1574++9225 ~            CrTnSl	DW 0
1575++9225 ~            TnAcc	DW 0
1576++9225 ~            COnOff	DB 0
1577++9225 ~            ;reset group
1578++9225 ~
1579++9225 ~            OnOffD	DB 0
1580++9225 ~
1581++9225 ~            ;IX for PTDECOD here (+12)
1582++9225 ~            OffOnD	DB 0
1583++9225 ~            OrnPtr	DW 0
1584++9225 ~            SamPtr	DW 0
1585++9225 ~            NNtSkp	DB 0
1586++9225 ~            Note	DB 0
1587++9225 ~            SlToNt	DB 0
1588++9225 ~            Env_En	DB 0
1589++9225 ~            Flags	DB 0
1590++9225 ~             ;Enabled - 0, SimpleGliss - 2
1591++9225 ~            TnSlDl	DB 0
1592++9225 ~            TSlStp	DW 0
1593++9225 ~            TnDelt	DW 0
1594++9225 ~            NtSkCn	DB 0
1595++9225 ~            Volume	DB 0
1596++9225              	ENDS
1597++9225
1598++9225              	STRUCT	VRS
1599++9225 ~
1600++9225 ~            ;IF not works in STRUCT in SjASM :(
1601++9225 ~            ;	IF CurPosCounter
1602++9225 ~            CurPos	DB 0
1603++9225 ~            PosSub	DB 0
1604++9225 ~            ;	ENDIF
1605++9225 ~
1606++9225 ~            ModNum	DB 0 ;bit0: ChipNum
1607++9225 ~            	     ;bit1: 1-reversed patterns order (AlCo TS)
1608++9225 ~
1609++9225 ~            ChanA	DS CHP
1610++9225 ~            ChanB	DS CHP
1611++9225 ~            ChanC	DS CHP
1612++9225 ~
1613++9225 ~            ;GlobalVars
1614++9225 ~            MODADDR	DW 0
1615++9225 ~            OrnPtrs	DW 0
1616++9225 ~            SamPtrs	DW 0
1617++9225 ~            PatsPtr	DW 0
1618++9225 ~            AdInPtA	DW 0
1619++9225 ~            AdInPtB	DW 0
1620++9225 ~            AdInPtC	DW 0
1621++9225 ~            CrPsPtr	DW 0
1622++9225 ~            LPosPtr	DW 0
1623++9225 ~            Delay	DB 0
1624++9225 ~            DelyCnt	DB 0
1625++9225 ~            ESldAdd	DW 0
1626++9225 ~            CurESld	DW 0
1627++9225 ~            Env_Del	DB 0
1628++9225 ~            CurEDel	DB 0
1629++9225 ~            Ns_Base	DB 0
1630++9225 ~            AddToNs	DB 0
1631++9225 ~            AddToEn	DB 0
1632++9225 ~            EnvBase	DW 0
1633++9225 ~            AYREGS	DS 14
1634++9225              	ENDS
1635++9225
1636++9225 00 00 00...  VARS1	DS VRS
1637++92AC 00 00 00...  VARS2	DS VRS
1638++9333
1639++9333              VT_	EQU $-16
1640++9333 00 00 00...  	DS 256-16 ;CreatedVolumeTableAddress
1641++9423
1642++9423              T1_	EQU VT_+16 ;Tone tables data depacked here
1643++9423
1644++9423              T_OLD_1	EQU T1_
1645++9423              T_OLD_2	EQU T_OLD_1+24
1646++9423              T_OLD_3	EQU T_OLD_2+24
1647++9423              T_OLD_0	EQU T_OLD_3+2
1648++9423              T_NEW_0	EQU T_OLD_0
1649++9423              T_NEW_1	EQU T_OLD_1
1650++9423              T_NEW_2	EQU T_NEW_0+24
1651++9423              T_NEW_3	EQU T_OLD_3
1652++9423
1653++9423              PT2EMPTYORN EQU VT_+31 ;1,0,0 sequence
1654++9423
1655++9423 00 00 00...  NT_	DS 192 ;CreatedNoteTableAddress
1656++94E3
1657++94E3              VAR0END	EQU VT_+16 ;INIT zeroes from VARS to VAR0END-1
1658++94E3
1659++94E3              VARSEND EQU $
1660++94E3
1661++94E3              MDLADDR EQU outputBuffer
1662++94E3
1663++94E3              ;Release 0 steps:
1664++94E3              ;04/21/2007
1665++94E3              ;Works start (PTxPlay adaptation); first beta.
1666++94E3              ;04/22/2007
1667++94E3              ;Job finished; beta-testing.
1668++94E3              ;04/23/2007
1669++94E3              ;PT v3.7 TS mode corrected (after AlCo remarks).
1670++94E3              ;04/29/2007
1671++94E3              ;Added 1.XX and 2.XX special commands interpretation for PT3
1672++94E3              ;modules of v3.7+.
1673++94E3
1674++94E3              ;Size (minimal build for ZX Spectrum):
1675++94E3              ;Code block #908 bytes
1676++94E3              ;Variables #2BF bytes (can be stripped)
1677++94E3              ;Total size #908+#2BF=#BC7 (3015) bytes
1678++94E3              	ENDMODULE
# file closed: player/player.asm
  77+ 94E3                  ENDIF
# file closed: player/vortex-processor.asm
  41  94E3                  include "player/mod-processor.asm"
# file opened: player/mod-processor.asm
   1+ 94E3                  MODULE ModProcessor
   2+ 94E3                  ifdef GS
   3+ 94E3 ~
   4+ 94E3 ~                macro GS_WaitCommand2
   5+ 94E3 ~            .wait
   6+ 94E3 ~                in a, (CMD)
   7+ 94E3 ~                rrca
   8+ 94E3 ~                jr c, .wait
   9+ 94E3 ~                endm
  10+ 94E3 ~
  11+ 94E3 ~                macro GS_SendCommand2 nn
  12+ 94E3 ~                ld a, nn
  12+ 94E3 ~              out (CMD), a
  13+ 94E3 ~                endm
  14+ 94E3 ~
  15+ 94E3 ~            play:
  16+ 94E3 ~                ld a, 255
  17+ 94E3 ~                ld (oldminutes), a
  18+ 94E3 ~
  19+ 94E3 ~                call Console.waitForKeyUp
  20+ 94E3 ~
  21+ 94E3 ~                ld hl, Gopher.requestbuffer
  21+ 94E3 ~              call DialogBox.msgNoWait
  22+ 94E3 ~
  23+ 94E3 ~                ;ld a, 1, (Render.play_next), a
  24+ 94E3 ~            	xor a
  25+ 94E3 ~            	ld (last_song_position),a
  26+ 94E3 ~
  27+ 94E3 ~                ld h, #00, a, 32
  28+ 94E3 ~                call TextMode.fillLine
  29+ 94E3 ~                ld de, #0001
  29+ 94E3 ~              call TextMode.gotoXY
  30+ 94E3 ~                ld hl, message
  30+ 94E3 ~              call TextMode.printZ
  31+ 94E3 ~                ld a, #00
  32+ 94E3 ~                call TextMode.highlightLine
  33+ 94E3 ~
  34+ 94E3 ~            .loop
  35+ 94E3 ~                halt
  36+ 94E3 ~                xor a
  37+ 94E3 ~                call Console.peekC
  38+ 94E3 ~                cp Console.BACKSPACE
  39+ 94E3 ~                jp z, .stopKey
  40+ 94E3 ~            	cp SPACE
  41+ 94E3 ~                jp z, .playNext
  42+ 94E3 ~
  43+ 94E3 ~                call printRTC
  44+ 94E3 ~
  45+ 94E3 ~               ;проверка что MOD начал играть сначала
  46+ 94E3 ~                GS_SendCommand2 CMD_GET_SONG_POSITION
  47+ 94E3 ~                GS_WaitCommand2
  48+ 94E3 ~            	ld a,(last_song_position) ;предыдущая позиция
  49+ 94E3 ~            	ld c,a
  50+ 94E3 ~            	in a,(DATA) ;текущая позиция
  51+ 94E3 ~            	ld (last_song_position),a
  52+ 94E3 ~            	cp c
  53+ 94E3 ~            	jr nc, .loop ;если не меньше, продолжаем играть
  54+ 94E3 ~            .playNext
  55+ 94E3 ~                ld a, 1, (Render.play_next), a ;флаг что надо будет играть следующий файл
  56+ 94E3 ~            .stop
  57+ 94E3 ~                call GeneralSound.stopModule
  58+ 94E3 ~
  59+ 94E3 ~                call Console.waitForKeyUp
  60+ 94E3 ~                ret
  61+ 94E3 ~            .stopKey
  62+ 94E3 ~                xor a
  62+ 94E3 ~              ld (Render.play_next), a ;флаг что не надо играть следующий файл
  63+ 94E3 ~                jr .stop
  64+ 94E3 ~
  65+ 94E3 ~
  66+ 94E3 ~            message db "Playing MODs [SPACE] for next song [BACKSPACE] for stop playing", 0
  67+ 94E3 ~
  68+ 94E3 ~
  69+ 94E3 ~            CMD_GET_SONG_POSITION     = #60
  70+ 94E3 ~            last_song_position db 0
  71+ 94E3 ~
  72+ 94E3 ~            ;; Control ports
  73+ 94E3 ~            CMD  = 187
  74+ 94E3 ~            DATA = 179
  75+ 94E3                  endif
  76+ 94E3                  ENDMODULE
  77+ 94E3
# file closed: player/mod-processor.asm
  42  94E3                  include "screen/screen.asm"
# file opened: screen/screen.asm
   1+ 94E3                  module ScreenViewer
   2+ 94E3              display:
   3+ 94E3 CD 29 68         call Console.waitForKeyUp
   4+ 94E6 3E 07            ld a, 7
   4+ 94E8 CD 82 88       call Memory.setPage
   5+ 94EB 21 08 95 11      ld hl, outputBuffer, de, #c000, bc, 6912
   5+ 94EF 00 C0 01 00
   5+ 94F3 1B
   5+ 94F4 ED B0          ldir
   6+ 94F6 CD BE 61         call TextMode.disable
   7+ 94F9              .wait
   8+ 94F9 76           	halt
   9+ 94FA AF               xor a
   9+ 94FB DB FE          in a, (#fe)
   9+ 94FD 2F             cpl
   9+ 94FE E6 1F          and 31
   9+ 9500 28 F7          jr z, .wait
  10+ 9502 CD 19 60         call TextMode.cls
  11+ 9505 C3 00 70         jp History.back
  12+ 9508
  13+ 9508                  endmodule
# file closed: screen/screen.asm
  43  9508              	ELSE
  44  9508 ~                include "screen/nedoscreen.asm"
  45  9508 ~                include "player/vortexnedoos.asm"
  46  9508 ~                include "player/mod-processor.asm"
  47  9508                  ENDIF
  48  9508              start:
  49  9508              	IFNDEF NEDOOS
  50  9508              outputBuffer:
  51  9508 F3               di
  52  9509 AF               xor a
  52  950A 32 6A 5C       ld (#5c6a), a  ; Thank you, Mario Prato, for feedback
  53  950D 32 00 5C         ld (#5c00),a
  54  9510 31 00 60         ld sp, asmOrg
  55  9513 CD 78 88         call Memory.init
  56  9516 AF               xor a
  56  9517 D3 FE          out (#fe),a
  57  9519 FB               ei
  58  951A
  59  951A 3E 07            ld a, 7
  59  951C CD 82 88       call Memory.setPage
  60  951F                  ;; Logo
  61  951F 21 5A 95 06      ld hl, logo, b, Dos.FMODE_READ
  61  9523 01
  61  9524 CD D0 69       call Dos.fopen
  62  9527 F5               push af
  63  9528 21 00 C0 01      ld hl, #c000, bc, 6912
  63  952C 00 1B
  63  952E CD BD 6A       call Dos.fread
  64  9531 F1               pop af
  65  9532 CD A9 6A         call Dos.fclose
  66  9535
  67  9535 06 32            ld b, 50
  68  9537 76           1   halt
  69  9538 10 FD            djnz 1b
  70  953A                  ;; End of logo :-)
  71  953A
  72  953A                  ELSE
  73  953A ~                    ld sp, 0x4000
  74  953A ~                    ld c,nos.CMD_SETSYSDRV
  75  953A ~                 	ex af,af'
  76  953A ~            	    call nos.BDOS
  77  953A                  ENDIF
  78  953A
  79  953A CD 03 60         call TextMode.init
  80  953D 21 49 95     	ld hl, initing
  80  9540 CD 83 60       call TextMode.printZ
  81  9543 CD 3E 85       	call Wifi.init
  82  9546
  83  9546 C3 6D 70        jp History.home
  84  9549
  85  9549                  IFDEF NEDOOS
  86  9549 ~            outputBuffer:
  87  9549              	ENDIF
  88  9549
  89  9549 49 6E 69 74  initing db "Initing Wifi...", "\r", 0
  89  954D 69 6E 67 20
  89  9551 57 69 66 69
  89  9555 2E 2E 2E 0D
  89  9559 00
  90  955A 62 72 6F 77  logo    db "browser/logo.scr", 0
  90  955E 73 65 72 2F
  90  9562 6C 6F 67 6F
  90  9566 2E 73 63 72
  90  956A 00
  91  956B 62 72 6F 77  creds   db "browser/auth.pwd", 0
  91  956F 73 65 72 2F
  91  9573 61 75 74 68
  91  9577 2E 70 77 64
  91  957B 00
  92  957C
  93  957C                  display "ENDS: ", $
  94  957C                  display "Buff size", #ffff - $
  95  957C                  IFDEF NEDOOS
  96  957C ~                    savebin "moon.com", asmOrg, $ - asmOrg
  97  957C                  ELSE
  98  957C              		IFDEF TRDOS
  99  957C              			SAVETRD "MOONR.TRD",|"moon.C",asmOrg, $ - asmOrg
 100  957C              		ELSE
 101  957C ~            			savebin "moon.bin", asmOrg, $ - asmOrg
 102  957C              	    	ENDIF
 103  957C                  ENDIF
 104  957C              outputBuffer2:
 105  957C 41 54 45 30      db  "ATE0", 0
 105  9580 00
 106  9581
 107  9581                  ELSE
 108  9581 ~            ;****************************** MSX ***********************************************
 109  9581 ~                output "moonr.com"
 110  9581 ~                org 100h
 111  9581 ~                jp start
 112  9581 ~                include "vdp/vdpdriver.asm"
 113  9581 ~                include "utils/index.asm"
 114  9581 ~                include "gopher/render/index.asm"
 115  9581 ~                include "dos/msxdos.asm"
 116  9581 ~                include "gopher/engine/history/index.asm"
 117  9581 ~                include "gopher/engine/urlencoder.asm"
 118  9581 ~                include "gopher/engine/fetcher.asm"
 119  9581 ~                include "gopher/engine/media-processor.asm"
 120  9581 ~                include "drivers/unapi/unapi.asm"
 121  9581 ~                include "drivers/unapi/tcp.asm"
 122  9581 ~                include "gopher/msxgopher.asm"
 123  9581 ~                include "screen/msxscreen.asm"
 124  9581 ~                include "player/vortex-processor.asm"
 125  9581 ~                include "player/mod-processor.asm"
 126  9581 ~                include "screen/rtc.asm"
 127  9581 ~            fontName db "font.bin",0
 128  9581 ~            start:
 129  9581 ~                ld hl,(0x0006)
 130  9581 ~                ld bc,outputBuffer
 131  9581 ~                sbc hl,bc
 132  9581 ~                ld bc, 0x100
 133  9581 ~                sbc hl,bc
 134  9581 ~                ld (ramtop),hl
 135  9581 ~
 136  9581 ~                call TcpIP.init
 136  9581 ~              jp nc, noTcpIP ; No TCP/IP - no browser! Anyway you can use "useless tcp/ip driver"
 137  9581 ~                ; Loading font
 138  9581 ~                ;ld de, fontName, a, FMODE_NO_WRITE : call Dos.fopen
 139  9581 ~                ;push bc
 140  9581 ~                ;ld de, font, hl, 2048 :call Dos.fread
 141  9581 ~                ;pop bc
 142  9581 ~                ;call Dos.fclose
 143  9581 ~                call TextMode.loadFont
 144  9581 ~                call TextMode.init
 145  9581 ~                call History.home
 146  9581 ~                jp exit
 147  9581 ~            noTcpIP:
 148  9581 ~                ld hl, .err
 149  9581 ~                call Console.putStringZ
 150  9581 ~                rst 0
 151  9581 ~            .err db 13,10,"No TCP/IP implementation found!",13,10,0
 152  9581 ~            ramtop:
 153  9581 ~                db 0x00, 0xD0
 154  9581 ~            outputBuffer:
 155  9581 ~            font:
 156  9581 ~                display "ENDS: ", $
 157  9581                  ENDIF
# file closed: main.asm
