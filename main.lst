# file opened: main.asm
   1  0000                  DEFINE TCP_BUF_SIZE 1024
   2  0000              ; Generate version string
   3  0000                  LUA ALLPASS
   4  0000 ~                v = tostring(sj.get_define("V"))
   5  0000 ~                maj = string.sub(v, 1,1)
   6  0000 ~                min = string.sub(v, 2,2)
   7  0000 ~                sj.insert_define("VERSION_STRING", "\"" .. maj .. "." .. min .. "\"")
   8  0000 ~
   9  0000 ~                b = tostring(sj.get_define("BLD"))
  10  0000 ~                sj.insert_define("BUILD_STRING", "\"" .. b .. "\"")
  11  0000                  ENDLUA
  12  0000
  13  0000                  IFDEF MSX
  14  0000 ~                    include "main-msx.asm"
  15  0000                  ELSE
  16  0000                      include "main-all.asm"
# file opened: main-all.asm
   1+ 0000                  device	zxspectrum128
   2+ 0000                  IFDEF NEDOOS
   3+ 0000 ~            	DEFINE CRLF "\r\n"
   4+ 0000 ~                    MODULE nos
   5+ 0000 ~                        include "../_sdk/sysdefs.asm"
   6+ 0000 ~                    ENDMODULE
   7+ 0000 ~                    org nos.PROGSTART
   8+ 0000                      ELSE
   9+ 0000              	DEFINE CRLF "\r"
  10+ 0000                      org 24576
  11+ 6000                  ENDIF
  12+ 6000              asmOrg:
  13+ 6000                  align 256
  14+ 6000 C3 E2 96         jp start
  15+ 6003                  include "vdp/index.asm"
# file opened: vdp/index.asm
   1++6003                  IFDEF TIMEX
   2++6003 ~                include "timex.asm"
   3++6003                  ENDIF
   4++6003
   5++6003                  IFDEF TIMEX80
   6++6003 ~                include "timex80.asm"
   7++6003                  ENDIF
   8++6003
   9++6003                  IFDEF ZXSCR
  10++6003                  include "zx.asm"
# file opened: vdp/zx.asm
   1++6003              COLOR=1
   2++6003              ;; Usual speccy screen driver
   3++6003                  module TextMode
   4++6003              init:
   5++6003 21 D5 61 06      ld hl, font_file, b, Dos.FMODE_READ
   5++6007 01
   6++6008 CD 93 6B         call Dos.fopen
   7++600B F5               push af
   8++600C 01 00 08 21      ld bc, 2048, hl, font64
   8++6010 00 40
   9++6012 CD 80 6C         call Dos.fread
  10++6015 F1               pop af
  11++6016 CD 6C 6C         call Dos.fclose
  12++6019 AF           	xor a
  12++601A D3 FE          out (#fe), a
  13++601C C9           	ret
  14++601D              cls:
  15++601D 11 00 00         ld de, 0
  15++6020 CD 3A 60       call gotoXY
  16++6023 3E 07            ld a, 7
  16++6025 CD BE 89       call Memory.setPage
  17++6028 AF               xor a
  17++6029 D3 FE          out (#fe), a
  18++602B 21 00 C0 11      ld hl, #c000, de, #c001, bc, 6911, (hl), a
  18++602F 01 C0 01 FF
  18++6033 1A 77
  18++6035 ED B0          ldir
  19++6037 C3 BE 89         jp Memory.setPage
  20++603A
  21++603A
  22++603A              ; Set console coordinates
  23++603A              ; d = row(0..23), e = column (0..63)
  24++603A              gotoXY:
  25++603A              	;rr e;;;
  26++603A CB 3B        	srl e
  27++603C 3E 00        	ld a, 0
  28++603E 32 62 63     	ld (half_tile_screen), a
  29++6041 ED 53 60 63      ld (col_screen), de
  30++6045 C9               ret
  31++6046
  32++6046              disable:
  33++6046                  ; Nothing to disable
  34++6046 C9               ret
  35++6047
  36++6047              ; H - line
  37++6047              ; A - char
  38++6047              fillLine:
  39++6047 F5               push af
  40++6048 54 1E 00         ld d, h, e, 0
  40++604B CD 3A 60       call gotoXY
  41++604E F1               pop af
  42++604F 21 69 63 11      ld hl, fill_buff, de, fill_buff + 1, bc, 63, (hl), a
  42++6053 6A 63 01 3F
  42++6057 00 77
  42++6059 ED B0          ldir
  43++605B 21 69 63         ld hl, fill_buff
  43++605E C3 BC 60       jp printZ
  44++6061
  45++6061              usualLine:
  46++6061 47               ld b, a
  47++6062 0E 00            ld c, 0
  48++6064 CD 79 61         call bc_to_attr
  49++6067 3E 07            ld a, 7
  49++6069 CD BE 89       call Memory.setPage
  50++606C 36 07            ld (hl), #7
  51++606E 54 5D            ld de, hl
  52++6070 13               inc de
  53++6071 01 1F 00         ld bc, 31
  54++6074 ED B0            ldir
  55++6076 AF               xor a
  55++6077 CD BE 89       call Memory.setPage
  56++607A C9               ret
  57++607B
  58++607B              highlightLine:
  59++607B 47               ld b, a
  60++607C 0E 00            ld c, 0
  61++607E CD 79 61         call bc_to_attr
  62++6081 3E 07            ld a, 7
  62++6083 CD BE 89       call Memory.setPage
  63++6086 36 0C            ld (hl), #C
  64++6088 54 5D            ld de, hl
  65++608A 13               inc de
  66++608B 01 1F 00         ld bc, 31
  67++608E ED B0            ldir
  68++6090 AF               xor a
  68++6091 CD BE 89       call Memory.setPage
  69++6094 C9               ret
  70++6095
  71++6095              mvCR
  72++6095 ED 5B 60 63  	ld de, (col_screen)
  73++6099 14           	inc d
  74++609A 1E 00        	ld e, 0
  75++609C 3E 00        	ld a, 0
  76++609E 32 62 63     	ld (half_tile_screen), a
  77++60A1 C3 3A 60     	jp gotoXY
  78++60A4
  79++60A4              ; Print just one symbol
  80++60A4              ; A - symbol
  81++60A4              putC
  82++60A4 FE 0D            cp 13
  82++60A6 CA 95 60       jp z, mvCR
  83++60A9 21 68 63     	ld hl, single_symbol
  84++60AC 77           	ld (hl), a
  85++60AD 3E 07        	ld a, 7
  85++60AF CD BE 89       call Memory.setPage
  86++60B2 21 67 63         ld hl, single_symbol_print
  87++60B5 CD C7 60         call printL
  88++60B8 AF               xor a
  88++60B9 C3 BE 89       jp Memory.setPage
  89++60BC
  90++60BC              ; Put string
  91++60BC              ; hl - string pointer that's begins from symbol count
  92++60BC              printZ
  93++60BC 7E               ld a, (hl)
  93++60BD A7             and a
  93++60BE C8             ret z
  94++60BF E5               push hl
  95++60C0 CD A4 60         call putC
  96++60C3 E1               pop hl
  97++60C4 23               inc hl
  98++60C5 18 F5            jr printZ
  99++60C7
 100++60C7              printL
 101++60C7 7E                   ld	a, (hl)
 102++60C8 A7           		and	a
 103++60C9 C8           		ret	z
 104++60CA
 105++60CA E5           		push	hl
 106++60CB CD 75 61     		call	calc_addr_attr
 107++60CE 3A 63 63     		ld	a,(attr_screen)
 108++60D1 77           		ld	(hl),a
 109++60D2 E1           		pop	hl
 110++60D3
 111++60D3 CD 64 61     		call	calc_addr_scr
 112++60D6
 113++60D6 3A 62 63     		ld	a,(half_tile_screen)
 114++60D9 CB 47        		bit	0,a
 115++60DB 7E           		ld	a,(hl)
 116++60DC C2 10 61     		jp	nz,print64_4
 117++60DF              print64_3
 118++60DF F5                   push    af
 119++60E0 E5           		push	hl
 120++60E1 CD 75 61     		call	calc_addr_attr
 121++60E4 3A 63 63     		ld	a,(attr_screen)
 122++60E7 77           		ld	(hl),a
 123++60E8 E1           		pop	hl
 124++60E9
 125++60E9 23                   inc     hl
 126++60EA E5                   push    hl
 127++60EB
 128++60EB 7E                   ld      a,(hl)
 129++60EC 6F           		ld	l,a
 130++60ED 26 00        		ld	h,0
 131++60EF 29           		add	hl,hl
 132++60F0 29           		add	hl,hl
 133++60F1 29           		add	hl,hl
 134++60F2 01 00 40             ld      bc,font64
 135++60F5 09                   add     hl,bc
 136++60F6
 137++60F6 D5                   push    de
 138++60F7
 139++60F7 06 06                ld      b,6
 140++60F9 AF           		xor	a
 141++60FA 12           		ld	(de),a
 142++60FB              print64_1
 143++60FB 14           	inc     d
 144++60FC 7E           	ld      a,(hl)
 145++60FD E6 F0        	and	#f0
 146++60FF 12           	ld      (de),a
 147++6100 23           	inc     hl
 148++6101 10 F8        	djnz    print64_1
 149++6103
 150++6103 14           	inc	d
 151++6104 AF           	xor	a
 152++6105 12           	ld	(de),a
 153++6106
 154++6106 3E 01        	ld	a,1
 155++6108 32 62 63     	ld	(half_tile_screen),a
 156++610B
 157++610B D1           	pop     de
 158++610C E1           	pop     hl
 159++610D F1           	pop     af
 160++610E
 161++610E 3D           	dec     a
 162++610F C8           	ret     z
 163++6110
 164++6110              print64_4
 165++6110 F5           	push    af
 166++6111
 167++6111 23           	inc     hl
 168++6112 E5           	push    hl
 169++6113
 170++6113 7E           	ld      a,(hl)
 171++6114 6F           	ld	l,a
 172++6115 26 00        	ld	h,0
 173++6117 29           	add	hl,hl
 174++6118 29           	add	hl,hl
 175++6119 29           	add	hl,hl
 176++611A 01 00 40     	ld      bc,font64
 177++611D 09           	add     hl,bc
 178++611E
 179++611E D5           	push    de
 180++611F
 181++611F 06 06        	ld      b,6
 182++6121 AF           	xor	a
 183++6122 12           	ld	(de),a
 184++6123              print64_2
 185++6123 14           	inc     d
 186++6124 7E           	ld      a,(hl)
 187++6125 E6 0F        	and     #0f
 188++6127 4F           	ld      c,a
 189++6128 1A           	ld      a,(de)
 190++6129 B1           	or      c
 191++612A 12           	ld      (de),a
 192++612B 23           	inc     hl
 193++612C 10 F5        	djnz    print64_2
 194++612E
 195++612E 14           	inc	d
 196++612F AF           	xor	a
 197++6130 12           	ld	(de),a
 198++6131
 199++6131 32 62 63     	ld	(half_tile_screen),a
 200++6134
 201++6134 D1           	pop     de
 202++6135
 203++6135 CD 3F 61     	call	move_cr64
 204++6138
 205++6138 E1           	pop     hl
 206++6139 F1           	pop     af
 207++613A 3D           	dec     a
 208++613B
 209++613B C2 DF 60     	jp      nz,print64_3
 210++613E
 211++613E C9           	ret
 212++613F
 213++613F              ; move cursor
 214++613F              move_cr64
 215++613F 13           	inc	de
 216++6140
 217++6140 21 60 63     	ld	hl,col_screen
 218++6143 34           	inc	(hl)
 219++6144 7E           	ld	a,(hl)
 220++6145
 221++6145 FE 20        	cp	32
 222++6147 D8           	ret	c
 223++6148
 224++6148 AF           	xor	a
 225++6149 32 62 63     	ld	(half_tile_screen),a
 226++614C 77           	ld	(hl),a
 227++614D 4F           	ld	c,a
 228++614E
 229++614E 23           	inc	hl
 230++614F 34           	inc	(hl)
 231++6150 7E           	ld	a,(hl)
 232++6151 47           	ld	b,a
 233++6152
 234++6152 FE 18        	cp	24
 235++6154 DA 60 61     	jp	c,move_cr64_01
 236++6157
 237++6157 3E 17        	ld	a,23
 238++6159 77           	ld	(hl),a
 239++615A 47           	ld	b,a
 240++615B
 241++615B C5           	push	bc
 242++615C CD 89 61     	call	scroll_up8
 243++615F C1           	pop	bc
 244++6160
 245++6160              move_cr64_01
 246++6160 CD 64 61     	call	calc_addr_scr
 247++6163 C9           	ret
 248++6164
 249++6164              calc_addr_scr
 250++6164 78           	ld      a,b
 251++6165 57           	ld      d,a
 252++6166 0F           	rrca
 253++6167 0F           	rrca
 254++6168 0F           	rrca
 255++6169 A7 E6 E0     	and     a,224
 256++616C 81           	add     a,c
 257++616D 5F           	ld      e,a
 258++616E 7A           	ld      a,d
 259++616F E6 18        	and     24
 260++6171 F6 C0        	or      #c0
 261++6173 57           	ld      d,a
 262++6174 C9           	ret
 263++6175
 264++6175              calc_addr_attr
 265++6175 ED 4B 60 63  	ld	bc,(col_screen)
 266++6179              bc_to_attr:
 267++6179 78           	ld	a,b
 268++617A 0F           	rrca
 269++617B 0F           	rrca
 270++617C 0F           	rrca
 271++617D 6F           	ld	l,a
 272++617E E6 1F        	and	31
 273++6180 F6 D8        	or	#d8
 274++6182 67           	ld	h,a
 275++6183 7D           	ld	a,l
 276++6184 E6 FC        	and	252
 277++6186 B1           	or	c
 278++6187 6F           	ld	l,a
 279++6188 C9           	ret
 280++6189
 281++6189              scroll_up8
 282++6189 21 E0 61     	ld	hl,table_addr_scr
 283++618C 06 B8        	ld	b,184
 284++618E
 285++618E              scroll_up8_01
 286++618E C5           	push	bc
 287++618F
 288++618F 5E           	ld	e,(hl)
 289++6190 23           	inc	hl
 290++6191 56           	ld	d,(hl)
 291++6192 23           	inc	hl
 292++6193
 293++6193 E5           	push	hl
 294++6194
 295++6194 01 0E 00     	ld	bc,14
 296++6197 09           	add	hl,bc
 297++6198 4E           	ld	c,(hl)
 298++6199 23           	inc	hl
 299++619A 46           	ld	b,(hl)
 300++619B
 301++619B 60           	ld	h,b
 302++619C 69           	ld	l,c
 303++619D
 304++619D 01 20 00     	ld	bc,32
 305++61A0 ED B0        	ldir
 306++61A2
 307++61A2 E1           	pop	hl
 308++61A3 C1           	pop	bc
 309++61A4 10 E8        	djnz	scroll_up8_01
 310++61A6
 311++61A6 06 08        	ld	b,8
 312++61A8
 313++61A8              scroll_up8_02
 314++61A8 C5           	push	bc
 315++61A9
 316++61A9 5E           	ld	e,(hl)
 317++61AA 23           	inc	hl
 318++61AB 56           	ld	d,(hl)
 319++61AC 23           	inc	hl
 320++61AD
 321++61AD E5           	push	hl
 322++61AE
 323++61AE 62           	ld	h,d
 324++61AF 6B           	ld	l,e
 325++61B0 13           	inc	de
 326++61B1 36 00        	ld	(hl),0
 327++61B3 01 1F 00     	ld	bc,31
 328++61B6 ED B0        	ldir
 329++61B8
 330++61B8 E1           	pop	hl
 331++61B9 C1           	pop	bc
 332++61BA 10 EC        	djnz	scroll_up8_02
 333++61BC 11 00 D8 21  	ld	de,#D800, hl,#D820, bc,736
 333++61C0 20 D8 01 E0
 333++61C4 02
 334++61C5 ED B0        	ldir
 335++61C7 1A           	ld	a,(de)
 336++61C8 21 E0 DA 11  	ld	hl,#dae0, de,#dae1, (hl),a, bc,31
 336++61CC E1 DA 77 01
 336++61D0 1F 00
 337++61D2 ED B0        	ldir
 338++61D4
 339++61D4 C9           	ret
 340++61D5
 341++61D5              font64 equ #4000 ; Using ZX-Spectrum screen as font buffer
 342++61D5 66 6F 6E 74  font_file db "font64.bin", 0
 342++61D9 36 34 2E 62
 342++61DD 69 6E 00
 343++61E0
 344++61E0
 345++61E0              table_addr_scr
 346++61E0 00 40 00 41  	defw	#4000,#4100,#4200,#4300,#4400,#4500,#4600,#4700
 346++61E4 00 42 00 43
 346++61E8 00 44 00 45
 346++61EC 00 46 00 47
 347++61F0 20 40 20 41  	defw	#4020,#4120,#4220,#4320,#4420,#4520,#4620,#4720
 347++61F4 20 42 20 43
 347++61F8 20 44 20 45
 347++61FC 20 46 20 47
 348++6200 40 40 40 41  	defw	#4040,#4140,#4240,#4340,#4440,#4540,#4640,#4740
 348++6204 40 42 40 43
 348++6208 40 44 40 45
 348++620C 40 46 40 47
 349++6210 60 40 60 41  	defw	#4060,#4160,#4260,#4360,#4460,#4560,#4660,#4760
 349++6214 60 42 60 43
 349++6218 60 44 60 45
 349++621C 60 46 60 47
 350++6220 80 40 80 41  	defw	#4080,#4180,#4280,#4380,#4480,#4580,#4680,#4780
 350++6224 80 42 80 43
 350++6228 80 44 80 45
 350++622C 80 46 80 47
 351++6230 A0 40 A0 41  	defw	#40a0,#41a0,#42a0,#43a0,#44a0,#45a0,#46a0,#47a0
 351++6234 A0 42 A0 43
 351++6238 A0 44 A0 45
 351++623C A0 46 A0 47
 352++6240 C0 40 C0 41  	defw	#40c0,#41c0,#42c0,#43c0,#44c0,#45c0,#46c0,#47c0
 352++6244 C0 42 C0 43
 352++6248 C0 44 C0 45
 352++624C C0 46 C0 47
 353++6250 E0 40 E0 41  	defw	#40e0,#41e0,#42e0,#43e0,#44e0,#45e0,#46e0,#47e0
 353++6254 E0 42 E0 43
 353++6258 E0 44 E0 45
 353++625C E0 46 E0 47
 354++6260
 355++6260 00 48 00 49  	defw	#4800,#4900,#4a00,#4b00,#4c00,#4d00,#4e00,#4f00
 355++6264 00 4A 00 4B
 355++6268 00 4C 00 4D
 355++626C 00 4E 00 4F
 356++6270 20 48 20 49  	defw	#4820,#4920,#4a20,#4b20,#4c20,#4d20,#4e20,#4f20
 356++6274 20 4A 20 4B
 356++6278 20 4C 20 4D
 356++627C 20 4E 20 4F
 357++6280 40 48 40 49  	defw	#4840,#4940,#4a40,#4b40,#4c40,#4d40,#4e40,#4f40
 357++6284 40 4A 40 4B
 357++6288 40 4C 40 4D
 357++628C 40 4E 40 4F
 358++6290 60 48 60 49  	defw	#4860,#4960,#4a60,#4b60,#4c60,#4d60,#4e60,#4f60
 358++6294 60 4A 60 4B
 358++6298 60 4C 60 4D
 358++629C 60 4E 60 4F
 359++62A0 80 48 80 49  	defw	#4880,#4980,#4a80,#4b80,#4c80,#4d80,#4e80,#4f80
 359++62A4 80 4A 80 4B
 359++62A8 80 4C 80 4D
 359++62AC 80 4E 80 4F
 360++62B0 A0 48 A0 49  	defw	#48a0,#49a0,#4aa0,#4ba0,#4ca0,#4da0,#4ea0,#4fa0
 360++62B4 A0 4A A0 4B
 360++62B8 A0 4C A0 4D
 360++62BC A0 4E A0 4F
 361++62C0 C0 48 C0 49  	defw	#48c0,#49c0,#4ac0,#4bc0,#4cc0,#4dc0,#4ec0,#4fc0
 361++62C4 C0 4A C0 4B
 361++62C8 C0 4C C0 4D
 361++62CC C0 4E C0 4F
 362++62D0 E0 48 E0 49  	defw	#48e0,#49e0,#4ae0,#4be0,#4ce0,#4de0,#4ee0,#4fe0
 362++62D4 E0 4A E0 4B
 362++62D8 E0 4C E0 4D
 362++62DC E0 4E E0 4F
 363++62E0
 364++62E0 00 50 00 51  	defw	#5000,#5100,#5200,#5300,#5400,#5500,#5600,#5700
 364++62E4 00 52 00 53
 364++62E8 00 54 00 55
 364++62EC 00 56 00 57
 365++62F0 20 50 20 51  	defw	#5020,#5120,#5220,#5320,#5420,#5520,#5620,#5720
 365++62F4 20 52 20 53
 365++62F8 20 54 20 55
 365++62FC 20 56 20 57
 366++6300 40 50 40 51  	defw	#5040,#5140,#5240,#5340,#5440,#5540,#5640,#5740
 366++6304 40 52 40 53
 366++6308 40 54 40 55
 366++630C 40 56 40 57
 367++6310 60 50 60 51  	defw	#5060,#5160,#5260,#5360,#5460,#5560,#5660,#5760
 367++6314 60 52 60 53
 367++6318 60 54 60 55
 367++631C 60 56 60 57
 368++6320 80 50 80 51  	defw	#5080,#5180,#5280,#5380,#5480,#5580,#5680,#5780
 368++6324 80 52 80 53
 368++6328 80 54 80 55
 368++632C 80 56 80 57
 369++6330 A0 50 A0 51  	defw	#50a0,#51a0,#52a0,#53a0,#54a0,#55a0,#56a0,#57a0
 369++6334 A0 52 A0 53
 369++6338 A0 54 A0 55
 369++633C A0 56 A0 57
 370++6340 C0 50 C0 51  	defw	#50c0,#51c0,#52c0,#53c0,#54c0,#55c0,#56c0,#57c0
 370++6344 C0 52 C0 53
 370++6348 C0 54 C0 55
 370++634C C0 56 C0 57
 371++6350 E0 50 E0 51  	defw	#50e0,#51e0,#52e0,#53e0,#54e0,#55e0,#56e0,#57e0
 371++6354 E0 52 E0 53
 371++6358 E0 54 E0 55
 371++635C E0 56 E0 57
 372++6360
 373++6360
 374++6360 00           col_screen			db	0
 375++6361 00           row_screen			db	0
 376++6362 00           half_tile_screen	db	0
 377++6363 07           attr_screen			db	07
 378++6364
 379++6364 00 00        col_screen_temp			dw	0
 380++6366 00           half_tile_screen_temp	db	0
 381++6367
 382++6367 01           single_symbol_print db 1
 383++6368 00           single_symbol 		db 0
 384++6369
 385++6369 00 00 00...  fill_buff ds 65
 386++63AA
 387++63AA                  endmodule
# file closed: vdp/zx.asm
  11++63AA                  ENDIF
  12++63AA
  13++63AA              	IFDEF NEDOOS
  14++63AA ~                include "nedotext.asm"
  15++63AA                  ENDIF
# file closed: vdp/index.asm
  16+ 63AA                  include "utils/index.asm"
# file opened: utils/index.asm
   1++63AA                  include "atoi.asm"
# file opened: utils/atoi.asm
   1++63AA              ; DE - buffer
   2++63AA              ; HL - output
   3++63AA              atohl:
   4++63AA 21 00 00         ld hl, 0
   5++63AD              .loop
   6++63AD 1A               ld a, (de)
   7++63AE 13               inc de
   8++63AF                  ; Sepparators
   9++63AF C5 E5            push bc, hl
  10++63B1 01 05 00             ld bc, sepparators_len
  11++63B4 21 CC 63             ld hl, sepparators
  12++63B7 ED B1                cpir
  13++63B9 E1 C1            pop hl, bc
  14++63BB C8               ret z
  15++63BC
  16++63BC D6 30            sub '0'
  17++63BE
  18++63BE C5               push bc
  19++63BF 4D                   ld c, l
  20++63C0 44                   ld b, h
  21++63C1
  22++63C1 29                   add hl, hl
  23++63C2 29                   add hl, hl
  24++63C3 09                   add hl, bc
  25++63C4 29                   add hl, hl
  26++63C5 4F                   ld c, a
  27++63C6 06 00                ld b, 0
  28++63C8 09                   add hl, bc
  29++63C9 C1               pop bc
  30++63CA 18 E1            jr .loop
  31++63CC
# file closed: utils/atoi.asm
   2++63CC                  include "constants.asm"
# file opened: utils/constants.asm
   1++63CC              TAB = 9
   2++63CC              CR = 13
   3++63CC              LF = 10
   4++63CC              NULL = 0
   5++63CC              SPACE = ' '
   6++63CC              ESC = 27
   7++63CC              BACKSPACE = 8
   8++63CC
   9++63CC                  IFDEF TIMEX80
  10++63CC ~            MIME_DOWNLOAD 	= #19
  11++63CC ~            MIME_LINK 		= #1A
  12++63CC ~            MIME_TEXT 		= #10
  13++63CC ~            MIME_IMAGE 		= #01
  14++63CC ~            MIME_MUSIC 		= #0e
  15++63CC ~            MIME_INPUT 		= #b3
  16++63CC ~            MIME_MOD 		= #0d
  17++63CC ~
  18++63CC ~            BORDER_TOP = #b2
  19++63CC ~            BORDER_BOTTOM = #b1
  20++63CC                  ELSE
  21++63CC              	IFDEF MSX
  22++63CC ~            MIME_DOWNLOAD 	= 1
  23++63CC ~            MIME_LINK		= 2
  24++63CC ~            MIME_TEXT 		= 3
  25++63CC ~            MIME_IMAGE 		= 4
  26++63CC ~            MIME_MUSIC 		= 5
  27++63CC ~            MIME_INPUT 		= 6
  28++63CC ~            MIME_MOD      	= 7
  29++63CC ~            BORDER_TOP    = 7
  30++63CC ~            BORDER_BOTTOM = 8
  31++63CC              	ELSE
  32++63CC              MIME_DOWNLOAD = 1
  33++63CC              MIME_LINK     = 2
  34++63CC              MIME_TEXT     = 3
  35++63CC              MIME_IMAGE    = 6
  36++63CC              MIME_MUSIC    = 5
  37++63CC              MIME_INPUT    = 4
  38++63CC              MIME_MOD      = 7
  39++63CC
  40++63CC              BORDER_TOP    = 9
  41++63CC              BORDER_BOTTOM = 8
  42++63CC              	ENDIF
  43++63CC
  44++63CC
  45++63CC
  46++63CC
  47++63CC              	ENDIF
  48++63CC
  49++63CC 0D 0A 09 00  sepparators db CR, LF, TAB, NULL, SPACE
  49++63D0 20
  50++63D1              sepparators_len = $ - sepparators
# file closed: utils/constants.asm
   3++63D1                  include "strutils.asm"
# file opened: utils/strutils.asm
   1++63D1              ; de - pointer
   2++63D1              ; hl - count
   3++63D1              strlen:
   4++63D1 21 00 00         ld hl, 0
   5++63D4              .loop
   6++63D4 1A               ld a, (de)
   7++63D5 A7               and a
   7++63D6 28 04          jr z, .exit
   8++63D8 23               inc hl
   9++63D9 13               inc de
  10++63DA 18 F8            jr .loop
  11++63DC              .exit
  12++63DC C9               ret
  13++63DD
  14++63DD                  module CompareBuff
  15++63DD
  16++63DD              ; Pushes A to buffer
  17++63DD              push
  18++63DD F5               push af
  19++63DE 06 20            ld b, 32
  19++63E0 21 29 64       ld hl, buffer + 1
  19++63E3 11 28 64       ld de, buffer
  20++63E6              .loop
  21++63E6 7E               ld a, (hl)
  21++63E7 12             ld (de), a
  21++63E8 23             inc hl
  21++63E9 13             inc de
  21++63EA 10 FA          djnz .loop
  22++63EC F1               pop af
  23++63ED 21 47 64         ld hl, buffer + 31
  23++63F0 77             ld (hl), a
  24++63F1 C9               ret
  25++63F2
  26++63F2              ; HL - Compare string(null terminated)
  27++63F2              ; A - 0 NOT Found
  28++63F2              ;     1 Found
  29++63F2              search:
  30++63F2 06 00            ld b, 0
  30++63F4 E5             push hl
  31++63F5              .loop:
  32++63F5 7E               ld a, (hl)
  32++63F6 23             inc hl
  32++63F7 04             inc b
  32++63F8 A7             and a
  32++63F9 C2 F5 63       jp nz, .loop
  33++63FC 05               dec b
  33++63FD E1             pop hl
  33++63FE C5             push bc
  33++63FF E5             push hl
  34++6400 E1               pop hl
  35++6401 11 48 64         ld de, buffer + 32
  36++6404              .sourceLoop
  37++6404 1B               dec de
  37++6405 10 FD          djnz .sourceLoop
  38++6407 C1               pop bc
  39++6408              .compare
  40++6408 C5               push bc
  40++6409 F5             push af
  41++640A 1A               ld a, (de)
  41++640B 47             ld b, a
  42++640C F1               pop af
  42++640D 7E             ld a, (hl)
  42++640E B8             cp b
  42++640F C1             pop bc
  42++6410 3E 00          ld a, 0
  42++6412 C0             ret nz
  43++6413 13               inc de
  43++6414 23             inc hl
  44++6415 10 F1            djnz .compare
  45++6417 3E 01            ld a, 1
  46++6419 C9               ret
  47++641A
  48++641A              clear:
  49++641A AF               xor a
  49++641B 21 28 64       ld hl, buffer
  49++641E 11 29 64       ld de, buffer + 1
  49++6421 01 20 00       ld bc, 32
  49++6424 77             ld (hl), a
  49++6425 ED B0          ldir
  50++6427 C9               ret
  51++6428
  52++6428 00 00 00...  buffer ds 32
  53++6448
  54++6448                  endmodule
# file closed: utils/strutils.asm
   4++6448                  IFDEF MSX
   5++6448 ~            	    include "bios.asm"
   6++6448                  ENDIF
   7++6448                  include "screen.asm"
# file opened: utils/screen.asm
   1++6448              LINE_LIMIT = 63
   2++6448
   3++6448                  IFDEF NEDOOS
   4++6448 ~            LINE_LIMIT = 79
   5++6448                  ENDIF
   6++6448
   7++6448                  IFDEF TIMEX80
   8++6448 ~            LINE_LIMIT = 84
   9++6448                  ENDIF
  10++6448
  11++6448                  IFDEF MSX
  12++6448 ~            LINE_LIMIT = 79
  13++6448                  ENDIF
  14++6448              ; HL - string pointer
  15++6448              print70Text:
  16++6448 06 3F            ld b, LINE_LIMIT
  17++644A              .loop
  18++644A 7E               ld a, (hl)
  19++644B A7               and a
  19++644C C8             ret z
  20++644D FE 0D            cp 13
  20++644F C8             ret z
  21++6450 FE 0A            cp 10
  21++6452 C8             ret z
  22++6453 C5               push bc
  23++6454 E5               push hl
  24++6455 CD A4 60         call TextMode.putC
  25++6458 E1               pop hl
  26++6459 23               inc hl
  27++645A C1               pop bc
  28++645B 05               dec b
  29++645C 78               ld a, b
  29++645D A7             and a
  29++645E C8             ret z
  30++645F C3 4A 64         jp .loop
  31++6462
  32++6462              ; HL - string pointer
  33++6462              print70Goph:
  34++6462 06 3F            ld b, LINE_LIMIT
  35++6464              .loop
  36++6464 7E               ld a, (hl)
  36++6465 FE 09          cp 09
  36++6467 C8             ret z
  37++6468 A7               and a
  37++6469 C8             ret z
  38++646A C5               push bc
  39++646B E5               push hl
  40++646C CD A4 60         call TextMode.putC
  41++646F E1               pop hl
  42++6470 23               inc hl
  43++6471 C1               pop bc
  44++6472 05               dec b
  45++6473 78               ld a, b
  45++6474 A7             and a
  45++6475 C8             ret z
  46++6476 C3 64 64         jp .loop
# file closed: utils/screen.asm
# file closed: utils/index.asm
  17+ 6479                  include "gopher/render/index.asm"
# file opened: gopher/render/index.asm
   1++6479                  MODULE Render
   2++6479              PER_PAGE = 22
   3++6479              CURSOR_OFFSET = 2
   4++6479                  include "row.asm"
# file opened: gopher/render/row.asm
   1++6479              ; A - row number
   2++6479              ; HL - pointer to row
   3++6479              renderRow:
   4++6479 C6 02            add CURSOR_OFFSET
   5++647B 57               ld d,a
   6++647C 1E 00            ld e,0
   7++647E CD 3A 60         call TextMode.gotoXY
   8++6481 7E               ld a,(hl)
   9++6482 E5               push hl
  10++6483 CD 8E 64         call getIcon
  11++6486 CD A4 60         call TextMode.putC
  12++6489 E1               pop hl
  13++648A 23               inc hl
  14++648B C3 62 64         jp print70Goph
  15++648E
  16++648E              ; A - gopher id char
  17++648E              getIcon:
  18++648E FE 69            cp 'i'
  18++6490 CA AA 64       jp z, .info
  19++6493 FE 39            cp '9'
  19++6495 CA AD 64       jp z, .down
  20++6498 FE 31            cp '1'
  20++649A CA 13 65       jp z, .page
  21++649D FE 30            cp '0'
  21++649F CA 16 65       jp z, .text
  22++64A2 FE 37            cp '7'
  22++64A4 CA 19 65       jp z, .input
  23++64A7 3E 20            ld a, ' '
  24++64A9 C9               ret
  25++64AA              .info
  26++64AA 3E 20            ld a, SPACE
  26++64AC C9             ret
  27++64AD              .down
  28++64AD 54 5D            ld de, hl
  29++64AF 01 FF 00 3E      ld bc, #ff, a, TAB
  29++64B3 09
  29++64B4 ED B1          cpir
  30++64B6 78               ld a, b
  30++64B7 B1             or c
  30++64B8 28 56          jr z, .downExit
  31++64BA D5               push de
  32++64BB              .nameLoop
  33++64BB 7E               ld a, (hl)
  33++64BC A7             and a
  33++64BD 28 10          jr z, .check
  34++64BF FE 09            cp TAB
  34++64C1 28 0C          jr z, .check
  35++64C3 FE 0D            cp CR
  35++64C5 28 08          jr z, .check
  36++64C7 E5               push hl
  37++64C8 CD DD 63         call CompareBuff.push
  38++64CB E1               pop hl
  39++64CC 23               inc hl
  40++64CD 18 EC            jr .nameLoop
  41++64CF              .check
  42++64CF 21 28 65         ld hl, scrExt1
  42++64D2 CD F2 63       call CompareBuff.search
  42++64D5 A7             and a
  42++64D6 20 44          jr nz, .image
  43++64D8 21 2D 65         ld hl, scrExt2
  43++64DB CD F2 63       call CompareBuff.search
  43++64DE A7             and a
  43++64DF 20 3B          jr nz, .image
  44++64E1 3E 03            ld a, 3
  44++64E3 32 D1 8A       ld (VTPL.SETUP), a ; 0 bit - looping, 1 bit - pt2 file
  45++64E6 21 3C 65         ld hl, pt2Ext1
  45++64E9 CD F2 63       call CompareBuff.search
  45++64EC A7             and a
  45++64ED 20 31          jr nz, .music
  46++64EF 21 41 65         ld hl, pt2Ext2
  46++64F2 CD F2 63       call CompareBuff.search
  46++64F5 A7             and a
  46++64F6 20 28          jr nz, .music
  47++64F8 3E 01            ld a, 1
  47++64FA 32 D1 8A       ld (VTPL.SETUP), a
  48++64FD 21 32 65         ld hl, pt3Ext1
  48++6500 CD F2 63       call CompareBuff.search
  48++6503 A7             and a
  48++6504 20 1A          jr nz, .music
  49++6506 21 37 65         ld hl, pt3Ext2
  49++6509 CD F2 63       call CompareBuff.search
  49++650C A7             and a
  49++650D 20 11          jr nz, .music
  50++650F
  51++650F                  ; General Sound support
  52++650F                  ifdef GS
  53++650F ~                ld hl, modExt1
  53++650F ~              call CompareBuff.search
  53++650F ~              and a
  53++650F ~              jr nz, .mod
  54++650F ~                ld hl, modExt2
  54++650F ~              call CompareBuff.search
  54++650F ~              and a
  54++650F ~              jr nz, .mod
  55++650F                  endif
  56++650F
  57++650F              .checkExit
  58++650F E1               pop hl
  59++6510              .downExit
  60++6510 3E 01            ld a, MIME_DOWNLOAD
  60++6512 C9             ret
  61++6513              .page
  62++6513 3E 02            ld a, MIME_LINK
  62++6515 C9             ret
  63++6516              .text
  64++6516 3E 03            ld a, MIME_TEXT
  64++6518 C9             ret
  65++6519              .input
  66++6519 3E 04            ld a, MIME_INPUT
  66++651B C9             ret
  67++651C              .image
  68++651C E1               pop hl
  68++651D 3E 06          ld a, MIME_IMAGE
  68++651F C9             ret
  69++6520              .music
  70++6520 E1               pop hl
  70++6521 3E 05          ld a, MIME_MUSIC
  70++6523 C9             ret
  71++6524              .mod
  72++6524 E1               pop hl
  72++6525 3E 07          ld a, MIME_MOD
  72++6527 C9             ret
  73++6528
  74++6528 2E 73 63 72  scrExt1 db ".scr", 0
  74++652C 00
  75++652D 2E 53 43 52  scrExt2 db ".SCR", 0
  75++6531 00
  76++6532
  77++6532 2E 70 74 33  pt3Ext1 db ".pt3", 0
  77++6536 00
  78++6537 2E 50 54 33  pt3Ext2 db ".PT3", 0
  78++653B 00
  79++653C 2E 70 74 32  pt2Ext1 db ".pt2", 0
  79++6540 00
  80++6541 2E 50 54 32  pt2Ext2 db ".PT2", 0
  80++6545 00
  81++6546 2E 6D 6F 64  modExt1 db ".mod", 0
  81++654A 00
  82++654B 2E 4D 4F 44  modExt2 db ".MOD", 0
  82++654F 00
# file closed: gopher/render/row.asm
   5++6550                  include "buffer.asm"
# file opened: gopher/render/buffer.asm
   1++6550              ; BC - line count
   2++6550              findLine
   3++6550 21 E2 96         ld hl, outputBuffer
   4++6553              findLine2
   5++6553 78               ld a,b
   6++6554 B1               or c
   7++6555 CA 82 65         jp z, .checkEmpty
   8++6558              .loop
   9++6558 7E               ld a, (hl)
  10++6559 A7               and a
  11++655A CA 85 65         jp z, .nope
  12++655D 23               inc hl
  13++655E FE 0D            cp 13
  14++6560 CA 78 65         jp z, .checkLF  ;13
  15++6563 FE 0A            cp 10
  15++6565 CA 6B 65       jp z, .nextCheck     ;10
  16++6568 C3 58 65         jp .loop
  17++656B              .nextCheck
  18++656B A7               and a
  19++656C CA 85 65         jp z, .nope
  20++656F 0B               dec bc
  21++6570 57               ld d,a
  22++6571 78               ld a,b
  23++6572 B1               or c
  24++6573 7A               ld a,d
  25++6574 C2 58 65         jp nz, .loop
  26++6577 C9               ret
  27++6578              .checkLF
  28++6578 7E               ld a, (hl)
  29++6579 FE 0A            cp 10
  30++657B C2 6B 65         jp nz, .nextCheck    ;10
  31++657E 23               inc hl
  32++657F C3 6B 65         jp  .nextCheck
  33++6582              .checkEmpty
  34++6582 7E               ld a, (hl)
  34++6583 A7             and a
  34++6584 C0             ret nz
  35++6585              .nope
  36++6585 21 00 00         ld hl, 0
  36++6588 C9             ret
  37++6589
# file closed: gopher/render/buffer.asm
   6++6589                  include "ui.asm"
# file opened: gopher/render/ui.asm
   1++6589                  IFDEF ZXSCR
   2++6589                      DEFINE LEFT_TAB "[D]omain:                                  "
   3++6589                      DEFINE SCREEN_WIDTH 64
   4++6589                      DEFINE SCREEN64
   5++6589                  ENDIF
   6++6589
   7++6589                  IFDEF TIMEX     ;UNKNOWM fallback to 64
   8++6589 ~                    DEFINE LEFT_TAB "[D]omain:                                  "
   9++6589 ~                    DEFINE SCREEN_WIDTH 64
  10++6589 ~                    DEFINE SCREEN64
  11++6589                  ENDIF
  12++6589
  13++6589                  IFDEF TIMEX80
  14++6589 ~                    DEFINE LEFT_TAB "[D]omain:                                                      "
  15++6589 ~                    DEFINE SCREEN_WIDTH 85
  16++6589 ~                    DEFINE SCREEN85
  17++6589                  ENDIF
  18++6589
  19++6589                  IFDEF NEDOOS
  20++6589 ~                    DEFINE LEFT_TAB "[D]omain:                                                  "
  21++6589 ~                    DEFINE SCREEN_WIDTH 80
  22++6589 ~                    DEFINE SCREEN80
  23++6589                  ENDIF
  24++6589
  25++6589                  IFDEF MSX
  26++6589 ~                    DEFINE LEFT_TAB "[D]omain:                                              "
  27++6589 ~                    DEFINE SCREEN_WIDTH 80
  28++6589 ~                    DEFINE SCREEN80
  29++6589                  ENDIF
  30++6589              prepareScreen:
  31++6589 CD 1D 60         call TextMode.cls
  32++658C 21 5C 66         ld hl, header
  32++658F CD BC 60       call TextMode.printZ
  33++6592 11 0A 00         ld de, #000A
  33++6595 CD 3A 60       call TextMode.gotoXY
  34++6598 21 A0 81         ld hl, hostName
  34++659B CD BC 60       call TextMode.printZ
  35++659E AF               xor a
  35++659F CD 7B 60       call TextMode.highlightLine
  36++65A2 C9               ret
  37++65A3
  38++65A3              inputHost:
  39++65A3 CD EC 69         	call Console.waitForKeyUp
  40++65A6              .loop
  41++65A6 11 0A 00         ld de, #000A
  41++65A9 CD 3A 60       call TextMode.gotoXY
  41++65AC 21 A0 81       ld hl, hostName
  41++65AF CD BC 60       call TextMode.printZ
  42++65B2 3E 04            ld a, MIME_INPUT
  42++65B4 CD A4 60       call TextMode.putC
  43++65B7 3E 20            ld a, ' '
  43++65B9 CD A4 60       call TextMode.putC
  44++65BC              .wait
  45++65BC CD F9 69         call Console.getC
  46++65BF 5F               ld e, a
  47++65C0 FE 0C            cp Console.BACKSPACE
  47++65C2 28 17          jr z, .removeChar
  48++65C4 FE 0D            cp CR
  48++65C6 CA E9 65       jp z, inputNavigate
  49++65C9 FE 20            cp 32
  49++65CB 38 EF          jr c, .wait
  50++65CD              .putC
  51++65CD AF               xor a
  51++65CE 21 A0 81 01    ld hl, hostName, bc, 48
  51++65D2 30 00
  51++65D4 ED B1          cpir
  52++65D6 77               ld (hl), a
  52++65D7 2B             dec hl
  52++65D8 73             ld (hl), e
  53++65D9 18 CB            jr .loop
  54++65DB              .removeChar
  55++65DB AF               xor a
  56++65DC 21 A0 81 01      ld hl, hostName, bc, 48
  56++65E0 30 00
  56++65E2 ED B1          cpir
  57++65E4 2B               dec hl
  57++65E5 2B             dec hl
  57++65E6 77             ld (hl), a
  58++65E7 18 BD            jr .loop
  59++65E9
  60++65E9              inputNavigate:
  61++65E9 21 A0 81 11      ld hl, hostName, de, domain
  61++65ED 1C 66
  62++65EF 7E               ld a,(hl)
  63++65F0 A7               and a
  64++65F1 CA 17 71         jp z, History.load
  65++65F4              .loop
  66++65F4 7E               ld a, (hl)
  66++65F5 A7             and a
  66++65F6 28 05          jr z, .complete
  67++65F8 12               ld (de), a
  67++65F9 23 13          inc hl, de
  68++65FB 18 F7            jr .loop
  69++65FD              .complete
  70++65FD 3E 09            ld a, TAB
  70++65FF 12             ld (de), a
  70++6600 13             inc de
  71++6601 3E 37            ld a, '7'
  71++6603 12             ld (de), a
  71++6604 13             inc de
  72++6605 3E 30            ld a, '0'
  72++6607 12             ld (de), a
  72++6608 13             inc de
  73++6609 3E 0D            ld a, CR
  73++660B 12             ld (de), a
  73++660C 13             inc de
  74++660D 3E 0A            ld a, LF
  74++660F 12             ld (de), a
  74++6610 13             inc de
  75++6611 21 17 66         ld hl, navRow
  75++6614 C3 70 71       jp History.navigate
  76++6617
  77++6617 31 20 09 2F  navRow db "1 ", TAB, "/", TAB
  77++661B 09
  78++661C 6E 69 68 69  domain db "nihirash.net"
  78++6620 72 61 73 68
  78++6624 2E 6E 65 74
  79++6628 00 00 00...      ds 64 - ($ - domain)
  80++665C
  81++665C 5B 44 5D 6F  header db "[D]omain:                                  ", "MRF "
  81++6660 6D 61 69 6E
  81++6664 3A 20 20 20
  81++6668 20 20 20 20
  81++666C 20 20 20 20
  81++6670 20 20 20 20
  81++6674 20 20 20 20
  81++6678 20 20 20 20
  81++667C 20 20 20 20
  81++6680 20 20 20 20
  81++6684 20 20 20 4D
  81++6688 52 46 20
  82++668B 31 2E 37            db "1.7"
  83++668E 2E                  db "."
  84++668F 31 36               db "16"
  85++6691              	IFDEF MSX
  86++6691 ~                   db "    [MSX UNAPI]",13, 0
  87++6691              	ENDIF
  88++6691
  89++6691                  IFDEF MB03
  90++6691 ~                   db " [MB03+]",13, 0
  91++6691                     ENDIF
  92++6691
  93++6691                  IFDEF UNO
  94++6691 ~                   db " [UNO UART]",13, 0
  95++6691                  ENDIF
  96++6691
  97++6691                  IFDEF AY
  98++6691 ~                   db " [AYWIFI]",13, 0
  99++6691              	ENDIF
 100++6691
 101++6691                  IFDEF ZW
 102++6691 20 20 5B 5A         db "  [ZXWiFi]",13, 0
 102++6695 58 57 69 46
 102++6699 69 5D 0D 00
 103++669D                  ENDIF
 104++669D
 105++669D                   IFDEF UARTATM
 106++669D ~                   db " [ATM UART]",13, 0
 107++669D                  ENDIF
 108++669D
 109++669D                  IFDEF UARTEVO
 110++669D ~                    db " [EVO UART]",13, 0
 111++669D                  ENDIF
 112++669D
 113++669D                  IFDEF UNOUART
 114++669D ~                    db " [UNO UART]",13, 0
 115++669D                  ENDIF
 116++669D
 117++669D                  IFDEF NEDONET
 118++669D ~            	    db "  [nedoNET]",13, 0
 119++669D              	ENDIF
 120++669D
# file closed: gopher/render/ui.asm
   7++669D                  include "gopher-page.asm"
# file opened: gopher/render/gopher-page.asm
   1++669D              renderGopherScreen:
   2++669D 3E FF            ld a, 255
   3++669F 32 6E 8A         ld (oldminutes), a
   4++66A2 CD 89 65         call Render.prepareScreen
   5++66A5
   6++66A5 2A 8E 74         ld hl, (page_offset)        ; HL - offset to 0 Row on screen
   7++66A8 44 4D            ld bc,hl                    ; BC - offset to C Row on screen
   8++66AA CD 50 65         call Render.findLine        ;BC - Search this line  HL - Return pointer to page with offset
   9++66AD 7C               ld a, h
  10++66AE B5               or l
  11++66AF 28 21            jr z, .exit2
  12++66B1 7B               ld a, e
  13++66B2 AF               xor a
  14++66B3 E5               push hl
  15++66B4 CD 79 64         call renderRow
  16++66B7 E1               pop hl
  17++66B8
  18++66B8 06 15            ld b, PER_PAGE-1
  19++66BA
  20++66BA              .loop
  21++66BA C5               push bc
  22++66BB 3E 16            ld a, PER_PAGE
  23++66BD 90               sub b
  24++66BE 5F               ld e,a
  25++66BF
  26++66BF 01 01 00         ld bc, 1
  27++66C2
  28++66C2 CD 53 65         call Render.findLine2   ;BC - Search this line  HL - Return pointer to page with offset
  29++66C5
  30++66C5 7C               ld a, h
  31++66C6 B5               or l
  32++66C7 28 06            jr z, .exit
  33++66C9 7B               ld a, e
  34++66CA E5               push hl
  35++66CB CD 79 64         call renderRow
  36++66CE E1               pop hl
  37++66CF              .exit
  38++66CF C1               pop bc
  39++66D0 10 E8            djnz .loop
  40++66D2              .exit2
  41++66D2 CD C8 67         call showCursor
  42++66D5 C9               ret
  43++66D6
  44++66D6              checkBorder:
  45++66D6 3A 8C 74         ld a, (cursor_position)
  45++66D9 FE FF          cp #ff
  45++66DB CA EC 67       jp z, pageUp
  46++66DE 3A 8C 74         ld a, (cursor_position)
  46++66E1 FE 16          cp PER_PAGE
  46++66E3 CA 1F 68       jp z, pageDn
  47++66E6 CD C8 67         call showCursor
  48++66E9 C3 EC 66         jp workLoop
  49++66EC
  50++66EC              workLoop:
  51++66EC 3A 08 69         ld a, (play_next)
  51++66EF A7             and a
  51++66F0 C2 7D 67       jp nz, navigate
  52++66F3
  53++66F3                  dup 4
  54++66F3 76          >    halt
  54++66F4 76          >    halt
  54++66F5 76          >    halt
  54++66F6 76          >    halt
  55++66F7                  edup
  56++66F7              .nothing
  57++66F7
  58++66F7 76               halt
  59++66F8 CD C9 89         call printRTC
  60++66FB
  61++66FB CD 0A 6A         call Console.peekC
  62++66FE A7               and a
  62++66FF CA F7 66       jp z, .nothing
  63++6702
  64++6702 FE 31            cp '1'
  64++6704 CA 00 71       jp z, History.back
  65++6707 FE 32            cp '2'
  65++6709 CA 7D 67       jp z, navigate
  66++670C FE 33            cp '3'
  66++670E CA D8 67       jp z, cursorDown
  67++6711 FE 34            cp '4'
  67++6713 CA E2 67       jp z, cursorUp
  68++6716 FE 35            cp '5'
  68++6718 CA EC 67       jp z, pageUp
  69++671B FE 38            cp '8'
  69++671D CA 1F 68       jp z, pageDn
  70++6720 FE 36            cp '6'
  70++6722 CA D8 67       jp z, cursorDown
  71++6725 FE 37            cp '7'
  71++6727 CA E2 67       jp z, cursorUp
  72++672A
  73++672A FE 0A            cp Console.KEY_DN
  73++672C CA D8 67       jp z, cursorDown
  74++672F FE 61            cp 'a'
  74++6731 CA D8 67       jp z, cursorDown
  75++6734 FE 0B            cp Console.KEY_UP
  75++6736 CA E2 67       jp z, cursorUp
  76++6739 FE 71            cp 'q'
  76++673B CA E2 67       jp z, cursorUp
  77++673E FE 08            cp Console.KEY_LT
  77++6740 CA EC 67       jp z, pageUp
  78++6743 FE 6F            cp 'o'
  78++6745 CA EC 67       jp z, pageUp
  79++6748 FE 09            cp Console.KEY_RT
  79++674A CA 1F 68       jp z, pageDn
  80++674D FE 70            cp 'p'
  80++674F CA 1F 68       jp z, pageDn
  81++6752
  82++6752 FE 68            cp 'h'
  82++6754 CA 6D 71       jp z, History.home
  83++6757 FE 48            cp 'H'
  83++6759 CA 6D 71       jp z, History.home
  84++675C
  85++675C FE 62            cp 'b'
  85++675E CA 00 71       jp z, History.back
  86++6761 FE 42            cp 'B'
  86++6763 CA 00 71       jp z, History.back
  87++6766 FE 0C            cp Console.BACKSPACE
  87++6768 CA 00 71       jp z, History.back
  88++676B
  89++676B FE 64            cp 'd'
  89++676D CA A3 65       jp z, inputHost
  90++6770 FE 44            cp 'D'
  90++6772 CA A3 65       jp z, inputHost
  91++6775
  92++6775 FE 0D            cp CR
  92++6777 CA 7D 67       jp z, navigate
  93++677A
  94++677A                  IFDEF MSX
  95++677A ~                	cp ESC
  95++677A ~              jp z, exit
  96++677A                  ENDIF
  97++677A
  98++677A                  IFDEF GS
  99++677A ~                cp 'M'
  99++677A ~              call z, GeneralSound.toggleModule
 100++677A ~                cp 'm'
 100++677A ~              call z, GeneralSound.toggleModule
 101++677A ~                cp 'g'
 101++677A ~              call z, GeneralSound.toggleDownload
 102++677A ~                cp 'G'
 102++677A ~              call z, GeneralSound.toggleDownload
 103++677A                  ENDIF
 104++677A
 105++677A                  IFDEF TIMEX80
 106++677A ~                cp 'T'
 106++677A ~              call z, TextMode.toggleColor
 107++677A ~                cp 't'
 107++677A ~              call z, TextMode.toggleColor
 108++677A                  ENDIF
 109++677A
 110++677A C3 EC 66         jp workLoop
 111++677D
 112++677D              navigate:
 113++677D CD EC 69         call Console.waitForKeyUp
 114++6780 AF               xor a
 114++6781 32 08 69       ld (play_next), a
 115++6784 CD D0 67         call hideCursor
 116++6787 ED 4B 8E 74      ld bc, (page_offset)
 117++678B 2A 8C 74         ld hl, (cursor_position)
 118++678E 09               add hl,bc
 119++678F 44               ld b, h ;HHHHH
 120++6790 4D               ld c, l ;LLLLL
 121++6791 D5               push de
 122++6792 CD 50 65         call Render.findLine
 123++6795 D1               pop de
 124++6796 7E               ld a, (hl)
 125++6797 FE 31            cp '1'
 125++6799 CA B1 67       jp z, .load
 126++679C FE 30            cp '0'
 126++679E CA B1 67       jp z, .load
 127++67A1 FE 39            cp '9'
 127++67A3 CA B1 67       jp z, .load
 128++67A6 FE 37            cp '7'
 128++67A8 CA B9 67       jp z, .input
 129++67AB CD C8 67         call showCursor
 130++67AE C3 EC 66         jp workLoop
 131++67B1              .load
 132++67B1 E5               push hl
 133++67B2 CD 8E 64         call getIcon
 134++67B5 E1               pop hl
 135++67B6 C3 70 71         jp History.navigate
 136++67B9              .input
 137++67B9 E5               push hl
 138++67BA CD 09 69         call DialogBox.inputBox
 139++67BD E1               pop hl
 140++67BE 3A 64 69         ld a, (DialogBox.inputBuffer)
 140++67C1 A7             and a
 140++67C2 CA 17 71       jp z, History.load
 141++67C5 C3 B1 67         jp .load
 142++67C8
 143++67C8              showCursor:
 144++67C8 3A 8C 74         ld a, (cursor_position)
 144++67CB C6 02          add CURSOR_OFFSET
 145++67CD C3 7B 60         jp TextMode.highlightLine
 146++67D0
 147++67D0              hideCursor:
 148++67D0 3A 8C 74         ld a, (cursor_position)
 148++67D3 C6 02          add CURSOR_OFFSET
 149++67D5 C3 61 60         jp TextMode.usualLine
 150++67D8
 151++67D8              cursorDown:
 152++67D8 CD D0 67         call hideCursor
 153++67DB 21 8C 74         ld hl, cursor_position
 154++67DE 34               inc (hl)
 155++67DF C3 D6 66         jp checkBorder
 156++67E2
 157++67E2              cursorUp:
 158++67E2 CD D0 67         call hideCursor
 159++67E5 21 8C 74         ld hl, cursor_position
 160++67E8 35               dec (hl)
 161++67E9 C3 D6 66         jp checkBorder
 162++67EC
 163++67EC              pageUp:
 164++67EC 3A 8E 74         ld a, (page_offset)
 164++67EF FE 00          cp 0
 164++67F1 C2 FF 67       jp nz, .pageUp2
 165++67F4 3A 8F 74         ld a, (page_offset + 1)
 165++67F7 FE 00          cp 0
 165++67F9 C2 FF 67       jp nz, .pageUp2
 166++67FC C3 15 68         jp .skip
 167++67FF              .pageUp2:
 168++67FF 3E 15            ld a, PER_PAGE - 1
 168++6801 32 8C 74       ld (cursor_position), a
 169++6804 2A 8E 74         ld hl, (page_offset)
 170++6807 11 16 00         ld de,PER_PAGE
 171++680A ED 52            sbc hl,de
 172++680C 22 8E 74         ld (page_offset), hl
 173++680F              .exit
 174++680F CD 9D 66         call renderGopherScreen
 175++6812 C3 EC 66         jp workLoop
 176++6815              .skip
 177++6815 AF               xor a
 177++6816 32 8C 74       ld (cursor_position), a
 177++6819 CD 9D 66       call renderGopherScreen
 177++681C C3 EC 66       jp workLoop
 178++681F
 179++681F              pageDn:
 180++681F AF                xor a
 180++6820 32 8C 74       ld (cursor_position), a
 181++6823 2A 8E 74         ld hl,(page_offset)
 182++6826 11 16 00         ld de,PER_PAGE
 183++6829 19               add hl,de
 184++682A 22 8E 74         ld (page_offset), hl
 185++682D C3 0F 68         jp pageUp.exit
 186++6830
# file closed: gopher/render/gopher-page.asm
   8++6830                  include "plaintext.asm"
# file opened: gopher/render/plaintext.asm
   1++6830              renderPlainTextScreen:
   2++6830 3E FF            ld a, 255
   3++6832 32 6E 8A         ld (oldminutes), a
   4++6835 CD 89 65         call prepareScreen
   5++6838
   6++6838 2A 8E 74         ld hl, (page_offset)        ; HL - offset to 0 Row on screen
   7++683B 44 4D            ld bc,hl                    ; BC - offset to C Row on screen
   8++683D CD 50 65         call Render.findLine        ;BC - Search this line  HL - Return pointer to page with offset
   9++6840 7C               ld a, h
  10++6841 B5               or l
  11++6842 28 30            jr z, .exit2
  12++6844 AF               xor a
  13++6845 C6 02            add CURSOR_OFFSET
  13++6847 57 1E 01       ld d, a, e, 1
  13++684A CD 3A 60       call TextMode.gotoXY
  14++684D CD 48 64         call print70Text
  15++6850 06 15            ld b, PER_PAGE -1
  16++6852              .loop
  17++6852 C5               push bc
  18++6853 3E 16            ld a, PER_PAGE
  19++6855 90               sub b
  20++6856 5F               ld e,a
  21++6857 01 01 00         ld bc, 1
  22++685A CD 53 65         call Render.findLine2   ;BC - Search this line  HL - Return pointer to page with offset
  23++685D 7C               ld a, h
  24++685E B5               or l
  25++685F 28 10            jr z, .exit
  26++6861 7B               ld a, e
  27++6862 C6 02            add CURSOR_OFFSET
  27++6864 57 1E 01       ld d, a, e, 1
  27++6867 CD 3A 60       call TextMode.gotoXY
  28++686A CD 48 64         call print70Text
  29++686D C1               pop bc
  30++686E 10 E2            djnz .loop
  31++6870 C9               ret
  32++6871              .exit
  33++6871 C1               pop bc
  34++6872 10 DE            djnz .loop
  35++6874              .exit2
  36++6874 CD C8 67         call showCursor
  37++6877 C9               ret
  38++6878              plainTextLoop:
  39++6878 CD C9 89         call printRTC
  40++687B CD F9 69         call Console.getC
  41++687E
  42++687E FE 31            cp '1'
  42++6880 CA 00 71       jp z, History.back
  43++6883 FE 32            cp '2'
  43++6885 CA 7D 67       jp z, navigate
  44++6888 FE 35            cp '5'
  44++688A CA E6 68       jp z, textUp
  45++688D FE 38            cp '8'
  45++688F CA D6 68       jp z, textDown
  46++6892 FE 08            cp Console.KEY_LT
  46++6894 CA E6 68       jp z, textUp
  47++6897 FE 09            cp Console.KEY_RT
  47++6899 CA D6 68       jp z, textDown
  48++689C
  49++689C FE 0A            cp Console.KEY_DN
  49++689E CA D6 68       jp z, textDown
  50++68A1 FE 61            cp 'a'
  50++68A3 CA D6 68       jp z, textDown
  51++68A6
  52++68A6 FE 0B            cp Console.KEY_UP
  52++68A8 CA E6 68       jp z, textUp
  53++68AB FE 71            cp 'q'
  53++68AD CA E6 68       jp z, textUp
  54++68B0
  55++68B0 FE 68            cp 'h'
  55++68B2 CA 6D 71       jp z, History.home
  56++68B5 FE 48            cp 'H'
  56++68B7 CA 6D 71       jp z, History.home
  57++68BA
  58++68BA FE 62            cp 'b'
  58++68BC CA 00 71       jp z, History.back
  59++68BF FE 42            cp 'B'
  59++68C1 CA 00 71       jp z, History.back
  60++68C4
  61++68C4 FE 64            cp 'd'
  61++68C6 CA A3 65       jp z, inputHost
  62++68C9 FE 44            cp 'D'
  62++68CB CA A3 65       jp z, inputHost
  63++68CE
  64++68CE FE 0C            cp Console.BACKSPACE
  64++68D0 CA 00 71       jp z, History.back
  65++68D3
  66++68D3                  IFDEF MSX
  67++68D3 ~                	cp ESC
  67++68D3 ~              jp z, exit
  68++68D3                  ENDIF
  69++68D3
  70++68D3                  IFDEF GS
  71++68D3 ~                cp 'M'
  71++68D3 ~              call z, GeneralSound.toggleModule
  72++68D3 ~                cp 'm'
  72++68D3 ~              call z, GeneralSound.toggleModule
  73++68D3                  ENDIF
  74++68D3
  75++68D3                  IFDEF TIMEX80
  76++68D3 ~                cp 'T'
  76++68D3 ~              call z, TextMode.toggleColor
  77++68D3 ~                cp 't'
  77++68D3 ~              call z, TextMode.toggleColor
  78++68D3                  ENDIF
  79++68D3
  80++68D3 C3 78 68         jp plainTextLoop
  81++68D6
  82++68D6
  83++68D6              textDown:
  84++68D6 2A 8E 74         ld hl,(page_offset)
  85++68D9 11 16 00         ld de,PER_PAGE
  86++68DC 19               add hl,de
  87++68DD 22 8E 74         ld (page_offset), hl
  88++68E0 CD 30 68         call renderPlainTextScreen
  89++68E3 C3 78 68         jp plainTextLoop
  90++68E6
  91++68E6              textUp:
  92++68E6 3A 8E 74         ld a, (page_offset)
  92++68E9 FE 00          cp 0
  92++68EB 20 0A          jr nz, .textUp2
  93++68ED 3A 8F 74         ld a, (page_offset + 1)
  93++68F0 FE 00          cp 0
  93++68F2 20 03          jr nz, .textUp2
  94++68F4 C3 78 68         jp plainTextLoop
  95++68F7
  96++68F7              .textUp2:
  97++68F7 2A 8E 74         ld hl,(page_offset)
  98++68FA 11 16 00         ld de,PER_PAGE
  99++68FD ED 52            sbc hl,de
 100++68FF 22 8E 74         ld (page_offset), hl
 101++6902 CD 30 68         call renderPlainTextScreen
 102++6905 C3 78 68         jp plainTextLoop
 103++6908
# file closed: gopher/render/plaintext.asm
   9++6908
  10++6908 00           play_next       db  0
  11++6909              position        EQU historyBlock.position
  12++6909              cursor_position EQU position + 2
  13++6909              page_offset     EQU position + 4
  14++6909
  15++6909                  ENDMODULE
  16++6909
  17++6909                  include "dialogbox.asm"
# file opened: gopher/render/dialogbox.asm
   1++6909                  module DialogBox
   2++6909
   3++6909              inputBox:
   4++6909 AF               xor a
   4++690A 32 64 69       ld (inputBuffer), a
   5++690D              .noclear
   6++690D CD C5 69         call drawBox
   7++6910              .loop
   8++6910 11 05 0B         ld de, #0B05
   8++6913 CD 3A 60       call TextMode.gotoXY
   9++6916 21 64 69         ld hl, inputBuffer
   9++6919 CD BC 60       call TextMode.printZ
  10++691C 3E 04            ld a, MIME_INPUT
  10++691E CD A4 60       call TextMode.putC
  10++6921 3E 20          ld a, ' '
  10++6923 CD A4 60       call TextMode.putC
  11++6926              .checkkey
  12++6926 CD F9 69         call Console.getC
  13++6929 FE 0C            cp Console.BACKSPACE
  13++692B 28 16          jr z, .removeChar
  14++692D FE 0D        	cp CR
  14++692F C8             ret z
  15++6930 FE 20            cp SPACE
  15++6932 38 F2          jr c, .checkkey
  16++6934              .putC
  17++6934 5F               ld e, a
  18++6935 AF               xor a
  18++6936 21 64 69 01    ld hl, inputBuffer, bc, #ff
  18++693A FF 00
  18++693C ED B1          cpir
  19++693E 77               ld (hl), a
  19++693F 2B             dec hl
  19++6940 73             ld (hl), e
  20++6941 18 CD            jr .loop
  21++6943              .removeChar
  22++6943 AF               xor a
  23++6944 21 64 69 01      ld hl, inputBuffer, bc, #ff
  23++6948 FF 00
  23++694A ED B1          cpir
  24++694C E5               push hl
  25++694D 11 65 69             ld de, inputBuffer + 1
  26++6950 B7                   or a
  26++6951 ED 52          sbc hl, de
  27++6953 7C                   ld a, h
  27++6954 B5             or l
  28++6955 E1               pop hl
  29++6956 28 B8            jr z, .loop
  30++6958 AF               xor a
  31++6959 2B               dec hl
  31++695A 2B             dec hl
  31++695B 77             ld (hl), a
  32++695C 18 B2            jr .loop
  33++695E
  34++695E              	IFNDEF MSX
  35++695E              delayinput:
  36++695E 06 32           ld b, 50
  37++6960              .loop2
  38++6960 76               halt
  39++6961 10 FD            djnz .loop2
  40++6963 C9               ret
  41++6964              namedownload
  42++6964                  IFDEF NEDOOS
  43++6964 ~            		db "..",92,"downloads",92
  44++6964                  ENDIF
  45++6964                  ENDIF
  46++6964 00 00 00...  inputBuffer ds 80
  47++69B4
  48++69B4              msgBox:
  49++69B4 CD BD 69         call msgNoWait
  50++69B7 06 96            ld b, 150
  51++69B9              .loop
  52++69B9 76               halt
  53++69BA 10 FD            djnz .loop
  54++69BC C9               ret
  55++69BD
  56++69BD              msgNoWait:
  57++69BD E5               push hl
  58++69BE CD C5 69         call drawBox
  59++69C1 E1               pop hl
  60++69C2 C3 BC 60         jp TextMode.printZ
  61++69C5
  62++69C5              drawBox:
  63++69C5 26 0A 3E 09      ld h, #0a, a, BORDER_TOP
  64++69C9 CD 47 60         call TextMode.fillLine
  65++69CC 26 0B 3E 20      ld h, #0b, a, ' '
  66++69D0 CD 47 60         call TextMode.fillLine
  67++69D3 26 0C 3E 08      ld h, #0c, a, BORDER_BOTTOM
  68++69D7 CD 47 60         call TextMode.fillLine
  69++69DA 3E 0A            ld a, #0a
  70++69DC CD 7B 60         call TextMode.highlightLine
  71++69DF 3E 0C            ld a, #0c
  72++69E1 CD 7B 60         call TextMode.highlightLine
  73++69E4 11 03 0B         ld de,#0B03
  74++69E7 CD 3A 60         call TextMode.gotoXY
  75++69EA C9               ret
  76++69EB                  endmodule
  77++69EB
# file closed: gopher/render/dialogbox.asm
# file closed: gopher/render/index.asm
  18+ 69EB                  include "dos/index.asm"
# file opened: dos/index.asm
   1++69EB              	IFDEF NEDOOS
   2++69EB ~            	    include "nedoconsole.asm"
   3++69EB ~            		include "nedoos.asm"
   4++69EB              	ENDIF
   5++69EB
   6++69EB              	IFDEF TRDOS
   7++69EB                  	include "console.asm"
# file opened: dos/console.asm
   1++69EB                  module Console
   2++69EB              KEY_UP = 11
   3++69EB              KEY_DN = 10
   4++69EB              KEY_LT = 8
   5++69EB              KEY_RT = 9
   6++69EB              BACKSPACE = 12
   7++69EB 00           keyCode db 0
   8++69EC
   9++69EC              BASIC_KEY = #5C08
  10++69EC
  11++69EC              waitForKeyUp:
  12++69EC 76           	halt
  13++69ED AF              xor a
  13++69EE DB FE          in a, (#fe)
  13++69F0 2F             cpl
  13++69F1 E6 1F          and 31
  13++69F3 20 F7          jr nz, waitForKeyUp
  14++69F5 32 08 5C        ld (BASIC_KEY), a
  15++69F8 C9              ret
  16++69F9
  17++69F9              getC:
  18++69F9 AF              xor a
  19++69FA 32 08 5C        ld (BASIC_KEY),a
  20++69FD              getC2:
  21++69FD 3A 08 5C        ld a,(BASIC_KEY)
  22++6A00 A7              and a
  22++6A01 28 FA          jr z, getC2
  23++6A03 47              ld b,a
  24++6A04 AF              xor a
  24++6A05 32 08 5C       ld (BASIC_KEY), a
  25++6A08 78              ld a, b
  26++6A09 C9              ret
  27++6A0A
  28++6A0A              peekC:
  29++6A0A AF               xor a
  29++6A0B 32 08 5C       ld (BASIC_KEY),a
  30++6A0E CD 12 6A         call inkey
  31++6A11 C9               ret
  32++6A12
  33++6A12              inkey:
  34++6A12 11 00 00        ld de,0
  35++6A15 01 FE FE        ld bc,$fefe
  36++6A18 ED 78           in a,(c)
  37++6A1A F6 E1           or $e1
  38++6A1C FE FF           cp $ff
  39++6A1E 20 57           jr nz, .keyhitA
  40++6A20
  41++6A20 1E 05           ld e,5
  42++6A22 06 FD           ld b,$fd
  43++6A24 ED 78           in a,(c)
  44++6A26 F6 E0           or $e0
  45++6A28 FE FF           cp $ff
  46++6A2A 20 4B           jr nz, .keyhitA
  47++6A2C
  48++6A2C 1E 0A           ld e,10
  49++6A2E 06 FB           ld b,$fb
  50++6A30 ED 78           in a,(c)
  51++6A32 F6 E0           or $e0
  52++6A34 FE FF           cp $ff
  53++6A36 20 3F           jr nz, .keyhitA
  54++6A38
  55++6A38 1E 0F           ld e,15
  56++6A3A 06 F7           ld b,$f7
  57++6A3C ED 78           in a,(c)
  58++6A3E F6 E0           or $e0
  59++6A40 FE FF           cp $ff
  60++6A42 20 33           jr nz, .keyhitA
  61++6A44
  62++6A44 1E 14           ld e,20
  63++6A46 06 EF           ld b,$ef
  64++6A48 ED 78           in a,(c)
  65++6A4A F6 E0           or $e0
  66++6A4C FE FF           cp $ff
  67++6A4E 20 27           jr nz, .keyhitA
  68++6A50
  69++6A50 1E 19           ld e,25
  70++6A52 06 DF           ld b,$df
  71++6A54 ED 78           in a,(c)
  72++6A56 F6 E0           or $e0
  73++6A58 FE FF           cp $ff
  74++6A5A 20 1B           jr nz, .keyhitA
  75++6A5C
  76++6A5C 1E 1E           ld e,30
  77++6A5E 06 BF           ld b,$bf
  78++6A60 ED 78           in a,(c)
  79++6A62 F6 E0           or $e0
  80++6A64 FE FF           cp $ff
  81++6A66 20 0F           jr nz, .keyhitA
  82++6A68
  83++6A68 1E 23           ld e,35
  84++6A6A 06 7F           ld b,$7f
  85++6A6C ED 78           in a,(c)
  86++6A6E F6 E2           or $e2
  87++6A70 FE FF           cp $ff
  88++6A72 4F              ld c,a
  89++6A73 20 19           jr nz, .keyhitB
  90++6A75
  91++6A75              .nokey
  92++6A75 AF              xor a
  93++6A76 C9              ret
  94++6A77
  95++6A77              .keyhitA
  96++6A77
  97++6A77 4F              ld c,a
  98++6A78
  99++6A78 78              ld a,b
 100++6A79 2F              cpl
 101++6A7A F6 81           or $81
 102++6A7C DB FE           in a,($fe)
 103++6A7E F6 E0           or $e0
 104++6A80 FE FF           cp $ff
 105++6A82 20 F1           jr nz, .nokey
 106++6A84
 107++6A84 3E 7F           ld a,$7f
 108++6A86 DB FE           in a,($fe)
 109++6A88 F6 E2           or $e2
 110++6A8A FE FF           cp $ff
 111++6A8C 20 E7           jr nz, .nokey
 112++6A8E
 113++6A8E              .keyhitB
 114++6A8E
 115++6A8E 06 00           ld b,0
 116++6A90 21 D7 69        ld hl,.rowtbl-$e0
 117++6A93 09              add hl,bc
 118++6A94 7E              ld a,(hl)
 119++6A95 FE 05           cp 5
 120++6A97 30 DC           jr nc, .nokey
 121++6A99 83              add a,e
 122++6A9A 5F              ld e,a
 123++6A9B
 124++6A9B 21 D7 6A        ld hl,.table
 125++6A9E 19              add hl,de
 126++6A9F
 127++6A9F 3E FE           ld a,$fe
 128++6AA1 DB FE           in a,($fe)
 129++6AA3 E6 01           and $01
 130++6AA5 20 03           jr nz, .nocaps
 131++6AA7 1E 28           ld e,40
 132++6AA9 19              add hl,de
 133++6AAA
 134++6AAA              .nocaps
 135++6AAA
 136++6AAA 3E 7F           ld a,$7f
 137++6AAC DB FE           in a,($fe)
 138++6AAE E6 02           and $02
 139++6AB0 20 03           jr nz, .nosym
 140++6AB2 1E 50           ld e,80
 141++6AB4 19              add hl,de
 142++6AB5
 143++6AB5              .nosym
 144++6AB5
 145++6AB5 7E              ld a,(hl)
 146++6AB6 C9              ret
 147++6AB7
 148++6AB7              .rowtbl
 149++6AB7 FF FF FF FF     defb 255,255,255,255,255,255,255
 149++6ABB FF FF FF
 150++6ABE FF FF FF FF     defb 255,255,255,255,255,255,255,255
 150++6AC2 FF FF FF FF
 151++6AC6 04 FF FF FF     defb 4,255,255,255,255,255,255
 151++6ACA FF FF FF
 152++6ACD FF 03 FF FF     defb 255,3,255,255,255,2,255,1
 152++6AD1 FF 02 FF 01
 153++6AD5 00 FF           defb 0,255
 154++6AD7
 155++6AD7              .table
 156++6AD7 00 7A 78 63     db 0,'z','x','c','v'      ; CAPS SHIFT, Z, X, C, V
 156++6ADB 76
 157++6ADC 61 73 64 66     db 'a','s','d','f','g'      ; A, S, D, F, G
 157++6AE0 67
 158++6AE1 71 77 65 72     db 'q','w','e','r','t'      ; Q, W, E, R, T
 158++6AE5 74
 159++6AE6 31 32 33 34     db '1','2','3','4','5'      ; 1, 2, 3, 4, 5
 159++6AEA 35
 160++6AEB 30 39 38 37     db '0','9','8','7','6'      ; 0, 9, 8, 7, 6
 160++6AEF 36
 161++6AF0 70 6F 69 75     db 'p','o','i','u','y'      ; P, O, I, U, Y
 161++6AF4 79
 162++6AF5 0D 6C 6B 6A     db 13,'l','k','j','h'       ; ENTER, L, K, J, H
 162++6AF9 68
 163++6AFA 20 00 6D 6E     db ' ',0,'m','n','b'      ; SPACE, SYM SHIFT, M, N, B
 163++6AFE 62
 164++6AFF
 165++6AFF                 ; the following are CAPS SHIFTed
 166++6AFF
 167++6AFF 00 5A 58 43     db 0,'Z','X','C','V'      ; CAPS SHIFT, Z, X, C, V
 167++6B03 56
 168++6B04 41 53 44 46     db 'A','S','D','F','G'      ; A, S, D, F, G
 168++6B08 47
 169++6B09 51 57 45 52     db 'Q','W','E','R','T'      ; Q, W, E, R, T
 169++6B0D 54
 170++6B0E 07 06 80 81     db 7,6,128,129,8            ; 1, 2, 3, 4, 5
 170++6B12 08
 171++6B13 0C 00 09 0B     db 12,0,9,11,10             ; 0, 9, 8, 7, 6
 171++6B17 0A
 172++6B18 50 4F 49 55     db 'P','O','I','U','Y'      ; P, O, I, U, Y
 172++6B1C 59
 173++6B1D 0D 4C 4B 4A     db 13,'L','K','J','H'       ; ENTER, L, K, J, H
 173++6B21 48
 174++6B22 20 00 4D 4E     db ' ',0,'M','N','B'      ; SPACE, SYM SHIFT, M, N, B
 174++6B26 42
 175++6B27
 176++6B27                 ; the following are SYM SHIFTed
 177++6B27
 178++6B27 00 3A 60 3F     db 0,':',96,'?','/'       ; CAPS SHIFT, Z, X, C, V
 178++6B2B 2F
 179++6B2C 7E 7C 5C 7B     db '~','|',92,'{','}'       ; A, S, D, F, G
 179++6B30 7D
 180++6B31 83 84 85 3C     db 131,132,133,'<','>'      ; Q, W, E, R, T
 180++6B35 3E
 181++6B36 21 40 23 24     db '!','@','#','$','%'      ; 1, 2, 3, 4, 5
 181++6B3A 25
 182++6B3B 5F 29 28 27     db '_',')','(',39,'&'       ; 0, 9, 8, 7, 6
 182++6B3F 26
 183++6B40 22 3B 82 5D     db 34,';',130,']','['       ; P, O, I, U, Y
 183++6B44 5B
 184++6B45 0D 3D 2B 2D     db 13,'=','+','-','^'       ; ENTER, L, K, J, H
 184++6B49 5E
 185++6B4A 20 00 2E 2C     db ' ',0,'.',',','*'      ; SPACE, SYM SHIFT, M, N, B
 185++6B4E 2A
 186++6B4F
 187++6B4F                 ; the following are CAPS SHIFTed and SYM SHIFTed ("CTRL" key)
 188++6B4F
 189++6B4F 00 1A 18 03     db 0,26,24,3,22           ; CAPS SHIFT, Z, X, C, V
 189++6B53 16
 190++6B54 01 13 04 06     db 1,19,4,6,7               ; A, S, D, F, G
 190++6B58 07
 191++6B59 11 17 05 12     db 17,23,5,18,20            ; Q, W, E, R, T
 191++6B5D 14
 192++6B5E 1B 1C 1D 1E     db 27,28,29,30,31           ; 1, 2, 3, 4, 5
 192++6B62 1F
 193++6B63 7F 00 86 60     db 127,0,134,'`',135      ; 0, 9, 8, 7, 6
 193++6B67 87
 194++6B68 10 0F 09 15     db 16,15,9,21,25            ; P, O, I, U, Y
 194++6B6C 19
 195++6B6D 0D 0C 0B 0A     db 13,12,11,10,8            ; ENTER, L, K, J, H
 195++6B71 08
 196++6B72 20 00 0D 0E     db ' ',0,13,14,2          ; SPACE, SYM SHIFT, M, N, B
 196++6B76 02
 197++6B77
 198++6B77                  endmodule
# file closed: dos/console.asm
   8++6B77              		include "trdos.asm"
# file opened: dos/trdos.asm
   1++6B77              ;trdos driver (izzx)
   2++6B77                  MODULE Dos
   3++6B77              ; API methods
   4++6B77              ESX_GETSETDRV = #89
   5++6B77              ESX_FOPEN = #9A
   6++6B77              ESX_FCLOSE = #9B
   7++6B77              ESX_FSYNC = #9C
   8++6B77              ESX_FREAD = #9D
   9++6B77              ESX_FWRITE = #9E
  10++6B77
  11++6B77              ; File modes
  12++6B77              FMODE_READ = #01
  13++6B77              FMODE_WRITE = #06
  14++6B77              FMODE_CREATE = #0E
  15++6B77
  16++6B77                  ; MACRO esxCall func
  17++6B77                  ; rst #8 : db func
  18++6B77                  ; ENDM
  19++6B77
  20++6B77              ;id = 0 файл не открыт
  21++6B77              ;id = 1 файл для чтения
  22++6B77              ;id = 2 файл для записи
  23++6B77              ;id = 3 файл для записи тип TRD
  24++6B77              ;id = 4 файл для записи тип SCL
  25++6B77
  26++6B77              ; HL - filename in ASCIIZ
  27++6B77              loadBuffer:
  28++6B77 06 01            ld b, Dos.FMODE_READ
  28++6B79 CD 93 6B       call Dos.fopen
  29++6B7C F5               push af
  30++6B7D 21 E2 96 01          ld hl, outputBuffer, bc, #ffff - outputBuffer
  30++6B81 1D 69
  30++6B83 CD 80 6C       call Dos.fread
  31++6B86 21 E2 96             ld hl, outputBuffer
  31++6B89 09             add hl, bc
  31++6B8A AF             xor a
  31++6B8B 77             ld (hl), a
  31++6B8C 23             inc hl
  31++6B8D 77             ld (hl), a
  32++6B8E F1               pop af
  33++6B8F CD 6C 6C         call Dos.fclose
  34++6B92 C9               ret
  35++6B93
  36++6B93
  37++6B93              ; Returns:
  38++6B93              ;  A - current drive
  39++6B93              ; getDefaultDrive: ;нигде не используется
  40++6B93                  ; ld a, 0 : esxCall ESX_GETSETDRV
  41++6B93                  ; ret
  42++6B93
  43++6B93
  44++6B93
  45++6B93              ; Opens file on default drive
  46++6B93              ; B - File mode
  47++6B93              ; HL - File name
  48++6B93              ; Returns:
  49++6B93              ;  A - file stream id
  50++6B93              fopen:
  51++6B93                  ; push bc : push hl
  52++6B93                  ; call getDefaultDrive
  53++6B93                  ; pop ix : pop bc
  54++6B93                  ; esxCall ESX_FOPEN
  55++6B93                  ; ret
  56++6B93 78           	ld a,b
  57++6B94 FE 01        	cp FMODE_READ ;если режим открытие файла
  58++6B96 28 06        	jr z,fopen_r
  59++6B98 FE 0E        	cp FMODE_CREATE
  60++6B9A 28 39        	jr z,fopen_c ;если режим создание файла
  61++6B9C 18 34        	jr fopen_err ;иначе выход
  62++6B9E
  63++6B9E              fopen_r	;открытие существующего файла на чтение (id=1)
  64++6B9E CD 03 70     			call format_name ;
  65++6BA1 0E 13        			ld      c,#13 ;move file info to syst var
  66++6BA3 CD 13 3D                 call    #3d13
  67++6BA6 0E 0A                    ld      c,#0a ;find file
  68++6BA8 CD 13 3D                 call    #3d13
  69++6BAB 79                       ld      a,c
  70++6BAC FE FF        			cp 		#ff
  71++6BAE 28 22        			jr 		z,fopen_err ;если не нашли файла
  72++6BB0 0E 08                    ld      c,#08 ;read file title
  73++6BB2 CD 13 3D                 call    #3d13
  74++6BB5                          ;ld      hl,loadadr ;куда
  75++6BB5 ED 5B EB 5C              ld      de,(#5ceb) ;начало файла сектор дорожка
  76++6BB9 ED 53 AF 70              ld      (f_r_cur_trk),de
  77++6BBD
  78++6BBD 3A EA 5C                 ld      a,(#5cea)
  79++6BC0 32 B1 70                 ld      (f_r_len_sec),a ;длина в секторах
  80++6BC3                          ;or      a
  81++6BC3                          ;ret     z    ;выход если пустой
  82++6BC3
  83++6BC3 ED 5B E8 5C  			ld de,(#5CE8) ; длина файла или программной части для BASIC
  84++6BC7 ED 53 B2 70  			ld      (f_r_len),de
  85++6BCB
  86++6BCB                          ; ld      de,(fcurtrk) ;текущие сектор дорожка
  87++6BCB                          ; ld      (#5cf4),de ;восстановим
  88++6BCB AF           			xor a
  89++6BCC 3E 01        			ld 		a,1
  90++6BCE 32 B4 70     			ld (f_r_flag),a ;флаг что файл для чтения открыт
  91++6BD1              			;id канала будет 1
  92++6BD1 C9           	ret
  93++6BD2
  94++6BD2              fopen_err
  95++6BD2 AF           	xor a ;если никакой файл не открыли, то id = 0
  96++6BD3 37           	scf ;флаг ошибки
  97++6BD4 C9           	ret
  98++6BD5
  99++6BD5
 100++6BD5              fopen_c	;создание нового файла (id=2-4)
 101++6BD5 CD 03 70     	call format_name ;
 102++6BD8              	;выясним, не образ ли это для разворачивания
 103++6BD8 21 92 70         ld hl, trdExt1
 103++6BDB CD F2 63       call CompareBuff.search
 103++6BDE A7             and a
 103++6BDF 20 1D          jr nz, fopen_c_trd
 104++6BE1 21 97 70         ld hl, trdExt2
 104++6BE4 CD F2 63       call CompareBuff.search
 104++6BE7 A7             and a
 104++6BE8 20 14          jr nz, fopen_c_trd
 105++6BEA 21 9C 70     	ld hl, sclExt1
 105++6BED CD F2 63       call CompareBuff.search
 105++6BF0 A7             and a
 105++6BF1 20 3A          jr nz, fopen_c_scl
 106++6BF3 21 A1 70         ld hl, sclExt2
 106++6BF6 CD F2 63       call CompareBuff.search
 106++6BF9 A7             and a
 106++6BFA 20 31          jr nz, fopen_c_scl
 107++6BFC
 108++6BFC
 109++6BFC              fopen_c_2	;создание произвольного файла
 110++6BFC 18 D4        	jr 		fopen_err ;пока отключено
 111++6BFE
 112++6BFE              	; ld      c,#13 ;move file info to syst var
 113++6BFE                  ; call    #3d13
 114++6BFE              	; ld de,256 ;запишем пока 1 сектор
 115++6BFE              	; ld hl,#4000 ;возьмём случайные данные из экрана
 116++6BFE                  ; ld      c,#0b ;запись файла CODE
 117++6BFE                  ; call    #3d13
 118++6BFE                  ; ld      a,c
 119++6BFE              	; cp 		#ff
 120++6BFE              	; jr 		z,fopen_err ;если ошибка
 121++6BFE
 122++6BFE                  ; ld      de,(#5ceb) ;начало файла сектор дорожка
 123++6BFE                  ; ld      (f_w_cur_trk),de
 124++6BFE                  ; ld      a,(#5cea)
 125++6BFE                  ; ld      (f_w_len_sec),a ;длина в секторах
 126++6BFE              	; xor a ;id канала будет 2
 127++6BFE              	; ld a,2
 128++6BFE              	; ld (f_w_flag),a ;флаг что файл для записи открыт
 129++6BFE              	; ret
 130++6BFE
 131++6BFE
 132++6BFE
 133++6BFE
 134++6BFE
 135++6BFE              fopen_c_trd	;открытие файла для разворачивания образа trd (id=3)
 136++6BFE 3A 19 5D     	ld a,(#5D19) ;номер дисковода по умолчанию
 137++6C01 C6 41        	add a,"A"
 138++6C03 32 78 70     	ld (write_ima_d),a ;подставим букву в запросе
 139++6C06 21 63 70         ld hl, write_ima
 140++6C09 CD B4 69         call DialogBox.msgBox ;предуреждение
 141++6C0C              WAITKEY_trd
 142++6C0C 3A 04 5C     	ld 		a,(23556)
 143++6C0F FE FF        	cp 255
 144++6C11 28 F9        	JR Z,WAITKEY_trd	;ждём любую клавишу
 145++6C13
 146++6C13 11 00 00     	ld      de,0 ;начало сектор дорожка
 147++6C16 ED 53 F4 5C      ld      (#5cf4),de
 148++6C1A AF           	xor a
 149++6C1B 32 C4 70     	ld (sec_shift),a ;переменная
 150++6C1E 21 00 00     	ld hl,0
 151++6C21 22 B9 70     	ld (f_w_len+0),hl
 152++6C24 22 BB 70     	ld (f_w_len+2),hl
 153++6C27 3E 03        	ld a,3 ;id канала
 154++6C29 32 B8 70     	ld (f_w_flag),a ;флаг что trd для записи открыт
 155++6C2C C9           	ret
 156++6C2D
 157++6C2D
 158++6C2D
 159++6C2D
 160++6C2D              fopen_c_scl	;открытие файла для разворачивания образа scl (id=4)
 161++6C2D 3A 19 5D     	ld a,(#5D19) ;номер дисковода по умолчанию
 162++6C30 C6 41        	add a,"A"
 163++6C32 32 78 70     	ld (write_ima_d),a ;подставим букву в запросе
 164++6C35 21 63 70         ld hl, write_ima
 165++6C38 CD B4 69         call DialogBox.msgBox ;предуреждение
 166++6C3B              WAITKEY_scl
 167++6C3B 3A 04 5C     	ld 		a,(23556)
 168++6C3E FE FF        	cp 255
 169++6C40 28 F9        	JR Z,WAITKEY_scl	;ждём любую клавишу
 170++6C42
 171++6C42 11 00 00     	ld      de,0 ;начало сектор дорожка
 172++6C45 ED 53 F4 5C      ld      (#5cf4),de
 173++6C49
 174++6C49 21 00 48     	ld hl,cat_buf ;очистить место для каталога дискеты
 175++6C4C 11 01 48     	ld de,cat_buf+1
 176++6C4F 36 00        	ld (hl),0
 177++6C51 01 FF 08     	ld bc,9*256-1
 178++6C54 ED B0        	ldir
 179++6C56
 180++6C56 CD 78 6E     	call scl_parse ;запуск цикла сборки образа
 181++6C59
 182++6C59 AF           	xor a
 183++6C5A 32 C4 70     	ld (sec_shift),a ;переменная
 184++6C5D              	;ld (scl_que),a
 185++6C5D 21 00 00     	ld hl,0
 186++6C60 22 B9 70     	ld (f_w_len+0),hl
 187++6C63 22 BB 70     	ld (f_w_len+2),hl
 188++6C66 3E 04        	ld a,4 ;id канала
 189++6C68 32 B8 70     	ld (f_w_flag),a ;флаг что scl для записи открыт
 190++6C6B C9           	ret
 191++6C6C
 192++6C6C
 193++6C6C
 194++6C6C              ; A - file stream id
 195++6C6C              fclose:
 196++6C6C                  ;esxCall ESX_FCLOSE
 197++6C6C              	; push af
 198++6C6C              ; WAITKEY2	XOR A:IN A,(#FE):CPL:AND #1F:JR Z,WAITKEY2
 199++6C6C              	; pop af
 200++6C6C FE 04        	cp 4 ;если scl
 201++6C6E 20 08        	jr nz,fclose2
 202++6C70 21 00 51     	ld hl,sec_buf ;
 203++6C73 06 01        	ld b,1
 204++6C75 CD 57 6E     	call scl_write_buf ;допишем остаток scl, если есть
 205++6C78
 206++6C78              fclose2
 207++6C78 AF           	xor a ;как бы закрываем все файлы
 208++6C79 32 B4 70     	ld (f_r_flag),a
 209++6C7C 32 B8 70     	ld (f_w_flag),a
 210++6C7F C9               ret
 211++6C80
 212++6C80
 213++6C80
 214++6C80
 215++6C80              ; A - file stream id
 216++6C80              ; BC - length
 217++6C80              ; HL - buffer
 218++6C80              ; Returns
 219++6C80              ;  BC - length(how much was actually read)
 220++6C80              fread: ;(id=1)
 221++6C80                  ; push hl : pop ix
 222++6C80                  ; esxCall ESX_FREAD
 223++6C80              	; push af
 224++6C80              	; ld a,4
 225++6C80              	; out (254),a
 226++6C80              ; WAITKEY	XOR A:IN A,(#FE):CPL:AND #1F:JR Z,WAITKEY
 227++6C80              	; xor a
 228++6C80              	; out (254),a
 229++6C80              	; pop af
 230++6C80
 231++6C80 FE 01        	cp 1 ;id = 1?
 232++6C82 20 06        	jr nz,fread_no_chek ;выход если номер потока не = 1
 233++6C84 3A B4 70     	ld a,(f_r_flag)
 234++6C87 B7           	or a
 235++6C88 20 06        	jr nz,fread_chek ;файл уже открыт?
 236++6C8A              fread_no_chek ;выход с ошибкой
 237++6C8A AF           	xor a
 238++6C8B 37           	scf ;флаг ошибки
 239++6C8C 01 00 00     	ld bc,0 ;ничего мы не считали
 240++6C8F C9           	ret
 241++6C90
 242++6C90              fread_chek
 243++6C90 ED 4B B0 70  	ld bc,(f_r_len_sec-1) ;загружаем файл целиком, не смотря на то, сколько байт было запрошено
 244++6C94 0E 05            ld      c,5 ;read читаем целыми секторами
 245++6C96 ED 5B AF 70  	ld de,(f_r_cur_trk)
 246++6C9A CD 13 3D         call    #3d13
 247++6C9D ED 4B B2 70  	ld bc,(f_r_len) ;возвратим сколько считали байт (длину файла)
 248++6CA1 AF           	xor a ;флаги сбросим
 249++6CA2 C9               ret
 250++6CA3
 251++6CA3              ; A - file stream id
 252++6CA3              ; BC - length
 253++6CA3              ; HL - buffer
 254++6CA3              ; Returns:
 255++6CA3              ;   BC - actually written bytes
 256++6CA3              fwrite: ;
 257++6CA3                  ; push hl : pop ix
 258++6CA3                  ; esxCall ESX_FWRITE
 259++6CA3
 260++6CA3              	; push af
 261++6CA3              	; ld a,2
 262++6CA3              	; out (254),a
 263++6CA3              ; WAITKEY1	XOR A:IN A,(#FE):CPL:AND #1F:JR Z,WAITKEY1
 264++6CA3              	; xor a
 265++6CA3              	; out (254),a
 266++6CA3              	; pop af
 267++6CA3
 268++6CA3 FE 02        	cp 2 ;id = 2?
 269++6CA5 28 0F        	jr z,fwrite_chek ;проверка id потока
 270++6CA7 FE 03        	cp 3 ;id = 3?
 271++6CA9 28 0D        	jr z,fwrite_chek_trd ;проверка id потока
 272++6CAB FE 04        	cp 4 ;id = 4?
 273++6CAD CA 92 6D     	jp z,fwrite_chek_scl ;проверка id потока
 274++6CB0
 275++6CB0
 276++6CB0              fwrite_no_chek ;выход с ошибкой
 277++6CB0 AF           	xor a
 278++6CB1 37           	scf ;флаг ошибки
 279++6CB2 01 00 00     	ld bc,0 ;ничего мы не записали
 280++6CB5 C9           	ret
 281++6CB6
 282++6CB6              fwrite_chek ;запись произвольного типа файла
 283++6CB6 18 F8        	jr fwrite_no_chek ;пока отключено
 284++6CB8              	; ld a,(f_w_flag)
 285++6CB8              	; or a
 286++6CB8              	; jr z,fwrite_no_chek ;файл уже открыт?
 287++6CB8              	; ld (temp_bc),bc
 288++6CB8              	; ;ld bc,(f_r_len_sec-1) ;
 289++6CB8                  ; ld      c,6 ;пишем целыми секторами
 290++6CB8              	; ld de,(f_w_cur_trk)
 291++6CB8                  ; call    #3d13
 292++6CB8              	; ld bc,(temp_bc) ;возвратим, что сколько запрашивали, столько и считали байт
 293++6CB8              	; xor a ;флаги сбросим
 294++6CB8                  ; ret
 295++6CB8
 296++6CB8
 297++6CB8
 298++6CB8
 299++6CB8
 300++6CB8              fwrite_chek_trd ;запись trd файла (разворачивание образа)
 301++6CB8              	; ld a,2
 302++6CB8              	; out (254),a
 303++6CB8              ; WAITKEY_t	XOR A:IN A,(#FE):CPL:AND #1F:JR Z,WAITKEY_t
 304++6CB8              	; xor a
 305++6CB8              	; out (254),a
 306++6CB8 3A B8 70     	ld a,(f_w_flag)
 307++6CBB B7           	or a
 308++6CBC 28 F2        	jr z,fwrite_no_chek ;файл уже открыт?
 309++6CBE ED 43 BE 70  	ld (temp_bc),bc ;длина
 310++6CC2 22 C0 70     	ld (temp_hl),hl ;адрес данных
 311++6CC5 78           	ld a,b
 312++6CC6 B1           	or c
 313++6CC7 28 E7        	jr z,fwrite_no_chek ; если длина 0, то выход
 314++6CC9
 315++6CC9              	; ld a,b
 316++6CC9              	; or a
 317++6CC9              	; jr nz,testt1
 318++6CC9              	; nop
 319++6CC9
 320++6CC9              ; testt1
 321++6CC9
 322++6CC9 AF           	xor a
 323++6CCA 32 C6 70     	ld (sec_part),a ;обнулить переменные
 324++6CCD 32 C5 70     	ld (sec_shift2),a
 325++6CD0 32 C6 70     	ld (sec_shift2+1),a
 326++6CD3 32 C7 70     	ld (sec_shift_flag),a
 327++6CD6 32 BD 70     	ld (write_end_flag),a ;
 328++6CD9
 329++6CD9
 330++6CD9 3A C4 70     	ld a,(sec_shift)
 331++6CDC B7           	or a
 332++6CDD 28 43        	jr z,fwrite_trd3 ;если смещения нет, то первую часть пропустим
 333++6CDF
 334++6CDF
 335++6CDF 4F           	ld c,a
 336++6CE0 06 00        	ld b,0
 337++6CE2 2A BE 70     	ld hl,(temp_bc) ;проверка заполнится ли целый сектор
 338++6CE5 09           	add hl,bc
 339++6CE6
 340++6CE6 3E 01        	ld a,1
 341++6CE8 32 BD 70     	ld (write_end_flag),a ;флаг что не нужно дописывать остаток
 342++6CEB
 343++6CEB 7C           	ld a,h
 344++6CEC B7           	or a
 345++6CED 20 05        	jr nz,fwrite_trd4
 346++6CEF 3E 01        	ld a,1
 347++6CF1 32 C7 70     	ld (sec_shift_flag),a ;флаг что не заполнен сектор
 348++6CF4
 349++6CF4              fwrite_trd4
 350++6CF4 21 00 51     	ld hl,sec_buf ;буфер последнего сектора
 351++6CF7 09           	add hl,bc ;на этой точке остановились
 352++6CF8 EB           	ex de,hl
 353++6CF9 2A C0 70     	ld hl,(temp_hl) ;присоединим начало данных в конец предыдущих
 354++6CFC              	; ld a,c
 355++6CFC              	; or a
 356++6CFC              	; jr nz,fwrite_trd2
 357++6CFC              	; inc b ;коррекция
 358++6CFC              ; fwrite_trd2
 359++6CFC              	; ld c,a
 360++6CFC AF           	xor a
 361++6CFD 91           	sub c
 362++6CFE 4F           	ld c,a ;сколько осталось перенести до заполнения сектора
 363++6CFF ED 43 C5 70  	ld (sec_shift2),bc ;сохраним сколько добавили байт
 364++6D03 ED B0        	ldir
 365++6D05
 366++6D05 3A C7 70     	ld a,(sec_shift_flag)
 367++6D08 B7           	or a
 368++6D09 20 17        	jr nz,fwrite_trd3 ;если сектор ещё не заполнен писать не будем
 369++6D0B
 370++6D0B 21 00 51     	ld hl,sec_buf
 371++6D0E ED 5B F4 5C  	ld de,(#5cf4)
 372++6D12              	;ld (f_w_cur_trk),de	;запомним позицию
 373++6D12 01 06 01         ld      bc,#0106 ;пишем 1 сектор из буфера
 374++6D15 CD 13 3D         call    #3d13
 375++6D18 79           	ld a,c
 376++6D19 FE FF        	cp 255
 377++6D1B CA B0 6C     	jp z,fwrite_no_chek ;выход если ошибка
 378++6D1E
 379++6D1E AF           	xor a
 380++6D1F 32 BD 70     	ld (write_end_flag),a ;флаг что нужно дописывать остаток
 381++6D22              	; ld de,(f_w_cur_trk) ;если сектор ещё не заполнен, останемся на старой позиции
 382++6D22              	; ld (#5cf4),de
 383++6D22              	; ld b,1 ;на сектор вперёд
 384++6D22              	; ld de,(f_w_cur_trk)
 385++6D22              	; call calc_next_pos
 386++6D22              	; ld (f_w_cur_trk),de
 387++6D22
 388++6D22              fwrite_trd3
 389++6D22 2A C0 70     	ld hl,(temp_hl) ;запишем остаток данных
 390++6D25              	;ld a,(sec_shift)
 391++6D25              	;ld c,a
 392++6D25              	;ld b,0
 393++6D25 ED 4B C5 70  	ld bc,(sec_shift2)
 394++6D29 09           	add hl,bc ;с этой точки пишем
 395++6D2A 22 C2 70     	ld (temp_hl2),hl ;сохраним начало записи второго сектора
 396++6D2D
 397++6D2D 2A BE 70     	ld hl,(temp_bc) ;вычисление на чём остановимся в этот раз
 398++6D30 A7           	and a
 399++6D31 ED 42        	sbc hl,bc ;вычтем то, что добавили к первому сектору
 400++6D33 4D           	ld c,l
 401++6D34 44           	ld b,h
 402++6D35 30 02        	jr nc,fwrite_trd5
 403++6D37 06 00        	ld b,0 ;коррекция если вышел минус
 404++6D39              fwrite_trd5
 405++6D39 2A C0 70     	ld hl,(temp_hl)
 406++6D3C 09           	add hl,bc
 407++6D3D
 408++6D3D 11 E2 96     	ld de,outputBuffer
 409++6D40 A7           	and a
 410++6D41 ED 52        	sbc hl,de
 411++6D43
 412++6D43 7D           	ld a,l
 413++6D44 32 C4 70     	ld (sec_shift),a ;смещение на следующий раз
 414++6D47              	;ld hl,(temp_hl)
 415++6D47
 416++6D47
 417++6D47              	; or a
 418++6D47              	; jr z,fwrite_trd1
 419++6D47              	; inc b  ;коррекция количества секторов
 420++6D47
 421++6D47 78           	ld a,b ;нужна проверка на количество секторов!!!
 422++6D48 32 C6 70     	ld (sec_part),a ;запомним сколько секторов во второй части
 423++6D4B
 424++6D4B              	;ld a,b
 425++6D4B B7           	or a
 426++6D4C 28 16        	jr z,fwrite_trd1 ;если размер данных меньше сектора, то пропустим запись
 427++6D4E
 428++6D4E 2A C2 70     	ld hl,(temp_hl2)
 429++6D51              	;push bc
 430++6D51 ED 5B F4 5C  	ld de,(#5cf4)
 431++6D55 0E 06            ld      c,6 ;пишем целыми секторами
 432++6D57 CD 13 3D         call    #3d13
 433++6D5A 79           	ld a,c
 434++6D5B              	;pop bc
 435++6D5B FE FF        	cp 255
 436++6D5D CA B0 6C     	jp z,fwrite_no_chek ;выход если ошибка
 437++6D60              	; ld de,(f_w_cur_trk)
 438++6D60              	; call calc_next_pos
 439++6D60              	; ld (f_w_cur_trk),de
 440++6D60
 441++6D60 AF           	xor a
 442++6D61 32 BD 70     	ld (write_end_flag),a ;флаг что нужно дописывать остаток
 443++6D64
 444++6D64              fwrite_trd1
 445++6D64 3A BD 70     	ld a,(write_end_flag) ;нужно записывать остаток?
 446++6D67 B7           	or a
 447++6D68 20 12        	jr nz,fwrite_trd_ex ;не нужно
 448++6D6A
 449++6D6A 2A C2 70     	ld hl,(temp_hl2) ;сохраним незаписанный остаток
 450++6D6D 3A C6 70     	ld a,(sec_part)
 451++6D70 47           	ld b,a
 452++6D71 0E 00        	ld c,0
 453++6D73 09           	add hl,bc
 454++6D74 11 00 51     	ld de,sec_buf
 455++6D77 01 00 01     	ld bc,256
 456++6D7A ED B0        	ldir
 457++6D7C              ;fwrite_trd2
 458++6D7C
 459++6D7C
 460++6D7C              fwrite_trd_ex
 461++6D7C ED 4B BE 70  	ld bc,(temp_bc) ;возвратим, что сколько запрашивали, столько и записали байт
 462++6D80              	;посчитаем общую длину записанного
 463++6D80 2A B9 70     	ld hl,(f_w_len)
 464++6D83 09           	add hl,bc
 465++6D84 22 B9 70     	ld (f_w_len),hl
 466++6D87 30 07        	jr nc,fwrite_trd_ex1
 467++6D89 2A BB 70     	ld hl,(f_w_len+2)
 468++6D8C 23           	inc hl
 469++6D8D 22 BB 70     	ld (f_w_len+2),hl
 470++6D90
 471++6D90              fwrite_trd_ex1
 472++6D90 AF           	xor a ;флаги сбросим
 473++6D91 C9               ret
 474++6D92
 475++6D92
 476++6D92
 477++6D92
 478++6D92
 479++6D92              ;------------------scl----------------------
 480++6D92              fwrite_chek_scl ;запись scl файла (разворачивание образа)
 481++6D92              	; ld a,2
 482++6D92              	; out (254),a
 483++6D92              ; WAITKEY_t	XOR A:IN A,(#FE):CPL:AND #1F:JR Z,WAITKEY_t
 484++6D92              	; xor a
 485++6D92              	; out (254),a
 486++6D92 3A B8 70     	ld a,(f_w_flag)
 487++6D95 B7           	or a
 488++6D96 CA B0 6C     	jp z,fwrite_no_chek ;файл уже открыт?
 489++6D99 ED 43 BE 70  	ld (temp_bc),bc ;длина
 490++6D9D 22 C0 70     	ld (temp_hl),hl ;адрес данных
 491++6DA0 78           	ld a,b
 492++6DA1 B1           	or c
 493++6DA2 CA B0 6C     	jp z,fwrite_no_chek ; если длина 0, то выход
 494++6DA5
 495++6DA5              	; ld a,b
 496++6DA5              	; or a
 497++6DA5              	; jr nz,testt1
 498++6DA5              	; nop
 499++6DA5
 500++6DA5              ; testt1
 501++6DA5
 502++6DA5 AF           	xor a
 503++6DA6 32 C6 70     	ld (sec_part),a ;обнулить переменные
 504++6DA9 32 C5 70     	ld (sec_shift2),a
 505++6DAC 32 C6 70     	ld (sec_shift2+1),a
 506++6DAF 32 C7 70     	ld (sec_shift_flag),a
 507++6DB2 32 BD 70     	ld (write_end_flag),a ;
 508++6DB5
 509++6DB5
 510++6DB5 3A C4 70     	ld a,(sec_shift)
 511++6DB8 B7           	or a
 512++6DB9 28 38        	jr z,fwrite_scl3 ;если смещения нет, то первую часть пропустим
 513++6DBB
 514++6DBB
 515++6DBB 4F           	ld c,a
 516++6DBC 06 00        	ld b,0
 517++6DBE 2A BE 70     	ld hl,(temp_bc) ;проверка заполнится ли целый сектор
 518++6DC1 09           	add hl,bc
 519++6DC2
 520++6DC2 3E 01        	ld a,1
 521++6DC4 32 BD 70     	ld (write_end_flag),a ;флаг что не нужно дописывать остаток
 522++6DC7
 523++6DC7 7C           	ld a,h
 524++6DC8 B7           	or a
 525++6DC9 20 05        	jr nz,fwrite_scl4
 526++6DCB 3E 01        	ld a,1
 527++6DCD 32 C7 70     	ld (sec_shift_flag),a ;флаг что не заполнен сектор
 528++6DD0
 529++6DD0              fwrite_scl4
 530++6DD0 21 00 51     	ld hl,sec_buf ;буфер последнего сектора
 531++6DD3 09           	add hl,bc ;на этой точке остановились
 532++6DD4 EB           	ex de,hl
 533++6DD5 2A C0 70     	ld hl,(temp_hl) ;присоединим начало данных в конец предыдущих
 534++6DD8              	; ld a,c
 535++6DD8              	; or a
 536++6DD8              	; jr nz,fwrite_scl2
 537++6DD8              	; inc b ;коррекция
 538++6DD8              ; fwrite_scl2
 539++6DD8              	; ld c,a
 540++6DD8 AF           	xor a
 541++6DD9 91           	sub c
 542++6DDA 4F           	ld c,a ;сколько осталось перенести до заполнения сектора
 543++6DDB ED 43 C5 70  	ld (sec_shift2),bc ;сохраним сколько добавили байт
 544++6DDF ED B0        	ldir
 545++6DE1
 546++6DE1 3A C7 70     	ld a,(sec_shift_flag)
 547++6DE4 B7           	or a
 548++6DE5 20 0C        	jr nz,fwrite_scl3 ;если сектор ещё не заполнен писать не будем
 549++6DE7
 550++6DE7 21 00 51     	ld hl,sec_buf
 551++6DEA              	;ld de,(#5cf4)
 552++6DEA              	;ld (f_w_cur_trk),de	;запомним позицию
 553++6DEA 06 01            ld      b,#01 ;пишем 1 сектор из буфера
 554++6DEC CD 57 6E         call    scl_write_buf
 555++6DEF              	; ld a,c
 556++6DEF              	; cp 255
 557++6DEF              	; jp z,fwrite_no_chek ;выход если ошибка
 558++6DEF
 559++6DEF AF           	xor a
 560++6DF0 32 BD 70     	ld (write_end_flag),a ;флаг что нужно дописывать остаток
 561++6DF3              	; ld de,(f_w_cur_trk) ;если сектор ещё не заполнен, останемся на старой позиции
 562++6DF3              	; ld (#5cf4),de
 563++6DF3              	; ld b,1 ;на сектор вперёд
 564++6DF3              	; ld de,(f_w_cur_trk)
 565++6DF3              	; call calc_next_pos
 566++6DF3              	; ld (f_w_cur_trk),de
 567++6DF3
 568++6DF3              fwrite_scl3
 569++6DF3 2A C0 70     	ld hl,(temp_hl) ;запишем остаток данных
 570++6DF6              	;ld a,(sec_shift)
 571++6DF6              	;ld c,a
 572++6DF6              	;ld b,0
 573++6DF6 ED 4B C5 70  	ld bc,(sec_shift2)
 574++6DFA 09           	add hl,bc ;с этой точки пишем
 575++6DFB 22 C2 70     	ld (temp_hl2),hl ;сохраним начало записи второго сектора
 576++6DFE
 577++6DFE 2A BE 70     	ld hl,(temp_bc) ;вычисление на чём остановимся в этот раз
 578++6E01 A7           	and a
 579++6E02 ED 42        	sbc hl,bc ;вычтем то, что добавили к первому сектору
 580++6E04 4D           	ld c,l
 581++6E05 44           	ld b,h
 582++6E06 30 02        	jr nc,fwrite_scl5
 583++6E08 06 00        	ld b,0 ;коррекция если вышел минус
 584++6E0A              fwrite_scl5
 585++6E0A 2A C0 70     	ld hl,(temp_hl)
 586++6E0D 09           	add hl,bc
 587++6E0E
 588++6E0E 11 E2 96     	ld de,outputBuffer
 589++6E11 A7           	and a
 590++6E12 ED 52        	sbc hl,de
 591++6E14
 592++6E14 7D           	ld a,l
 593++6E15 32 C4 70     	ld (sec_shift),a ;смещение на следующий раз
 594++6E18              	;ld hl,(temp_hl)
 595++6E18
 596++6E18
 597++6E18              	; or a
 598++6E18              	; jr z,fwrite_scl1
 599++6E18              	; inc b  ;коррекция количества секторов
 600++6E18
 601++6E18 78           	ld a,b ;нужна проверка на количество секторов!!!
 602++6E19 32 C6 70     	ld (sec_part),a ;запомним сколько секторов во второй части
 603++6E1C
 604++6E1C              	;ld a,b
 605++6E1C B7           	or a
 606++6E1D 28 0A        	jr z,fwrite_scl1 ;если размер данных меньше сектора, то пропустим запись
 607++6E1F
 608++6E1F 2A C2 70     	ld hl,(temp_hl2)
 609++6E22              	;push bc
 610++6E22              	;ld de,(#5cf4)
 611++6E22                  ;ld      c,6 ;пишем целыми секторами
 612++6E22 CD 57 6E         call    scl_write_buf
 613++6E25              	;ld a,c
 614++6E25              	;pop bc
 615++6E25              	; cp 255
 616++6E25              	; jp z,fwrite_no_chek ;выход если ошибка
 617++6E25              	; ld de,(f_w_cur_trk)
 618++6E25              	; call calc_next_pos
 619++6E25              	; ld (f_w_cur_trk),de
 620++6E25
 621++6E25 AF           	xor a
 622++6E26 32 BD 70     	ld (write_end_flag),a ;флаг что нужно дописывать остаток
 623++6E29
 624++6E29              fwrite_scl1
 625++6E29 3A BD 70     	ld a,(write_end_flag) ;нужно записывать остаток?
 626++6E2C B7           	or a
 627++6E2D 20 12        	jr nz,fwrite_scl_ex ;не нужно
 628++6E2F
 629++6E2F 2A C2 70     	ld hl,(temp_hl2) ;сохраним незаписанный остаток
 630++6E32 3A C6 70     	ld a,(sec_part)
 631++6E35 47           	ld b,a
 632++6E36 0E 00        	ld c,0
 633++6E38 09           	add hl,bc
 634++6E39 11 00 51     	ld de,sec_buf
 635++6E3C 01 00 01     	ld bc,256
 636++6E3F ED B0        	ldir
 637++6E41              ;fwrite_scl2
 638++6E41
 639++6E41
 640++6E41              fwrite_scl_ex
 641++6E41 ED 4B BE 70  	ld bc,(temp_bc) ;возвратим, что сколько запрашивали, столько и записали байт
 642++6E45              	;посчитаем общую длину записанного
 643++6E45 2A B9 70     	ld hl,(f_w_len)
 644++6E48 09           	add hl,bc
 645++6E49 22 B9 70     	ld (f_w_len),hl
 646++6E4C 30 07        	jr nc,fwrite_scl_ex1
 647++6E4E 2A BB 70     	ld hl,(f_w_len+2)
 648++6E51 23           	inc hl
 649++6E52 22 BB 70     	ld (f_w_len+2),hl
 650++6E55
 651++6E55              fwrite_scl_ex1
 652++6E55 AF           	xor a ;флаги сбросим
 653++6E56 C9               ret
 654++6E57
 655++6E57
 656++6E57
 657++6E57
 658++6E57
 659++6E57
 660++6E57              scl_write_buf ;заполнение промежуточного буфера
 661++6E57 C5           	push bc ;сколько пакетов указано в b
 662++6E58 11 00 53     	ld de,scl_buf ;перенесём сектор во временный буфер
 663++6E5B 01 00 01     	ld bc,256
 664++6E5E ED B0        	ldir
 665++6E60 22 E8 70     	ld (scl_temp_hl2),hl ;сохраним адрес данных
 666++6E63 3A D0 70     	ld a,(scl_que) ;проверим флаг что нужны данные
 667++6E66 B7           	or a
 668++6E67 28 08        	jr z,scl_write_buf_ret ;не будем вызывать парсер если не нужны
 669++6E69 21 71 6E     	ld hl,scl_write_buf_ret ;адрес возврата
 670++6E6C E5           	push hl
 671++6E6D 2A E2 70     	ld hl,(scl_parse_ret_adr) ;адрес для продолжения основного цикла сборки
 672++6E70 E9           	jp (hl) ;отдадим пакет 256 байт парсеру
 673++6E71              scl_write_buf_ret
 674++6E71 2A E8 70     	ld hl,(scl_temp_hl2)
 675++6E74 C1           	pop bc
 676++6E75 10 E0        	djnz scl_write_buf
 677++6E77
 678++6E77 C9           	ret
 679++6E78
 680++6E78
 681++6E78
 682++6E78              scl_parse ;разбор образа scl в trd, основной цикл
 683++6E78              	;получить первый сектор
 684++6E78              ;запрос порции данных по 256 байт
 685++6E78 22 E6 70     	ld (scl_temp_hl),hl
 686++6E7B ED 53 EA 70  	ld (scl_temp_de),de
 687++6E7F ED 43 EC 70  	ld (scl_temp_bc),bc
 688++6E83 3E 01        	ld a,1
 689++6E85 32 D0 70     	ld (scl_que),a ;включим флаг что нужны данные
 690++6E88 21 8F 6E     	ld hl,scl_parse_ret ;сохраним адрес возврата
 691++6E8B 22 E2 70     	ld (scl_parse_ret_adr),hl
 692++6E8E C9           	ret ;вернёмся для ожидания данных
 693++6E8F              scl_parse_ret
 694++6E8F AF           	xor a
 695++6E90 32 D0 70     	ld (scl_que),a
 696++6E93 2A E6 70     	ld hl,(scl_temp_hl)
 697++6E96 ED 5B EA 70  	ld de,(scl_temp_de)
 698++6E9A ED 4B EC 70  	ld bc,(scl_temp_bc)
 699++6E9E
 700++6E9E 11 00 53     	ld de,scl_buf ;проверка метки образа
 701++6EA1 21 C8 70     	ld hl,scl_sign
 702++6EA4 06 08        	ld b,8
 703++6EA6              scl_parse_chk
 704++6EA6 1A           	ld a,(de)
 705++6EA7 BE           	cp (hl)
 706++6EA8 20 06        	jr nz,scl_parse_chk_no
 707++6EAA 23           	inc hl
 708++6EAB 13           	inc de
 709++6EAC 10 F8        	djnz scl_parse_chk
 710++6EAE 18 10        	jr scl_parse_chk_ok
 711++6EB0              scl_parse_chk_no ;если не совпало, значит плохой образ
 712++6EB0 21 D1 70         ld hl, scl_err
 713++6EB3 CD B4 69         call DialogBox.msgBox ;предуреждение
 714++6EB6 AF           	xor a
 715++6EB7 32 D0 70     	ld (scl_que),a ;выключим флаг что нужны данные
 716++6EBA 3E 04        	ld a,4 ;закроем файл
 717++6EBC CD 6C 6C     	call fclose
 718++6EBF C9           	ret
 719++6EC0              scl_parse_chk_ok ;сигнатура правильная
 720++6EC0
 721++6EC0              ;формирование каталога
 722++6EC0 3A 08 53     	ld a,(scl_buf+8)
 723++6EC3 32 E5 70     	ld (scl_files),a ;всего файлов
 724++6EC6 32 E4 70     	ld (scl_cat_cycl),a ;цикл
 725++6EC9 21 09 53     	ld hl,scl_buf+9 ;адрес первого заголовка
 726++6ECC 11 00 48     	ld de,cat_buf ;адрес формируемого каталога trd
 727++6ECF              scl_parse_cat2
 728++6ECF 06 0E        	ld b,14 ;14 байт одна запись
 729++6ED1              scl_parse_cat
 730++6ED1 7E           	ld a,(hl)
 731++6ED2 12           	ld (de),a
 732++6ED3 13           	inc de
 733++6ED4 2C           	inc l ;адрес увеличиваем только в пределах младшего регистра
 734++6ED5 20 26        	jr nz,scl_parse_cat1
 735++6ED7              	;тут пора запросить следующий сектор
 736++6ED7              ;запрос порции данных по 256 байт
 737++6ED7 22 E6 70     	ld (scl_temp_hl),hl
 738++6EDA ED 53 EA 70  	ld (scl_temp_de),de
 739++6EDE ED 43 EC 70  	ld (scl_temp_bc),bc
 740++6EE2 3E 01        	ld a,1
 741++6EE4 32 D0 70     	ld (scl_que),a ;включим флаг что нужны данные
 742++6EE7 21 EE 6E     	ld hl,scl_parse_ret1 ;сохраним адрес возврата
 743++6EEA 22 E2 70     	ld (scl_parse_ret_adr),hl
 744++6EED C9           	ret ;вернёмся для ожидания данных
 745++6EEE              scl_parse_ret1
 746++6EEE AF           	xor a
 747++6EEF 32 D0 70     	ld (scl_que),a
 748++6EF2 2A E6 70     	ld hl,(scl_temp_hl)
 749++6EF5 ED 5B EA 70  	ld de,(scl_temp_de)
 750++6EF9 ED 4B EC 70  	ld bc,(scl_temp_bc)
 751++6EFD
 752++6EFD              scl_parse_cat1
 753++6EFD 10 D2        	djnz scl_parse_cat
 754++6EFF 13           	inc de
 755++6F00 13           	inc de
 756++6F01 3A E4 70     	ld a,(scl_cat_cycl)
 757++6F04 3D           	dec a
 758++6F05 32 E4 70     	ld (scl_cat_cycl),a
 759++6F08 20 C5        	jr nz,scl_parse_cat2
 760++6F0A
 761++6F0A 22 E6 70     	ld (scl_temp_hl),hl ;запомнить где остановились
 762++6F0D
 763++6F0D              ;подсчёт секторов и дорожек
 764++6F0D DD E5        	push ix
 765++6F0F 3A E5 70     	ld a,(scl_files)
 766++6F12 11 00 01     	ld de,#0100 ;данные с первой дорожки
 767++6F15 DD 21 00 48  	ld ix,cat_buf
 768++6F19 DD 73 0E     	ld (ix+14),e
 769++6F1C DD 72 0F     	ld (ix+15),d
 770++6F1F 21 00 00     	ld hl,0 ;общее количество секторов
 771++6F22              scl_cacl
 772++6F22 32 E4 70     	ld (scl_cat_cycl),a ;цикл
 773++6F25 DD 7E 0D     	ld a,(ix+13) ;длина файла в секторах
 774++6F28 4F           	ld c,a
 775++6F29 06 00        	ld b,0
 776++6F2B 09           	add hl,bc ;секторов
 777++6F2C
 778++6F2C 01 10 00     	ld bc,16
 779++6F2F DD 09        	add ix,bc
 780++6F31 47           	ld b,a
 781++6F32 CD 57 70     	call calc_next_pos
 782++6F35 3A E4 70     	ld a,(scl_cat_cycl)
 783++6F38 FE 01        	cp 1
 784++6F3A 28 06        	jr z,scl_cacl2 ;в последний раз пропусим
 785++6F3C DD 73 0E     	ld (ix+14),e
 786++6F3F DD 72 0F     	ld (ix+15),d
 787++6F42              scl_cacl2
 788++6F42 3D           	dec a
 789++6F43 20 DD        	jr nz,scl_cacl
 790++6F45              	;теперь узнаем первый свободный сектор
 791++6F45 DD 7E 0D     	ld a,(ix+13) ;длина файла в секторах
 792++6F48 4F           	ld c,a
 793++6F49 06 00        	ld b,0
 794++6F4B 09           	add hl,bc
 795++6F4C              	; ld b,a
 796++6F4C              	; call calc_next_pos
 797++6F4C ED 53 E1 50  	ld (cat_buf+8*256+#e1),de ;Первый свободный сектор и дорожка на дискете
 798++6F50 11 F0 09     	ld de,16*159
 799++6F53 EB           	ex de,hl
 800++6F54 A7           	and a
 801++6F55 ED 52        	sbc hl,de
 802++6F57 22 E5 50     	ld (cat_buf+8*256+#e5),hl ;Число свободных секторов на диске
 803++6F5A DD E1        	pop ix
 804++6F5C
 805++6F5C
 806++6F5C
 807++6F5C              ;запись содержимого файлов
 808++6F5C 3A E5 70     	ld a,(scl_files) ;всего файлов
 809++6F5F 32 E4 70     	ld (scl_cat_cycl),a ;цикл
 810++6F62 21 0D 48     	ld hl,cat_buf+13 ;адрес размер секторов файла
 811++6F65 22 EE 70     	ld (cat_cur_adr),hl
 812++6F68
 813++6F68 21 00 01     	ld hl,#0100 ;начиная с первой дорожки
 814++6F6B 22 F4 5C     	ld (#5cf4),hl
 815++6F6E              scl_parse_file2
 816++6F6E 2A E6 70     	ld hl,(scl_temp_hl) ;адрес данных
 817++6F71 ED 5B EE 70  	ld de,(cat_cur_adr) ;адрес сектор дорожка файла
 818++6F75              	;dec de
 819++6F75 1A           	ld a,(de) ;количество секторов, цикл
 820++6F76 4F           	ld c,a
 821++6F77              scl_parse_file3
 822++6F77 11 00 55     	ld de,scl_buf2 ;адрес ещё одного буфера
 823++6F7A 06 00        	ld b,0 ;256 байт один сектор, цикл
 824++6F7C              scl_parse_file
 825++6F7C 7E           	ld a,(hl)
 826++6F7D 12           	ld (de),a
 827++6F7E 13           	inc de
 828++6F7F 2C           	inc l ;адрес увеличиваем только в пределах младшего регистра
 829++6F80 20 26        	jr nz,scl_parse_file1
 830++6F82              	;тут пора запросить следующий сектор
 831++6F82              ;запрос порции данных по 256 байт
 832++6F82 22 E6 70     	ld (scl_temp_hl),hl
 833++6F85 ED 53 EA 70  	ld (scl_temp_de),de
 834++6F89 ED 43 EC 70  	ld (scl_temp_bc),bc
 835++6F8D 3E 01        	ld a,1
 836++6F8F 32 D0 70     	ld (scl_que),a ;включим флаг что нужны данные
 837++6F92 21 99 6F     	ld hl,scl_parse_ret2 ;сохраним адрес возврата
 838++6F95 22 E2 70     	ld (scl_parse_ret_adr),hl
 839++6F98 C9           	ret ;вернёмся для ожидания данных
 840++6F99              scl_parse_ret2
 841++6F99 AF           	xor a
 842++6F9A 32 D0 70     	ld (scl_que),a
 843++6F9D 2A E6 70     	ld hl,(scl_temp_hl)
 844++6FA0 ED 5B EA 70  	ld de,(scl_temp_de)
 845++6FA4 ED 4B EC 70  	ld bc,(scl_temp_bc)
 846++6FA8
 847++6FA8              scl_parse_file1
 848++6FA8 10 D2        	djnz scl_parse_file
 849++6FAA 22 E6 70     	ld (scl_temp_hl),hl
 850++6FAD ED 43 EC 70  	ld (scl_temp_bc),bc
 851++6FB1
 852++6FB1 21 00 55     	ld hl,scl_buf2 ;;запишем один сектор
 853++6FB4 ED 5B F4 5C  	ld  de,(#5cf4)
 854++6FB8 01 06 01         ld      bc,#0106 ;
 855++6FBB CD 13 3D         call    #3d13
 856++6FBE              	; ld a,c
 857++6FBE              	; cp 255
 858++6FBE              	; jp z,fwrite_no_chek ;выход если ошибка
 859++6FBE 2A E6 70     	ld hl,(scl_temp_hl)
 860++6FC1 ED 4B EC 70  	ld bc,(scl_temp_bc)
 861++6FC5
 862++6FC5 0D           	dec c
 863++6FC6 20 AF        	jr nz,scl_parse_file3
 864++6FC8
 865++6FC8 2A EE 70     	ld hl,(cat_cur_adr) ;адрес сектор дорожка файла
 866++6FCB              	; ld e,(hl)
 867++6FCB              	; inc hl
 868++6FCB              	; ld d,(hl)
 869++6FCB 01 10 00     	ld bc,16
 870++6FCE 09           	add hl,bc ;на следующий файл
 871++6FCF 22 EE 70     	ld (cat_cur_adr),hl
 872++6FD2
 873++6FD2
 874++6FD2 3A E4 70     	ld a,(scl_cat_cycl)
 875++6FD5 3D           	dec a
 876++6FD6 32 E4 70     	ld (scl_cat_cycl),a
 877++6FD9 20 93        	jr nz,scl_parse_file2	;на следующий файл
 878++6FDB
 879++6FDB
 880++6FDB
 881++6FDB              ;формирование системного сектора №9 (8)
 882++6FDB              	;
 883++6FDB              	;ld (cat_buf+8*256+#e1),a ;// #E1 Первый свободный сектор на дискете
 884++6FDB              	;
 885++6FDB              	;ld (cat_buf+8*256+#e2),a ;// #E2 Первый свободный трек
 886++6FDB 3E 16        	ld a,#16
 887++6FDD 32 E3 50     	ld (cat_buf+8*256+#e3),a ;// #E3 16 80 дорожек, 2 стороны
 888++6FE0 3A E5 70     	ld a,(scl_files)
 889++6FE3 32 E4 50     	ld (cat_buf+8*256+#e4),a ;// #E4 Общее количество файлов записанных на диск
 890++6FE6              	;
 891++6FE6              	;ld (cat_buf+8*256+#e5),a ;// #Е5,Е6 Число свободных секторов на диске
 892++6FE6              	;ld (cat_buf+8*256+#e6),a
 893++6FE6 3E 10        	ld a,#10
 894++6FE8 32 E7 50     	ld (cat_buf+8*256+#e7),a ;// #E7 Код  #10,определяющий принадлежность к TR-DOS
 895++6FEB
 896++6FEB 21 A6 70     	ld hl,f_name ;запишем имя диска, взяв для этого имя файла
 897++6FEE 11 F5 50     	ld de,cat_buf+8*256+#f5 ;// #F5-#FC Имя диска в ASCII формате
 898++6FF1 01 08 00     	ld bc,8
 899++6FF4 ED B0        	ldir
 900++6FF6
 901++6FF6 21 00 48     	ld hl,cat_buf ;запишем каталог на диск
 902++6FF9 11 00 00     	ld de,0
 903++6FFC 01 06 09         ld      bc,#0906 ;
 904++6FFF CD 13 3D         call    #3d13
 905++7002              	; ld a,c
 906++7002              	; cp 255
 907++7002              	; jp z,fwrite_no_chek ;выход если ошибка
 908++7002 C9           	ret
 909++7003
 910++7003
 911++7003              ;-----------scl end --------------------
 912++7003
 913++7003
 914++7003
 915++7003
 916++7003
 917++7003
 918++7003
 919++7003
 920++7003
 921++7003
 922++7003              ; A - file stream id
 923++7003              ; fsync:
 924++7003              ;     esxCall ESX_FSYNC
 925++7003                  ; ret
 926++7003
 927++7003
 928++7003              ; HL - name (name.ext)
 929++7003              ; Returns:
 930++7003              ; HL - name (name    e)
 931++7003              format_name ;подгоняет имя файла под стандарт trdos (8+1)
 932++7003
 933++7003              	;сначала попробуем убрать из пути подпапку, если она есть
 934++7003 22 C0 70     	ld (temp_hl),hl ;сохраним адрес исходного имени
 935++7006 06 00        	ld b,#00 ;не больше 255 символов
 936++7008              format_name5
 937++7008 7E           	ld a,(hl)
 938++7009 FE 2F        	cp "/" ;если есть подпапка
 939++700B 28 0D        	jr z,format_name_path_yep
 940++700D 7E           	ld a,(hl)
 941++700E FE 2E        	cp "." ;если ещё не дошли до расширения
 942++7010 20 05        	jr nz,format_name6
 943++7012 2A C0 70     	ld hl,(temp_hl) ;если дошли до расширения, то путей нет, вернёмся на начало имени
 944++7015 18 04        	jr format_name_7 ;на выход
 945++7017              format_name6
 946++7017 23           	inc hl
 947++7018 10 EE        	djnz format_name5
 948++701A
 949++701A              format_name_path_yep ;нашли
 950++701A 23           	inc hl ;пропустим знак "/"
 951++701B
 952++701B              format_name_7
 953++701B
 954++701B
 955++701B E5           	push hl ;очистим место для нового имени
 956++701C 21 A6 70     	ld hl,f_name
 957++701F 11 A7 70     	ld de,f_name+1
 958++7022 36 20        	ld (hl)," "
 959++7024 01 08 00     	ld bc,8
 960++7027 ED B0        	ldir
 961++7029 E1           	pop hl
 962++702A
 963++702A 01 FF 09     	ld bc,#09ff ;длина имени 9 символов
 964++702D 11 A6 70     	ld de,f_name ;куда
 965++7030              format_name2
 966++7030 7E           	ld a,(hl)
 967++7031 FE 2E        	cp "."
 968++7033 20 08        	jr nz,format_name1
 969++7035 23           	inc hl
 970++7036 7E           	ld a,(hl)
 971++7037 32 AE 70     	ld (f_name+8),a ; и в конце первую букву расширения
 972++703A EB           	ex de,hl ;сохраним адрес исходного расширения
 973++703B 18 16        	jr format_name_e
 974++703D              format_name1
 975++703D ED A0        	ldi
 976++703F 10 EF        	djnz format_name2
 977++7041
 978++7041              	;если имя длинное, пропустим лишнее до расширения
 979++7041 06 00        	ld b,#00 ;не больше 255 символов
 980++7043              format_name3
 981++7043 7E           	ld a,(hl)
 982++7044 FE 2E        	cp "."
 983++7046 20 08        	jr nz,format_name4
 984++7048 23           	inc hl
 985++7049 7E           	ld a,(hl)
 986++704A 32 AE 70     	ld (f_name+8),a ; и в конце первую букву расширения
 987++704D EB           	ex de,hl ;сохраним адрес исходного расширения
 988++704E 18 03        	jr format_name_e
 989++7050              format_name4
 990++7050 23           	inc hl
 991++7051 10 F0        	djnz format_name3
 992++7053
 993++7053              format_name_e ;выход
 994++7053 21 A6 70     	ld hl,f_name ;вернём результат
 995++7056 C9           	ret
 996++7057
 997++7057              ; DE - trk/sec
 998++7057              ; B - sectors step
 999++7057              ; Returns:
1000++7057              ; DE - trk/sec
1001++7057              calc_next_pos		;вперёд на N секторов
1002++7057              			;ld b,4
1003++7057              			;ld  de,(#5ceb)
1004++7057              calc_next_pos2
1005++7057 1C           			inc e
1006++7058 7B           			ld a,e
1007++7059 FE 10        			cp 16
1008++705B 38 03        			jr c,calc_next_pos1
1009++705D 14           			inc d
1010++705E 1E 00        			ld e,0
1011++7060              calc_next_pos1
1012++7060              			;ld (#5ceb),de
1013++7060 10 F5        			djnz calc_next_pos2
1014++7062 C9           			ret
1015++7063
1016++7063
1017++7063              ;testt db "123.trd"
1018++7063 49 6E 73 65  write_ima db "Insert disk to drive "
1018++7067 72 74 20 64
1018++706B 69 73 6B 20
1018++706F 74 6F 20 64
1018++7073 72 69 76 65
1018++7077 20
1019++7078 41 2E 20     write_ima_d db "A. "
1020++707B 41 6C 6C 20  		db "All data will be lost!",0
1020++707F 64 61 74 61
1020++7083 20 77 69 6C
1020++7087 6C 20 62 65
1020++708B 20 6C 6F 73
1020++708F 74 21 00
1021++7092
1022++7092 2E 74 72 64  trdExt1 db ".trd", 0
1022++7096 00
1023++7097 2E 54 52 44  trdExt2 db ".TRD", 0
1023++709B 00
1024++709C
1025++709C 2E 73 63 6C  sclExt1 db ".scl", 0
1025++70A0 00
1026++70A1 2E 53 43 4C  sclExt2 db ".SCL", 0
1026++70A5 00
1027++70A6
1028++70A6 00 00 00...  f_name ds 9 ;имя файла
1029++70AF 00 00        f_r_cur_trk dw 	 0 ;текущие сектор-дорожка файла на чтение
1030++70B1 00           f_r_len_sec db 0 ;длина файла на чтение в секторах
1031++70B2 00 00        f_r_len dw 0;длина файла в байтах
1032++70B4 00           f_r_flag db 0 ;флаг что открыт файл на чтение
1033++70B5
1034++70B5 00 00        f_w_cur_trk dw 	 0 ;текущие сектор-дорожка файла на запись
1035++70B7 00           f_w_len_sec db 0 ;длина файла на запись в секторах
1036++70B8 00           f_w_flag db 0 ;флаг что открыт файл на запись
1037++70B9 00 00 00 00  f_w_len ds 4 ;длина записанных данных
1038++70BD 00           write_end_flag db 0 ;флаг что нужно записать остаток
1039++70BE
1040++70BE 00 00        temp_bc dw 0 ;хранение регистра
1041++70C0 00 00        temp_hl dw 0 ;хранение регистра
1042++70C2 00 00        temp_hl2 dw 0 ;хранение регистра
1043++70C4
1044++70C4 00           sec_shift db 0 ;указатель на каком байте остановлена запись
1045++70C5 00           sec_shift2 db 0 ;указатель на каком байте остановлена запись (остаток)
1046++70C6 00           sec_part db 0 ;сколько секторов во второй порции для записи
1047++70C7 00           sec_shift_flag db 0 ;флаг что буфер сектора не заполнен
1048++70C8
1049++70C8              ;секция scl
1050++70C8 53 49 4E 43  scl_sign db "SINCLAIR" ;метка
1050++70CC 4C 41 49 52
1051++70D0 00           scl_que db 0 ;флаг запроса порции данных
1052++70D1 53 43 4C 20  scl_err db "SCL image error!",0
1052++70D5 69 6D 61 67
1052++70D9 65 20 65 72
1052++70DD 72 6F 72 21
1052++70E1 00
1053++70E2 00 00        scl_parse_ret_adr dw 0; адрес возврата в цикл
1054++70E4 00           scl_cat_cycl db 0 ;переменная цикла
1055++70E5 00           scl_files db 0 ;всего файлов
1056++70E6 00 00        scl_temp_hl dw 0;;хранение регистра
1057++70E8 00 00        scl_temp_hl2 dw 0;
1058++70EA 00 00        scl_temp_de dw 0;
1059++70EC 00 00        scl_temp_bc dw 0;
1060++70EE 00 00        cat_cur_adr dw 0;
1061++70F0              ;scl end
1062++70F0 00 00 00...  	align 256 ;временно
1063++7100              	;по адресу #4000 шрифт
1064++7100              cat_buf equ #4800 ;буфер для кататога диска 9*256
1065++7100              sec_buf equ cat_buf + 9*256 ;буфер сектора для записи 256
1066++7100              scl_buf equ sec_buf + 512 ;промежуточный буфер 256
1067++7100              scl_buf2 equ scl_buf + 512 ;промежуточный буфер 256
1068++7100
1069++7100                  ENDMODULE
# file closed: dos/trdos.asm
   9++7100              	ENDIF
  10++7100
  11++7100              	IFDEF ESXDOS
  12++7100 ~               		include "console.asm"
  13++7100 ~               		include "esxdos.asm"
  14++7100              	ENDIF
  15++7100
  16++7100              	IFDEF P3DOS
  17++7100 ~               		include "console.asm"
  18++7100 ~               		include "p3dos.asm"
  19++7100              	ENDIF
  20++7100
# file closed: dos/index.asm
  19+ 7100                  include "gopher/engine/history/index.asm"
# file opened: gopher/engine/history/index.asm
   1++7100                  include "controler.asm"
# file opened: gopher/engine/history/controler.asm
   1++7100                  module History
   2++7100              back:
   3++7100 3A 43 72         ld a, (depth)
   3++7103 FE 01          cp 1
   3++7105 CA 17 71       jp z, load
   4++7108 21 92 74 11      ld hl, historyBlock + HistoryRecord, de, historyBlock, bc, (total - 1) * HistoryRecord
   4++710C 44 72 01 38
   4++7110 09
   4++7111 ED B0          ldir ; Move history up
   5++7113 21 43 72         ld hl, depth
   5++7116 35             dec (hl)
   6++7117              ; Loads current resource
   7++7117              load:
   8++7117 21 34 71         ld hl, .msg
   8++711A CD BD 69       call DialogBox.msgNoWait
   9++711D AF               xor a
   9++711E 21 E2 96 11    ld hl, outputBuffer, de, outputBuffer + 1
   9++7122 E3 96
  10++7124              	IFDEF MSX
  11++7124 ~                	ld bc, (ramtop)
  12++7124 ~                	dec bc
  13++7124              	ELSE
  14++7124 01 1C 69         	ld bc, #ffff - outputBuffer - 1
  15++7127              	ENDIF
  16++7127
  17++7127 77               ld (hl), a
  18++7128 ED B0            ldir
  19++712A
  20++712A 3A 44 72         ld a, (historyBlock.isFile)
  20++712D A7             and a
  20++712E C2 2D 82       jp nz, Fetcher.fetchFromFS
  21++7131 C3 E0 81         jp Fetcher.fetchFromNet
  22++7134
  23++7134 20 20 20 20  .msg db "    Loading resource! Please wait! It will be here soon!", 0
  23++7138 4C 6F 61 64
  23++713C 69 6E 67 20
  23++7140 72 65 73 6F
  23++7144 75 72 63 65
  23++7148 21 20 50 6C
  23++714C 65 61 73 65
  23++7150 20 77 61 69
  23++7154 74 21 20 49
  23++7158 74 20 77 69
  23++715C 6C 6C 20 62
  23++7160 65 20 68 65
  23++7164 72 65 20 73
  23++7168 6F 6F 6E 21
  23++716C 00
  24++716D
  25++716D              home:
  26++716D 21 21 72         ld hl, homePage
  27++7170              ; HL - gopher row
  28++7170              navigate:
  29++7170 54 5D            ld de, hl
  30++7172 CD 59 80         call UrlEncoder.isValidGopherRow
  31++7175 30 A0            jr nc, load ; Not valid - reload last
  32++7177 62 6B            ld hl, de
  33++7179 E5               push hl
  34++717A
  35++717A E5               push hl
  36++717B 21 C9 7D 11      ld hl, HistoryEnd - HistoryRecord, de, HistoryEnd, bc,  HistoryRecord * total
  36++717F 17 80 01 86
  36++7183 0B
  36++7184 ED B8          lddr
  37++7186
  38++7186 ED 5B 8A 74      ld de, (Render.position), (historyBlock.position + HistoryRecord), de
  38++718A ED 53 D8 76
  39++718E                  ; Clean up struct
  40++718E AF               xor a
  40++718F 21 44 72 11    ld hl, historyBlock, de, historyBlock + 1, bc, historyBlockSize - 1, (hl), a
  40++7193 45 72 01 4D
  40++7197 02 77
  40++7199 ED B0          ldir
  41++719B E1               pop hl
  42++719C
  43++719C                  ; Fill record
  44++719C 54 5D            ld de, hl
  45++719E CD 18 80         call UrlEncoder.isFile
  46++71A1 EB               ex hl, de
  47++71A2 11 44 72         ld de, historyBlock
  48++71A5 12               ld (de), a
  48++71A6 13             inc de
  49++71A7 7E               ld a, (hl)
  49++71A8 E5 D5          push hl, de
  49++71AA CD 8E 64       call Render.getIcon
  49++71AD D1 E1          pop de, hl
  50++71AF 12               ld (de), a
  50++71B0 13             inc de
  51++71B1 3E 09            ld a, 9
  52++71B3
  53++71B3                  IFDEF MSX
  54++71B3 ~                	ld bc, #ff
  55++71B3                  ELSE
  56++71B3 01 FF 00         	ld bc, #ff
  57++71B6                  ENDIF
  58++71B6
  59++71B6 ED B1            cpir
  60++71B8              .locatorCopy
  61++71B8 7E               ld a, (hl)
  61++71B9 FE 09          cp 9
  61++71BB 28 05          jr z, 1f
  62++71BD 12               ld (de), a
  62++71BE 23 13          inc hl, de
  63++71C0 18 F6            jr .locatorCopy
  64++71C2              1
  65++71C2 23               inc hl
  65++71C3 AF             xor a
  65++71C4 12             ld (de), a
  66++71C5 11 45 73         ld de, historyBlock.host
  67++71C8              .hostCopy
  68++71C8 7E               ld a, (hl)
  68++71C9 FE 09          cp 9
  68++71CB 28 05          jr z, 1f
  69++71CD 12               ld (de), a
  69++71CE 23 13          inc hl, de
  70++71D0 18 F6            jr .hostCopy
  71++71D2              1
  72++71D2 23               inc hl
  72++71D3 AF             xor a
  72++71D4 12             ld (de), a
  73++71D5 11 85 73         ld de, historyBlock.port
  74++71D8              .portCopy
  75++71D8 7E               ld a, (hl)
  76++71D9 FE 09            cp 9
  76++71DB 28 11          jr z, 1f
  77++71DD FE 0D            cp 13
  77++71DF 28 0D          jr z, 1f
  78++71E1 FE 0A            cp 10
  78++71E3 28 09          jr z, 1f
  79++71E5 FE 00            cp 0
  79++71E7 28 05          jr z, 1f
  80++71E9 12               ld (de), a
  80++71EA 23 13          inc hl, de
  81++71EC 18 EA            jr .portCopy
  82++71EE AF           1   xor a
  82++71EF 12             ld (de), a
  83++71F0 21 64 69 11      ld hl, DialogBox.inputBuffer, de, historyBlock.search, bc, #ff
  83++71F4 8B 73 01 FF
  83++71F8 00
  83++71F9 ED B0          ldir
  84++71FB 11 00 00 ED      ld de, 0, (historyBlock.position), de
  84++71FF 53 8A 74
  85++7202 E1               pop hl
  86++7203 3A 43 72         ld a, (depth)
  86++7206 FE 05          cp total
  86++7208 30 04          jr nc, 1f
  87++720A 3C               inc a
  87++720B 32 43 72       ld (depth), a
  88++720E              1
  89++720E 3A 45 72         ld a,(historyBlock.mediaType)
  89++7211 FE 01          cp MIME_DOWNLOAD
  89++7213 CA C8 82       jp z, Gopher.download
  90++7216
  91++7216                  ifdef GS
  92++7216 ~                ld a,(historyBlock.mediaType)
  93++7216 ~                cp MIME_MOD
  94++7216 ~                jp nz,load
  95++7216 ~                ld a,(GeneralSound.GSdownType)
  96++7216 ~                xor 1
  97++7216 ~                jp z, downMod2file
  98++7216 ~
  99++7216 ~            downMod2GS
 100++7216 ~                jp Gopher.loadMod
 101++7216 ~            downMod2file
 102++7216 ~                jp Gopher.download
 103++7216                  else
 104++7216 3A 45 72         ld a,(historyBlock.mediaType)
 104++7219 FE 07          cp MIME_MOD
 104++721B CA C8 82       jp z, Gopher.download
 105++721E                  endif
 106++721E
 107++721E C3 17 71         jp load
 108++7221
 109++7221              homePage:
 110++7221              	IFDEF MSX
 111++7221 ~                	db "1Home", TAB, "index.gph"
 112++7221 ~                	db TAB, "file", TAB, "70", CR, LF, 0
 113++7221                  ELSE
 114++7221 31 48 6F 6D      	db "1Home", TAB, "browser/index.gph"
 114++7225 65 09 62 72
 114++7229 6F 77 73 65
 114++722D 72 2F 69 6E
 114++7231 64 65 78 2E
 114++7235 67 70 68
 115++7238 09 66 69 6C      	db TAB, "file", TAB, "70", CR, LF, 0
 115++723C 65 09 37 30
 115++7240 0D 0A 00
 116++7243                  ENDIF
 117++7243                  endmodule
# file closed: gopher/engine/history/controler.asm
   2++7243                  include "model.asm"
# file opened: gopher/engine/history/model.asm
   1++7243              total   equ 5
   2++7243 00           depth   db 0
   3++7244
   4++7244              historyBlock:
   5++7244 00           .isFile    db  0
   6++7245 00           .mediaType db  0
   7++7246 00 00 00...  .locator   ds  #ff
   8++7345 00 00 00...  .host      ds  64
   9++7385 00 00 00...  .port      ds  6
  10++738B 00 00 00...  .search    ds  #ff
  11++748A 00 00        .position  dw  #0000    ;position
  12++748C
  13++748C 00 00 00 00      db 0,0,0,0,0,0  ;cursor_position page_offset
  13++7490 00 00
  14++7492
  15++7492              historyBlockSize = $ - historyBlock
  16++7492
  17++7492              HistoryRecord EQU $ - historyBlock
  18++7492                  dup total
  19++7492 00 00 00... >    ds HistoryRecord
  19++76E0 00 00 00... >    ds HistoryRecord
  19++792E 00 00 00... >    ds HistoryRecord
  19++7B7C 00 00 00... >    ds HistoryRecord
  19++7DCA 00 00 00... >    ds HistoryRecord
  20++8018                  edup
  21++8018              HistoryEnd equ $ - 1
  22++8018
# file closed: gopher/engine/history/model.asm
# file closed: gopher/engine/history/index.asm
  20+ 8018                  include "gopher/engine/urlencoder.asm"
# file opened: gopher/engine/urlencoder.asm
   1++8018                  MODULE UrlEncoder
   2++8018              ; HL - pointer to line in gopher page
   3++8018              ; C - flag set when it's file
   4++8018              isFile:
   5++8018              .findServerLoop
   6++8018 7E               ld a, (hl)
   6++8019 A7             and a
   6++801A 28 3B          jr z, .notFile
   6++801C 23             inc hl
   7++801D FE 0D            cp 13
   7++801F 28 36          jr z, .notFile
   8++8021 FE 09            cp 9
   8++8023 28 02          jr z, .skipPath
   9++8025 18 F1            jr .findServerLoop
  10++8027              .skipPath
  11++8027 7E               ld a, (hl)
  11++8028 A7             and a
  11++8029 28 2C          jr z, .notFile
  11++802B 23             inc hl
  12++802C FE 0D            cp 13
  12++802E 28 27          jr z, .notFile
  13++8030 FE 09            cp 9
  13++8032 28 02          jr z, .compareServer
  14++8034 18 F1            jr .skipPath
  15++8036              .compareServer
  16++8036 7E               ld a, (hl)
  16++8037 FE 66          cp "f"
  16++8039 20 1C          jr nz, .notFile
  16++803B 23             inc hl
  17++803C 7E               ld a, (hl)
  17++803D FE 69          cp "i"
  17++803F 20 16          jr nz, .notFile
  17++8041 23             inc hl
  18++8042 7E               ld a, (hl)
  18++8043 FE 6C          cp "l"
  18++8045 20 10          jr nz, .notFile
  18++8047 23             inc hl
  19++8048 7E               ld a, (hl)
  19++8049 FE 65          cp "e"
  19++804B 20 0A          jr nz, .notFile
  19++804D 23             inc hl
  20++804E 7E               ld a, (hl)
  20++804F FE 09          cp 9
  20++8051 20 04          jr nz, .notFile
  20++8053 23             inc hl
  21++8054 3E 01            ld a, 1
  22++8056 C9               ret
  23++8057              .notFile
  24++8057 AF               xor a
  25++8058 C9               ret
  26++8059
  27++8059              ; Is enough fields to encode
  28++8059              ; HL - pointer to line in gopher page
  29++8059              ; C - flag set when there is enough fields
  30++8059              isValidGopherRow:
  31++8059 7E               ld a, (hl)
  31++805A A7             and a
  31++805B 28 FA          jr z, isFile.notFile
  31++805D 23             inc hl
  32++805E FE 0D            cp 13
  32++8060 28 F5          jr z, isFile.notFile
  33++8062 FE 09            cp 9
  33++8064 28 02          jr z, .skipPath
  34++8066 18 F1            jr isValidGopherRow
  35++8068              .skipPath
  36++8068 7E               ld a, (hl)
  36++8069 A7             and a
  36++806A 28 EB          jr z, isFile.notFile
  36++806C 23             inc hl
  37++806D FE 0D            cp 13
  37++806F 28 E6          jr z, isFile.notFile
  38++8071 FE 09            cp 9
  38++8073 28 02          jr z, .skipHost
  39++8075 18 F1            jr .skipPath
  40++8077              .skipHost
  41++8077 7E               ld a, (hl)
  41++8078 A7             and a
  41++8079 28 DC          jr z, isFile.notFile
  41++807B 23             inc hl
  42++807C FE 0D            cp 13
  42++807E 28 D7          jr z, isFile.notFile
  43++8080 FE 09            cp 9
  43++8082 28 02           jr z, .isValid
  44++8084 18 F1            jr .skipHost
  45++8086              .isValid:
  46++8086 37               scf
  47++8087 C9               ret
  48++8088
  49++8088              extractPath:
  50++8088 21 46 72 11      ld hl, historyBlock.locator, de, nameBuffer, bc, #ff
  50++808C A0 80 01 FF
  50++8090 00
  50++8091 ED B0          ldir
  51++8093 C9               ret
  52++8094
  53++8094              extractHostName:
  54++8094 21 45 73 11      ld hl, historyBlock.host, de, hostName, bc, 64
  54++8098 A0 81 01 40
  54++809C 00
  54++809D ED B0          ldir
  55++809F C9               ret
  56++80A0
  57++80A0                  ENDMODULE
  58++80A0
  59++80A0 00 00 00...  nameBuffer ds #ff, 0
  60++819F
  61++819F 00                    db 0
  62++81A0 00 00 00...  hostName ds 64
# file closed: gopher/engine/urlencoder.asm
  21+ 81E0                  include "gopher/engine/fetcher.asm"
# file opened: gopher/engine/fetcher.asm
   1++81E0                  MODULE Fetcher
   2++81E0
   3++81E0              fetchFromNet:
   4++81E0
   5++81E0              	IFDEF MSX
   6++81E0 ~                	call Gopher.makeRequest
   6++81E0 ~              jr nz, .error
   7++81E0                  ELSE
   8++81E0 CD 9D 82         	call Gopher.makeRequest
   8++81E3 38 06          jr c, .error
   9++81E5                  ENDIF
  10++81E5
  11++81E5 CD B5 82         call Gopher.loadBuffer
  12++81E8 C3 39 82         jp MediaProcessor.processResource
  13++81EB              .error
  14++81EB 21 F4 81         ld hl, .err
  14++81EE CD B4 69       call DialogBox.msgBox
  15++81F1 C3 00 71         jp History.back
  16++81F4
  17++81F4 44 6F 63 75  .err db "Document fetch error! Check your connection or hostname!", 0
  17++81F8 6D 65 6E 74
  17++81FC 20 66 65 74
  17++8200 63 68 20 65
  17++8204 72 72 6F 72
  17++8208 21 20 43 68
  17++820C 65 63 6B 20
  17++8210 79 6F 75 72
  17++8214 20 63 6F 6E
  17++8218 6E 65 63 74
  17++821C 69 6F 6E 20
  17++8220 6F 72 20 68
  17++8224 6F 73 74 6E
  17++8228 61 6D 65 21
  17++822C 00
  18++822D
  19++822D
  20++822D              fetchFromFS:
  21++822D CD 88 80         call UrlEncoder.extractPath
  22++8230              loadFile
  23++8230              	IFDEF MSX
  24++8230 ~                ld de, nameBuffer, a, FMODE_NO_WRITE
  25++8230 ~                call Dos.fopen
  26++8230 ~                ld a, b, (.fp), a
  27++8230 ~                ld de, outputBuffer, hl, (ramtop)
  28++8230 ~                call Dos.fread
  29++8230 ~                ld a, (.fp), b, a
  30++8230 ~                call Dos.fclose
  31++8230 ~                jp MediaProcessor.processResource
  32++8230 ~            .fp db 0
  33++8230              	ELSE
  34++8230 21 A0 80         ld hl, nameBuffer
  35++8233 CD 77 6B         call Dos.loadBuffer
  36++8236 C3 39 82         jp MediaProcessor.processResource
  37++8239              	ENDIF
  38++8239                  ENDMODULE
# file closed: gopher/engine/fetcher.asm
  22+ 8239                  include "gopher/engine/media-processor.asm"
# file opened: gopher/engine/media-processor.asm
   1++8239                  MODULE MediaProcessor
   2++8239              processResource:
   3++8239 CD 94 80         call UrlEncoder.extractHostName
   4++823C 3A 45 72         ld a, (historyBlock.mediaType)
   5++823F FE 05            cp MIME_MUSIC
   5++8241 28 13          jr z, processPT
   6++8243 FE 02            cp MIME_LINK
   6++8245 28 15          jr z, processPage
   7++8247 FE 04            cp MIME_INPUT
   7++8249 28 11          jr z, processPage
   8++824B FE 06            cp MIME_IMAGE
   8++824D CA BD 96       jp z, ScreenViewer.display
   9++8250              	ifdef GS
  10++8250 ~                cp MIME_MOD
  10++8250 ~              jr z, processMOD
  11++8250              	endif
  12++8250              ; Fallback to plain text
  13++8250              processText:
  14++8250 CD 30 68         call Render.renderPlainTextScreen
  15++8253 C3 78 68         jp   Render.plainTextLoop
  16++8256
  17++8256              processPT:
  18++8256 CD 6F 8A         call VortexProcessor.play
  19++8259 C3 00 71         jp History.back
  20++825C
  21++825C                  ifdef GS
  22++825C ~            processMOD:
  23++825C ~                call ModProcessor.play
  24++825C ~                jp History.back
  25++825C              	endif
  26++825C
  27++825C              processPage:
  28++825C 3A 08 69         ld a, (Render.play_next)
  28++825F A7             and a
  28++8260 20 06          jr nz, .playNext
  29++8262 CD 9D 66         call Render.renderGopherScreen
  30++8265 C3 EC 66         jp   Render.workLoop
  31++8268              .playNext
  32++8268 21 8C 74         ld hl, Render.cursor_position
  33++826B 34               inc (hl)
  34++826C CD 9D 66         call Render.renderGopherScreen
  35++826F C3 D6 66         jp Render.checkBorder
  36++8272                  ENDMODULE
# file closed: gopher/engine/media-processor.asm
  23+ 8272                  include "gopher/gopher.asm"
# file opened: gopher/gopher.asm
   1++8272                  module Gopher
   2++8272              ; HL - gopher row
   3++8272              extractRequest:
   4++8272 21 46 72         ld hl, historyBlock.locator
   5++8275 11 BE 83         ld de, requestbuffer
   6++8278              .loop
   7++8278 7E               ld a, (hl)
   8++8279 12               ld (de), a
   9++827A 23               inc hl
  10++827B 13               inc de
  11++827C FE 00            cp 0
  12++827E 28 02            jr z, .search
  13++8280 18 F6            jr .loop
  14++8282              .search
  15++8282 1B               dec de
  16++8283 3A 45 72         ld a, (historyBlock.mediaType)
  17++8286 FE 04            cp MIME_INPUT
  18++8288 20 10            jr nz, .exit
  19++828A 21 8B 73         ld hl, historyBlock.search
  20++828D 3E 09            ld a, TAB
  21++828F 12               ld (de), a
  22++8290 13               inc de
  23++8291              .searchCopy
  24++8291 7E               ld a, (hl)
  25++8292 A7               and a
  25++8293 28 05          jr z, .exit
  26++8295 12               ld (de), a
  27++8296 23               inc hl
  27++8297 13             inc de
  28++8298 18 F7            jr .searchCopy
  29++829A              .exit
  30++829A AF               xor a
  31++829B 12               ld (de), a
  32++829C C9               ret
  33++829D
  34++829D
  35++829D              makeRequest:
  36++829D CD 72 82         call extractRequest
  37++82A0
  38++82A0 21 45 73         ld hl, historyBlock.host
  39++82A3 11 85 73         ld de, historyBlock.port
  40++82A6 CD 6B 87         call Wifi.openTCP
  41++82A9 D8               ret c
  42++82AA
  43++82AA 21 BE 83         ld hl, requestbuffer
  44++82AD CD 5C 88         call Wifi.tcpSendZ
  45++82B0 AF               xor a
  45++82B1 32 36 86       ld (Wifi.closed), a
  46++82B4 C9               ret
  47++82B5
  48++82B5
  49++82B5              loadBuffer:
  50++82B5 21 E2 96         ld hl, outputBuffer
  51++82B8 22 34 86         ld (Wifi.buffer_pointer), hl
  52++82BB              .loop
  53++82BB CD AC 88         call Wifi.getPacket
  54++82BE 3A 36 86         ld a, (Wifi.closed)
  54++82C1 A7             and a
  54++82C2 C0             ret nz
  55++82C3 CD C9 87         call Wifi.continue
  56++82C6 18 F3            jr .loop
  57++82C8
  58++82C8                  ifdef GS
  59++82C8 ~            loadMod:
  60++82C8 ~                xor a
  60++82C8 ~              call GeneralSound.init
  61++82C8 ~                ld hl, .progress
  61++82C8 ~              call DialogBox.msgNoWait
  62++82C8 ~                call makeRequest
  62++82C8 ~              jp c, Fetcher.fetchFromNet.error
  63++82C8 ~                call GeneralSound.loadModule
  64++82C8 ~            .loop
  65++82C8 ~                ld hl, outputBuffer, (Wifi.buffer_pointer), hl
  66++82C8 ~                call Wifi.getPacket
  67++82C8 ~                ld a, (Wifi.closed)
  67++82C8 ~              and a
  67++82C8 ~              jr nz, .exit
  68++82C8 ~                ld hl, outputBuffer, bc, (Wifi.bytes_avail)
  69++82C8 ~            .loadLoop
  70++82C8 ~                ld a, b
  70++82C8 ~              or c
  70++82C8 ~              and a
  70++82C8 ~              jr z, .nextFrame
  71++82C8 ~                ld a, (hl)
  71++82C8 ~              call GeneralSound.sendByte
  72++82C8 ~                dec bc
  73++82C8 ~                inc hl
  74++82C8 ~                jr .loadLoop
  75++82C8 ~            .nextFrame
  76++82C8 ~                call pulsing
  77++82C8 ~                ;call Wifi.continue
  78++82C8 ~                jr .loop
  79++82C8 ~            .exit
  80++82C8 ~                call GeneralSound.finishLoadingModule
  81++82C8 ~                ;jp History.back
  82++82C8 ~            	jp MediaProcessor.processResource
  83++82C8 ~            .progress db "MOD downloading directly to GS!", 0
  84++82C8                  endif
  85++82C8
  86++82C8              download:
  87++82C8 11 46 72         ld de, historyBlock.locator
  88++82CB 62 6B            ld hl, de
  89++82CD              .findFileName
  90++82CD 1A               ld a, (de)
  90++82CE 13             inc de
  91++82CF FE 2F            cp '/'
  91++82D1 20 02          jr nz, .skip
  92++82D3 62 6B            ld hl, de
  93++82D5              .skip
  94++82D5 A7               and a
  94++82D6 20 F5          jr nz, .findFileName
  95++82D8              .copy
  96++82D8                  ;; HL - filename pointer
  97++82D8 11 64 69         ld de, DialogBox.inputBuffer
  98++82DB              .copyFileName
  99++82DB 7E               ld a, (hl)
  99++82DC A7             and a
  99++82DD 28 05          jr z, .finishCopy
 100++82DF
 101++82DF 12               ld (de), a
 101++82E0 23 13          inc hl, de
 102++82E2 18 F7            jr .copyFileName
 103++82E4              .finishCopy
 104++82E4 12               ld (de), a
 105++82E5 CD 0D 69         call DialogBox.inputBox.noclear
 106++82E8 3A 64 69         ld a, (DialogBox.namedownload)
 106++82EB A7             and a
 106++82EC CA 00 71       jp z, History.back
 107++82EF
 108++82EF CD 9D 82         call makeRequest
 108++82F2 DA EB 81       jp c, Fetcher.fetchFromNet.error
 109++82F5
 110++82F5 06 0E 21 64      ld b, Dos.FMODE_CREATE, hl, DialogBox.namedownload
 110++82F9 69
 111++82FA CD 93 6B         call Dos.fopen
 112++82FD 32 9B 83         ld (.fp), a
 113++8300
 114++8300 21 76 83         ld hl, .progress
 114++8303 CD BD 69       call DialogBox.msgNoWait
 115++8306              .loop
 116++8306 21 E2 96 22      ld hl, outputBuffer, (Wifi.buffer_pointer), hl
 116++830A 34 86
 117++830C CD AC 88         call Wifi.getPacket
 118++830F 3A 36 86         ld a, (Wifi.closed)
 118++8312 A7             and a
 118++8313 20 12          jr nz, .exit
 119++8315
 120++8315 3A 9B 83 21      ld a, (.fp), hl, outputBuffer, bc, (Wifi.bytes_avail)
 120++8319 E2 96 ED 4B
 120++831D 32 86
 121++831F CD A3 6C         call Dos.fwrite
 122++8322 CD 9E 83         call pulsing
 123++8325 18 DF            jr .loop
 124++8327              .exit
 125++8327 3A 9B 83         ld a, (.fp)
 126++832A CD 6C 6C         call Dos.fclose
 127++832D C3 00 71         jp History.back
 128++8330              .error
 129++8330 3A 9B 83         ld a, (.fp)
 130++8333 CD 6C 6C         call Dos.fclose
 131++8336 21 3F 83         ld hl, .err
 132++8339 CD B4 69         call DialogBox.msgBox
 133++833C C3 00 71         jp History.back
 134++833F
 135++833F 4F 70 65 72  .err db "Operation failed! Sorry! Check filename or disk space!",0
 135++8343 61 74 69 6F
 135++8347 6E 20 66 61
 135++834B 69 6C 65 64
 135++834F 21 20 53 6F
 135++8353 72 72 79 21
 135++8357 20 43 68 65
 135++835B 63 6B 20 66
 135++835F 69 6C 65 6E
 135++8363 61 6D 65 20
 135++8367 6F 72 20 64
 135++836B 69 73 6B 20
 135++836F 73 70 61 63
 135++8373 65 21 00
 136++8376 44 6F 77 6E  .progress db "Downloading in progress! Wait a bit!", 0
 136++837A 6C 6F 61 64
 136++837E 69 6E 67 20
 136++8382 69 6E 20 70
 136++8386 72 6F 67 72
 136++838A 65 73 73 21
 136++838E 20 57 61 69
 136++8392 74 20 61 20
 136++8396 62 69 74 21
 136++839A 00
 137++839B 00           .fp db 0
 138++839C 00           socket db 0
 139++839D 20           pulsator db " "
 140++839E              pulsing
 141++839E 11 01 0B         ld de, #0B01
 141++83A1 CD 3A 60       call TextMode.gotoXY
 142++83A4 3A 9D 83         ld a, (pulsator)
 143++83A7 FE 2A            cp '*'
 144++83A9 CA B5 83         jp z, printasterix
 145++83AC CD A4 60         call TextMode.putC
 146++83AF 3E 2A            ld a, '*'
 147++83B1 32 9D 83         ld (pulsator),a
 148++83B4 C9               ret
 149++83B5              printasterix
 150++83B5 CD A4 60         call TextMode.putC
 151++83B8 3E 20            ld a, ' '
 152++83BA 32 9D 83         ld (pulsator),a
 153++83BD C9               ret
 154++83BE
 155++83BE 00 00 00...  requestbuffer ds #1ff
 156++85BD                  endmodule
 157++85BD
# file closed: gopher/gopher.asm
  24+ 85BD                  include "drivers/index.asm"
# file opened: drivers/index.asm
   1++85BD                  IFDEF UNO
   2++85BD ~                	include "uart-uno.asm"
   3++85BD                  ENDIF
   4++85BD
   5++85BD                  IFDEF UNOUART
   6++85BD ~                	include "uart-uno.asm"
   7++85BD                  ENDIF
   8++85BD
   9++85BD                  IFDEF MB03
  10++85BD ~                	include "uart-mb03.asm"
  11++85BD                  ENDIF
  12++85BD
  13++85BD                  IFDEF AY
  14++85BD ~                	include "uart-ay.asm"
  15++85BD                  ENDIF
  16++85BD
  17++85BD                  IFDEF ZW
  18++85BD                  	include "uart-zxwifi.asm"
# file opened: drivers/uart-zxwifi.asm
   1++85BD              ; This driver works with 16c550 uart that's support AFE
   2++85BD                  module Uart
   3++85BD              ; Make init shorter and readable:-)
   4++85BD                  macro outp port, value
   5++85BD ~            	ld b, port
   6++85BD ~            	ld c, #EF
   7++85BD ~                ld a, value
   8++85BD ~                out (c), a
   9++85BD                  endm
  10++85BD
  11++85BD              ; Internal port constants
  12++85BD              RBR_THR = #F8
  13++85BD              IER     = RBR_THR + 1
  14++85BD              IIR_FCR = RBR_THR + 2
  15++85BD              LCR     = RBR_THR + 3
  16++85BD              MCR     = RBR_THR + 4
  17++85BD              LSR     = RBR_THR + 5
  18++85BD              MSR     = RBR_THR + 6
  19++85BD              SR      = RBR_THR + 7
  20++85BD
  21++85BD
  22++85BD              init:
  23++85BD                  IFDEF GZ
  24++85BD ~                outp MCR,     #0d  // Assert RTS
  25++85BD ~                outp IIR_FCR, #87  // Enable fifo 8 level, and clear it
  26++85BD ~                outp LCR,     #83  // 8n1, DLAB=1
  27++85BD ~                outp RBR_THR, 12  //(divider 12)
  28++85BD ~                outp IER,     #00  // (divider 0). Divider is 16 bit, so we get (#0002 divider)
  29++85BD ~
  30++85BD ~                outp LCR,     #03 // 8n1, DLAB=0
  31++85BD ~                outp IER,     #00 // Disable int
  32++85BD ~                outp MCR,     #2f // Enable AFE
  33++85BD ~                ret
  34++85BD                  ELSE
  35++85BD                  outp MCR,     #0d  // Assert RTS
  35++85BD 06 FC       >	ld b, MCR
  35++85BF 0E EF       >	ld c, #EF
  35++85C1 3E 0D       >    ld a, #0d
  35++85C3 ED 79       >    out (c), a
  36++85C5                  outp IIR_FCR, #87  // Enable fifo 8 level, and clear it
  36++85C5 06 FA       >	ld b, IIR_FCR
  36++85C7 0E EF       >	ld c, #EF
  36++85C9 3E 87       >    ld a, #87
  36++85CB ED 79       >    out (c), a
  37++85CD                  outp LCR,     #83  // 8n1, DLAB=1
  37++85CD 06 FB       >	ld b, LCR
  37++85CF 0E EF       >	ld c, #EF
  37++85D1 3E 83       >    ld a, #83
  37++85D3 ED 79       >    out (c), a
  38++85D5                  outp RBR_THR, 1  // 115200 (divider 1)
  38++85D5 06 F8       >	ld b, RBR_THR
  38++85D7 0E EF       >	ld c, #EF
  38++85D9 3E 01       >    ld a, 1
  38++85DB ED 79       >    out (c), a
  39++85DD                  outp IER,     #00  // (divider 0). Divider is 16 bit, so we get (#0002 divider)
  39++85DD 06 F9       >	ld b, IER
  39++85DF 0E EF       >	ld c, #EF
  39++85E1 3E 00       >    ld a, #00
  39++85E3 ED 79       >    out (c), a
  40++85E5
  41++85E5                  outp LCR,     #03 // 8n1, DLAB=0
  41++85E5 06 FB       >	ld b, LCR
  41++85E7 0E EF       >	ld c, #EF
  41++85E9 3E 03       >    ld a, #03
  41++85EB ED 79       >    out (c), a
  42++85ED                  outp IER,     #00 // Disable int
  42++85ED 06 F9       >	ld b, IER
  42++85EF 0E EF       >	ld c, #EF
  42++85F1 3E 00       >    ld a, #00
  42++85F3 ED 79       >    out (c), a
  43++85F5                  outp MCR,     #2f // Enable AFE
  43++85F5 06 FC       >	ld b, MCR
  43++85F7 0E EF       >	ld c, #EF
  43++85F9 3E 2F       >    ld a, #2f
  43++85FB ED 79       >    out (c), a
  44++85FD
  45++85FD C9               ret
  46++85FE                  ENDIF
  47++85FE              retry_rec_count_max equ 50 ;ждать 1 байт максимум столько прерываний
  48++85FE
  49++85FE              ; Flag C <- Data available
  50++85FE              ; isAvailable:
  51++85FE                  ; ld a, LSR
  52++85FE                  ; in a, (#EF)
  53++85FE                  ; rrca
  54++85FE                  ; ret
  55++85FE
  56++85FE              ; Non-blocking read
  57++85FE              ; Flag C <- is byte was readen
  58++85FE              ; A <- byte
  59++85FE              ; read1:
  60++85FE                  ; ld a, LSR
  61++85FE                  ; in a, (#EF)
  62++85FE                  ; rrca
  63++85FE                  ; ret nc
  64++85FE                  ; ld a, RBR_THR
  65++85FE                  ; in a, (#EF)
  66++85FE                  ; scf
  67++85FE                  ; ret
  68++85FE
  69++85FE              ; Tries read byte with timeout
  70++85FE              ; Flag C <- is byte read
  71++85FE              ; A <- byte
  72++85FE              read:
  73++85FE AF           	xor a ;4
  74++85FF 32 78 5C     	ld (#5C78),a ;обнулить счётчик ожидания ;13
  75++8602              .wait
  76++8602 3E FD            ld a, LSR
  77++8604 DB EF            in a, (#EF)
  78++8606 0F               rrca
  79++8607 30 05        	jr nc, .readW
  80++8609 3E F8            ld a, RBR_THR
  81++860B DB EF            in a, (#EF)
  82++860D C9           	ret
  83++860E              .readW
  84++860E 3A 78 5C     	ld a,(#5C78)
  85++8611 FE 32        	cp retry_rec_count_max
  86++8613 38 ED        	jr c, .wait ;ещё попытка
  87++8615 AF           	xor a ;выключим флаг переноса если время вышло
  88++8616 C9           	ret
  89++8617
  90++8617
  91++8617
  92++8617
  93++8617              ; Blocking read
  94++8617              ; A <- Byte
  95++8617              ; readB:
  96++8617                  ; ld a, LSR
  97++8617                  ; in a, (#EF)
  98++8617                  ; rrca
  99++8617                  ; jr nc, readB
 100++8617              	; ld a, RBR_THR
 101++8617                  ; in a, (#EF)
 102++8617                  ; ret
 103++8617
 104++8617              ; A -> byte to send
 105++8617              write:
 106++8617 F5               push af
 107++8618              .wait
 108++8618 3E FD        	ld a, LSR
 109++861A DB EF            in a, (#EF)
 110++861C E6 20            and #20
 111++861E 28 F8            jr z, .wait
 112++8620 F1               pop af
 113++8621 06 F8        	ld b, RBR_THR
 114++8623 0E EF        	ld c, #EF
 115++8625 ED 79            out (c), a
 116++8627 C9               ret
 117++8628
 118++8628                  endmodule
# file closed: drivers/uart-zxwifi.asm
  19++8628                  ENDIF
  20++8628
  21++8628              	include "utils.asm"
# file opened: drivers/utils.asm
   1++8628              ;;; Macroses!!!!
   2++8628                  MACRO EspSend Text
   3++8628 ~                ld hl, .txtB
   4++8628 ~                ld e, (.txtE - .txtB)
   5++8628 ~                call espSend
   6++8628 ~                jr .txtE
   7++8628 ~            .txtB
   8++8628 ~                db Text
   9++8628 ~            .txtE
  10++8628                  ENDM
  11++8628
  12++8628                  MACRO EspCmd Text
  13++8628 ~                ld hl, .txtB
  14++8628 ~                ld e, (.txtE - .txtB)
  15++8628 ~                call espSend
  16++8628 ~                jr .txtE
  17++8628 ~            .txtB
  18++8628 ~                db Text
  19++8628 ~                db 13, 10
  20++8628 ~            .txtE
  21++8628                  ENDM
  22++8628
  23++8628                  MACRO EspCmdOkErr text
  24++8628 ~                EspCmd text
  25++8628 ~                call checkOkErr
  26++8628                  ENDM
  27++8628
  28++8628              ; IN DE - string pointer
  29++8628              ; OUT HL - string len
  30++8628              strLen:
  31++8628 21 00 00         ld hl, 0
  32++862B              .loop
  33++862B 1A               ld a, (de)
  33++862C A7             and a
  33++862D C8             ret z
  34++862E 13 23            inc de, hl
  35++8630 18 F9            jr .loop
# file closed: drivers/utils.asm
  22++8632
  23++8632              	IFDEF UARTATM
  24++8632 ~            		include "uart-atm.asm"
  25++8632              	ENDIF
  26++8632
  27++8632              	IFDEF UARTEVO
  28++8632 ~            		include "uart-evo.asm"
  29++8632                  ENDIF
  30++8632
  31++8632              	IFDEF NEDONET
  32++8632 ~            		include "nedowifi.asm"
  33++8632              	ELSE
  34++8632              	IFNDEF MSX
  35++8632              		include "wifi.asm"
# file opened: drivers/wifi.asm
   1++8632                  MODULE Wifi
   2++8632 00 00        bytes_avail dw 0
   3++8634 00 00        buffer_pointer dw 0
   4++8636 01           closed db 1
   5++8637              ; Initialize Wifi chip to work
   6++8637              init:
   7++8637
   8++8637 21 29 87         ld hl, .uartIniting
   8++863A CD BC 60       call TextMode.printZ
   9++863D CD BD 85         call Uart.init
  10++8640 21 3A 87         ld hl, .chipIniting
  10++8643 CD BC 60       call TextMode.printZ
  11++8646
  12++8646                  EspCmdOkErr "ATE0"
  12++8646             >    EspCmd "ATE0"
  12++8646 21 50 86    >    ld hl, .txtB
  12++8649 1E 06       >    ld e, (.txtE - .txtB)
  12++864B CD 3F 88    >    call espSend
  12++864E 18 06       >    jr .txtE
  12++8650             >.txtB
  12++8650 41 54 45 30 >    db "ATE0"
  12++8654 0D 0A       >    db 13, 10
  12++8656             >.txtE
  12++8656 CD CA 87    >    call checkOkErr
  13++8659 DA 09 87         jp c, .initError
  14++865C
  15++865C              ; Reading auth.pwd and send it to ESP
  16++865C 21 42 97 06      ld hl, creds, b, Dos.FMODE_READ
  16++8660 01
  16++8661 CD 93 6B       call Dos.fopen
  17++8664 F5               push af
  18++8665 21 53 97 01      ld hl,outputBuffer2, bc, 255
  18++8669 FF 00
  18++866B CD 80 6C       call Dos.fread
  19++866E F1               pop af
  20++866F CD 6C 6C         call Dos.fclose
  21++8672
  22++8672 21 52 87         ld hl, .doneInit1
  22++8675 CD BC 60       call TextMode.printZ
  23++8678
  24++8678 21 53 97         ld hl,outputBuffer2
  25++867B CD 49 88         call espSendT
  26++867E 3E 0D            ld a, 13
  26++8680 CD 17 86       call Uart.write
  27++8683 3E 0A            ld a, 10
  27++8685 CD 17 86       call Uart.write
  28++8688 CD CA 87         call checkOkErr
  29++868B DA 09 87         jp c, .initError
  30++868E              ;
  31++868E                 	EspCmdOkErr "AT+CIPSERVER=0"
  31++868E             >    EspCmd "AT+CIPSERVER=0"
  31++868E 21 98 86    >    ld hl, .txtB
  31++8691 1E 10       >    ld e, (.txtE - .txtB)
  31++8693 CD 3F 88    >    call espSend
  31++8696 18 10       >    jr .txtE
  31++8698             >.txtB
  31++8698 41 54 2B 43 >    db "AT+CIPSERVER=0"
  31++869C 49 50 53 45 >
  31++86A0 52 56 45 52 >
  31++86A4 3D 30       >
  31++86A6 0D 0A       >    db 13, 10
  31++86A8             >.txtE
  31++86A8 CD CA 87    >    call checkOkErr
  32++86AB                  EspCmdOkErr "AT+CIPCLOSE" ; Close if there some connection was. Don't care about result
  32++86AB             >    EspCmd "AT+CIPCLOSE"
  32++86AB 21 B5 86    >    ld hl, .txtB
  32++86AE 1E 0D       >    ld e, (.txtE - .txtB)
  32++86B0 CD 3F 88    >    call espSend
  32++86B3 18 0D       >    jr .txtE
  32++86B5             >.txtB
  32++86B5 41 54 2B 43 >    db "AT+CIPCLOSE"
  32++86B9 49 50 43 4C >
  32++86BD 4F 53 45    >
  32++86C0 0D 0A       >    db 13, 10
  32++86C2             >.txtE
  32++86C2 CD CA 87    >    call checkOkErr
  33++86C5                  EspCmdOkErr "AT+CIPMUX=0" ; Single connection mode
  33++86C5             >    EspCmd "AT+CIPMUX=0"
  33++86C5 21 CF 86    >    ld hl, .txtB
  33++86C8 1E 0D       >    ld e, (.txtE - .txtB)
  33++86CA CD 3F 88    >    call espSend
  33++86CD 18 0D       >    jr .txtE
  33++86CF             >.txtB
  33++86CF 41 54 2B 43 >    db "AT+CIPMUX=0"
  33++86D3 49 50 4D 55 >
  33++86D7 58 3D 30    >
  33++86DA 0D 0A       >    db 13, 10
  33++86DC             >.txtE
  33++86DC CD CA 87    >    call checkOkErr
  34++86DF DA 09 87         jp c, .initError
  35++86E2
  36++86E2                  EspCmdOkErr "AT+CIPDINFO=0" ; Disable additional info
  36++86E2             >    EspCmd "AT+CIPDINFO=0"
  36++86E2 21 EC 86    >    ld hl, .txtB
  36++86E5 1E 0F       >    ld e, (.txtE - .txtB)
  36++86E7 CD 3F 88    >    call espSend
  36++86EA 18 0F       >    jr .txtE
  36++86EC             >.txtB
  36++86EC 41 54 2B 43 >    db "AT+CIPDINFO=0"
  36++86F0 49 50 44 49 >
  36++86F4 4E 46 4F 3D >
  36++86F8 30          >
  36++86F9 0D 0A       >    db 13, 10
  36++86FB             >.txtE
  36++86FB CD CA 87    >    call checkOkErr
  37++86FE DA 09 87         jp c, .initError
  38++8701
  39++8701 21 4B 87         ld hl, .doneInit
  39++8704 CD BC 60       call TextMode.printZ
  40++8707
  41++8707 B7               or a
  42++8708 C9               ret
  43++8709              .initError
  44++8709 21 11 87         ld hl, .errMsg
  44++870C CD B4 69       call DialogBox.msgBox
  45++870F 37               scf
  46++8710 C9               ret
  47++8711 57 69 46 69  .errMsg      db "WiFi chip init failed!", "\r", 0
  47++8715 20 63 68 69
  47++8719 70 20 69 6E
  47++871D 69 74 20 66
  47++8721 61 69 6C 65
  47++8725 64 21 0D 00
  48++8729 55 61 72 74  .uartIniting db "Uart initing...", "\r", 0
  48++872D 20 69 6E 69
  48++8731 74 69 6E 67
  48++8735 2E 2E 2E 0D
  48++8739 00
  49++873A 43 68 69 70  .chipIniting db "Chip initing...", "\r", 0
  49++873E 20 69 6E 69
  49++8742 74 69 6E 67
  49++8746 2E 2E 2E 0D
  49++874A 00
  50++874B 44 6F 6E 65  .doneInit    db "Done!","\r", 0
  50++874F 21 0D 00
  51++8752 53 65 6E 64  .doneInit1   db "Sending auth.pwd to ESP","\r", 0
  51++8756 69 6E 67 20
  51++875A 61 75 74 68
  51++875E 2E 70 77 64
  51++8762 20 74 6F 20
  51++8766 45 53 50 0D
  51++876A 00
  52++876B                  IFNDEF PROXY
  53++876B              ; HL - host pointer in gopher row
  54++876B              ; DE - port pointer in gopher row
  55++876B              openTCP:
  56++876B D5               push de
  57++876C E5               push hl
  58++876D                  EspCmdOkErr "AT+CIPCLOSE" ; Don't care about result. Just close if it didn't happens before
  58++876D             >    EspCmd "AT+CIPCLOSE"
  58++876D 21 77 87    >    ld hl, .txtB
  58++8770 1E 0D       >    ld e, (.txtE - .txtB)
  58++8772 CD 3F 88    >    call espSend
  58++8775 18 0D       >    jr .txtE
  58++8777             >.txtB
  58++8777 41 54 2B 43 >    db "AT+CIPCLOSE"
  58++877B 49 50 43 4C >
  58++877F 4F 53 45    >
  58++8782 0D 0A       >    db 13, 10
  58++8784             >.txtE
  58++8784 CD CA 87    >    call checkOkErr
  59++8787                  EspSend 'AT+CIPSTART="TCP","'
  59++8787 21 91 87    >    ld hl, .txtB
  59++878A 1E 13       >    ld e, (.txtE - .txtB)
  59++878C CD 3F 88    >    call espSend
  59++878F 18 13       >    jr .txtE
  59++8791             >.txtB
  59++8791 41 54 2B 43 >    db 'AT+CIPSTART="TCP","'
  59++8795 49 50 53 54 >
  59++8799 41 52 54 3D >
  59++879D 22 54 43 50 >
  59++87A1 22 2C 22    >
  59++87A4             >.txtE
  60++87A4 E1               pop hl
  61++87A5 CD 49 88         call espSendT
  62++87A8                  EspSend '",'
  62++87A8 21 B2 87    >    ld hl, .txtB
  62++87AB 1E 02       >    ld e, (.txtE - .txtB)
  62++87AD CD 3F 88    >    call espSend
  62++87B0 18 02       >    jr .txtE
  62++87B2             >.txtB
  62++87B2 22 2C       >    db '",'
  62++87B4             >.txtE
  63++87B4 E1               pop hl
  64++87B5 CD 49 88         call espSendT
  65++87B8 3E 0D            ld a, 13
  65++87BA CD 17 86       call Uart.write
  66++87BD 3E 0A            ld a, 10
  66++87BF CD 17 86       call Uart.write
  67++87C2 AF               xor a
  67++87C3 32 36 86       ld (closed), a
  68++87C6 C3 CA 87         jp checkOkErr
  69++87C9
  70++87C9              continue:
  71++87C9 C9               ret
  72++87CA                  ENDIF
  73++87CA
  74++87CA
  75++87CA
  76++87CA              checkOkErr:
  77++87CA CD FE 85         call Uart.read
  78++87CD FE 4F            cp 'O'
  78++87CF CA DF 87       jp z, .okStart ; OK
  79++87D2 FE 45            cp 'E'
  79++87D4 CA F4 87       jp z, .errStart ; ERROR
  80++87D7 FE 46            cp 'F'
  80++87D9 CA 19 88       jp z, .failStart ; FAIL
  81++87DC C3 CA 87         jp checkOkErr
  82++87DF              .okStart
  83++87DF CD FE 85         call Uart.read
  83++87E2 FE 4B          cp 'K'
  83++87E4 C2 CA 87       jp nz, checkOkErr
  84++87E7 CD FE 85         call Uart.read
  84++87EA FE 0D          cp 13
  84++87EC C2 CA 87       jp nz, checkOkErr
  85++87EF CD 36 88         call .flushToLF
  86++87F2 B7               or a
  87++87F3 C9               ret
  88++87F4              .errStart
  89++87F4 CD FE 85         call Uart.read
  89++87F7 FE 52          cp 'R'
  89++87F9 C2 CA 87       jp nz, checkOkErr
  90++87FC CD FE 85         call Uart.read
  90++87FF FE 52          cp 'R'
  90++8801 C2 CA 87       jp nz, checkOkErr
  91++8804 CD FE 85         call Uart.read
  91++8807 FE 4F          cp 'O'
  91++8809 C2 CA 87       jp nz, checkOkErr
  92++880C CD FE 85         call Uart.read
  92++880F FE 52          cp 'R'
  92++8811 C2 CA 87       jp nz, checkOkErr
  93++8814 CD 36 88         call .flushToLF
  94++8817 37               scf
  95++8818 C9               ret
  96++8819              .failStart
  97++8819 CD FE 85         call Uart.read
  97++881C FE 41          cp 'A'
  97++881E C2 CA 87       jp nz, checkOkErr
  98++8821 CD FE 85         call Uart.read
  98++8824 FE 49          cp 'I'
  98++8826 C2 CA 87       jp nz, checkOkErr
  99++8829 CD FE 85         call Uart.read
  99++882C FE 4C          cp 'L'
  99++882E C2 CA 87       jp nz, checkOkErr
 100++8831 CD 36 88         call .flushToLF
 101++8834 37               scf
 102++8835 C9               ret
 103++8836              .flushToLF
 104++8836 CD FE 85         call Uart.read
 105++8839 FE 0A            cp 10
 105++883B C2 36 88       jp nz, .flushToLF
 106++883E C9               ret
 107++883F
 108++883F              ; Send buffer to UART
 109++883F              ; HL - buff
 110++883F              ; E - count
 111++883F              espSend:
 112++883F 7E               ld a, (hl)
 112++8840 CD 17 86       call Uart.write
 113++8843 23               inc hl
 114++8844 1D               dec e
 115++8845 C2 3F 88         jp nz, espSend
 116++8848 C9               ret
 117++8849
 118++8849              ; HL - string that ends with one of the terminator(CR/LF/TAB/NULL)
 119++8849              espSendT:
 120++8849 7E               ld a, (hl)
 121++884A
 122++884A A7               and a
 122++884B C8             ret z
 123++884C FE 09            cp 9
 123++884E C8             ret z
 124++884F FE 0D            cp 13
 124++8851 C8             ret z
 125++8852 FE 0A            cp 10
 125++8854 C8             ret z
 126++8855
 127++8855 CD 17 86         call Uart.write
 128++8858 23               inc hl
 129++8859 C3 49 88         jp espSendT
 130++885C
 131++885C              ; HL - stringZ to send
 132++885C              ; Adds CR LF
 133++885C              tcpSendZ:
 134++885C E5               push hl
 135++885D                  EspSend "AT+CIPSEND="
 135++885D 21 67 88    >    ld hl, .txtB
 135++8860 1E 0B       >    ld e, (.txtE - .txtB)
 135++8862 CD 3F 88    >    call espSend
 135++8865 18 0B       >    jr .txtE
 135++8867             >.txtB
 135++8867 41 54 2B 43 >    db "AT+CIPSEND="
 135++886B 49 50 53 45 >
 135++886F 4E 44 3D    >
 135++8872             >.txtE
 136++8872 D1               pop de
 136++8873 D5             push de
 137++8874 CD 28 86         call strLen
 138++8877 23               inc hl
 138++8878 23             inc hl ; +CRLF
 139++8879 CD 41 89         call hlToNumEsp
 140++887C 3E 0D            ld a, 13
 140++887E CD 17 86       call Uart.write
 141++8881 3E 0A            ld a, 10
 141++8883 CD 17 86       call Uart.write
 142++8886 CD CA 87         call checkOkErr
 142++8889 D8             ret c
 143++888A              .wait
 144++888A CD FE 85         call Uart.read
 144++888D FE 3E          cp '>'
 144++888F C2 8A 88       jp nz, .wait
 145++8892 E1               pop hl
 146++8893              .loop
 147++8893 7E               ld a, (hl)
 147++8894 A7             and a
 147++8895 CA 9F 88       jp z, .exit
 148++8898 CD 17 86         call Uart.write
 149++889B 23               inc hl
 150++889C C3 93 88         jp .loop
 151++889F              .exit
 152++889F 3E 0D            ld a, 13
 152++88A1 CD 17 86       call Uart.write
 153++88A4 3E 0A            ld a, 10
 153++88A6 CD 17 86       call Uart.write
 154++88A9 C3 CA 87         jp checkOkErr
 155++88AC
 156++88AC              getPacket:
 157++88AC CD FE 85         call Uart.read
 158++88AF FE 2B            cp '+'
 158++88B1 CA E2 88       jp z, .ipdBegun    ; "+IPD," packet
 159++88B4 FE 4F            cp 'O'
 159++88B6 CA BC 88       jp z, .closedBegun ; It enough to check "OSED\n" :-)
 160++88B9 C3 AC 88         jp getPacket
 161++88BC              .closedBegun
 162++88BC CD FE 85         call Uart.read
 162++88BF FE 53          cp 'S'
 162++88C1 C2 BC 88       jp nz, .closedBegun
 163++88C4 CD FE 85         call Uart.read
 163++88C7 FE 45          cp 'E'
 163++88C9 C2 BC 88       jp nz, .closedBegun
 164++88CC CD FE 85         call Uart.read
 164++88CF FE 44          cp 'D'
 164++88D1 C2 BC 88       jp nz, .closedBegun
 165++88D4 CD FE 85         call Uart.read
 165++88D7 FE 0D          cp 13
 165++88D9 C2 BC 88       jp nz, .closedBegun
 166++88DC 3E 01 32 36      ld a, 1, (closed), a
 166++88E0 86
 167++88E1 C9               ret
 168++88E2              .ipdBegun
 169++88E2 CD FE 85         call Uart.read
 169++88E5 FE 49          cp 'I'
 169++88E7 C2 E2 88       jp nz, .ipdBegun
 170++88EA CD FE 85         call Uart.read
 170++88ED FE 50          cp 'P'
 170++88EF C2 E2 88       jp nz, .ipdBegun
 171++88F2 CD FE 85         call Uart.read
 171++88F5 FE 44          cp 'D'
 171++88F7 C2 E2 88       jp nz, .ipdBegun
 172++88FA CD FE 85         call Uart.read  ;Comma
 173++88FD CD 27 89         call .count_ipd_lenght
 173++8900 22 32 86       ld (bytes_avail), hl
 174++8903 54 5D            ld de, hl
 175++8905 2A 34 86         ld hl, (buffer_pointer)
 176++8908              .readp
 177++8908 7C               ld a, h
 177++8909 FE FF          cp #ff
 177++890B D2 1D 89       jp nc, .skipbuff
 178++890E CD FE 85         call Uart.read
 179++8911 77               ld (hl), a
 180++8912 1B               dec de
 181++8913 23               inc hl
 182++8914 7A               ld a, d
 182++8915 B3             or e
 182++8916 C2 08 89       jp nz, .readp
 183++8919 22 34 86         ld (buffer_pointer), hl
 184++891C C9               ret
 185++891D              .skipbuff
 186++891D CD FE 85         call Uart.read
 187++8920 1B               dec de
 187++8921 7A             ld a, d
 187++8922 B3             or e
 187++8923 C2 1D 89       jp nz, .skipbuff
 188++8926 C9               ret
 189++8927              .count_ipd_lenght
 190++8927 21 00 00     		ld hl,0			; count lenght
 191++892A E5           .cil1	push  hl
 192++892B CD FE 85             call Uart.read
 193++892E E1                   pop hl
 194++892F FE 3A        		cp ':'
 195++8931 C8                   ret z
 196++8932 D6 30        		sub 0x30
 197++8934 4D                   ld c,l
 198++8935 44                   ld b,h
 199++8936 29                   add hl,hl
 200++8937 29                   add hl,hl
 201++8938 09                   add hl,bc
 202++8939 29                   add hl,hl
 203++893A 4F                   ld c,a
 204++893B 06 00                ld b,0
 205++893D 09                   add hl,bc
 206++893E C3 2A 89     		jp .cil1
 207++8941
 208++8941              ; Based on: https://wikiti.brandonw.net/index.php?title=Z80_Routines:Other:DispHL
 209++8941              ; HL - number
 210++8941              ; It will be written to UART
 211++8941              hlToNumEsp:
 212++8941 01 F0 D8     	ld	bc,-10000
 213++8944 CD 5A 89     	call	.n1
 214++8947 01 18 FC     	ld	bc,-1000
 215++894A CD 5A 89     	call	.n1
 216++894D 01 9C FF     	ld	bc,-100
 217++8950 CD 5A 89     	call	.n1
 218++8953 0E F6        	ld	c,-10
 219++8955 CD 5A 89     	call	.n1
 220++8958 0E FF        	ld	c,-1
 221++895A 3E 2F        .n1	ld	a,'0'-1
 222++895C 3C           .n2	inc	a
 223++895D 09           	add	hl,bc
 224++895E DA 5C 89     	jp	c, .n2
 225++8961 ED 42        	sbc	hl,bc
 226++8963 C5               push bc
 227++8964 CD 17 86     	call Uart.write
 228++8967 C1               pop bc
 229++8968 C9               ret
 230++8969              flushToLF1
 231++8969 CD FE 85         call Uart.read
 232++896C FE 0A            cp 10
 232++896E C2 69 89       jp nz, flushToLF1
 233++8971 C9               ret
 234++8972                  ENDMODULE
# file closed: drivers/wifi.asm
  36++8972              	ENDIF
  37++8972              	ENDIF
  38++8972
  39++8972                  IFDEF NEDOOS
  40++8972 ~                	include "rtc-nos.asm"
  41++8972                  ENDIF
  42++8972
  43++8972
  44++8972                  IFDEF SMUCRTC
  45++8972                  	include "rtc-smuc.asm"
# file opened: drivers/rtc-smuc.asm
   1++8972              ;clock driver SMUC
   2++8972              	module Clock
   3++8972              ; вых.:	CY=1, если микросхемы CMOS нет
   4++8972              	; C — секунды/число;
   5++8972              	; B - минуты/месяц;
   6++8972              	; E - часы/год;
   7++8972
   8++8972              readTime
   9++8972 01 BA DF     	ld bc,#DFBA
  10++8975 3E 04        	ld a,4 ;часы
  11++8977 CD AD 89     	call out3d2f
  12++897A 3E 0A        	ld a,10 ;пауза
  13++897C              readTimeCL
  14++897C 3D           	dec a
  15++897D 20 FD        	jr nz,readTimeCL
  16++897F CD A6 89     	call in3d2f
  17++8982 FE FF        	cp 255 ;проверка наличия микросхемы
  18++8984 37           	scf
  19++8985 C8           	ret z
  20++8986 5F           	ld e,a
  21++8987 3E 02        	ld a,2 ;минуты
  22++8989 CD AD 89     	call out3d2f
  23++898C 3E 0A        	ld a,10 ;пауза
  24++898E              readTimeCL2
  25++898E 3D           	dec a
  26++898F 20 FD        	jr nz,readTimeCL2
  27++8991 CD A6 89     	call in3d2f
  28++8994 47           	ld b,a
  29++8995 B7           	or a
  30++8996              ;сохранение текущего времени
  31++8996 30 01        	jr nc,read_time_ok
  32++8998              	; ld hl,mes_no_RTC
  33++8998              	; call print_mes
  34++8998              	; scf
  35++8998 C9           	ret ;выход
  36++8999              read_time_ok
  37++8999 7B           	ld a,e ;часы
  38++899A 32 63 8A     	ld (hours),a
  39++899D 78           	ld a,b ;минуты
  40++899E 32 64 8A     	ld (minutes),a
  41++89A1 79           	ld a,c ;секунды
  42++89A2 32 65 8A     	ld (seconds),a
  43++89A5 C9           	ret
  44++89A6
  45++89A6              in3d2f
  46++89A6 21 F3 3F     	ld hl,#3ff3
  47++89A9 E5           	push hl
  48++89AA C3 2F 3D     	jp #3d2f
  49++89AD
  50++89AD              out3d2f
  51++89AD 21 53 2A     	ld hl,#2A53
  52++89B0 E5           	push hl
  53++89B1 C3 2F 3D     	jp #3d2f
  54++89B4                  endmodule
  55++89B4
# file closed: drivers/rtc-smuc.asm
  46++89B4                  ENDIF
  47++89B4
  48++89B4              	IFDEF MSX
  49++89B4 ~                    include "drivers/unapi/unapi.asm"
  50++89B4 ~                	include "drivers/unapi/tcp.asm"
  51++89B4 ~            		include "rtc-msx.asm"
  52++89B4                  ELSE
  53++89B4              		include "proxy.asm"
# file opened: drivers/proxy.asm
   1++89B4                  IFDEF PROXY
   2++89B4 ~                MODULE Wifi
   3++89B4 ~            ; Same singature as wifi.openTCP
   4++89B4 ~            ; HL - host pointer in gopher row
   5++89B4 ~            ; DE - port pointer in gopher row
   6++89B4 ~            openTCP:
   7++89B4 ~                push de
   8++89B4 ~                push hl
   9++89B4 ~
  10++89B4 ~                xor a
  10++89B4 ~              ld hl, hostBuff, de, hostBuff + 1, bc, 102, (hl), a
  10++89B4 ~              ldir
  11++89B4 ~
  12++89B4 ~                EspCmdOkErr "AT+CIPCLOSE"
  13++89B4 ~                EspCmdOkErr 'AT+CIPSTART="TCP","138.68.76.243",6912' // Replace here for yourown proxy. If you wish
  14++89B4 ~                jr c, .error
  15++89B4 ~                pop hl
  15++89B4 ~              ld de, hostBuff
  16++89B4 ~            .copyHost
  17++89B4 ~                ld a, (hl)
  17++89B4 ~              and a
  17++89B4 ~              jr z, 1F
  17++89B4 ~              and a
  17++89B4 ~              jr z, 1F
  18++89B4 ~                ld (de), a
  18++89B4 ~              inc hl, de
  19++89B4 ~                jr .copyHost
  20++89B4 ~            1   xor a
  20++89B4 ~              ld (de), a
  21++89B4 ~                pop hl
  21++89B4 ~              ld de, portBuff
  22++89B4 ~            .copyPort
  23++89B4 ~                ld a, (hl)
  23++89B4 ~              and a
  23++89B4 ~              jr z, 1F
  23++89B4 ~              and a
  23++89B4 ~              jr z, 1F
  24++89B4 ~                ld (de), a
  24++89B4 ~              inc hl, de
  25++89B4 ~                jr .copyPort
  26++89B4 ~            1   ld hl, hostBuff
  26++89B4 ~              call tcpSendZ
  27++89B4 ~                ld hl, portBuff
  27++89B4 ~              call tcpSendZ
  28++89B4 ~                xor a
  28++89B4 ~              ld (closed), a
  29++89B4 ~                ret
  30++89B4 ~            .error
  31++89B4 ~                pop hl
  31++89B4 ~              pop de
  32++89B4 ~                ret
  33++89B4 ~
  34++89B4 ~            continue:
  35++89B4 ~                EspCmdOkErr "AT+CIPSEND=1"
  36++89B4 ~                ret c
  37++89B4 ~            .wait
  38++89B4 ~                call Uart.read
  38++89B4 ~              cp '>'
  38++89B4 ~              jr nz, .wait
  39++89B4 ~                ld a, 'c'
  39++89B4 ~              call Uart.write
  40++89B4 ~                jp checkOkErr
  41++89B4 ~
  42++89B4 ~            hostBuff ds 96
  43++89B4 ~            portBuff ds 7
  44++89B4 ~                ENDMODULE
  45++89B4                  ENDIF
# file closed: drivers/proxy.asm
  54++89B4              		include "memory.asm"
# file opened: drivers/memory.asm
   1++89B4                  module Memory
   2++89B4              BANKM = #5b5c
   3++89B4              MEM_PORT = #7ffd
   4++89B4
   5++89B4              init:
   6++89B4 F3               di
   7++89B5 FD CB 01 A6      res 4, (iy + 1)
   8++89B9
   9++89B9 AF               xor a
   9++89BA CD BE 89       call setPage
  10++89BD C9               ret
  11++89BE
  12++89BE              ; a - page
  13++89BE              setPage:
  14++89BE F6 18            or #18
  14++89C0 32 5C 5B       ld (BANKM), a
  15++89C3 01 FD 7F         ld bc, MEM_PORT
  15++89C6 ED 79          out (c), a
  16++89C8 C9               ret
  17++89C9
  18++89C9                  endmodule
# file closed: drivers/memory.asm
  55++89C9              	ENDIF
  56++89C9
  57++89C9              	IFDEF GS
  58++89C9 ~            		include "general-sound.asm"
  59++89C9              	ENDIF
# file closed: drivers/index.asm
  25+ 89C9                  include "screen/rtc.asm"
# file opened: screen/rtc.asm
   1++89C9              printRTC
   2++89C9              	IFDEF RTC
   3++89C9 CD 72 89     	call Clock.readTime
   4++89CC
   5++89CC 3A 6E 8A     	ld a, (oldminutes)
   6++89CF 57           	ld d,a
   7++89D0 3A 64 8A     	ld a, (minutes)
   8++89D3 BA           	cp d					; Update only if minutes changed
   9++89D4 C8           	ret z
  10++89D5 32 6E 8A     	ld (oldminutes), a
  11++89D8
  12++89D8 16 01        	ld d,1 ;координаты Y,X
  13++89DA 1E 39        	ld e,64 - 7
  14++89DC CD 3A 60     	call TextMode.gotoXY
  15++89DF 3E 5B        	ld a,'['
  16++89E1 CD A4 60     	call TextMode.putC
  17++89E4 26 00        	ld h,0
  18++89E6 3A 63 8A     	ld a,(hours) ;часы
  19++89E9 6F           	ld l,a
  20++89EA CD 0D 8A     	call toDecimal
  21++89ED 21 69 8A     	ld hl,decimalS+3
  22++89F0 CD BC 60     	call TextMode.printZ
  23++89F3 3E 3A        	ld a,':'
  24++89F5 CD A4 60     	call TextMode.putC
  25++89F8 26 00        	ld h,0
  26++89FA 3A 64 8A     	ld a,(minutes) ;минуты
  27++89FD 6F           	ld l,a
  28++89FE CD 0D 8A     	call toDecimal
  29++8A01 21 69 8A     	ld hl,decimalS+3
  30++8A04 CD BC 60     	call TextMode.printZ
  31++8A07              	;ld a,':'
  32++8A07              	;call TextMode.putC
  33++8A07              	;ld h,0
  34++8A07              	;ld a,(seconds) ;секунды
  35++8A07              	;ld l,a
  36++8A07              	;call toDecimal
  37++8A07              	;ld hl,decimalS+3
  38++8A07              	;call TextMode.printZ
  39++8A07 3E 5D        	ld a,']'
  40++8A09 CD A4 60     	call TextMode.putC
  41++8A0C C9           	ret
  42++8A0D
  43++8A0D              toDecimal		;конвертирует 2 байта в 5 десятичных цифр
  44++8A0D              				;на входе в HL число
  45++8A0D 11 10 27     	ld de,10000 ;десятки тысяч
  46++8A10 3E FF        	ld a,255
  47++8A12              toDecimal10k
  48++8A12 A7           	and a
  49++8A13 ED 52        	sbc hl,de
  50++8A15 3C           	inc a
  51++8A16 30 FA        	jr nc,toDecimal10k
  52++8A18 19           	add hl,de
  53++8A19 C6 30        	add a,48
  54++8A1B 32 66 8A     	ld (decimalS),a
  55++8A1E 11 E8 03     	ld de,1000 ;тысячи
  56++8A21 3E FF        	ld a,255
  57++8A23              toDecimal1k
  58++8A23 A7           	and a
  59++8A24 ED 52        	sbc hl,de
  60++8A26 3C           	inc a
  61++8A27 30 FA        	jr nc,toDecimal1k
  62++8A29 19           	add hl,de
  63++8A2A C6 30        	add a,48
  64++8A2C 32 67 8A     	ld (decimalS+1),a
  65++8A2F 11 64 00     	ld de,100 ;сотни
  66++8A32 3E FF        	ld a,255
  67++8A34              toDecimal01k
  68++8A34 A7           	and a
  69++8A35 ED 52        	sbc hl,de
  70++8A37 3C           	inc a
  71++8A38 30 FA        	jr nc,toDecimal01k
  72++8A3A 19           	add hl,de
  73++8A3B C6 30        	add a,48
  74++8A3D 32 68 8A     	ld (decimalS+2),a
  75++8A40 11 0A 00     	ld de,10 ;десятки
  76++8A43 3E FF        	ld a,255
  77++8A45              toDecimal001k
  78++8A45 A7           	and a
  79++8A46 ED 52        	sbc hl,de
  80++8A48 3C           	inc a
  81++8A49 30 FA        	jr nc,toDecimal001k
  82++8A4B 19           	add hl,de
  83++8A4C C6 30        	add a,48
  84++8A4E 32 69 8A     	ld (decimalS+3),a
  85++8A51 11 01 00     	ld de,1 ;единицы
  86++8A54 3E FF        	ld a,255
  87++8A56              toDecimal0001k
  88++8A56 A7           	and a
  89++8A57 ED 52        	sbc hl,de
  90++8A59 3C           	inc a
  91++8A5A 30 FA        	jr nc,toDecimal0001k
  92++8A5C 19           	add hl,de
  93++8A5D C6 30        	add a,48
  94++8A5F 32 6A 8A     	ld (decimalS+4),a
  95++8A62 C9           	ret
  96++8A63              hours
  97++8A63 00           	db 0
  98++8A64              minutes
  99++8A64 00           	db 0
 100++8A65              seconds
 101++8A65 00           	db 0
 102++8A66 00 00 00...  decimalS	ds 7 ;десятичные цифры
 103++8A6D              	ENDIF
 104++8A6D C9           	ret
 105++8A6E              oldminutes		; не убирать под услоаие
 106++8A6E FF           	db 255
 107++8A6F
 108++8A6F
 109++8A6F
 110++8A6F
# file closed: screen/rtc.asm
  26+ 8A6F
  27+ 8A6F                  IFDEF NEDOOS
  28+ 8A6F ~                    include "screen/nedoscreen.asm"
  29+ 8A6F ~                    include "player/vortexnedoos.asm"
  30+ 8A6F ~                    include "player/mod-processor.asm"
  31+ 8A6F ~            start:
  32+ 8A6F ~            outputBuffer:
  33+ 8A6F ~                    ld sp, 0x4000
  34+ 8A6F ~                    ld c,nos.CMD_SETSYSDRV
  35+ 8A6F ~                 	ex af,af'
  36+ 8A6F ~            	    call nos.BDOS
  37+ 8A6F              	ELSE
  38+ 8A6F                      include "player/vortex-processor.asm"
# file opened: player/vortex-processor.asm
   1++8A6F                  MODULE VortexProcessor
   2++8A6F              	IFDEF MSX
   3++8A6F ~            play:
   4++8A6F ~                call Console.peekC
   4++8A6F ~              and a
   5++8A6F ~                jr nz, play
   6++8A6F ~
   7++8A6F ~                ld hl, message
   7++8A6F ~              call DialogBox.msgNoWait
   8++8A6F ~
   9++8A6F ~                ld hl, outputBuffer
   9++8A6F ~              call VTPL.INIT
  10++8A6F ~            .loop
  11++8A6F ~                halt
  11++8A6F ~              di
  11++8A6F ~              call VTPL.PLAY
  11++8A6F ~              ei
  12++8A6F ~                call Console.peekC
  12++8A6F ~              and a
  12++8A6F ~              jp nz, .stop
  13++8A6F ~                jr nc, .loop
  14++8A6F ~            .stop
  15++8A6F ~                call VTPL.MUTE
  16++8A6F ~            .wlp
  17++8A6F ~                call Console.peekC
  17++8A6F ~              and a
  18++8A6F ~                jr nz, .wlp
  19++8A6F ~                ret
  20++8A6F ~
  21++8A6F ~            message db "Press key to stop...", 0
  22++8A6F ~                ENDMODULE
  23++8A6F ~                include "msxplayer.asm"
  24++8A6F              	ELSE
  25++8A6F              play:
  26++8A6F 3E FF            ld a, 255
  27++8A71 32 6E 8A         ld (oldminutes), a
  28++8A74
  29++8A74 CD EC 69         call Console.waitForKeyUp
  30++8A77
  31++8A77 21 B2 8A         ld hl, message
  31++8A7A CD BD 69       call DialogBox.msgNoWait
  32++8A7D
  33++8A7D 21 E2 96         ld hl, outputBuffer
  33++8A80 CD 08 8B       call VTPL.INIT
  34++8A83
  35++8A83
  36++8A83 3E 01 32 08      ld a, 1, (Render.play_next), a
  36++8A87 69
  37++8A88
  38++8A88                  IFDEF GS
  39++8A88 ~                call GeneralSound.stopModule
  40++8A88                  ENDIF
  41++8A88              .loop
  42++8A88 76               halt
  42++8A89 F3             di
  42++8A8A CD 2B 93       call VTPL.PLAY
  42++8A8D FB             ei
  43++8A8E AF               xor a
  43++8A8F DB FE          in a, (#fe)
  43++8A91 2F             cpl
  43++8A92 E6 1F          and 31
  43++8A94 C2 AC 8A       jp nz, .stopKey
  44++8A97 CD C9 89         call printRTC
  45++8A9A 3A D1 8A         ld a, (VTPL.SETUP)
  45++8A9D 17             rla
  45++8A9E 30 E8          jr nc, .loop
  46++8AA0 3E 01 32 08      ld a, 1, (Render.play_next), a
  46++8AA4 69
  47++8AA5              .stop
  48++8AA5 CD F6 8A         call VTPL.MUTE
  49++8AA8
  50++8AA8                  IFDEF AY
  51++8AA8 ~                call restoreAyState
  52++8AA8                  ENDIF
  53++8AA8
  54++8AA8 CD EC 69         call Console.waitForKeyUp
  55++8AAB C9               ret
  56++8AAC              .stopKey
  57++8AAC AF               xor a
  57++8AAD 32 08 69       ld (Render.play_next), a
  58++8AB0 18 F3            jr .stop
  59++8AB2
  60++8AB2                  IFDEF AY
  61++8AB2 ~            restoreAyState:
  62++8AB2 ~                ld a, #07
  63++8AB2 ~                ld bc, #fffd
  64++8AB2 ~                out (c), a
  65++8AB2 ~                ld a, #fc
  66++8AB2 ~                ld b, #bf
  67++8AB2 ~                out (c), a ; Enable read mode
  68++8AB2 ~
  69++8AB2 ~                ld a, #0e
  70++8AB2 ~                ld bc, #fffd
  71++8AB2 ~                out (c), a
  72++8AB2 ~                ret
  73++8AB2              	ENDIF
  74++8AB2 50 72 65 73  message db "Press key to stop...", 0
  74++8AB6 73 20 6B 65
  74++8ABA 79 20 74 6F
  74++8ABE 20 73 74 6F
  74++8AC2 70 2E 2E 2E
  74++8AC6 00
  75++8AC7                  ENDMODULE
  76++8AC7                  include "player.asm"
# file opened: player/player.asm
   1++8AC7              ;Universal PT2'n'PT3 Turbo Sound player for ZX Spectrum
   2++8AC7              ;(c)2004-2007 S.V.Bulba <vorobey@mail.khstu.ru>
   3++8AC7              ;Specially for AlCo
   4++8AC7              ;http://bulba.untergrund.net/ (http://bulba.at.kz/)
   5++8AC7              	MODULE VTPL
   6++8AC7              ;Release number
   7++8AC7              Release EQU "0"
   8++8AC7              ;Conditional assembly
   9++8AC7              ;1) Current position counters at (Vars1+0) and (Vars2+0)
  10++8AC7              CurPosCounter=0
  11++8AC7              ;2) Allow channels allocation bits at (START+10)
  12++8AC7              ACBBAC=0
  13++8AC7              ;3) Allow loop checking and disabling
  14++8AC7              LoopChecker=1
  15++8AC7              ;4) Insert official identificator
  16++8AC7              Id=0
  17++8AC7              ;5) Set IY for correct return to ZX Basic
  18++8AC7              Basic=1
  19++8AC7
  20++8AC7              ;Features
  21++8AC7              ;--------
  22++8AC7              ;-Can be compiled at any address (i.e. no need rounding ORG
  23++8AC7              ; address).
  24++8AC7              ;-Variables (VARS) can be located at any address (not only after
  25++8AC7              ; code block).
  26++8AC7              ;-INIT subprogram checks PT3-module version and rightly
  27++8AC7              ; generates both note and volume tables outside of code block
  28++8AC7              ; (in VARS).
  29++8AC7              ;-Two portamento (spc. command 3xxx) algorithms (depending of
  30++8AC7              ; PT3 module version).
  31++8AC7              ;-New 1.XX and 2.XX special command behaviour (only for PT v3.7
  32++8AC7              ; and higher).
  33++8AC7              ;-Any Tempo value are accepted (including Tempo=1 and Tempo=2).
  34++8AC7              ;-TS modes: 2xPT3, 2xPT2 and PT v3.7 TS standard.
  35++8AC7              ;-Fully compatible with Ay_Emul PT3 and PT2 players codes.
  36++8AC7              ;-See also notes at the end of this source code.
  37++8AC7
  38++8AC7              ;Limitations
  39++8AC7              ;-----------
  40++8AC7              ;-Can run in RAM only (self-modified code is used).
  41++8AC7              ;-PT2 position list must be end by #FF marker only.
  42++8AC7
  43++8AC7              ;Warning!!! PLAY subprogram can crash if no module are loaded
  44++8AC7              ;into RAM or INIT subprogram was not called before.
  45++8AC7
  46++8AC7              ;Call MUTE or INIT one more time to mute sound after stopping
  47++8AC7              ;playing
  48++8AC7
  49++8AC7              ;Test codes (commented)
  50++8AC7              ;	LD A,32 ;SinglePT3(TS if TSPT3.7),ABC,Looped
  51++8AC7              ;	LD (START+10),A
  52++8AC7              ;	LD HL,#8000 ;Mod1
  53++8AC7              ;	LD DE,#A000 ;Mod2 (optional)
  54++8AC7              ;	CALL START+3
  55++8AC7              ;	EI
  56++8AC7              ;_LP	HALT
  57++8AC7              ;	CALL START+5
  58++8AC7              ;	XOR A
  59++8AC7              ;	IN A,(#FE)
  60++8AC7              ;	CPL
  61++8AC7              ;	AND 15
  62++8AC7              ;	JR Z,_LP
  63++8AC7              ;	JR START+8
  64++8AC7
  65++8AC7              TonA	EQU 0
  66++8AC7              TonB	EQU 2
  67++8AC7              TonC	EQU 4
  68++8AC7              Noise	EQU 6
  69++8AC7              Mixer	EQU 7
  70++8AC7              AmplA	EQU 8
  71++8AC7              AmplB	EQU 9
  72++8AC7              AmplC	EQU 10
  73++8AC7              Env	EQU 11
  74++8AC7              EnvTp	EQU 13
  75++8AC7
  76++8AC7              ;Entry and other points
  77++8AC7              ;START initialize playing of modules at MDLADDR (single module)
  78++8AC7              ;START+3 initialization with module address in HL and DE (TS)
  79++8AC7              ;START+5 play one quark
  80++8AC7              ;START+8 mute
  81++8AC7              ;START+10 setup and status flags
  82++8AC7
  83++8AC7              START:
  84++8AC7 21 E2 96     	LD HL,outputBuffer ;DE - address of 2nd module for TS
  85++8ACA 18 3C        	JR INIT
  86++8ACC C3 2B 93     	JP PLAY
  87++8ACF 18 25        	JR MUTE
  88++8AD1 00           SETUP	DB 0 ;set bit0, if you want to play without looping
  89++8AD2              	     ;(optional);
  90++8AD2              	     ;set bit1 for PT2 and reset for PT3 before
  91++8AD2              	     ;calling INIT;
  92++8AD2              	     ;bits2-3: %00-ABC, %01-ACB, %10-BAC (optional);
  93++8AD2              	     ;bits4-5: %00-no TS, %01-2 modules TS, %10-
  94++8AD2              	     ;autodetect PT3 TS-format by AlCo (PT 3.7+);
  95++8AD2              	     ;Remark: old PT3 TS-format by AlCo (PT 3.6) is not
  96++8AD2              	     ;documented and must be converted to new standard.
  97++8AD2              	     ;bit6 is set each time, when loop point of 2nd TS
  98++8AD2              	     ;module is passed (optional).
  99++8AD2              	     ;bit7 is set each time, when loop point of 1st TS
 100++8AD2              	     ;or of single module is passed (optional).
 101++8AD2
 102++8AD2              ;Identifier
 103++8AD2              	IF Id
 104++8AD2 ~            	DB "=UniPT2/PT3/TS-Player r.",Release,"="
 105++8AD2              	ENDIF
 106++8AD2
 107++8AD2              	IF LoopChecker
 108++8AD2 21 D1 8A     CHECKLP	LD HL,SETUP
 109++8AD5 FD CB 9E 46  	BIT 0,(IY-100+VRS.ModNum)
 110++8AD9 28 04        	JR Z,CHL1
 111++8ADB CB F6        	SET 6,(HL)
 112++8ADD 18 02        	JR CHL2
 113++8ADF CB FE        CHL1	SET 7,(HL)
 114++8AE1 CB 46        CHL2	BIT 0,(HL)
 115++8AE3 C8           	RET Z
 116++8AE4 E1           	POP HL
 117++8AE5 FD 34 09     	INC (IY-100+VRS.DelyCnt)
 118++8AE8 FD 34 BA     	INC (IY-100+VRS.ChanA+CHP.NtSkCn)
 119++8AEB AF           	XOR A
 120++8AEC FD 77 1D     	LD (IY-100+VRS.AYREGS+AmplA),A
 121++8AEF FD 77 1E     	LD (IY-100+VRS.AYREGS+AmplB),A
 122++8AF2 FD 77 1F     	LD (IY-100+VRS.AYREGS+AmplC),A
 123++8AF5 C9           	RET
 124++8AF6              	ENDIF
 125++8AF6
 126++8AF6 AF           MUTE: XOR A
 127++8AF7 67           	LD H,A
 128++8AF8 6F           	LD L,A
 129++8AF9 32 80 94     	LD (VARS1+VRS.AYREGS+AmplA),A
 130++8AFC 22 81 94     	LD (VARS1+VRS.AYREGS+AmplB),HL
 131++8AFF 32 07 95     	LD (VARS2+VRS.AYREGS+AmplA),A
 132++8B02 22 08 95     	LD (VARS2+VRS.AYREGS+AmplB),HL
 133++8B05 C3 43 93     	JP ROUT
 134++8B08
 135++8B08              INIT:
 136++8B08              ;HL - AddressOfModule
 137++8B08              ;DE - AddresOf2ndModule
 138++8B08 D5           	PUSH DE
 139++8B09 E5           	PUSH HL
 140++8B0A 21 FE 93     	LD HL,VARS
 141++8B0D 36 00        	LD (HL),0
 142++8B0F 11 FF 93     	LD DE,VARS+1
 143++8B12 01 0E 01     	LD BC,VAR0END-VARS-1
 144++8B15 ED B0        	LDIR
 145++8B17 23           	INC HL
 146++8B18 22 61 94     	LD (VARS1+VRS.AdInPtA),HL ;ptr to zero
 147++8B1B 22 E8 94     	LD (VARS2+VRS.AdInPtA),HL
 148++8B1E
 149++8B1E E1           	POP HL
 150++8B1F FD 21 63 94  	LD IY,VARS1+100
 151++8B23 3A D1 8A     	LD A,(START+10)
 152++8B26 E6 02        	AND 2
 153++8B28 C2 B1 8B     	JP NZ,I_PT2
 154++8B2B
 155++8B2B CD FE 8C     	CALL INITPT3
 156++8B2E 21 18 1F     	LD HL,(e_-SamCnv-2)*256+#18
 157++8B31 22 D1 90     	LD (SamCnv),HL
 158++8B34 3E BA        	LD A,#BA
 159++8B36 32 9C 90     	LD (OrnCP),A
 160++8B39 32 C8 90     	LD (SamCP),A
 161++8B3C 3E 7B        	LD A,#7B
 162++8B3E 32 9F 90     	LD (OrnLD),A
 163++8B41 32 CB 90     	LD (SamLD),A
 164++8B44 3E 87        	LD A,#87
 165++8B46 32 C2 90     	LD (SamClc2),A
 166++8B49 E1           	POP HL
 167++8B4A              	;Use version and ton table of 1st module
 168++8B4A DD 7E A9     	LD A,(IX+13-100) ;EXTRACT VERSION NUMBER
 169++8B4D D6 30        	SUB #30
 170++8B4F 38 04        	JR C,L20
 171++8B51 FE 0A        	CP 10
 172++8B53 38 02        	JR C,L21
 173++8B55 3E 06        L20	LD A,6
 174++8B57 32 6F 8F     L21	LD (Version),A
 175++8B5A F5           	PUSH AF ;VolTable version
 176++8B5B FE 04        	CP 4
 177++8B5D DD 7E FF     	LD A,(IX+99-100) ;TONE TABLE NUMBER
 178++8B60 17           	RLA
 179++8B61 E6 07        	AND 7
 180++8B63 F5           	PUSH AF ;NoteTable number
 181++8B64
 182++8B64 FD 21 EA 94  	LD IY,VARS2+100
 183++8B68 3A D1 8A     	LD A,(START+10)
 184++8B6B E6 30        	AND 48
 185++8B6D 28 37        	JR Z,NOTS
 186++8B6F FE 10        	CP 16
 187++8B71 28 27        	JR Z,TwoPT3s
 188++8B73 3A 6F 8F     	LD A,(Version)
 189++8B76 FE 07        	CP 7
 190++8B78 38 2C        	JR C,NOTS
 191++8B7A DD 7E FE     	LD A,(IX+98-100) ;ALCO TS MARKER
 192++8B7D FE 20        	CP #20
 193++8B7F 28 25        	JR Z,NOTS
 194++8B81 21 FF 93     	LD HL,VARS1
 195++8B84 11 86 94     	LD DE,VARS2
 196++8B87 01 87 00     	LD BC,VRS
 197++8B8A ED B0        	LDIR
 198++8B8C FD CB 9E CE  	SET 1,(IY-100+VRS.ModNum)
 199++8B90 4F           	LD C,A
 200++8B91 87           	ADD A,A
 201++8B92 81           	ADD A,C
 202++8B93 D6 02        	SUB 2
 203++8B95 32 36 92     	LD (TSSub),A
 204++8B98 18 03        	JR AlCoTS_
 205++8B9A CD FE 8C     TwoPT3s	CALL INITPT3
 206++8B9D 3E 01        AlCoTS_	LD A,1
 207++8B9F 32 FE 93     	LD (is_ts),A
 208++8BA2 FD CB 9E C6  	SET 0,(IY-100+VRS.ModNum)
 209++8BA6
 210++8BA6 01 BB 8E     NOTS	LD BC,PT3PD
 211++8BA9 21 00 00     	LD HL,0
 212++8BAC 11 C6 93     	LD DE,PT3EMPTYORN
 213++8BAF 18 48        	JR INITCOMMON
 214++8BB1
 215++8BB1 CD 36 8D     I_PT2	CALL INITPT2
 216++8BB4 21 CB 51     	LD HL,#51CB
 217++8BB7 22 D1 90     	LD (SamCnv),HL
 218++8BBA 3E BB        	LD A,#BB
 219++8BBC 32 9C 90     	LD (OrnCP),A
 220++8BBF 32 C8 90     	LD (SamCP),A
 221++8BC2 3E 7A        	LD A,#7A
 222++8BC4 32 9F 90     	LD (OrnLD),A
 223++8BC7 32 CB 90     	LD (SamLD),A
 224++8BCA 3E 80        	LD A,#80
 225++8BCC 32 C2 90     	LD (SamClc2),A
 226++8BCF E1           	POP HL
 227++8BD0 3E 05        	LD A,5
 228++8BD2 32 6F 8F     	LD (Version),A
 229++8BD5 F5           	PUSH AF
 230++8BD6 3E 02        	LD A,2
 231++8BD8 F5           	PUSH AF
 232++8BD9
 233++8BD9 3A D1 8A     	LD A,(START+10)
 234++8BDC E6 30        	AND 48
 235++8BDE 28 10        	JR Z,NOTS2
 236++8BE0
 237++8BE0 FD 21 EA 94  	LD IY,VARS2+100
 238++8BE4 3E 01        	LD A,1
 239++8BE6 32 FE 93     	LD (is_ts),A
 240++8BE9 FD CB 9E C6  	SET 0,(IY-100+VRS.ModNum)
 241++8BED CD 36 8D     	CALL INITPT2
 242++8BF0
 243++8BF0 01 F5 8D     NOTS2	LD BC,PT2PD
 244++8BF3 21 87 86     	LD HL,#8687
 245++8BF6 11 1C 95     	LD DE,PT2EMPTYORN
 246++8BF9
 247++8BF9              INITCOMMON
 248++8BF9
 249++8BF9              	IF Basic
 250++8BF9 FD 21 3A 5C  	LD IY,#5C3A
 251++8BFD              	ENDIF
 252++8BFD
 253++8BFD ED 43 A6 8D  	LD (PTDEC),BC
 254++8C01 22 38 92     	LD (PsCalc),HL
 255++8C04 D5           	PUSH DE
 256++8C05
 257++8C05              ;note table data depacker
 258++8C05              ;(c) Ivan Roshin
 259++8C05 11 C9 93     	LD DE,T_PACK
 260++8C08 01 6E 95     	LD BC,T1_+(2*49)-1
 261++8C0B 1A           TP_0	LD A,(DE)
 262++8C0C 13           	INC DE
 263++8C0D FE 1E        	CP 15*2
 264++8C0F 30 06        	JR NC,TP_1
 265++8C11 67           	LD H,A
 266++8C12 1A           	LD A,(DE)
 267++8C13 6F           	LD L,A
 268++8C14 13           	INC DE
 269++8C15 18 07        	JR TP_2
 270++8C17 D5           TP_1	PUSH DE
 271++8C18 16 00        	LD D,0
 272++8C1A 5F           	LD E,A
 273++8C1B 19           	ADD HL,DE
 274++8C1C 19           	ADD HL,DE
 275++8C1D D1           	POP DE
 276++8C1E 7C           TP_2	LD A,H
 277++8C1F 02           	LD (BC),A
 278++8C20 0B           	DEC BC
 279++8C21 7D           	LD A,L
 280++8C22 02           	LD (BC),A
 281++8C23 0B           	DEC BC
player.asm(282): warning: value 0x1F0 is truncated to 8bit value: 0xF0
 282++8C24 D6 F0        	SUB #F8*2
 283++8C26 20 E3        	JR NZ,TP_0
 284++8C28
 285++8C28 3C           	INC A
 286++8C29 32 6C 94     	LD (VARS1+VRS.DelyCnt),A
 287++8C2C 32 F3 94     	LD (VARS2+VRS.DelyCnt),A
 288++8C2F 21 01 F0     	LD HL,#F001 ;H - CHP.Volume, L - CHP.NtSkCn
 289++8C32 22 1D 94     	LD (VARS1+VRS.ChanA+CHP.NtSkCn),HL
 290++8C35 22 3A 94     	LD (VARS1+VRS.ChanB+CHP.NtSkCn),HL
 291++8C38 22 57 94     	LD (VARS1+VRS.ChanC+CHP.NtSkCn),HL
 292++8C3B 22 A4 94     	LD (VARS2+VRS.ChanA+CHP.NtSkCn),HL
 293++8C3E 22 C1 94     	LD (VARS2+VRS.ChanB+CHP.NtSkCn),HL
 294++8C41 22 DE 94     	LD (VARS2+VRS.ChanC+CHP.NtSkCn),HL
 295++8C44 E1           	POP HL
 296++8C45 22 0F 94     	LD (VARS1+VRS.ChanA+CHP.OrnPtr),HL
 297++8C48 22 2C 94     	LD (VARS1+VRS.ChanB+CHP.OrnPtr),HL
 298++8C4B 22 49 94     	LD (VARS1+VRS.ChanC+CHP.OrnPtr),HL
 299++8C4E 22 96 94     	LD (VARS2+VRS.ChanA+CHP.OrnPtr),HL
 300++8C51 22 B3 94     	LD (VARS2+VRS.ChanB+CHP.OrnPtr),HL
 301++8C54 22 D0 94     	LD (VARS2+VRS.ChanC+CHP.OrnPtr),HL
 302++8C57
 303++8C57 F1           	POP AF
 304++8C58
 305++8C58              ;NoteTableCreator (c) Ivan Roshin
 306++8C58              ;A - NoteTableNumber*2+VersionForNoteTable
 307++8C58              ;(xx1b - 3.xx..3.4r, xx0b - 3.4x..3.6x..VTII1.0)
 308++8C58
 309++8C58 21 76 93     	LD HL,NT_DATA
 310++8C5B 16 00        	LD D,0
 311++8C5D 87           	ADD A,A
 312++8C5E 5F           	LD E,A
 313++8C5F 19           	ADD HL,DE
 314++8C60 5E           	LD E,(HL)
 315++8C61 23           	INC HL
 316++8C62 CB 3B        	SRL E
 317++8C64 9F           	SBC A,A
 318++8C65 E6 A7        	AND #A7 ;#00 (NOP) or #A7 (AND A)
 319++8C67 32 8F 8C     	LD (L3),A
 320++8C6A EB           	EX DE,HL
 321++8C6B 01 0D 95     	LD BC,T1_
 322++8C6E 09           	ADD HL,BC
 323++8C6F
 324++8C6F 1A           	LD A,(DE)
player.asm(325): warning: value 0x9386 is truncated to 8bit value: 0x86
 325++8C70 C6 86        	ADD A,T_
 326++8C72 4F           	LD C,A
 327++8C73 CE 93        	ADC A,T_/256
 328++8C75 91           	SUB C
 329++8C76 47           	LD B,A
 330++8C77 C5           	PUSH BC
 331++8C78 11 FD 95     	LD DE,NT_
 332++8C7B D5           	PUSH DE
 333++8C7C
 334++8C7C 06 0C        	LD B,12
 335++8C7E C5           L1	PUSH BC
 336++8C7F 4E           	LD C,(HL)
 337++8C80 23           	INC HL
 338++8C81 E5           	PUSH HL
 339++8C82 46           	LD B,(HL)
 340++8C83
 341++8C83 D5           	PUSH DE
 342++8C84 EB           	EX DE,HL
 343++8C85 11 17 00     	LD DE,23
 344++8C88 DD 26 08     	LD IXH,8
 345++8C8B
 346++8C8B CB 38        L2	SRL B
 347++8C8D CB 19        	RR C
 348++8C8F 19           L3	DB #19	;AND A or NOP
 349++8C90 79           	LD A,C
 350++8C91 8A           	ADC A,D	;=ADC 0
 351++8C92 77           	LD (HL),A
 352++8C93 23           	INC HL
 353++8C94 78           	LD A,B
 354++8C95 8A           	ADC A,D
 355++8C96 77           	LD (HL),A
 356++8C97 19           	ADD HL,DE
 357++8C98 DD 25        	DEC IXH
 358++8C9A 20 EF        	JR NZ,L2
 359++8C9C
 360++8C9C D1           	POP DE
 361++8C9D 13           	INC DE
 362++8C9E 13           	INC DE
 363++8C9F E1           	POP HL
 364++8CA0 23           	INC HL
 365++8CA1 C1           	POP BC
 366++8CA2 10 DA        	DJNZ L1
 367++8CA4
 368++8CA4 E1           	POP HL
 369++8CA5 D1           	POP DE
 370++8CA6
 371++8CA6 7B           	LD A,E
player.asm(372): warning: value 0x9392 is truncated to 8bit value: 0x92
 372++8CA7 FE 92        	CP TCOLD_1
 373++8CA9 20 05        	JR NZ,CORR_1
 374++8CAB 3E FD        	LD A,#FD
 375++8CAD 32 2B 96     	LD (NT_+#2E),A
 376++8CB0
 377++8CB0 1A           CORR_1	LD A,(DE)
 378++8CB1 A7           	AND A
 379++8CB2 28 11        	JR Z,TC_EXIT
 380++8CB4 1F           	RRA
 381++8CB5 F5           	PUSH AF
 382++8CB6 87           	ADD A,A
 383++8CB7 4F           	LD C,A
 384++8CB8 09           	ADD HL,BC
 385++8CB9 F1           	POP AF
 386++8CBA 30 02        	JR NC,CORR_2
 387++8CBC 35           	DEC (HL)
 388++8CBD 35           	DEC (HL)
 389++8CBE 34           CORR_2	INC (HL)
 390++8CBF A7           	AND A
 391++8CC0 ED 42        	SBC HL,BC
 392++8CC2 13           	INC DE
 393++8CC3 18 EB        	JR CORR_1
 394++8CC5
 395++8CC5              TC_EXIT
 396++8CC5
 397++8CC5 F1           	POP AF
 398++8CC6
 399++8CC6              ;VolTableCreator (c) Ivan Roshin
 400++8CC6              ;A - VersionForVolumeTable (0..4 - 3.xx..3.4x;
 401++8CC6              			   ;5.. - 2.x,3.5x..3.6x..VTII1.0)
 402++8CC6
 403++8CC6 FE 05        	CP 5
 404++8CC8 21 11 00     	LD HL,#11
 405++8CCB 54           	LD D,H
 406++8CCC 5C           	LD E,H
 407++8CCD 3E 17        	LD A,#17
 408++8CCF 30 03        	JR NC,M1
 409++8CD1 2D           	DEC L
 410++8CD2 5D           	LD E,L
 411++8CD3 AF           	XOR A
 412++8CD4 32 E5 8C     M1      LD (M2),A
 413++8CD7
 414++8CD7 DD 21 0D 95  	LD IX,VT_+16
 415++8CDB
 416++8CDB 0E 0F        	LD C,#F
 417++8CDD E5           INITV2  PUSH HL
 418++8CDE
 419++8CDE 19           	ADD HL,DE
 420++8CDF EB           	EX DE,HL
 421++8CE0 ED 62        	SBC HL,HL
 422++8CE2
 423++8CE2 06 10        	LD B,#10
 424++8CE4 7D           INITV1  LD A,L
 425++8CE5 7D           M2      DB #7D
 426++8CE6 7C           	LD A,H
 427++8CE7 CE 00        	ADC A,0
 428++8CE9 DD 77 00     	LD (IX),A
 429++8CEC DD 23        	INC IX
 430++8CEE 19           	ADD HL,DE
 431++8CEF 10 F3        	DJNZ INITV1
 432++8CF1
 433++8CF1 E1           	POP HL
 434++8CF2 7B           	LD A,E
 435++8CF3 FE 77        	CP #77
 436++8CF5 20 01        	JR NZ,M3
 437++8CF7 1C           	INC E
 438++8CF8 0D           M3      DEC C
 439++8CF9 20 E2        	JR NZ,INITV2
 440++8CFB
 441++8CFB C3 43 93     	JP ROUT
 442++8CFE
 443++8CFE CD 71 8D     INITPT3	CALL SETMDAD
 444++8D01 E5           	PUSH HL
 445++8D02 11 64 00     	LD DE,100
 446++8D05 19           	ADD HL,DE
 447++8D06 7E           	LD A,(HL)
 448++8D07 FD 77 08     	LD (IY-100+VRS.Delay),A
 449++8D0A E5           	PUSH HL
 450++8D0B DD E1        	POP IX
 451++8D0D 19           	ADD HL,DE
 452++8D0E CD 7F 8D     	CALL SETCPPT
 453++8D11 DD 5E 02     	LD E,(IX+102-100)
 454++8D14 23           	INC HL
 455++8D15
 456++8D15              	IF CurPosCounter
 457++8D15 ~            	LD (IY-100+VRS.PosSub),L
 458++8D15              	ENDIF
 459++8D15
 460++8D15 19           	ADD HL,DE
 461++8D16 CD 86 8D     	CALL SETLPPT
 462++8D19 D1           	POP DE
 463++8D1A DD 6E 03     	LD L,(IX+103-100)
 464++8D1D DD 66 04     	LD H,(IX+104-100)
 465++8D20 19           	ADD HL,DE
 466++8D21 CD 6A 8D     	CALL SETPTPT
 467++8D24 21 A9 00     	LD HL,169
 468++8D27 19           	ADD HL,DE
 469++8D28 CD 78 8D     	CALL SETORPT
 470++8D2B 21 69 00     	LD HL,105
 471++8D2E 19           	ADD HL,DE
 472++8D2F
 473++8D2F FD 75 FA     SETSMPT LD (IY-100+VRS.SamPtrs),L
 474++8D32 FD 74 FB     	LD (IY-100+VRS.SamPtrs+1),H
 475++8D35 C9           	RET
 476++8D36
 477++8D36 7E           INITPT2	LD A,(HL)
 478++8D37 FD 77 08     	LD (IY-100+VRS.Delay),A
 479++8D3A E5           	PUSH HL
 480++8D3B E5           	PUSH HL
 481++8D3C E5           	PUSH HL
 482++8D3D 23           	INC HL
 483++8D3E 23           	INC HL
 484++8D3F 7E           	LD A,(HL)
 485++8D40 23           	INC HL
 486++8D41 CD 2F 8D     	CALL SETSMPT
 487++8D44 5E           	LD E,(HL)
 488++8D45 23           	INC HL
 489++8D46 56           	LD D,(HL)
 490++8D47 E1           	POP HL
 491++8D48 A7           	AND A
 492++8D49 ED 52        	SBC HL,DE
 493++8D4B CD 71 8D     	CALL SETMDAD
 494++8D4E E1           	POP HL
 495++8D4F 11 43 00     	LD DE,67
 496++8D52 19           	ADD HL,DE
 497++8D53 CD 78 8D     	CALL SETORPT
 498++8D56 1E 20        	LD E,32
 499++8D58 19           	ADD HL,DE
 500++8D59 4E           	LD C,(HL)
 501++8D5A 23           	INC HL
 502++8D5B 46           	LD B,(HL)
 503++8D5C 1E 1E        	LD E,30
 504++8D5E 19           	ADD HL,DE
 505++8D5F CD 7F 8D     	CALL SETCPPT
 506++8D62 5F           	LD E,A
 507++8D63 23           	INC HL
 508++8D64
 509++8D64              	IF CurPosCounter
 510++8D64 ~            	LD (IY-100+VRS.PosSub),L
 511++8D64              	ENDIF
 512++8D64
 513++8D64 19           	ADD HL,DE
 514++8D65 CD 86 8D     	CALL SETLPPT
 515++8D68 E1           	POP HL
 516++8D69 09           	ADD HL,BC
 517++8D6A
 518++8D6A FD 75 FC     SETPTPT	LD (IY-100+VRS.PatsPtr),L
 519++8D6D FD 74 FD     	LD (IY-100+VRS.PatsPtr+1),H
 520++8D70 C9           	RET
 521++8D71
 522++8D71 FD 75 F6     SETMDAD	LD (IY-100+VRS.MODADDR),L
 523++8D74 FD 74 F7     	LD (IY-100+VRS.MODADDR+1),H
 524++8D77 C9           	RET
 525++8D78
 526++8D78 FD 75 F8     SETORPT	LD (IY-100+VRS.OrnPtrs),L
 527++8D7B FD 74 F9     	LD (IY-100+VRS.OrnPtrs+1),H
 528++8D7E C9           	RET
 529++8D7F
 530++8D7F FD 75 04     SETCPPT	LD (IY-100+VRS.CrPsPtr),L
 531++8D82 FD 74 05     	LD (IY-100+VRS.CrPsPtr+1),H
 532++8D85 C9           	RET
 533++8D86
 534++8D86 FD 75 06     SETLPPT	LD (IY-100+VRS.LPosPtr),L
 535++8D89 FD 74 07     	LD (IY-100+VRS.LPosPtr+1),H
 536++8D8C C9           	RET
 537++8D8D
 538++8D8D FD 75 13     SETENBS	LD (IY-100+VRS.EnvBase),L
 539++8D90 FD 74 14     	LD (IY-100+VRS.EnvBase+1),H
 540++8D93 C9           	RET
 541++8D94
 542++8D94 FD 75 0C     SETESLD	LD (IY-100+VRS.CurESld),L
 543++8D97 FD 74 0D     	LD (IY-100+VRS.CurESld+1),H
 544++8D9A C9           	RET
 545++8D9B
 546++8D9B FD E5        GETIX	PUSH IY
 547++8D9D DD E1        	POP IX
 548++8D9F DD 19        	ADD IX,DE
 549++8DA1 C9           	RET
 550++8DA2
 551++8DA2 CD 9B 8D     PTDECOD CALL GETIX
 552++8DA5              PTDEC	EQU $+1
 553++8DA5 C3 C3 C3     	JP #C3C3
 554++8DA8
 555++8DA8              ;PT2 pattern decoder
 556++8DA8 CD 3E 90     PD2_SAM	CALL SETSAM
 557++8DAB 18 4A        	JR PD2_LOOP
 558++8DAD
 559++8DAD DD 77 08     PD2_EOff LD (IX-12+CHP.Env_En),A
 560++8DB0 18 45        	JR PD2_LOOP
 561++8DB2
 562++8DB2 DD 36 08 10  PD2_ENV	LD (IX-12+CHP.Env_En),16
 563++8DB6 FD 77 22     	LD (IY-100+VRS.AYREGS+EnvTp),A
 564++8DB9 0A           	LD A,(BC)
 565++8DBA 03           	INC BC
 566++8DBB 6F           	LD L,A
 567++8DBC 0A           	LD A,(BC)
 568++8DBD 03           	INC BC
 569++8DBE 67           	LD H,A
 570++8DBF CD 8D 8D     	CALL SETENBS
 571++8DC2 18 33        	JR PD2_LOOP
 572++8DC4
 573++8DC4 CD 1F 90     PD2_ORN	CALL SETORN
 574++8DC7 18 2E        	JR PD2_LOOP
 575++8DC9
 576++8DC9 3C           PD2_SKIP INC A
 577++8DCA DD 77 05     	LD (IX-12+CHP.NNtSkp),A
 578++8DCD 18 28        	JR PD2_LOOP
 579++8DCF
 580++8DCF 0F           PD2_VOL	RRCA
 581++8DD0 0F           	RRCA
 582++8DD1 0F           	RRCA
 583++8DD2 0F           	RRCA
 584++8DD3 DD 77 10     	LD (IX-12+CHP.Volume),A
 585++8DD6 18 1F        	JR PD2_LOOP
 586++8DD8
 587++8DD8 CD EF 8F     PD2_DEL	CALL C_DELAY
 588++8DDB 18 1A        	JR PD2_LOOP
 589++8DDD
 590++8DDD DD CB 09 D6  PD2_GLIS SET 2,(IX-12+CHP.Flags)
 591++8DE1 3C           	INC A
 592++8DE2 DD 77 0A     	LD (IX-12+CHP.TnSlDl),A
 593++8DE5 DD 77 F9     	LD (IX-12+CHP.TSlCnt),A
 594++8DE8 0A           	LD A,(BC)
 595++8DE9 03           	INC BC
 596++8DEA DD 77 0B             LD (IX-12+CHP.TSlStp),A
 597++8DED 87           	ADD A,A
 598++8DEE 9F           	SBC A,A
 599++8DEF DD 77 0C             LD (IX-12+CHP.TSlStp+1),A
 600++8DF2 37           	SCF
 601++8DF3 18 01        	JR PD2_LP2
 602++8DF5
 603++8DF5 A7           PT2PD	AND A
 604++8DF6
 605++8DF6 08           PD2_LP2	EX AF,AF'
 606++8DF7
 607++8DF7 0A           PD2_LOOP LD A,(BC)
 608++8DF8 03           	INC BC
 609++8DF9 C6 20        	ADD A,#20
 610++8DFB 28 3F        	JR Z,PD2_REL
 611++8DFD 38 A9        	JR C,PD2_SAM
 612++8DFF C6 60        	ADD A,96
 613++8E01 38 3E        	JR C,PD2_NOTE
 614++8E03 3C           	INC A
 615++8E04 28 A7        	JR Z,PD2_EOff
 616++8E06 C6 0F        	ADD A,15
 617++8E08 CA 1E 8F     	JP Z,PD_FIN
 618++8E0B 38 A5        	JR C,PD2_ENV
 619++8E0D C6 10        	ADD A,#10
 620++8E0F 38 B3        	JR C,PD2_ORN
 621++8E11 C6 40        	ADD A,#40
 622++8E13 38 B4        	JR C,PD2_SKIP
 623++8E15 C6 10        	ADD A,#10
 624++8E17 38 B6        	JR C,PD2_VOL
 625++8E19 3C           	INC A
 626++8E1A 28 BC        	JR Z,PD2_DEL
 627++8E1C 3C           	INC A
 628++8E1D 28 BE        	JR Z,PD2_GLIS
 629++8E1F 3C           	INC A
 630++8E20 28 0A        	JR Z,PD2_PORT
 631++8E22 3C           	INC A
 632++8E23 28 12        	JR Z,PD2_STOP
 633++8E25 0A           	LD A,(BC)
 634++8E26 03           	INC BC
 635++8E27 DD 77 F7     	LD (IX-12+CHP.CrNsSl),A
 636++8E2A 18 CB        	JR PD2_LOOP
 637++8E2C
 638++8E2C DD CB 09 96  PD2_PORT RES 2,(IX-12+CHP.Flags)
 639++8E30 0A           	LD A,(BC)
 640++8E31 03           	INC BC
 641++8E32 03           	INC BC ;ignoring precalc delta to right sound
 642++8E33 03           	INC BC
 643++8E34 37           	SCF
 644++8E35 18 BF        	JR PD2_LP2
 645++8E37
 646++8E37 DD 77 F9     PD2_STOP LD (IX-12+CHP.TSlCnt),A
 647++8E3A 18 BB        	JR PD2_LOOP
 648++8E3C
 649++8E3C DD 77 09     PD2_REL	LD (IX-12+CHP.Flags),A
 650++8E3F 18 2C        	JR PD2_EXIT
 651++8E41
 652++8E41 6F           PD2_NOTE LD L,A
 653++8E42 DD 7E 06     	LD A,(IX-12+CHP.Note)
 654++8E45 32 58 8F     	LD (PrNote+1),A
 655++8E48 DD 75 06     	LD (IX-12+CHP.Note),L
 656++8E4B AF           	XOR A
 657++8E4C DD 77 F9     	LD (IX-12+CHP.TSlCnt),A
 658++8E4F DD CB 09 C6  	SET 0,(IX-12+CHP.Flags)
 659++8E53 08           	EX AF,AF'
 660++8E54 30 16        	JR NC,NOGLIS2
 661++8E56 DD CB 09 56  	BIT 2,(IX-12+CHP.Flags)
 662++8E5A 20 0C        	JR NZ,NOPORT2
 663++8E5C 32 7E 8F     	LD (LoStep),A
 664++8E5F 87           	ADD A,A
 665++8E60 9F           	SBC A,A
 666++8E61 08           	EX AF,AF'
 667++8E62 67           	LD H,A
 668++8E63 6F           	LD L,A
 669++8E64 3C           	INC A
 670++8E65 CD 39 8F     	CALL SETPORT
 671++8E68 DD 36 F9 01  NOPORT2	LD (IX-12+CHP.TSlCnt),1
 672++8E6C AF           NOGLIS2	XOR A
 673++8E6D
 674++8E6D
 675++8E6D DD 77 F5     PD2_EXIT LD (IX-12+CHP.PsInSm),A
 676++8E70 DD 77 F4     	LD (IX-12+CHP.PsInOr),A
 677++8E73 DD 77 FA     	LD (IX-12+CHP.CrTnSl),A
 678++8E76 DD 77 FB     	LD (IX-12+CHP.CrTnSl+1),A
 679++8E79 C3 1E 8F     	JP PD_FIN
 680++8E7C
 681++8E7C              ;PT3 pattern decoder
 682++8E7C DD 36 08 00  PD_OrSm	LD (IX-12+CHP.Env_En),0
 683++8E80 CD 1F 90     	CALL SETORN
 684++8E83 0A           PD_SAM_	LD A,(BC)
 685++8E84 03           	INC BC
 686++8E85 0F           	RRCA
 687++8E86
 688++8E86 CD 3E 90     PD_SAM	CALL SETSAM
 689++8E89 18 3F        	JR PD_LOOP
 690++8E8B
 691++8E8B 0F           PD_VOL	RRCA
 692++8E8C 0F           	RRCA
 693++8E8D 0F           	RRCA
 694++8E8E 0F           	RRCA
 695++8E8F DD 77 10     	LD (IX-12+CHP.Volume),A
 696++8E92 18 39        	JR PD_LP2
 697++8E94
 698++8E94 DD 77 08     PD_EOff	LD (IX-12+CHP.Env_En),A
 699++8E97 DD 77 F4     	LD (IX-12+CHP.PsInOr),A
 700++8E9A 18 31        	JR PD_LP2
 701++8E9C
 702++8E9C 3D           PD_SorE	DEC A
 703++8E9D 20 07        	JR NZ,PD_ENV
 704++8E9F 0A           	LD A,(BC)
 705++8EA0 03           	INC BC
 706++8EA1 DD 77 05     	LD (IX-12+CHP.NNtSkp),A
 707++8EA4 18 27        	JR PD_LP2
 708++8EA6
 709++8EA6 CD 04 90     PD_ENV	CALL SETENV
 710++8EA9 18 22        	JR PD_LP2
 711++8EAB
 712++8EAB CD 1F 90     PD_ORN	CALL SETORN
 713++8EAE 18 1A        	JR PD_LOOP
 714++8EB0
 715++8EB0 DD 77 08     PD_ESAM	LD (IX-12+CHP.Env_En),A
 716++8EB3 DD 77 F4     	LD (IX-12+CHP.PsInOr),A
 717++8EB6 C4 04 90     	CALL NZ,SETENV
 718++8EB9 18 C8        	JR PD_SAM_
 719++8EBB
 720++8EBB DD 7E 06     PT3PD	LD A,(IX-12+CHP.Note)
 721++8EBE 32 58 8F     	LD (PrNote+1),A
 722++8EC1 DD 6E FA     	LD L,(IX-12+CHP.CrTnSl)
 723++8EC4 DD 66 FB     	LD H,(IX-12+CHP.CrTnSl+1)
 724++8EC7 22 75 8F     	LD (PrSlide+1),HL
 725++8ECA
 726++8ECA 11 10 20     PD_LOOP	LD DE,#2010
 727++8ECD 0A           PD_LP2	LD A,(BC)
 728++8ECE 03           	INC BC
 729++8ECF 83           	ADD A,E
 730++8ED0 38 AA        	JR C,PD_OrSm
 731++8ED2 82           	ADD A,D
 732++8ED3 28 49        	JR Z,PD_FIN
 733++8ED5 38 AF        	JR C,PD_SAM
 734++8ED7 83           	ADD A,E
 735++8ED8 28 25        	JR Z,PD_REL
 736++8EDA 38 AF        	JR C,PD_VOL
 737++8EDC 83           	ADD A,E
 738++8EDD 28 B5        	JR Z,PD_EOff
 739++8EDF 38 BB        	JR C,PD_SorE
 740++8EE1 C6 60        	ADD A,96
 741++8EE3 38 20        	JR C,PD_NOTE
 742++8EE5 83           	ADD A,E
 743++8EE6 38 C3        	JR C,PD_ORN
 744++8EE8 82           	ADD A,D
 745++8EE9 38 0F        	JR C,PD_NOIS
 746++8EEB 83           	ADD A,E
 747++8EEC 38 C2        	JR C,PD_ESAM
 748++8EEE 87           	ADD A,A
 749++8EEF 5F           	LD E,A
player.asm(750): warning: value 0x16F7A is truncated to 16bit value: 0x6F7A
 750++8EF0 21 7A 6F     	LD HL,SPCCOMS+#FF20-#2000
 751++8EF3 19           	ADD HL,DE
 752++8EF4 5E           	LD E,(HL)
 753++8EF5 23           	INC HL
 754++8EF6 56           	LD D,(HL)
 755++8EF7 D5           	PUSH DE
 756++8EF8 18 D0        	JR PD_LOOP
 757++8EFA
 758++8EFA FD 77 10     PD_NOIS	LD (IY-100+VRS.Ns_Base),A
 759++8EFD 18 CE        	JR PD_LP2
 760++8EFF
 761++8EFF DD CB 09 86  PD_REL	RES 0,(IX-12+CHP.Flags)
 762++8F03 18 08        	JR PD_RES
 763++8F05
 764++8F05 DD 77 06     PD_NOTE	LD (IX-12+CHP.Note),A
 765++8F08 DD CB 09 C6  	SET 0,(IX-12+CHP.Flags)
 766++8F0C AF           	XOR A
 767++8F0D
 768++8F0D ED 73 1C 8F  PD_RES	LD (PDSP_+1),SP
 769++8F11 DD F9        	LD SP,IX
 770++8F13 67           	LD H,A
 771++8F14 6F           	LD L,A
 772++8F15 E5           	PUSH HL
 773++8F16 E5           	PUSH HL
 774++8F17 E5           	PUSH HL
 775++8F18 E5           	PUSH HL
 776++8F19 E5           	PUSH HL
 777++8F1A E5           	PUSH HL
 778++8F1B 31 31 31     PDSP_	LD SP,#3131
 779++8F1E
 780++8F1E DD 7E 05     PD_FIN	LD A,(IX-12+CHP.NNtSkp)
 781++8F21 DD 77 0F     	LD (IX-12+CHP.NtSkCn),A
 782++8F24 C9           	RET
 783++8F25
 784++8F25 0A           C_PORTM LD A,(BC)
 785++8F26 03           	INC BC
 786++8F27              ;SKIP PRECALCULATED TONE DELTA (BECAUSE
 787++8F27              ;CANNOT BE RIGHT AFTER PT3 COMPILATION)
 788++8F27 03           	INC BC
 789++8F28 03           	INC BC
 790++8F29 08           	EX AF,AF'
 791++8F2A 0A           	LD A,(BC) ;SIGNED TONE STEP
 792++8F2B 03           	INC BC
 793++8F2C 32 7E 8F     	LD (LoStep),A
 794++8F2F 0A           	LD A,(BC)
 795++8F30 03           	INC BC
 796++8F31 A7           	AND A
 797++8F32 08           	EX AF,AF'
 798++8F33 DD 6E FA     	LD L,(IX-12+CHP.CrTnSl)
 799++8F36 DD 66 FB     	LD H,(IX-12+CHP.CrTnSl+1)
 800++8F39
 801++8F39              ;Set portamento variables
 802++8F39              ;A - Delay; A' - Hi(Step); ZF' - (A'=0); HL - CrTnSl
 803++8F39
 804++8F39 DD CB 09 96  SETPORT	RES 2,(IX-12+CHP.Flags)
 805++8F3D DD 77 0A     	LD (IX-12+CHP.TnSlDl),A
 806++8F40 DD 77 F9     	LD (IX-12+CHP.TSlCnt),A
 807++8F43 E5           	PUSH HL
 808++8F44 11 FD 95     	LD DE,NT_
 809++8F47 DD 7E 06     	LD A,(IX-12+CHP.Note)
 810++8F4A DD 77 07     	LD (IX-12+CHP.SlToNt),A
 811++8F4D 87           	ADD A,A
 812++8F4E 6F           	LD L,A
 813++8F4F 26 00        	LD H,0
 814++8F51 19           	ADD HL,DE
 815++8F52 7E           	LD A,(HL)
 816++8F53 23           	INC HL
 817++8F54 66           	LD H,(HL)
 818++8F55 6F           	LD L,A
 819++8F56 E5           	PUSH HL
 820++8F57 3E 3E        PrNote	LD A,#3E
 821++8F59 DD 77 06     	LD (IX-12+CHP.Note),A
 822++8F5C 87           	ADD A,A
 823++8F5D 6F           	LD L,A
 824++8F5E 26 00        	LD H,0
 825++8F60 19           	ADD HL,DE
 826++8F61 5E           	LD E,(HL)
 827++8F62 23           	INC HL
 828++8F63 56           	LD D,(HL)
 829++8F64 E1           	POP HL
 830++8F65 ED 52        	SBC HL,DE
 831++8F67 DD 75 0D     	LD (IX-12+CHP.TnDelt),L
 832++8F6A DD 74 0E     	LD (IX-12+CHP.TnDelt+1),H
 833++8F6D D1           	POP DE
 834++8F6E              Version EQU $+1
 835++8F6E 3E 3E        	LD A,#3E
 836++8F70 FE 06        	CP 6
 837++8F72 38 09        	JR C,OLDPRTM ;Old 3xxx for PT v3.5-
 838++8F74 11 11 11     PrSlide	LD DE,#1111
 839++8F77 DD 73 FA     	LD (IX-12+CHP.CrTnSl),E
 840++8F7A DD 72 FB     	LD (IX-12+CHP.CrTnSl+1),D
 841++8F7D              LoStep	EQU $+1
 842++8F7D 3E 3E        OLDPRTM	LD A,#3E
 843++8F7F 08           	EX AF,AF'
 844++8F80 28 01        	JR Z,NOSIG
 845++8F82 EB           	EX DE,HL
 846++8F83 ED 52        NOSIG	SBC HL,DE
 847++8F85 F2 8D 8F     	JP P,SET_STP
 848++8F88 2F           	CPL
 849++8F89 08           	EX AF,AF'
 850++8F8A ED 44        	NEG
 851++8F8C 08           	EX AF,AF'
 852++8F8D DD 77 0C     SET_STP	LD (IX-12+CHP.TSlStp+1),A
 853++8F90 08           	EX AF,AF'
 854++8F91 DD 77 0B     	LD (IX-12+CHP.TSlStp),A
 855++8F94 DD 36 FE 00  	LD (IX-12+CHP.COnOff),0
 856++8F98 C9           	RET
 857++8F99
 858++8F99 DD CB 09 D6  C_GLISS	SET 2,(IX-12+CHP.Flags)
 859++8F9D 0A           	LD A,(BC)
 860++8F9E 03           	INC BC
 861++8F9F DD 77 0A     	LD (IX-12+CHP.TnSlDl),A
 862++8FA2 A7           	AND A
 863++8FA3 20 07        	JR NZ,GL36
 864++8FA5 3A 6F 8F     	LD A,(Version) ;AlCo PT3.7+
 865++8FA8 FE 07        	CP 7
 866++8FAA 9F           	SBC A,A
 867++8FAB 3C           	INC A
 868++8FAC DD 77 F9     GL36	LD (IX-12+CHP.TSlCnt),A
 869++8FAF 0A           	LD A,(BC)
 870++8FB0 03           	INC BC
 871++8FB1 08           	EX AF,AF'
 872++8FB2 0A           	LD A,(BC)
 873++8FB3 03           	INC BC
 874++8FB4 18 D7        	JR SET_STP
 875++8FB6
 876++8FB6 0A           C_SMPOS	LD A,(BC)
 877++8FB7 03           	INC BC
 878++8FB8 DD 77 F5     	LD (IX-12+CHP.PsInSm),A
 879++8FBB C9           	RET
 880++8FBC
 881++8FBC 0A           C_ORPOS	LD A,(BC)
 882++8FBD 03           	INC BC
 883++8FBE DD 77 F4     	LD (IX-12+CHP.PsInOr),A
 884++8FC1 C9           	RET
 885++8FC2
 886++8FC2 0A           C_VIBRT	LD A,(BC)
 887++8FC3 03           	INC BC
 888++8FC4 DD 77 FF     	LD (IX-12+CHP.OnOffD),A
 889++8FC7 DD 77 FE     	LD (IX-12+CHP.COnOff),A
 890++8FCA 0A           	LD A,(BC)
 891++8FCB 03           	INC BC
 892++8FCC DD 77 00     	LD (IX-12+CHP.OffOnD),A
 893++8FCF AF           	XOR A
 894++8FD0 DD 77 F9     	LD (IX-12+CHP.TSlCnt),A
 895++8FD3 DD 77 FA     	LD (IX-12+CHP.CrTnSl),A
 896++8FD6 DD 77 FB     	LD (IX-12+CHP.CrTnSl+1),A
 897++8FD9 C9           	RET
 898++8FDA
 899++8FDA 0A           C_ENGLS	LD A,(BC)
 900++8FDB 03           	INC BC
 901++8FDC FD 77 0E     	LD (IY-100+VRS.Env_Del),A
 902++8FDF FD 77 0F     	LD (IY-100+VRS.CurEDel),A
 903++8FE2 0A           	LD A,(BC)
 904++8FE3 03           	INC BC
 905++8FE4 6F           	LD L,A
 906++8FE5 0A           	LD A,(BC)
 907++8FE6 03           	INC BC
 908++8FE7 67           	LD H,A
 909++8FE8 FD 75 0A     	LD (IY-100+VRS.ESldAdd),L
 910++8FEB FD 74 0B     	LD (IY-100+VRS.ESldAdd+1),H
 911++8FEE C9           	RET
 912++8FEF
 913++8FEF 0A           C_DELAY	LD A,(BC)
 914++8FF0 03           	INC BC
 915++8FF1 FD 77 08     	LD (IY-100+VRS.Delay),A
 916++8FF4 21 88 94     	LD HL,VARS2+VRS.ModNum ;if AlCo_TS
 917++8FF7 CB 4E        	BIT 1,(HL)
 918++8FF9 C8           	RET Z
 919++8FFA 32 6B 94     	LD (VARS1+VRS.Delay),A
 920++8FFD 32 6C 94     	LD (VARS1+VRS.DelyCnt),A
 921++9000 32 F2 94     	LD (VARS2+VRS.Delay),A
 922++9003 C9           	RET
 923++9004
 924++9004 DD 73 08     SETENV	LD (IX-12+CHP.Env_En),E
 925++9007 FD 77 22     	LD (IY-100+VRS.AYREGS+EnvTp),A
 926++900A 0A           	LD A,(BC)
 927++900B 03           	INC BC
 928++900C 67           	LD H,A
 929++900D 0A           	LD A,(BC)
 930++900E 03           	INC BC
 931++900F 6F           	LD L,A
 932++9010 CD 8D 8D     	CALL SETENBS
 933++9013 AF           	XOR A
 934++9014 DD 77 F4     	LD (IX-12+CHP.PsInOr),A
 935++9017 FD 77 0F     	LD (IY-100+VRS.CurEDel),A
 936++901A 67           	LD H,A
 937++901B 6F           	LD L,A
 938++901C C3 94 8D     	JP SETESLD
 939++901F
 940++901F 87           SETORN	ADD A,A
 941++9020 5F           	LD E,A
 942++9021 16 00        	LD D,0
 943++9023 DD 72 F4     	LD (IX-12+CHP.PsInOr),D
 944++9026 FD 6E F8     	LD L,(IY-100+VRS.OrnPtrs)
 945++9029 FD 66 F9     	LD H,(IY-100+VRS.OrnPtrs+1)
 946++902C 19           	ADD HL,DE
 947++902D 5E           	LD E,(HL)
 948++902E 23           	INC HL
 949++902F 56           	LD D,(HL)
 950++9030 FD 6E F6     	LD L,(IY-100+VRS.MODADDR)
 951++9033 FD 66 F7     	LD H,(IY-100+VRS.MODADDR+1)
 952++9036 19           	ADD HL,DE
 953++9037 DD 75 01     	LD (IX-12+CHP.OrnPtr),L
 954++903A DD 74 02     	LD (IX-12+CHP.OrnPtr+1),H
 955++903D C9           C_NOP	RET
 956++903E
 957++903E 87           SETSAM	ADD A,A
 958++903F 5F           	LD E,A
 959++9040 16 00        	LD D,0
 960++9042 FD 6E FA     	LD L,(IY-100+VRS.SamPtrs);
 961++9045 FD 66 FB     	LD H,(IY-100+VRS.SamPtrs+1);
 962++9048 19           	ADD HL,DE
 963++9049 5E           	LD E,(HL)
 964++904A 23           	INC HL
 965++904B 56           	LD D,(HL)
 966++904C FD 6E F6     	LD L,(IY-100+VRS.MODADDR)
 967++904F FD 66 F7     	LD H,(IY-100+VRS.MODADDR+1)
 968++9052 19           	ADD HL,DE
 969++9053 DD 75 03     	LD (IX-12+CHP.SamPtr),L
 970++9056 DD 74 04     	LD (IX-12+CHP.SamPtr+1),H
 971++9059 C9           	RET
 972++905A
 973++905A              ;ALL 16 ADDRESSES TO PROTECT FROM BROKEN PT3 MODULES
 974++905A 3D 90        SPCCOMS DW C_NOP
 975++905C 99 8F        	DW C_GLISS
 976++905E 25 8F        	DW C_PORTM
 977++9060 B6 8F        	DW C_SMPOS
 978++9062 BC 8F        	DW C_ORPOS
 979++9064 C2 8F        	DW C_VIBRT
 980++9066 3D 90        	DW C_NOP
 981++9068 3D 90        	DW C_NOP
 982++906A DA 8F        	DW C_ENGLS
 983++906C EF 8F        	DW C_DELAY
 984++906E 3D 90        	DW C_NOP
 985++9070 3D 90        	DW C_NOP
 986++9072 3D 90        	DW C_NOP
 987++9074 3D 90        	DW C_NOP
 988++9076 3D 90        	DW C_NOP
 989++9078 3D 90        	DW C_NOP
 990++907A
 991++907A CD 9B 8D     CHREGS	CALL GETIX
 992++907D AF           	XOR A
 993++907E 32 BA 92     	LD (Ampl),A
 994++9081 DD CB 15 46  	BIT 0,(IX+CHP.Flags)
 995++9085 E5           	PUSH HL
 996++9086 CA CD 91     	JP Z,CH_EXIT
 997++9089 ED 73 17 91  	LD (CSP_+1),SP
 998++908D DD 6E 0D     	LD L,(IX+CHP.OrnPtr)
 999++9090 DD 66 0E     	LD H,(IX+CHP.OrnPtr+1)
1000++9093 F9           	LD SP,HL
1001++9094 D1           	POP DE
1002++9095 67           	LD H,A
1003++9096 DD 7E 00     	LD A,(IX+CHP.PsInOr)
1004++9099 6F           	LD L,A
1005++909A 39           	ADD HL,SP
1006++909B 3C           	INC A
1007++909C              		;PT2	PT3
1008++909C 3C           OrnCP	INC A	;CP E	CP D
1009++909D 38 01        	JR C,CH_ORPS
1010++909F 01           OrnLD	DB 1	;LD A,D	LD A,E
1011++90A0 DD 77 00     CH_ORPS	LD (IX+CHP.PsInOr),A
1012++90A3 DD 7E 12     	LD A,(IX+CHP.Note)
1013++90A6 86           	ADD A,(HL)
1014++90A7 F2 AB 90     	JP P,CH_NTP
1015++90AA AF           	XOR A
1016++90AB FE 60        CH_NTP	CP 96
1017++90AD 38 02        	JR C,CH_NOK
1018++90AF 3E 5F        	LD A,95
1019++90B1 87           CH_NOK	ADD A,A
1020++90B2 08           	EX AF,AF'
1021++90B3 DD 6E 0F     	LD L,(IX+CHP.SamPtr)
1022++90B6 DD 66 10     	LD H,(IX+CHP.SamPtr+1)
1023++90B9 F9           	LD SP,HL
1024++90BA D1           	POP DE
1025++90BB 26 00        	LD H,0
1026++90BD DD 7E 01     	LD A,(IX+CHP.PsInSm)
1027++90C0 47           	LD B,A
1028++90C1 87           	ADD A,A
1029++90C2 87           SamClc2	ADD A,A ;or ADD A,B for PT2
1030++90C3 6F           	LD L,A
1031++90C4 39           	ADD HL,SP
1032++90C5 F9           	LD SP,HL
1033++90C6 78           	LD A,B
1034++90C7 3C           	INC A
1035++90C8              		;PT2	PT3
1036++90C8 3C           SamCP	INC A	;CP E	CP D
1037++90C9 38 01        	JR C,CH_SMPS
1038++90CB 01           SamLD	DB 1	;LD A,D	LD A,E
1039++90CC DD 77 01     CH_SMPS	LD (IX+CHP.PsInSm),A
1040++90CF C1           	POP BC
1041++90D0 E1           	POP HL
1042++90D1
1043++90D1              ;Convert PT2 sample to PT3
1044++90D1              		;PT2		PT3
1045++90D1 E1           SamCnv	POP HL  ;BIT 2,C	JR e_
1046++90D2 E1           	POP HL
1047++90D3 60           	LD H,B
1048++90D4 20 06        	JR NZ,$+8
1049++90D6 EB           	EX DE,HL
1050++90D7 A7           	AND A
1051++90D8 ED 62        	SBC HL,HL
1052++90DA ED 52        	SBC HL,DE
1053++90DC 51           	LD D,C
1054++90DD CB 19        	RR C
1055++90DF 9F           	SBC A,A
1056++90E0 2F           	CPL
1057++90E1 E6 3E        	AND #3E
1058++90E3 CB 19        	RR C
1059++90E5 CB 18        	RR B
1060++90E7 A1           	AND C
1061++90E8 4F           	LD C,A
1062++90E9 78           	LD A,B
1063++90EA 1F           	RRA
1064++90EB 1F           	RRA
1065++90EC CB 1A        	RR D
1066++90EE 1F           	RRA
1067++90EF E6 9F        	AND #9F
1068++90F1 47           	LD B,A
1069++90F2
1070++90F2 DD 5E 08     e_	LD E,(IX+CHP.TnAcc)
1071++90F5 DD 56 09     	LD D,(IX+CHP.TnAcc+1)
1072++90F8 19           	ADD HL,DE
1073++90F9 CB 70        	BIT 6,B
1074++90FB 28 06        	JR Z,CH_NOAC
1075++90FD DD 75 08     	LD (IX+CHP.TnAcc),L
1076++9100 DD 74 09     	LD (IX+CHP.TnAcc+1),H
1077++9103 EB           CH_NOAC EX DE,HL
1078++9104 08           	EX AF,AF'
player.asm(1079): warning: value 0x95FD is truncated to 8bit value: 0xFD
1079++9105 C6 FD        	ADD A,NT_
1080++9107 6F           	LD L,A
1081++9108 CE 95        	ADC A,NT_/256
1082++910A 95           	SUB L
1083++910B 67           	LD H,A
1084++910C F9           	LD SP,HL
1085++910D E1           	POP HL
1086++910E 19           	ADD HL,DE
1087++910F DD 5E 06     	LD E,(IX+CHP.CrTnSl)
1088++9112 DD 56 07     	LD D,(IX+CHP.CrTnSl+1)
1089++9115 19           	ADD HL,DE
1090++9116 31 31 31     CSP_	LD SP,#3131
1091++9119 E3           	EX (SP),HL
1092++911A AF           	XOR A
1093++911B DD B6 05     	OR (IX+CHP.TSlCnt)
1094++911E 28 3E        	JR Z,CH_AMP
1095++9120 DD 35 05     	DEC (IX+CHP.TSlCnt)
1096++9123 20 39        	JR NZ,CH_AMP
1097++9125 DD 7E 16     	LD A,(IX+CHP.TnSlDl)
1098++9128 DD 77 05     	LD (IX+CHP.TSlCnt),A
1099++912B DD 6E 17     	LD L,(IX+CHP.TSlStp)
1100++912E DD 66 18     	LD H,(IX+CHP.TSlStp+1)
1101++9131 7C           	LD A,H
1102++9132 19           	ADD HL,DE
1103++9133 DD 75 06     	LD (IX+CHP.CrTnSl),L
1104++9136 DD 74 07     	LD (IX+CHP.CrTnSl+1),H
1105++9139 DD CB 15 56  	BIT 2,(IX+CHP.Flags)
1106++913D 20 1F        	JR NZ,CH_AMP
1107++913F DD 5E 19     	LD E,(IX+CHP.TnDelt)
1108++9142 DD 56 1A     	LD D,(IX+CHP.TnDelt+1)
1109++9145 A7           	AND A
1110++9146 28 01        	JR Z,CH_STPP
1111++9148 EB           	EX DE,HL
1112++9149 ED 52        CH_STPP SBC HL,DE
1113++914B FA 5E 91     	JP M,CH_AMP
1114++914E DD 7E 13     	LD A,(IX+CHP.SlToNt)
1115++9151 DD 77 12     	LD (IX+CHP.Note),A
1116++9154 AF           	XOR A
1117++9155 DD 77 05     	LD (IX+CHP.TSlCnt),A
1118++9158 DD 77 06     	LD (IX+CHP.CrTnSl),A
1119++915B DD 77 07     	LD (IX+CHP.CrTnSl+1),A
1120++915E DD 7E 02     CH_AMP	LD A,(IX+CHP.CrAmSl)
1121++9161 CB 79        	BIT 7,C
1122++9163 28 13        	JR Z,CH_NOAM
1123++9165 CB 71        	BIT 6,C
1124++9167 28 07        	JR Z,CH_AMIN
1125++9169 FE 0F        	CP 15
1126++916B 28 0B        	JR Z,CH_NOAM
1127++916D 3C           	INC A
1128++916E 18 05        	JR CH_SVAM
1129++9170 FE F1        CH_AMIN	CP -15
1130++9172 28 04        	JR Z,CH_NOAM
1131++9174 3D           	DEC A
1132++9175 DD 77 02     CH_SVAM	LD (IX+CHP.CrAmSl),A
1133++9178 6F           CH_NOAM	LD L,A
1134++9179 78           	LD A,B
1135++917A E6 0F        	AND 15
1136++917C 85           	ADD A,L
1137++917D F2 81 91     	JP P,CH_APOS
1138++9180 AF           	XOR A
1139++9181 FE 10        CH_APOS	CP 16
1140++9183 38 02        	JR C,CH_VOL
1141++9185 3E 0F        	LD A,15
1142++9187 DD B6 1C     CH_VOL	OR (IX+CHP.Volume)
player.asm(1143): warning: value 0x94FD is truncated to 8bit value: 0xFD
1143++918A C6 FD        	ADD A,VT_
1144++918C 6F           	LD L,A
1145++918D CE 94        	ADC A,VT_/256
1146++918F 95           	SUB L
1147++9190 67           	LD H,A
1148++9191 7E           	LD A,(HL)
1149++9192 CB 41        CH_ENV	BIT 0,C
1150++9194 20 03        	JR NZ,CH_NOEN
1151++9196 DD B6 14     	OR (IX+CHP.Env_En)
1152++9199 32 BA 92     CH_NOEN	LD (Ampl),A
1153++919C CB 78        	BIT 7,B
1154++919E 79           	LD A,C
1155++919F 28 1A        	JR Z,NO_ENSL
1156++91A1 17           	RLA
1157++91A2 17           	RLA
1158++91A3 CB 2F        	SRA A
1159++91A5 CB 2F        	SRA A
1160++91A7 CB 2F        	SRA A
1161++91A9 DD 86 04     	ADD A,(IX+CHP.CrEnSl) ;SEE COMMENT BELOW
1162++91AC CB 68        	BIT 5,B
1163++91AE 28 03        	JR Z,NO_ENAC
1164++91B0 DD 77 04     	LD (IX+CHP.CrEnSl),A
1165++91B3 FD 86 12     NO_ENAC	ADD A,(IY-100+VRS.AddToEn) ;BUG IN PT3 - NEED WORD HERE
1166++91B6 FD 77 12     	LD (IY-100+VRS.AddToEn),A
1167++91B9 18 0E        	JR CH_MIX
1168++91BB 1F           NO_ENSL RRA
1169++91BC DD 86 03     	ADD A,(IX+CHP.CrNsSl)
1170++91BF FD 77 11     	LD (IY-100+VRS.AddToNs),A
1171++91C2 CB 68        	BIT 5,B
1172++91C4 28 03        	JR Z,CH_MIX
1173++91C6 DD 77 03     	LD (IX+CHP.CrNsSl),A
1174++91C9 78           CH_MIX	LD A,B
1175++91CA 1F           	RRA
1176++91CB E6 48        	AND #48
1177++91CD FD B6 1C     CH_EXIT	OR (IY-100+VRS.AYREGS+Mixer)
1178++91D0 0F           	RRCA
1179++91D1 FD 77 1C     	LD (IY-100+VRS.AYREGS+Mixer),A
1180++91D4 E1           	POP HL
1181++91D5 AF           	XOR A
1182++91D6 DD B6 0A     	OR (IX+CHP.COnOff)
1183++91D9 C8           	RET Z
1184++91DA DD 35 0A     	DEC (IX+CHP.COnOff)
1185++91DD C0           	RET NZ
1186++91DE DD AE 15     	XOR (IX+CHP.Flags)
1187++91E1 DD 77 15     	LD (IX+CHP.Flags),A
1188++91E4 1F           	RRA
1189++91E5 DD 7E 0B     	LD A,(IX+CHP.OnOffD)
1190++91E8 38 03        	JR C,CH_ONDL
1191++91EA DD 7E 0C     	LD A,(IX+CHP.OffOnD)
1192++91ED DD 77 0A     CH_ONDL	LD (IX+CHP.COnOff),A
1193++91F0 C9           	RET
1194++91F1
1195++91F1 AF           PLAY_	XOR A
1196++91F2 FD 77 12     	LD (IY-100+VRS.AddToEn),A
1197++91F5 FD 77 1C     	LD (IY-100+VRS.AYREGS+Mixer),A
1198++91F8 3D           	DEC A
1199++91F9 FD 77 22     	LD (IY-100+VRS.AYREGS+EnvTp),A
1200++91FC FD 35 09     	DEC (IY-100+VRS.DelyCnt)
1201++91FF C2 A7 92     	JP NZ,PL2
1202++9202 FD 35 BA     	DEC (IY-100+VRS.ChanA+CHP.NtSkCn)
1203++9205 20 6C        	JR NZ,PL1B
1204++9207 FD 4E FE     	LD C,(IY-100+VRS.AdInPtA)
1205++920A FD 46 FF     	LD B,(IY-100+VRS.AdInPtA+1)
1206++920D 0A           	LD A,(BC)
1207++920E A7           	AND A
1208++920F 20 56        	JR NZ,PL1A
1209++9211 57           	LD D,A
1210++9212 FD 77 10     	LD (IY-100+VRS.Ns_Base),A
1211++9215 FD 6E 04     	LD L,(IY-100+VRS.CrPsPtr)
1212++9218 FD 66 05     	LD H,(IY-100+VRS.CrPsPtr+1)
1213++921B 23           	INC HL
1214++921C 7E           	LD A,(HL)
1215++921D 3C           	INC A
1216++921E 20 0B        	JR NZ,PLNLP
1217++9220
1218++9220              	IF LoopChecker
1219++9220 CD D2 8A     	CALL CHECKLP
1220++9223              	ENDIF
1221++9223
1222++9223 FD 6E 06     	LD L,(IY-100+VRS.LPosPtr)
1223++9226 FD 66 07     	LD H,(IY-100+VRS.LPosPtr+1)
1224++9229 7E           	LD A,(HL)
1225++922A 3C           	INC A
1226++922B CD 7F 8D     PLNLP	CALL SETCPPT
1227++922E 3D           	DEC A
1228++922F FD CB 9E 4E  	BIT 1,(IY-100+VRS.ModNum)
1229++9233 28 03        	JR Z,NoAlCo
1230++9235              TSSub	EQU $+1
1231++9235 D6 D6        	SUB #D6
1232++9237 2F           	CPL
1233++9238              NoAlCo
1234++9238              		;PT2		PT3
1235++9238 3D           PsCalc	DEC A	;ADD A,A	NOP
1236++9239 3D           	DEC A	;ADD A,(HL)	NOP
1237++923A 87           	ADD A,A
1238++923B 5F           	LD E,A
1239++923C CB 12        	RL D
1240++923E
1241++923E              	IF CurPosCounter
1242++923E ~            	LD A,L
1243++923E ~            	SUB (IY-100+VRS.PosSub)
1244++923E ~            	LD (IY-100+VRS.CurPos),A
1245++923E              	ENDIF
1246++923E
1247++923E FD 6E FC     	LD L,(IY-100+VRS.PatsPtr)
1248++9241 FD 66 FD     	LD H,(IY-100+VRS.PatsPtr+1)
1249++9244 19           	ADD HL,DE
1250++9245 FD 5E F6     	LD E,(IY-100+VRS.MODADDR)
1251++9248 FD 56 F7     	LD D,(IY-100+VRS.MODADDR+1)
1252++924B ED 73 65 92  	LD (PSP_+1),SP
1253++924F F9           	LD SP,HL
1254++9250 E1           	POP HL
1255++9251 19           	ADD HL,DE
1256++9252 44           	LD B,H
1257++9253 4D           	LD C,L
1258++9254 E1           	POP HL
1259++9255 19           	ADD HL,DE
1260++9256 FD 75 00     	LD (IY-100+VRS.AdInPtB),L
1261++9259 FD 74 01     	LD (IY-100+VRS.AdInPtB+1),H
1262++925C E1           	POP HL
1263++925D 19           	ADD HL,DE
1264++925E FD 75 02     	LD (IY-100+VRS.AdInPtC),L
1265++9261 FD 74 03     	LD (IY-100+VRS.AdInPtC+1),H
1266++9264 31 31 31     PSP_	LD SP,#3131
1267++9267 11 AB FF     PL1A	LD DE,VRS.ChanA+12-100
1268++926A CD A2 8D     	CALL PTDECOD
1269++926D FD 71 FE     	LD (IY-100+VRS.AdInPtA),C
1270++9270 FD 70 FF     	LD (IY-100+VRS.AdInPtA+1),B
1271++9273
1272++9273 FD 35 D7     PL1B	DEC (IY-100+VRS.ChanB+CHP.NtSkCn)
1273++9276 20 12        	JR NZ,PL1C
1274++9278 11 C8 FF     	LD DE,VRS.ChanB+12-100
1275++927B FD 4E 00     	LD C,(IY-100+VRS.AdInPtB)
1276++927E FD 46 01     	LD B,(IY-100+VRS.AdInPtB+1)
1277++9281 CD A2 8D     	CALL PTDECOD
1278++9284 FD 71 00     	LD (IY-100+VRS.AdInPtB),C
1279++9287 FD 70 01     	LD (IY-100+VRS.AdInPtB+1),B
1280++928A
1281++928A FD 35 F4     PL1C	DEC (IY-100+VRS.ChanC+CHP.NtSkCn)
1282++928D 20 12        	JR NZ,PL1D
1283++928F 11 E5 FF     	LD DE,VRS.ChanC+12-100
1284++9292 FD 4E 02     	LD C,(IY-100+VRS.AdInPtC)
1285++9295 FD 46 03     	LD B,(IY-100+VRS.AdInPtC+1)
1286++9298 CD A2 8D     	CALL PTDECOD
1287++929B FD 71 02     	LD (IY-100+VRS.AdInPtC),C
1288++929E FD 70 03     	LD (IY-100+VRS.AdInPtC+1),B
1289++92A1
1290++92A1 FD 7E 08     PL1D	LD A,(IY-100+VRS.Delay)
1291++92A4 FD 77 09     	LD (IY-100+VRS.DelyCnt),A
1292++92A7
1293++92A7 11 9F FF     PL2	LD DE,VRS.ChanA-100
1294++92AA FD 6E 15     	LD L,(IY-100+VRS.AYREGS+TonA)
1295++92AD FD 66 16     	LD H,(IY-100+VRS.AYREGS+TonA+1)
1296++92B0 CD 7A 90     	CALL CHREGS
1297++92B3 FD 75 15     	LD (IY-100+VRS.AYREGS+TonA),L
1298++92B6 FD 74 16     	LD (IY-100+VRS.AYREGS+TonA+1),H
1299++92B9              Ampl	EQU $+1
1300++92B9 3E 3E        	LD A,#3E
1301++92BB FD 77 1D     	LD (IY-100+VRS.AYREGS+AmplA),A
1302++92BE 11 BC FF     	LD DE,VRS.ChanB-100
1303++92C1 FD 6E 17     	LD L,(IY-100+VRS.AYREGS+TonB)
1304++92C4 FD 66 18     	LD H,(IY-100+VRS.AYREGS+TonB+1)
1305++92C7 CD 7A 90     	CALL CHREGS
1306++92CA FD 75 17     	LD (IY-100+VRS.AYREGS+TonB),L
1307++92CD FD 74 18     	LD (IY-100+VRS.AYREGS+TonB+1),H
1308++92D0 3A BA 92     	LD A,(Ampl)
1309++92D3 FD 77 1E     	LD (IY-100+VRS.AYREGS+AmplB),A
1310++92D6 11 D9 FF     	LD DE,VRS.ChanC-100
1311++92D9 FD 6E 19     	LD L,(IY-100+VRS.AYREGS+TonC)
1312++92DC FD 66 1A     	LD H,(IY-100+VRS.AYREGS+TonC+1)
1313++92DF CD 7A 90     	CALL CHREGS
1314++92E2 FD 75 19     	LD (IY-100+VRS.AYREGS+TonC),L
1315++92E5 FD 74 1A     	LD (IY-100+VRS.AYREGS+TonC+1),H
1316++92E8 3A BA 92     	LD A,(Ampl)
1317++92EB FD 77 1F     	LD (IY-100+VRS.AYREGS+AmplC),A
1318++92EE
1319++92EE FD 7E 10     	LD A,(IY-100+VRS.Ns_Base)
1320++92F1 FD 86 11     	ADD (IY-100+VRS.AddToNs)
1321++92F4 FD 77 1B     	LD (IY-100+VRS.AYREGS+Noise),A
1322++92F7
1323++92F7 FD 7E 12     	LD A,(IY-100+VRS.AddToEn)
1324++92FA 5F           	LD E,A
1325++92FB 87           	ADD A,A
1326++92FC 9F           	SBC A,A
1327++92FD 57           	LD D,A
1328++92FE FD 6E 13     	LD L,(IY-100+VRS.EnvBase)
1329++9301 FD 66 14     	LD H,(IY-100+VRS.EnvBase+1)
1330++9304 19           	ADD HL,DE
1331++9305 FD 5E 0C     	LD E,(IY-100+VRS.CurESld)
1332++9308 FD 56 0D     	LD D,(IY-100+VRS.CurESld+1)
1333++930B 19           	ADD HL,DE
1334++930C FD 75 20     	LD (IY-100+VRS.AYREGS+Env),L
1335++930F FD 74 21     	LD (IY-100+VRS.AYREGS+Env+1),H
1336++9312
1337++9312 AF           	XOR A
1338++9313 FD B6 0F     	OR (IY-100+VRS.CurEDel)
1339++9316 C8           	RET Z
1340++9317 FD 35 0F     	DEC (IY-100+VRS.CurEDel)
1341++931A C0           	RET NZ
1342++931B FD 7E 0E     	LD A,(IY-100+VRS.Env_Del)
1343++931E FD 77 0F     	LD (IY-100+VRS.CurEDel),A
1344++9321 FD 6E 0A     	LD L,(IY-100+VRS.ESldAdd)
1345++9324 FD 66 0B     	LD H,(IY-100+VRS.ESldAdd+1)
1346++9327 19           	ADD HL,DE
1347++9328 C3 94 8D     	JP SETESLD
1348++932B
1349++932B FD 21 63 94  PLAY    LD IY,VARS1+100
1350++932F CD F1 91     	CALL PLAY_
1351++9332 3A FE 93     	LD A,(is_ts)
1352++9335 A7           	AND A
1353++9336 28 07        	JR Z,PL_nts
1354++9338 FD 21 EA 94  	LD IY,VARS2+100
1355++933C CD F1 91     	CALL PLAY_
1356++933F              PL_nts
1357++933F              	IF Basic
1358++933F FD 21 3A 5C  	LD IY,#5C3A
1359++9343              	ENDIF
1360++9343
1361++9343 01 FD FF     ROUT	LD BC,#FFFD
1362++9346 3A FE 93     	LD A,(is_ts)
1363++9349 A7           	AND A
1364++934A 28 02        	JR Z,r_nts ;keep old standard
1365++934C ED 41        	OUT (C),B
1366++934E 08           r_nts	EX AF,AF'
1367++934F
1368++934F              	IF ACBBAC
1369++934F ~            	LD IX,VARS1+VRS.AYREGS
1370++934F              	ELSE
1371++934F 21 78 94     	LD HL,VARS1+VRS.AYREGS
1372++9352              	ENDIF
1373++9352
1374++9352 CD 5E 93     	CALL ROUT_
1375++9355 08           	EX AF,AF'
1376++9356 C8           	RET Z
1377++9357 42           	LD B,D
1378++9358 2F           	CPL
1379++9359 ED 79        	OUT (C),A
1380++935B
1381++935B              	IF ACBBAC
1382++935B ~            	LD IX,VARS2+VRS.AYREGS
1383++935B              	ELSE
1384++935B 21 FF 94     	LD HL,VARS2+VRS.AYREGS
1385++935E              	ENDIF
1386++935E
1387++935E              ROUT_
1388++935E              	IF ACBBAC
1389++935E ~            	LD A,(SETUP)
1390++935E ~            	AND 12
1391++935E ~            	JR Z,ABC
1392++935E ~            	ADD A,CHTABLE
1393++935E ~            	LD E,A
1394++935E ~            	ADC A,CHTABLE/256
1395++935E ~            	SUB E
1396++935E ~            	LD D,A
1397++935E ~            	LD B,0
1398++935E ~            	PUSH IX
1399++935E ~            	POP HL
1400++935E ~            	LD A,(DE)
1401++935E ~            	INC DE
1402++935E ~            	LD C,A
1403++935E ~            	ADD HL,BC
1404++935E ~            	LD A,(IX+TonB)
1405++935E ~            	LD C,(HL)
1406++935E ~            	LD (IX+TonB),C
1407++935E ~            	LD (HL),A
1408++935E ~            	INC HL
1409++935E ~            	LD A,(IX+TonB+1)
1410++935E ~            	LD C,(HL)
1411++935E ~            	LD (IX+TonB+1),C
1412++935E ~            	LD (HL),A
1413++935E ~            	LD A,(DE)
1414++935E ~            	INC DE
1415++935E ~            	LD C,A
1416++935E ~            	ADD HL,BC
1417++935E ~            	LD A,(IX+AmplB)
1418++935E ~            	LD C,(HL)
1419++935E ~            	LD (IX+AmplB),C
1420++935E ~            	LD (HL),A
1421++935E ~            	LD A,(DE)
1422++935E ~            	INC DE
1423++935E ~            	LD (RxCA1),A
1424++935E ~            	XOR 8
1425++935E ~            	LD (RxCA2),A
1426++935E ~            	LD A,(DE)
1427++935E ~            	AND (IX+Mixer)
1428++935E ~            	LD E,A
1429++935E ~            	LD A,(IX+Mixer)
1430++935E ~            RxCA1	DB #E6
1431++935E ~            	AND %010010
1432++935E ~            	OR E
1433++935E ~            	LD E,A
1434++935E ~            	LD A,(IX+Mixer)
1435++935E ~            	AND %010010
1436++935E ~            RxCA2	OR E
1437++935E ~            	OR E
1438++935E ~            	LD (IX+Mixer),A
1439++935E ~            ABC
1440++935E              	ENDIF
1441++935E
1442++935E AF           	XOR A
1443++935F 11 BF FF     	LD DE,#FFBF
1444++9362
1445++9362              	IF ACBBAC
1446++9362 ~            	LD BC,#FFFD
1447++9362 ~            	PUSH IX
1448++9362 ~            	POP HL
1449++9362              	ENDIF
1450++9362
1451++9362 ED 79        LOUT	OUT (C),A
1452++9364 43           	LD B,E
1453++9365 ED A3        	OUTI
1454++9367 42           	LD B,D
1455++9368 3C           	INC A
1456++9369 FE 0D        	CP 13
1457++936B 20 F5        	JR NZ,LOUT
1458++936D ED 79        	OUT (C),A
1459++936F 7E           	LD A,(HL)
1460++9370 A7           	AND A
1461++9371 F8           	RET M
1462++9372 43           	LD B,E
1463++9373 ED 79        	OUT (C),A
1464++9375 C9           	RET
1465++9376
1466++9376              	IF ACBBAC
1467++9376 ~            CHTABLE	EQU $-4
1468++9376 ~            	DB 4,5,15,%001001,0,7,7,%100100
1469++9376              	ENDIF
1470++9376
1471++9376 64           NT_DATA	DB (T_NEW_0-T1_)*2
1472++9377 2A           	DB TCNEW_0-T_
1473++9378 65           	DB (T_OLD_0-T1_)*2+1
1474++9379 00           	DB TCOLD_0-T_
1475++937A 01           	DB (T_NEW_1-T1_)*2+1
1476++937B 0C           	DB TCNEW_1-T_
1477++937C 01           	DB (T_OLD_1-T1_)*2+1
1478++937D 0C           	DB TCOLD_1-T_
1479++937E 94           	DB (T_NEW_2-T1_)*2
1480++937F 35           	DB TCNEW_2-T_
1481++9380 30           	DB (T_OLD_2-T1_)*2
1482++9381 0E           	DB TCOLD_2-T_
1483++9382 60           	DB (T_NEW_3-T1_)*2
1484++9383 20           	DB TCNEW_3-T_
1485++9384 60           	DB (T_OLD_3-T1_)*2
1486++9385 21           	DB TCOLD_3-T_
1487++9386
1488++9386              T_
1489++9386
1490++9386 01 05 09 0B  TCOLD_0	DB #00+1,#04+1,#08+1,#0A+1,#0C+1,#0E+1,#12+1,#14+1
1490++938A 0D 0F 13 15
1491++938E 19 25 3D 00  	DB #18+1,#24+1,#3C+1,0
1492++9392 5D 00        TCOLD_1	DB #5C+1,0
1493++9394 31 37 4D 53  TCOLD_2	DB #30+1,#36+1,#4C+1,#52+1,#5E+1,#70+1,#82,#8C,#9C
1493++9398 5F 71 82 8C
1493++939C 9C
1494++939D 9E A0 A6 A8  	DB #9E,#A0,#A6,#A8,#AA,#AC,#AE,#AE,0
1494++93A1 AA AC AE AE
1494++93A5 00
1495++93A6 57           TCNEW_3	DB #56+1
1496++93A7 1F 23 25 29  TCOLD_3	DB #1E+1,#22+1,#24+1,#28+1,#2C+1,#2E+1,#32+1,#BE+1,0
1496++93AB 2D 2F 33 BF
1496++93AF 00
1497++93B0 1D 21 23 27  TCNEW_0	DB #1C+1,#20+1,#22+1,#26+1,#2A+1,#2C+1,#30+1,#54+1
1497++93B4 2B 2D 31 55
1498++93B8 BD BF 00     	DB #BC+1,#BE+1,0
1499++93BB              TCNEW_1 EQU TCOLD_1
1500++93BB 1B 21 25 29  TCNEW_2	DB #1A+1,#20+1,#24+1,#28+1,#2A+1,#3A+1,#4C+1,#5E+1
1500++93BF 2B 3B 4D 5F
1501++93C3 BB BD BF 00  	DB #BA+1,#BC+1,#BE+1,0
1502++93C7
1503++93C7              PT3EMPTYORN EQU $-1
1504++93C7 01 00        	DB 1,0
1505++93C9
1506++93C9              ;first 12 values of tone tables (packed)
1507++93C9
player.asm(1508): warning: value 0xDD8 is truncated to 8bit value: 0xD8
1508++93C9 0D D8        T_PACK	DB #06EC*2/256,#06EC*2
1509++93CB 69           	DB #0755-#06EC
1510++93CC 70           	DB #07C5-#0755
1511++93CD 76           	DB #083B-#07C5
1512++93CE 7D           	DB #08B8-#083B
1513++93CF 85           	DB #093D-#08B8
1514++93D0 8D           	DB #09CA-#093D
1515++93D1 95           	DB #0A5F-#09CA
1516++93D2 9D           	DB #0AFC-#0A5F
1517++93D3 A8           	DB #0BA4-#0AFC
1518++93D4 B1           	DB #0C55-#0BA4
1519++93D5 BB           	DB #0D10-#0C55
player.asm(1520): warning: value 0xCDA is truncated to 8bit value: 0xDA
1520++93D6 0C DA        	DB #066D*2/256,#066D*2
1521++93D8 62           	DB #06CF-#066D
1522++93D9 68           	DB #0737-#06CF
1523++93DA 6D           	DB #07A4-#0737
1524++93DB 75           	DB #0819-#07A4
1525++93DC 7B           	DB #0894-#0819
1526++93DD 83           	DB #0917-#0894
1527++93DE 8A           	DB #09A1-#0917
1528++93DF 92           	DB #0A33-#09A1
1529++93E0 9C           	DB #0ACF-#0A33
1530++93E1 A4           	DB #0B73-#0ACF
1531++93E2 AF           	DB #0C22-#0B73
1532++93E3 B8           	DB #0CDA-#0C22
player.asm(1533): warning: value 0xE08 is truncated to 8bit value: 0x08
1533++93E4 0E 08        	DB #0704*2/256,#0704*2
1534++93E6 6A           	DB #076E-#0704
1535++93E7 72           	DB #07E0-#076E
1536++93E8 78           	DB #0858-#07E0
1537++93E9 7E           	DB #08D6-#0858
1538++93EA 86           	DB #095C-#08D6
1539++93EB 90           	DB #09EC-#095C
1540++93EC 96           	DB #0A82-#09EC
1541++93ED A0           	DB #0B22-#0A82
1542++93EE AA           	DB #0BCC-#0B22
1543++93EF B4           	DB #0C80-#0BCC
1544++93F0 BE           	DB #0D3E-#0C80
player.asm(1545): warning: value 0xFC0 is truncated to 8bit value: 0xC0
1545++93F1 0F C0        	DB #07E0*2/256,#07E0*2
1546++93F3 78           	DB #0858-#07E0
1547++93F4 88           	DB #08E0-#0858
1548++93F5 80           	DB #0960-#08E0
1549++93F6 90           	DB #09F0-#0960
1550++93F7 98           	DB #0A88-#09F0
1551++93F8 A0           	DB #0B28-#0A88
1552++93F9 B0           	DB #0BD8-#0B28
1553++93FA A8           	DB #0C80-#0BD8
1554++93FB E0           	DB #0D60-#0C80
1555++93FC B0           	DB #0E10-#0D60
1556++93FD E8           	DB #0EF8-#0E10
1557++93FE
1558++93FE              ;vars from here can be stripped
1559++93FE              ;you can move VARS to any other address
1560++93FE
1561++93FE              VARS
1562++93FE
1563++93FE 00           is_ts	DB 0
1564++93FF
1565++93FF              ;ChannelsVars
1566++93FF              	STRUCT	CHP
1567++93FF ~            ;reset group
1568++93FF ~            PsInOr	DB 0
1569++93FF ~            PsInSm	DB 0
1570++93FF ~            CrAmSl	DB 0
1571++93FF ~            CrNsSl	DB 0
1572++93FF ~            CrEnSl	DB 0
1573++93FF ~            TSlCnt	DB 0
1574++93FF ~            CrTnSl	DW 0
1575++93FF ~            TnAcc	DW 0
1576++93FF ~            COnOff	DB 0
1577++93FF ~            ;reset group
1578++93FF ~
1579++93FF ~            OnOffD	DB 0
1580++93FF ~
1581++93FF ~            ;IX for PTDECOD here (+12)
1582++93FF ~            OffOnD	DB 0
1583++93FF ~            OrnPtr	DW 0
1584++93FF ~            SamPtr	DW 0
1585++93FF ~            NNtSkp	DB 0
1586++93FF ~            Note	DB 0
1587++93FF ~            SlToNt	DB 0
1588++93FF ~            Env_En	DB 0
1589++93FF ~            Flags	DB 0
1590++93FF ~             ;Enabled - 0, SimpleGliss - 2
1591++93FF ~            TnSlDl	DB 0
1592++93FF ~            TSlStp	DW 0
1593++93FF ~            TnDelt	DW 0
1594++93FF ~            NtSkCn	DB 0
1595++93FF ~            Volume	DB 0
1596++93FF              	ENDS
1597++93FF
1598++93FF              	STRUCT	VRS
1599++93FF ~
1600++93FF ~            ;IF not works in STRUCT in SjASM :(
1601++93FF ~            ;	IF CurPosCounter
1602++93FF ~            CurPos	DB 0
1603++93FF ~            PosSub	DB 0
1604++93FF ~            ;	ENDIF
1605++93FF ~
1606++93FF ~            ModNum	DB 0 ;bit0: ChipNum
1607++93FF ~            	     ;bit1: 1-reversed patterns order (AlCo TS)
1608++93FF ~
1609++93FF ~            ChanA	DS CHP
1610++93FF ~            ChanB	DS CHP
1611++93FF ~            ChanC	DS CHP
1612++93FF ~
1613++93FF ~            ;GlobalVars
1614++93FF ~            MODADDR	DW 0
1615++93FF ~            OrnPtrs	DW 0
1616++93FF ~            SamPtrs	DW 0
1617++93FF ~            PatsPtr	DW 0
1618++93FF ~            AdInPtA	DW 0
1619++93FF ~            AdInPtB	DW 0
1620++93FF ~            AdInPtC	DW 0
1621++93FF ~            CrPsPtr	DW 0
1622++93FF ~            LPosPtr	DW 0
1623++93FF ~            Delay	DB 0
1624++93FF ~            DelyCnt	DB 0
1625++93FF ~            ESldAdd	DW 0
1626++93FF ~            CurESld	DW 0
1627++93FF ~            Env_Del	DB 0
1628++93FF ~            CurEDel	DB 0
1629++93FF ~            Ns_Base	DB 0
1630++93FF ~            AddToNs	DB 0
1631++93FF ~            AddToEn	DB 0
1632++93FF ~            EnvBase	DW 0
1633++93FF ~            AYREGS	DS 14
1634++93FF              	ENDS
1635++93FF
1636++93FF 00 00 00...  VARS1	DS VRS
1637++9486 00 00 00...  VARS2	DS VRS
1638++950D
1639++950D              VT_	EQU $-16
1640++950D 00 00 00...  	DS 256-16 ;CreatedVolumeTableAddress
1641++95FD
1642++95FD              T1_	EQU VT_+16 ;Tone tables data depacked here
1643++95FD
1644++95FD              T_OLD_1	EQU T1_
1645++95FD              T_OLD_2	EQU T_OLD_1+24
1646++95FD              T_OLD_3	EQU T_OLD_2+24
1647++95FD              T_OLD_0	EQU T_OLD_3+2
1648++95FD              T_NEW_0	EQU T_OLD_0
1649++95FD              T_NEW_1	EQU T_OLD_1
1650++95FD              T_NEW_2	EQU T_NEW_0+24
1651++95FD              T_NEW_3	EQU T_OLD_3
1652++95FD
1653++95FD              PT2EMPTYORN EQU VT_+31 ;1,0,0 sequence
1654++95FD
1655++95FD 00 00 00...  NT_	DS 192 ;CreatedNoteTableAddress
1656++96BD
1657++96BD              VAR0END	EQU VT_+16 ;INIT zeroes from VARS to VAR0END-1
1658++96BD
1659++96BD              VARSEND EQU $
1660++96BD
1661++96BD              MDLADDR EQU outputBuffer
1662++96BD
1663++96BD              ;Release 0 steps:
1664++96BD              ;04/21/2007
1665++96BD              ;Works start (PTxPlay adaptation); first beta.
1666++96BD              ;04/22/2007
1667++96BD              ;Job finished; beta-testing.
1668++96BD              ;04/23/2007
1669++96BD              ;PT v3.7 TS mode corrected (after AlCo remarks).
1670++96BD              ;04/29/2007
1671++96BD              ;Added 1.XX and 2.XX special commands interpretation for PT3
1672++96BD              ;modules of v3.7+.
1673++96BD
1674++96BD              ;Size (minimal build for ZX Spectrum):
1675++96BD              ;Code block #908 bytes
1676++96BD              ;Variables #2BF bytes (can be stripped)
1677++96BD              ;Total size #908+#2BF=#BC7 (3015) bytes
1678++96BD              	ENDMODULE
# file closed: player/player.asm
  77++96BD                  ENDIF
# file closed: player/vortex-processor.asm
  39+ 96BD                      include "player/mod-processor.asm"
# file opened: player/mod-processor.asm
   1++96BD                  MODULE ModProcessor
   2++96BD                  ifdef GS
   3++96BD ~
   4++96BD ~                macro GS_WaitCommand2
   5++96BD ~            .wait
   6++96BD ~                in a, (CMD)
   7++96BD ~                rrca
   8++96BD ~                jr c, .wait
   9++96BD ~                endm
  10++96BD ~
  11++96BD ~                macro GS_SendCommand2 nn
  12++96BD ~                ld a, nn
  12++96BD ~              out (CMD), a
  13++96BD ~                endm
  14++96BD ~
  15++96BD ~            play:
  16++96BD ~                ld a, 255
  17++96BD ~                ld (oldminutes), a
  18++96BD ~
  19++96BD ~                call Console.waitForKeyUp
  20++96BD ~
  21++96BD ~                ld hl, Gopher.requestbuffer
  21++96BD ~              call DialogBox.msgNoWait
  22++96BD ~
  23++96BD ~                ;ld a, 1, (Render.play_next), a
  24++96BD ~            	xor a
  25++96BD ~            	ld (last_song_position),a
  26++96BD ~
  27++96BD ~                ld h, #00, a, 32
  28++96BD ~                call TextMode.fillLine
  29++96BD ~                ld de, #0001
  29++96BD ~              call TextMode.gotoXY
  30++96BD ~                ld hl, message
  30++96BD ~              call TextMode.printZ
  31++96BD ~                ld a, #00
  32++96BD ~                call TextMode.highlightLine
  33++96BD ~
  34++96BD ~            .loop
  35++96BD ~                halt
  36++96BD ~                xor a
  37++96BD ~                call Console.peekC
  38++96BD ~                cp Console.BACKSPACE
  39++96BD ~                jp z, .stopKey
  40++96BD ~            	cp SPACE
  41++96BD ~                jp z, .playNext
  42++96BD ~
  43++96BD ~                call printRTC
  44++96BD ~
  45++96BD ~               ;проверка что MOD начал играть сначала
  46++96BD ~                GS_SendCommand2 CMD_GET_SONG_POSITION
  47++96BD ~                GS_WaitCommand2
  48++96BD ~            	ld a,(last_song_position) ;предыдущая позиция
  49++96BD ~            	ld c,a
  50++96BD ~            	in a,(DATA) ;текущая позиция
  51++96BD ~            	ld (last_song_position),a
  52++96BD ~            	cp c
  53++96BD ~            	jr nc, .loop ;если не меньше, продолжаем играть
  54++96BD ~            .playNext
  55++96BD ~                ld a, 1, (Render.play_next), a ;флаг что надо будет играть следующий файл
  56++96BD ~            .stop
  57++96BD ~                call GeneralSound.stopModule
  58++96BD ~
  59++96BD ~                call Console.waitForKeyUp
  60++96BD ~                ret
  61++96BD ~            .stopKey
  62++96BD ~                xor a
  62++96BD ~              ld (Render.play_next), a ;флаг что не надо играть следующий файл
  63++96BD ~                jr .stop
  64++96BD ~
  65++96BD ~            message
  66++96BD ~                IFDEF SCREEN64
  67++96BD ~                ENDIF
  68++96BD ~                IFDEF SCREEN80
  69++96BD ~                db "       "
  70++96BD ~                ENDIF
  71++96BD ~                IFDEF SCREEN85
  72++96BD ~                db "         "
  73++96BD ~                ENDIF
  74++96BD ~
  75++96BD ~                db "Playing MODs [SPACE] for next song [BACKSPACE] for stop playing.", 0
  76++96BD ~
  77++96BD ~            CMD_GET_SONG_POSITION     = #60
  78++96BD ~            last_song_position db 0
  79++96BD ~
  80++96BD ~            ;; Control ports
  81++96BD ~            CMD  = 187
  82++96BD ~            DATA = 179
  83++96BD                  endif
  84++96BD                  ENDMODULE
  85++96BD
# file closed: player/mod-processor.asm
  40+ 96BD                      include "screen/screen.asm"
# file opened: screen/screen.asm
   1++96BD                  module ScreenViewer
   2++96BD              display:
   3++96BD CD EC 69         call Console.waitForKeyUp
   4++96C0 3E 07            ld a, 7
   4++96C2 CD BE 89       call Memory.setPage
   5++96C5 21 E2 96 11      ld hl, outputBuffer, de, #c000, bc, 6912
   5++96C9 00 C0 01 00
   5++96CD 1B
   5++96CE ED B0          ldir
   6++96D0 CD 46 60         call TextMode.disable
   7++96D3              .wait
   8++96D3 76           	halt
   9++96D4 AF               xor a
   9++96D5 DB FE          in a, (#fe)
   9++96D7 2F             cpl
   9++96D8 E6 1F          and 31
   9++96DA 28 F7          jr z, .wait
  10++96DC CD 1D 60         call TextMode.cls
  11++96DF C3 00 71         jp History.back
  12++96E2
  13++96E2                  endmodule
# file closed: screen/screen.asm
  41+ 96E2              start:
  42+ 96E2              outputBuffer:
  43+ 96E2 F3                   di
  44+ 96E3 AF                   xor a
  44+ 96E4 32 6A 5C       ld (#5c6a), a  ; Thank you, Mario Prato, for feedback
  45+ 96E7 32 00 5C             ld (#5c00),a
  46+ 96EA 31 00 60             ld sp, asmOrg
  47+ 96ED CD B4 89             call Memory.init
  48+ 96F0 AF                   xor a
  48+ 96F1 D3 FE          out (#fe),a
  49+ 96F3 FB                   ei
  50+ 96F4
  51+ 96F4 3E 07                ld a, 7
  51+ 96F6 CD BE 89       call Memory.setPage
  52+ 96F9                      ;; Logo
  53+ 96F9 21 31 97 06          ld hl, logo, b, Dos.FMODE_READ
  53+ 96FD 01
  53+ 96FE CD 93 6B       call Dos.fopen
  54+ 9701 F5                   push af
  55+ 9702 21 00 C0 01          ld hl, #c000, bc, 6912
  55+ 9706 00 1B
  55+ 9708 CD 80 6C       call Dos.fread
  56+ 970B F1                   pop af
  57+ 970C CD 6C 6C             call Dos.fclose
  58+ 970F
  59+ 970F 06 32                ld b, 50
  60+ 9711 76           1       halt
  61+ 9712 10 FD                djnz 1b
  62+ 9714                  ENDIF
  63+ 9714
  64+ 9714 CD 03 60         call TextMode.init
  65+ 9717 21 20 97     	ld hl, initing
  65+ 971A CD BC 60       call TextMode.printZ
  66+ 971D
  67+ 971D                  IFNDEF NOINIT
  68+ 971D ~              	    call Wifi.init
  69+ 971D                  ENDIF
  70+ 971D
  71+ 971D C3 6D 71         jp History.home
  72+ 9720
  73+ 9720 49 6E 69 74  initing db "Initing Wifi...", "\r", 0
  73+ 9724 69 6E 67 20
  73+ 9728 57 69 66 69
  73+ 972C 2E 2E 2E 0D
  73+ 9730 00
  74+ 9731 62 72 6F 77  logo    db "browser/logo.scr", 0
  74+ 9735 73 65 72 2F
  74+ 9739 6C 6F 67 6F
  74+ 973D 2E 73 63 72
  74+ 9741 00
  75+ 9742 62 72 6F 77  creds   db "browser/auth.pwd", 0
  75+ 9746 73 65 72 2F
  75+ 974A 61 75 74 68
  75+ 974E 2E 70 77 64
  75+ 9752 00
  76+ 9753              outputBuffer2:
  77+ 9753 41 54 45 30      db  "ATE0", 0
  77+ 9757 00
  78+ 9758
  79+ 9758                  display "ENDS: ", $
  80+ 9758                  display "Buff size", #ffff - $
  81+ 9758                  IFDEF NEDOOS
  82+ 9758 ~                    savebin "moon.com", asmOrg, $ - asmOrg
  83+ 9758                  ELSE
  84+ 9758              		IFDEF TRDOS
  85+ 9758              			SAVETRD "MOONR.TRD",|"moon.C",asmOrg, $ - asmOrg
  86+ 9758              		ELSE
  87+ 9758 ~            			savebin "moon.bin", asmOrg, $ - asmOrg
  88+ 9758              	    	ENDIF
  89+ 9758                  ENDIF
  90+ 9758
# file closed: main-all.asm
  17  9758                  ENDIF
# file closed: main.asm
